/*
 * @(#)LProduct.java
 *
 * Copyright (c) 2000-2100 Fullgc Operaties NV
 * Liersesteenweg 4, 2800 Mechelen, Belgium
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary
 * information of Fullgc Operaties NV.
 */

package com.fullgc.afe.product;

import java.lang.reflect.Field;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.math.BigDecimal;

import org.apache.commons.lang.ObjectUtils;
import com.fullgc.afe.db.DerivedCustomerProductRelation;
//BEGIN : 14.40 : Sun Sat
import com.fullgc.afe.db.ProductModel;
import com.fullgc.afe.db.ProductModelRow;
import com.fullgc.afe.db.ProductModel2Product;
import com.fullgc.afe.db.ProductModel2ProductRow;
import com.fullgc.afe.db.ProductModelPriceSetting;
import com.fullgc.afe.db.ProductModelPriceSettingRow;
import com.fullgc.afe.db.ObjectDescription;
import com.fullgc.afe.db.Vat;
import com.fullgc.afe.db.VatRow;
//END : 14.40 : Sun Sat
import com.fullgc.BSession;
import com.fullgc.TeleSessionMgr;
import com.fullgc.afe.LAfe;
import com.fullgc.afe.appointment.LAppointment;
import com.fullgc.afe.billingandcollections.BAccount;
import com.fullgc.afe.billingandcollections.LBilling;
import com.fullgc.afe.billingandcollections.MBillingDetail;
import com.fullgc.afe.common.GNinas;
import com.fullgc.afe.common.iface.AfeNinasOut;
import com.fullgc.afe.common.iface.BSAPDetailsFromCATSAP;
import com.fullgc.afe.common.iface.IAFEOUT;
import com.fullgc.afe.customer.BCatsapAddress;
import com.fullgc.afe.customer.BCustAddrDetail;
import com.fullgc.afe.customer.BCustomerAddress;
import com.fullgc.afe.customer.BCustomerInfo;
import com.fullgc.afe.customer.BCustomerLoginDetails;
import com.fullgc.afe.customer.BManualAddress;
import com.fullgc.afe.customer.BProductConnectivityInfo;
import com.fullgc.afe.customer.CustomerUtils;
import com.fullgc.afe.customer.LCustomer;
import com.fullgc.afe.customer.RCustomer;
import com.fullgc.afe.db.*;
import com.fullgc.afe.db.Process;
import com.fullgc.afe.delegate.InstallationDelegate;
import com.fullgc.afe.disconnectionfee.LDisconnectionFee;
import com.fullgc.afe.installationaddress.BHouseholdDetails;
import com.fullgc.afe.installationaddress.BHouseholdMember;
import com.fullgc.afe.installationaddress.InstallationAddressUtils;
import com.fullgc.afe.orders.BCustomerProductAlf;
import com.fullgc.afe.orders.BCustomerProductLine;
import com.fullgc.afe.orders.BMoveOrderLineDetails;
import com.fullgc.afe.orders.BOptionRateId;
import com.fullgc.afe.orders.BOrderMove;
import com.fullgc.afe.orders.OrderUtils;
import com.fullgc.afe.orders.LOrder;
import com.fullgc.afe.product.RProduct;
import com.fullgc.afe.promotion.BPackIdentifier;
import com.fullgc.afe.promotion.BUpdateCustomerPromotion;
import com.fullgc.afe.utils.AfeException;
import com.fullgc.afe.constants.GAfeConstants;
import com.fullgc.afe.constants.GAfeDescription;
import com.fullgc.afe.utils.GAfePropertyLoader;
import com.fullgc.afe.constants.GAfeSql;
import com.fullgc.afe.utils.GConnectAfe;
import com.fullgc.afe.utils.GConnectCatsap;
import com.fullgc.afe.utils.GConnectMemoryDB;
import com.fullgc.afe.utils.GMasterDataConstants;
import com.fullgc.common.BProductLijnen;
import com.fullgc.common.crm.utils.StringUtils;
import com.fullgc.commons.customer.partymgmt.bo.ContactInfoBO;
import com.fullgc.dinoman.utils.GConnectDinoman;
import com.fullgc.afe.constants.GAfeSql;
import com.fullgc.documents.commonclient.transferobject.docbuild.BCustomerFulfilmentRequest;
import com.fullgc.documents.commonclient.transferobject.docbuild.BDocumentRequest;
import com.fullgc.documents.commonclient.transferobject.docbuild.BInterceptDisconnectRequest;
import com.fullgc.documents.commonclient.transferobject.docbuild.BLOARequest;
import com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BAddressInfo;
import com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BProductLine;
import com.fullgc.documents.commonclient.transferobject.docmgmt.BCustomerOutDocuments;
import com.fullgc.ninas.commonclient.transferobject.accessnetwork.BNode;
import com.fullgc.ninas.commonclient.transferobject.addressmgmt.BNeighbourData;
import com.fullgc.ninas.utils.Constants;
import com.fullgc.ninas.utils.LanguageUtils;
import com.fullgc.oms.system.ai.afe.BChangeILogin;
import com.fullgc.utils.CDMConstants;
import com.fullgc.afe.constants.GErrorCodes;
import com.fullgc.utils.GGeneric;
import com.fullgc.utils.GLogger;
import com.fullgc.utils.GPermission;
import com.fullgc.utils.OasisMasterData;
import com.fullgc.utils.FullgcUtils;
import com.fullgc.afe.utils.jdbc.CDMDao;
import org.springframework.jdbc.core.RowMapper;
import com.fullgc.ninas.commonclient.transferobject.addressmgmt.BServiceException;
import com.fullgc.ninas.commonclient.transferobject.others.BService;
import com.fullgc.srv.party.party.bo.Tenant;

public class LProduct extends LAfe // Class Name LProduct
{ // Starting Braces of the Class

	// protected static final int EXISTS         = 0;
	protected static final int NOTEXISTS = 1;
	protected static final int FINAL_ZERO = 0;
	protected static final int FINAL_ONE = 1;

	// BEGIN ADD V5.20a
	// Comment: Changes made for Security Service
	// Private Member Declaration for GLogger Starts
	private static final String CLASS_NAME = "LProduct";

	// Begin DEL v9.01d
	// private static final String METHOD_bCheckProvisionStatus = "bCheckProvisionStatus";
	// private static final String ARG_CUSTOMER_PRODUCT_LINE_ID = "lCPLId";
	// End DEL v9.01d
	// END ADD V5.20a

	// BEGIN ADD V5.36b
	// Comment: Changes made for Installer Invoicing
	private static final String METHOD_VCTGETPRODUCTLIJNEN = "vctGetProductLijnen";
	private static final String ARG_WFMTASKID = "lWfmTaskID";
	private static final String ARG_LANGUAGEID = "lLanguageID";
	private static final String ARG_VCTBPRODUCTLIJNEN = "vctBProductLijnen";
	private static final String METHOD_STREIGENSCHAPPEN = "strShortDescription";
	private static final String ARG_CUSTOMERPRODUCTLINEID = "lCustomerProductLineId";
	private static final String ARG_CUSTOMERPRODUCTID = "CustomerProductId";
	private static final String SLASH = "/";

	// END ADD V5.36b

	// BEGIN ADD V5.43c
	// COMMENT: new function being added to modify the porting flag before sending it to DSL.
	private static final String METHOD_cUpdatePortingFlag_ForDsl = "cUpdatePortingFlag_ForDsl";
	private static final String ARG_BNUMBER = "BNumber Object ";
	private static final String ARG_NEW_PORTING_FLAG = "Porting Flag for the New line";
	private static final String ARG_MODIFIED_NEW_PORTING_FLAG = " Modified Porting Flag after consideration for Return Portout and Reactivation Porting";
	private static final char PORTING = 'Y';
	private static final char NO_PORTING = 'N';

	// BEGIN ADD V 5.96u
	private static final String METHOD_DELETELINELEVELPROMOTION = "vDeleteLineLevelPromotion";
	private static final String METHOD_DELETEACCOUNTLEVELPROMOTION = "vDeleteAccountLevelPromotion";
	private static final String ARG_CUSTOMERACCOUNTID = "lCustomerAccountId";

	// END ADD V 5.96u
	//Add Rel 14.1 DSO	
	//private static final String METHOD_CHECKALLDTALINES = "checkAllDTALines";
	//private static String ARG_ARRCPLIDS = "arrCPLIDs";
	//Add Rel 14.1 DSO	
	// New function to check for conditions to see if the parameters can be updated for NSA before
	// provisioning.
	private static final String METHOD_bCanUpdateParameters = " bCanUpdateParameters ";
	private static final String METHOD_vctLoadProductRole = "vctLoadProductRole";
	private static final String METHOD_strGetDNISCodeFromDB = "strGetDNISCodeFromDB";
	private static final String METHOD_bCanDeleteProduct = "bCanDeleteProduct";
	private static final String ARG_CAN_UPDATE = " Can Update ?";
	private static final String ARG_CAN_DELETE = " Can Delete ? ";
	private static final String ARG_NEW_NUMBER_NP = " Is New number Np ? ";
	private static final String ARG_CURRENT_OWNER = "Current Owner for the New NP Number";
	private static final String ARG_CURRENT_OWNER_OLD = "Current Owner for the Old NP Number";
	private static final String BPRODUCTDETAILPROPERTY_ACPRODUCT = "BProductDetailProperty_aCProduct";
	private static final String METHOD_vDeleteProduct = "vDeleteProduct";

	//  private static final String METHOD_iSaveOldProductLine = "iSaveOldProductLine";
	private static final String METHOD_vMakeNPProcessObsolete = "vMakeNPProcessObsolete";

	// private static final String METHOD_vInsert_NP_Process = "vInsert_NP_Process" ;
	private static final String METHOD_bModification_For_New_NP_Required = "bModification_For_New_NP_Required";
	private static final String ARG_TELESESSIONMGR = "Telesession Manager";
	private static final String ARG_NP_PROCESSID = " NP Process Id";
	private static final String ARG_MODIFICATION_REQUIRED = "Modification for NP required ";

	//  private static final String CUSTOMERPRODUCTLINE_TABLE = "CUSTOMERPRODUCTLINE";
	// END ADD V5.43c
	// BEGIN ADD V5.55a
	private static final String METHOD_sortProductParameter = "sortProductParameter";

	// END ADD V5.55a
	// BEGIN ADD V6.20b
	private static final String METHOD_iDeleteCustProduct = "iDeleteCustProduct";

	// END ADD V6.20b

	// begin add V5.61a
	// Begin DEL v9.01d
	// private static final String INTRO = "INTRO";
	// private static final String DELETE = "DELETE";
	// End DEL v9.01d
	private static final String METHOD_vctGetDucumentIdsForOrder = "vctGetDucumentIdsForOrder";

	// Begin DEL v9.01d
	// private static final String INSERT = "INSERT";
	// End DEL v9.01d
	// end add V5.61a

	// BEGIN ADD V5.59b
	// LN1714:Final Strings For GLogger
	private static final String METHOD_vctGetCatSapZipInfo = "vctGetCatSapZipInfo";
	private static final String OUT_Zip_CATSAP = " Zip codes returned by CATSAP Query";
	private static final String ARG_vctGetCatSapZipInfo = "Input arguments to vctGetCatSapZipInfo";

	// Begin DEL v9.01d
	// private static final String METHOD_vCheckValidationForProperty = "vCheckValidationForProperty";
	// End DEL v9.01d
	// END ADD V5.59b

	// BEGIN ADD V5.71a
	private static final String METHOD_addTVLine = "addTVLine";

	// END ADD V5.71a

	// BEGIN ADD: ver 5.74a
	private static final String METHOD_vctCheckExistingLines = "vctCheckExistingLines";
	private static final String ARG_lAddressID = "lAddressID";
	private static final String ARG_lCustomerID = "lCustomerID";

	// END ADD: ver 5.74a

	// BEGIN DELETE V6.03a
	// BEGIN ADD V5.75a
	// private static final String METHOD_updateAccountForTVOnlyCustomers =
	// "updateAccountForTVOnlyCustomers";
	// END ADD V5.75a
	// END DELETE V6.03a
	// BEGIN ADD V5.80c
	private static final String METHOD_vctCustomerProductLineRow = "vctCustomerProductLineRow";
	private static final String METHOD_vctBGetOptionGrRateId = "vctBGetOptionGrRateId";

	// END ADD V5.80c

	// BEGIN ADD V5.90a
	private static final String METHOD_vdCallClarifyforContact = "vdCallClarifyforContact";

	// END ADD V5.90a

	// BEGIN ADD V 5.96u
	private static final String METHOD_IRETRIEVEUSERFORCPLINE = "lRetrieveUserForCPLine";

	// END ADD V 5.96u

	// begin add V5.96c Address Combo on Product overview screen
	public static final String METHOD_vdPopulateAddressData = "vdPopulateAddressData";
	public static final String METHOD_objLoadCustomerProduct = "objLoadCustomerProduct";

	// BEGIN addition for Ver5.96d
	private static final String METHOD_objLoadCustomerInfo = "objLoadCustomerInfo";
	private static final String METHOD_objLoadAddressInfo = "objLoadAddressInfo";
	private static final String METHOD_objLoadDocumentRequest = "objLoadDocumentRequest";
	private static final String METHOD_objLoadProductLine = "objLoadProductLine";

	// END addition for Ver5.96d

	// Begin Add v5.96t
	private static final String METHOD_GETCONNECTIVITYINFOFROMFIRSTADDRID = "vctGetConnectivityInfoFromFirstAddressID";
	private static final String ARG_VCTPRODCONNECTIVITYINFO = "vctGetProductConnectivityInfo";

	// End Add v5.96t
	// BEGIN ADD v6.02f
	private static final String METHOD_strShortDescriptionAccess = "strShortDescriptionAccess";

	// END ADD v6.02f

	// BEGIN ADD V6.07e
	private static final String METHOD_fillVASParameters = "fillVASParameters";
	private static final String METHOD_vctGetAllLogins = "vctGetAllLogins";
	private static final String METHOD_strGetMasterLogin = "strGetMasterLogin";

	// END ADD V6.07e
	// BEGIN ADD v7.00b
	private static final String METHOD_vctGetPinForLine = "vctGetPinForLine";
	private static final String ARG_LCUSTOMERPRODUCTLINEID = "lCustomerProductLineID";

	// END ADD v7.00b
	// BEGIN ADD v7.04l
	private static final String METHOD_bIsLineActive = "bIsLineActive";
    private static final String METHOD_GETACTIVELINEINMOVECOUNT = "getActiveLineInMoveCount";
    private static final String METHOD_GETLINEINEXTENDEDCOUNT = "getLineInExtendedCount";
    private static final String METHOD_GETLOGINSFORINTERNET = "getLoginsForInternet";
    private static final String METHOD_GETMAILBOXNAME = "getMailBoxName";

	// END ADD v7.04l
	// BEGIN ADD v7.05c
	private static final String METHOD_lGetContractType = "lGetContractType";

	// END ADD v7.05c

	// Begin Add v7.05h

	/*
	 * private static final String METHOD_strBillCycle = "strBillCycle";
	 * private static final String ARG_strCPLIdentifier = "objBProductOvw";
	 * private static final String ARG_lLanguageId = "lLanguageId";
	 */

	// End Add v7.05h
	// Begin Add v7.05i
	private static final String METHOD_BOGetModemDetails = "METHOD_BOGetModemDetails";

	// End Add v7.05i
	// Begin Add V7.06c
	private static final String METHOD_bCheckLineInDB = "bCheckLineInDB";
	private static final String METHOD_lGetParentProductID = "lGetParentProductID";
	private static final String METHOD_bVerifyParentProductID = "bVerifyParentProductID";

	// End Add V7.06h

	//Begin add v9.02d
	private static final String METHOD_getTariffsforMobile = "getTariffsforMobile";
	//Begin add v9.02d
	// Begin Add 5.96g
	public static final String striSaveNewProductLine = "striSaveNewProductLine";

	//Begin Add 9.02d
	private static final String ARG_BProductDetailProperty = "bProductDetailProperty";
	private static final String METHOD_checkIsProdRTPable = "checkIsProdRTPable";
	private static final String ARG_SELECTEDPRODUCTS = "selectedProducts";
	private static final String ARG_isRTPFlagPresent = "isRTPFlagPresent";
	//End Add 9.02d
	public static final String METHOD_getActivateDateForCPLIDMove = "getActivateDateForCPLIDMove";
	// Added Rel 15.1 Sunsat RCR
    //private static final String METHOD_getCustProdLineIden = "getCustProdLineIden";
    private static final String METHOD_getCustProdLineIdMove = "getCustProdLineIdMove";
    
    
    // End Rel 15.1 Sunsat RCR
	// 2.2     Begin Insert
	protected static final int FINAL_TWO = 2;

	// 2.2     End Insert
	protected String strObjectDesc = "";

	// BEGIN ADD V5.32a
	// Comment: Changes made for MGM
	// public static final long MGM_NOMGMCODE = GAfeConstants.MGM_NOMGMCODE;
	// END ADD V5.32a
	//BEGIN ADD: V 3.10
	protected int iIsDefault = 0;
	protected int iTakeOpProdAsNull = 0;
	protected int iGoAhead = 0;

	//  Added Code for fixing DEFECT id 70, Obsolete Masters
	//  END ADD: V 3.10

	protected GConnectAfe gConnectAfe = null;
	protected boolean bConnect = false;

	// end add V5.96c  Address Combo on Product overview screen
	// BEGIN ADD V5.80g
	LProduct_ext objLProduct_ext;

	// END ADD V5.80g

	// End Add V7.06c
	// Begin Add V7.06h
	//long lParentProductID = 0;

	// Begin Add V8.00c
	// Begin DEL v9.01d
	// private static final String Method_SaveSelfInstallProduct         = "SaveSelfInstallProduct";
	// End DEL v9.01d
	// End Add V8.00c

	//BEGIN ADD V 9.02e
	private static final String METHOD_saveDimsDslInApplSave = "saveDimsDslInApplSave";
	//END ADD V 9.02e
	//BEGIN ADD V 10.02a
	private static final String METHOD_bIsLineActivated = "bIsLineActivated";
	private static final String METHOD_updateAgingStatus = "updateAgingStatus";
	private static final String METHOD_bIsMNP = "bIsMNP";
	//END ADD V 10.02a
	
	BSession bSession = new BSession();
	protected TeleSessionMgr teleSessionMgr = null;
	protected Currency currencyTable = null; // Initializing the Container Class for the Currency table
	protected ObjectDescription objectDescriptionTable = null; // Initializing the Container Class for the ObjectDescription table
	protected ProductLineIdentifierType productLineIdentifierTypeTable = null; // Initializing the Container Class for the ProductLineIdentifierType table
	protected CustomerChargeType customerChargeTypeTable = null; // Initializing the Container Class for the CustomerChargeType table
	protected ProductParameter productParameterTable = null; // Initializing the Container Class for the ProductParameter table
	protected Customer customerTable = null; // Initializing the Container Class for the Customer table
	protected Charge chargeTable = null; // Initializing the Container Class for the Charge table
	protected Vat vatTable = null; // Initializing the Container Class for the Vat table
	protected RecurringType recurringTypeTable = null; // Initializing the Container Class for the RecurringType table
	protected Product productTable = null; // Initializing the Container Class for the Product table
	protected CustomerProduct customerProductTable = null; // Initializing the Container Class for the CustomerProduct table
	protected CustomerProfile customerProfileTable = null; // Initializing the Container Class for the CustomerProfile table
	protected OptionGroup optionGroupTable = null; // Initializing the Container Class for the OptionGroup table
	protected CustomerAccount customerAccountTable = null; // Initializing the Container Class for the CustomerAccount table
	protected CustomerProductParameter customerProductParameterTable = null; // Initializing the Container Class for the CustomerProductParameter table
	protected CustomerProductLineIdentifier customerProductLineIdentifierTable = null; // Initializing the Container Class for the CustomerProductLineIdentifier table
	protected ProductParameterValue productParameterValueTable = null; // Initializing the Container Class for the ProductParameterValue table
	protected OptionProduct optionProductTable = null; // Initializing the Container Class for the OptionProduct table
	protected PackageParameter packageParameterTable = null; // Initializing the Container Class for the PackageParameter table
	protected DefaultLogic defaultLogicTable = null; // Initializing the Container Class for the DefaultLogic table
	protected ForbiddenProduct forbiddenProductTable = null; // Initializing the Container Class for the ForbiddenProduct table
	protected PaymentMethod paymentMethodTable = null; // Initializing the Container Class for the PaymentMethod table
	protected ParameterSetting parameterSettingTable = null; // Initializing the Container Class for the ParameterSetting table
	protected CustomerLink customerLinkTable = null; // Initializing the Container Class for the CustomerLink table
	protected ReasonType reasonTypeTable = null; // Initializing the Container Class for the ReasonType table
	protected CustomerLinkRole customerLinkRoleTable = null; // Initializing the Container Class for the CustomerLinkRole table
	protected CustomerLR2CustomerProduct customerLR2CustomerProductTable = null; // Initializing the Container Class for the CustomerLR2CustomerProduct table
	protected CustomerProductLine customerProductLineTable = null; // Initializing the Container Class for the CustomerProductLine table
	protected ObjectType objectTypeTable = null; // Initializing the Container Class for the ObjectType table
	protected ProcessLink processLinkTable = null; // Initializing the Container Class for the ProcessLink table
	protected Process processTable = null; // Initializing the Container Class for the Process table
	protected Order orderTable = null; // Initializing the Container Class for the Order table
	protected Order2OrderRef_tb orderRefTable = null; // Initializing the Container Class for the Order2OrderRef_tb table

	//  protected       OrderStatusType                                 orderStatusType                                         = null;         // Initializing the Container Class for the OrderStatusType table
	protected OrderType orderType = null; // Initializing the Container Class for the OrderType table
	protected CustomerApp2CustomerProductL customerApp2CustomerProductLTable = null; // Initializing the Container Class for the CustomerApp2CustomerProductL table
	protected CustomerAppointment customerAppointmentTable = null; // Initializing the Container Class for the CustomerAppointmentTable table
	protected ReasonDescription reasonDescriptionTable = null; // Initializing the Container Class for the ReasonDescription table
	protected RoleType roleTypeTable = null; // Initializing the Container Class for the RoleType table
	protected ExternalReference externalReferenceTable = null; // Initializing the Container Class for the ExternalReference table
	protected Customer2Order customer2OrderTable = null; // Initializing the Container Class for the Customer2Order table
	protected ProcessStatus processStatusTable = null; // Initializing the Container Class for the ProcessStatus table
	protected Document documentTable = null; // Initializing the Container Class for the Document table
	protected Action actionTable = null; // Initializing the Container Class for the Action table
	protected CustomerProductStatus customerProductStatusTable = null; // Initializing the Container Class for the CustomerProductStatus table
	protected SalesDetail salesDetailTable = null; // Initializing the Container Class for the SalesDetail table
	protected Sale2SalesEntity sale2SalesEntityTable = null; // Initializing the Container Class for the Sale2SalesEntity table
	protected SalesEntity salesEntityTable = null; // Initializing the Container Class for the SalesEntity table
	protected CustomerChargeType customerChargeType = null; // Initializing the Container Class for the CustomerChargeType table
	protected PriceSetting priceSettingTable = null; // Initializing the Container Class for the PriceSetting table

	// protected CustomerProductLineStatus               customerProductLineStatusTable          = null;         // Initializing the Container Class for the CustomerProductLineStatus table
	protected Address addressTable = null; // Initializing the Container Class for the Address table
	protected CustomerAppointment2Order customerAppointment2OrderTable = null; // Initializing the Container Class for the CustomerAppointment2Order table
	protected Reason reasonTable = null; // Initializing the Container Class for the Reason table
	protected ManualAddress manualAddressTable = null; // Initializing the Container Class for the ManualAddress table
	protected Country countryTable = null; // Initializing the Container Class for the ManualAddress table

	//  protected       ContactInfo                                             contactInfoTable                                        = null;         // Initializing the Container Class for the ManualAddress table
	protected Sale saleTable = null; // Initializing the Container Class for the Sale table

	// protected ReferenceAddress                                referenceAddressTable                           = null;         // Initializing the Container Class for the ReferenceAddress table
	// BEGIN ADD V 5.71c

	// BEGIN ADD V6.05j
	protected RateClass rateClassTable = null;

	// END ADD V6.05j

	protected BlockingStatus objBlockingStatus = null;

	// END ADD V5.71c

	protected PromotionMapping promotionMappingTable = null;

	// BEGIN ADD V4.10b
	// Comment: For changes of 891
	//Epithet epithetTable = null;

	// END ADD V4.10b

	// Begin Add for CMTS Rel 10.4
	public long lOpenInstallOrderStatus = -1;
	// Begin Add for CMTS Rel 10.4

	//Begin Add V10.00a
	public static final String METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY = "getAddressByPostCodeMunicipality";
	public static final String METHOD_GETADDRESSFORMATED = "getAddressFormated";

	//End Add V10.00a
	
	private static final String string_CUSTOMERLINK="CUSTOMERLINK";
	private static final String string_CUSTOMERLINKROLE="CUSTOMERLINKROLE";
	private static final String string_CUSTOMERLR2CUSTOMERPRODUCT="CUSTOMERLR2CUSTOMERPRODUCT";
	private static final String string_CUSTOMERPRODUCTLINE="CUSTOMERPRODUCTLINE";
	private static final String string_PRODUCT="PRODUCT";
	private static final String string_ROLETYPE_USER="ROLETYPE_USER";
	private static final String string_OBJECTDESCRIPTION="OBJECTDESCRIPTION";
	private static final String string_PRODUCT_VON="PRODUCT_VON";
	private static final String string_CUSTOMERPRODUCTLINEIDENTIFIER="CUSTOMERPRODUCTLINEIDENTIFIER";
	private static final String string_dateFormat1="dd-MM-yyyy";
	private static final String string_CUSTOMERPRODUCT="CUSTOMERPRODUCT";
	private static final String string_ERRCOM_00002="ERRCOM_00002";
	private static final String string_APPLSAVEACTION="APPLSAVEACTION";
	private static final String string_CUSTOMERCHARGETYPE="CUSTOMERCHARGETYPE";
	private static final String string_CUSTOMERPRODUCTPARAMETER="CUSTOMERPRODUCTPARAMETER";
	private static final String string_PROCESSLINK="PROCESSLINK";
	private static final String string_PROCESS="PROCESS";
	private static final String string_PROCESSSTATUS="PROCESSSTATUS";
	private static final String string_ORDER="ORDER";
	private static final String string_OBJECTTYPE="OBJECTTYPE";
	private static final String string_CUSTOMERAPPOINTMENT="CUSTOMERAPPOINTMENT";
	private static final String string_PRODUCT_TELEPHONE="PRODUCT_TELEPHONE";
	private static final String string_PRODUCT_MOBILE="PRODUCT_MOBILE";
	private static final String string_TELNO="TELNO";
	private static final String string_IAFEOUT="IAFEOUT";
	private static final String string_blnDeletePhoneLine="blnDeletePhoneLine";
	private static final String string_ZERO="0";
	private static final String string_strUnreserveTelNo="strUnreserveTelNo";
	private static final String string_PRODUCT_CPS="PRODUCT_CPS";
	private static final String string_PRODUCT_INTERNET="PRODUCT_INTERNET";
	private static final String string_objCreateDocument="objCreateDocument";
	private static final String string_Empty="";
	private static final String string_CUSTOMERPRODUCTSTATUS="CUSTOMERPRODUCTSTATUS";
	private static final String string_PROCESSSTATUSTYPE_CANCELLED="PROCESSSTATUSTYPE_CANCELLED";
	private static final String string_PROCESSTYPE_DEACTIVATECNA="PROCESSTYPE_DEACTIVATECNA";
	private static final String string_PROCESSSTATUSTYPE_NEW="PROCESSSTATUSTYPE_NEW";
	private static final String string_ORDERSTATUSTYPE_NEW="ORDERSTATUSTYPE_NEW";
	private static final String string_ADDRESS="ADDRESS";
	private static final String string_COMMA=" ,";
	private static final String string_MANUALADDRESS="MANUALADDRESS";
	private static final String string_ERRAFE_00686="ERRAFE_00686";
	private static final String string_ROLETYPE_USAGE="ROLETYPE_USAGE";
	private static final String string_ROLETYPE_RC="ROLETYPE_RC";
	private static final String string_ROLETYPE_NRC="ROLETYPE_NRC";
	private static final String string_OBJECTTYPE_CUSTOMERPRODUCTLINE="OBJECTTYPE_CUSTOMERPRODUCTLINE";
	private static final String string_CUSTOMER="CUSTOMER";
	private static final String string_BProductDetailRole_aCProduct="BProductDetailRole_aCProduct";
	private static final String string_ERRAFE_00512="ERRAFE_00512";
	private static final String string_ERRCOM_False="False";
	private static final String string_ACTION="ACTION";
	private static final String string_METHOD_objNValidateNinasProduct="METHOD_objNValidateNinasProduct";
	private static final String string_COUNTRY_BELGIUM="COUNTRY_BELGIUM";
	private static final String string_MVNO_FOREIGN="MVNO_FOREIGN";
	private static final String string_CheckingForVon="Checking for Von-----";
	private static final String string_CURRENCY_DEFAULT="CURRENCY_DEFAULT";
	private static final String string_CURRENCY="CURRENCY";
	private static final String string_PAYMENTMETHOD="PAYMENTMETHOD";
	private static final String string_ONE="1";
	private static final String string_CallingvdMainRMethodOfProductsNewProductLineforproductd="Calling vdMainRMethodOfProductsNewProductLine for product id : ";
	private static final String string_OPTIONGROUP="OPTIONGROUP";
	private static final String string_OPTIONPRODUCT="OPTIONPRODUCT";
	private static final String string_CHARGETYPE_NRC="CHARGETYPE_NRC";
	private static final String string_CHARGETYPE_RC="CHARGETYPE_RC";
	private static final String string_BInternet_aCProduct="BInternet_aCProduct";
	private static final String string_BProductDetailProperty_aCProduct_New="BProductDetailProperty_aCProduct_New";
	private static final String string_FORBIDDENPRODUCT="FORBIDDENPRODUCT";
	
	// BEGIN ADD V 5.96u
	
	private boolean isProductUnselect = false;
	
	public LProduct() {
		super();
	}

	// END ADD V 5.96u

	public LProduct(TeleSessionMgr teleSessionMgr, BSession bSession) {
		super();
		this.teleSessionMgr = teleSessionMgr;
		this.bSession = bSession;
	}

	// comment:method to get security sequence value from a sequence S_SECURITYCODE

	/**
	 *  to fetch new securityCode sequence that will be used to generate Security Code.
	 *  param   none
	 *  @throws Exception       If fails to obtain the sequence value.
	 */
	public long getSequenceSecurityCode() throws Exception {
		GLogger.logEntry(CLASS_NAME, "getSequenceSecurityCode");

		long lSequenceCode;
		ResultSet rsSequence = gConnectAfe
				.rsQuery(GAfeSql.SECURITY_SEQUENCE_CODE);

		rsSequence.next();
		lSequenceCode = rsSequence.getLong(1);
		GLogger
				.debug(
						CLASS_NAME,
						"getSequenceSecurityCode-value generated from database- lSequenceCode",
						Long.valueOf(lSequenceCode).toString());
		GLogger.logExit(CLASS_NAME, "getSequenceSecurityCode");
		rsSequence.close();
		rsSequence = null;

		return lSequenceCode;
	}

	/**
	 * Method added to check whether the deactivated internetline is in Aging
	 *
	 * @param deactivationDate
	 * @return
	 * @throws Exception
	 */
	private boolean isAgingLine(Date deactivationDate,
			long customerProductLineId) throws Exception {

		boolean isAgingLine = false;

		if (null == deactivationDate
				|| getActiveLineInMoveCount(customerProductLineId) != 0
				|| getLineInExtendedCount(customerProductLineId) == 0) {
			isAgingLine = true;
		} else {

			Calendar extentionDeactivationDate = Calendar.getInstance();
			Date today = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat(GAfeConstants.ddMMyyyy);
			String extDeactDate = sdf.format(deactivationDate);
			String tdy = sdf.format(today);
			extentionDeactivationDate.setTime(sdf.parse(extDeactDate));
			extentionDeactivationDate.add(Calendar.DAY_OF_MONTH, GAfeConstants.EXTENSION_DAYS);
			// checking whether the extension period or dactivationdate plus 6
			// months is passed
			if (extentionDeactivationDate.getTime().before(sdf.parse(tdy))) {

				isAgingLine = true;

			}
		}

		return isAgingLine;
	}

	/**
	 * Query to get Active Line present for the lineid passed.
	 * @param customerProductLineId
	 * @return
	 * @throws Exception
	 */
	public int getActiveLineInMoveCount(long customerProductLineId)
			throws Exception {

		GLogger.logEntry(CLASS_NAME, METHOD_GETACTIVELINEINMOVECOUNT);
		GLogger.logInput(METHOD_GETACTIVELINEINMOVECOUNT, ARG_CUSTOMERPRODUCTLINEID,
				  customerProductLineId);
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		int count = 0;

		try {

			// GConnectAfe.setCallFromBatchProcess(true);
			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GET_COUNT_LINE_INVOLVED_IN_COMPLETED_MOVE_ORDER);
			psQuery.setLong(1, customerProductLineId);
			psQuery.setLong(2, FINAL_ONE);
			psQuery.setLong(3, FINAL_ZERO);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				count = rsRetrieve.getInt("COUNT");
			}
			GLogger.logExit(CLASS_NAME, METHOD_GETACTIVELINEINMOVECOUNT + count );
			GLogger.logOutput(METHOD_GETACTIVELINEINMOVECOUNT, ARG_CUSTOMERPRODUCTLINEID,
					count);
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return count;

	}

	/**
	 * Query to get Extended Line present for the lineid passed with out aging.
	 * @param customerProductLineId
	 * @return
	 * @throws Exception
	 */
	public int getLineInExtendedCount(long customerProductLineId)
			throws Exception {

		GLogger.logEntry(CLASS_NAME, METHOD_GETLINEINEXTENDEDCOUNT);
		GLogger.logInput(METHOD_GETLINEINEXTENDEDCOUNT, ARG_CUSTOMERPRODUCTLINEID,
				  customerProductLineId);
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		int count = 0;

		try {

			// GConnectAfe.setCallFromBatchProcess(true);
			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GET_COUNT_LINE_IN_INACTIVE_EXTENDED);
			psQuery.setLong(1, customerProductLineId);
			psQuery.setLong(2, FINAL_ONE);
			psQuery.setLong(3, FINAL_ONE);
			psQuery.setLong(4, FINAL_ONE);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				count = rsRetrieve.getInt("COUNT");
			}
			GLogger.logExit(CLASS_NAME, METHOD_GETLINEINEXTENDEDCOUNT + count );
			GLogger.logOutput(METHOD_GETLINEINEXTENDEDCOUNT, ARG_CUSTOMERPRODUCTLINEID,
					count);
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return count;

	}

	// END ADD V5.60b

	/*
	 *       DESCRIPTION :   This function will Populate the Business Object Called
	 *                                       BProductOvw for the Product Ovw Screen
	 *
	 *       @param          :       Long  CustomerID, int iObsolete
	 *
	 *       @return         :       BProductOvw - Returns the BO named BProductOvw for the Product Ovw Screen
	 **/
	public BProductOvw objLoadCustomerProduct(Long CustomerID, int iObsolete)
			throws Exception {
		Vector vctGetAllData = null; // vctGetAllData vector contains set of vector having the data as sepcified in the above comments
		Vector vctGetAllExtendedData = null;
		Vector vctGetAllNonExtendedData = null;
		// Begin DEL v9.01d
		// Vector vctOpenOrder = null;
		// End DEL v9.01d
		Long lCustProductLineID;
		String strDescription = "";

		// Begin DEL v9.01d
		// String strOneForCompare = "1";
		// String strZeroForCompare = "0";
		// End DEL v9.01d
		boolean bFlagToContinue = false;

		// Begin DEL v9.01d
		// boolean bFlagMoreProducts = false;
		// Vector vctExternal = new Vector();
		// Vector vctInternal = new Vector();
		// End DEL v9.01d
		BProductOvw bProductOvw = new BProductOvw();
	//	BProductLineOvw bProductLineOvw = new BProductLineOvw();

		// BEGIN ADD V5.96c Address Combo on Product overview screen
		Vector vctAllInstallAddresses = null;
		Vector vctTemp = null;
		BProductRoleDetail objTempBProductRoleDetail = null;

		GLogger.logEntry(CLASS_NAME, METHOD_objLoadCustomerProduct);

		// END ADD V5.96c Address Combo on Product overview screen
		// Begin Add V8.01a
		ArrayList arlCPLID = new ArrayList();
		ArrayList arlPackIdentifier = new ArrayList();

		// End Add V8.01a
		// Begin Add for CMTS Rel 10.4
		lOpenInstallOrderStatus = -1;
		// End Add for CMTS Rel 10.4

		 //BEGIN ADD v10.00b
        boolean bBigCustomerFlag=false;
        new MProduct(teleSessionMgr, bSession);
        //Get Big Customer Flag from session
        if(null != teleSessionMgr.getValue(GAfeConstants.BOOLBIGCUSTOMER))
        {
        	bBigCustomerFlag = (Boolean) teleSessionMgr.getValue(GAfeConstants.BOOLBIGCUSTOMER);
        }
        //END ADD v10.00b

		try {
			BProductLineOvw bProductTempLineOvw = null;

			vctGetAllData = new Vector(); // External Local Vector
			vctGetAllExtendedData = new Vector(); // External Local Vector
			vctGetAllNonExtendedData = new Vector(); // External Local Vector

			// Begin DEL v9.01d
			// vctOpenOrder = new Vector();
			// End DEL v9.01d

			CustomerLinkRow customerLinkRow = null;

			customerLinkTable = (CustomerLink) teleSessionMgr
					.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

			CustomerLinkRoleRow customerLinkRoleRow = null;

			customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
					.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session

			CustomerLR2CustomerProductRow customerLR2CustomerProductRow = null;

			customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session

			// Begin DEL v9.01d
			// CustomerProductLineRow customerProductLineRow = null;
			// End DEL v9.01d
			customerProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session

			ProductRow productRow = null; // Initializing the Object Class for the Vat table

			// Begin DEL v9.01d
			// PromotionMappingRow promotionMappingRow = null;
			// End DEL v9.01d
			promotionMappingTable = (PromotionMapping) teleSessionMgr
					.getMasterTable("PROMOTIONMAPPING");

			// BEGIN ADD V6.05j
			RateClassRow rateClassRow = null;

			if (null == rateClassTable) {
				rateClassTable = (RateClass) teleSessionMgr
						.getMasterTable("RATECLASS");
			}

			// END ADD V6.05j

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
			}

			Vector vctObjCLInternal = null;

			vctObjCLInternal = customerLinkTable
					.vctSearchByCustomerIDandObsolete(CustomerID.longValue(),
							FINAL_ZERO);

			if (null != vctObjCLInternal) {
				int ivctObjCLInternal = 0;

				ivctObjCLInternal = vctObjCLInternal.size();

				for (int iCLCounter = FINAL_ZERO; iCLCounter < ivctObjCLInternal; iCLCounter++) {
					Vector vctObjCLRInternal = null;

					vctObjCLRInternal = customerLinkRoleTable
							.vctSearchBylCustomerLinkIDandiObsolete(
									((CustomerLinkRow) (vctObjCLInternal
											.elementAt(iCLCounter))).lCustomerLinkID,
									FINAL_ZERO);

					if (null != vctObjCLRInternal) {
						int ivctObjCLRInternal = 0;

						ivctObjCLRInternal = vctObjCLRInternal.size();

						for (int iCLRCounter = FINAL_ZERO; iCLRCounter < ivctObjCLRInternal; iCLRCounter++) {
							Vector vctObjCLR2CPInternal = null;

							vctObjCLR2CPInternal = customerLR2CustomerProductTable
									.vctSearchByCustomerLinkRoleID(((CustomerLinkRoleRow) (vctObjCLRInternal
											.elementAt(iCLRCounter))).lCustomerLinkRoleID);

							if (null != vctObjCLR2CPInternal) {
								int ivctObjCLR2CPInternal = 0;

								ivctObjCLR2CPInternal = vctObjCLR2CPInternal
										.size();

								for (int iCLR2CPCounter = FINAL_ZERO; iCLR2CPCounter < ivctObjCLR2CPInternal; iCLR2CPCounter++) {
									Vector vctObjCPLInternal = null;

									vctObjCPLInternal = customerProductLineTable
											.vctSearchByCustProductLineID(((CustomerLR2CustomerProductRow) (vctObjCLR2CPInternal
													.elementAt(iCLR2CPCounter))).lCustomerProductLineID);

									if (null != vctObjCPLInternal) {
										int ivctObjCPLInternal = 0;

										ivctObjCPLInternal = vctObjCPLInternal
												.size();

										// Begin Add V8.01a
										/*for (int iCPLCounter = FINAL_ZERO; iCPLCounter < ivctObjCPLInternal;
										        iCPLCounter++) {
										    arlCPLID.add(
										        Long.valueOf(
										            ((CustomerProductLineRow) vctObjCPLInternal.elementAt(
										                iCPLCounter)).lCustomerProductLineID));
										}

										if ((arlCPLID != null) && (arlCPLID.size() > 0)) {
										    arlPackIdentifier = RProduct.arlGetPackIdentifierDetails(arlCPLID, 0);
										}*/

										// End Add V8.01a
										for (int iCPLCounter = FINAL_ZERO; iCPLCounter < ivctObjCPLInternal; iCPLCounter++) {

											boolean isExtendedUseLine = false;

											if (FINAL_ZERO == iObsolete
													&& ((CustomerProductLineRow) (vctObjCPLInternal
															.elementAt(iCPLCounter))).iObsolete == FINAL_ONE) {
												if ((((CustomerProductLineRow) (vctObjCPLInternal
														.elementAt(iCPLCounter))).lProductID != GAfeDescription.PRODUCT_INTERNET)
														|| isAgingLine(
																((CustomerProductLineRow) (vctObjCPLInternal
																		.elementAt(iCPLCounter))).dtDeactivationDate,
																((CustomerProductLineRow) (vctObjCPLInternal
																		.elementAt(iCPLCounter))).lCustomerProductLineID)) {
													continue;
												} else {
													isExtendedUseLine = true;
												}

											}
											bFlagToContinue = true;

											if (GAfeDescription
													.lGetTypeId(string_ROLETYPE_USER) == ((CustomerLinkRoleRow) (vctObjCLRInternal
													.elementAt(iCLRCounter))).lRoleTypeID) {
												if (FINAL_ZERO != vctGetAllData
														.size()) {
													for (int iCtrBPLOvw = FINAL_ZERO; iCtrBPLOvw < vctGetAllData
															.size(); iCtrBPLOvw++) {
														bProductTempLineOvw = new BProductLineOvw();
														bProductTempLineOvw = (BProductLineOvw) vctGetAllData
																.elementAt(iCtrBPLOvw);

														if (((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).lCustomerProductLineID == bProductTempLineOvw.lCustomerProductLineID
																.longValue()) {
															bProductTempLineOvw.iUser = FINAL_ONE;
															bFlagToContinue = false;
														}
													} // end of the for loop
												} // end of the if else if loop
											} else {
												if (FINAL_ZERO != vctGetAllData
														.size()) {
													for (int iCtrBPLOvw = FINAL_ZERO; iCtrBPLOvw < vctGetAllData
															.size(); iCtrBPLOvw++) {
														bProductTempLineOvw = new BProductLineOvw();
														bProductTempLineOvw = (BProductLineOvw) vctGetAllData
																.elementAt(iCtrBPLOvw);

														if (((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).lCustomerProductLineID == bProductTempLineOvw.lCustomerProductLineID
																.longValue()) {
															bFlagToContinue = false;
														}
													} // end of the for loop
												} // end of the if else if loop
											}

											if (bFlagToContinue) {
												arlCPLID
														.add(Long.valueOf(
																((CustomerProductLineRow) vctObjCPLInternal
																		.elementAt(iCPLCounter)).lCustomerProductLineID));

												productRow = (ProductRow) productTable
														.prSearchByProductIDandObsolete(
																((CustomerProductLineRow) (vctObjCPLInternal
																		.elementAt(iCPLCounter))).lProductID,
																FINAL_ZERO);

												if (null != productRow) {
													strDescription = strFindDescription(productRow.lDescription1ID);
												}

												// BEGIN ADD V6.05j
												// BEGIN DELETE V6.06a

												/*
												 * rateClassRow = (RateClassRow) rateClassTable.prSearchByRateClassID(((CustomerProductLineRow) (vctObjCPLInternal.elementAt(iCPLCounter))).iRateClassID);
												 * if(null != rateClassRow)
												 * {
												 *       strDescription = strFindDescription(rateClassRow.lDescriptionID);
												 * }
												 */

												// END DELETE V6.06a
												// END ADD V6.05j
												BProductLineOvw bProductLineOvw = new BProductLineOvw();
												bProductLineOvw.lCustomerProductLineID = Long.valueOf(
														((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).lCustomerProductLineID);
												lCustProductLineID = Long.valueOf(
														((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).lCustomerProductLineID);

												// BEGIN DELETE V5.26a
												// comment: we also need to pass obsolete for the current line
												// bProductLineOvw.vctProducts                           =vctLoadProducts(lCustProductLineID);
												// END ADD V5.26a

												// BEGIN ADD V5.26a
												// comment: calling the function to load products
												bProductLineOvw.vctProducts = vctLoadProducts(
														lCustProductLineID,
														((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).iObsolete);

												// END ADD V5.26a
												bProductLineOvw.lProductID = Long.valueOf(
														((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).lProductID);
												bProductLineOvw.strProductDesc = strDescription;

												// BEGIN ADD V6.06a
												rateClassRow = (RateClassRow) rateClassTable
														.prSearchByRateClassID(((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).iRateClassID);

												if (null != rateClassRow) {
													bProductLineOvw.strRateClassDesc = strFindDescription(rateClassRow.lDescriptionID);
												}

												// END ADD V6.06a

												// BEGIN ADD V5.71c
												ObjectDescriptionRow objObjectDescriptionRow = null;

												// objObjectDescriptionRow =new ObjectDescriptionRow();
												objectDescriptionTable = (ObjectDescription) teleSessionMgr
														.getMasterTable(string_OBJECTDESCRIPTION);

												BlockingStatusRow objBlockingStatusRow = null;

												//                                              objBlockingStatus = new BlockingStatus();
												objBlockingStatus = (BlockingStatus) teleSessionMgr
														.getMasterTable(GMasterDataConstants.TABLE_BlockingStatus);

												// END ADD V5.71c
												// BEGIN ADD V 5.71c
												// Vector vctBlockingStatusRow =new Vector(1);
												long lUsageBlockId = 0;

												// Begin DEL v9.01d
												// customerProductLineRow = customerProductLineTable.cplrSearchByCustProductLineIDandObsolete((bProductLineOvw.lCustomerProductLineID).longValue(), iObsolete);
												// End DEL v9.01d
												// Begin add V 5.88a
												lUsageBlockId = (((CustomerProductLineRow) (vctObjCPLInternal
														.elementAt(iCPLCounter))).lUsageBlockId);

												// lUsageBlockId = customerProductLineRow.lUsageBlockId;
												// end add by V5.88a
												// Begin Add V5.82a
												int iBlockingStatusTypeId = 0;
												Long lngProductId = bProductLineOvw.lProductID;
												int iProductId = lngProductId
														.intValue();

												if (iProductId == GAfeDescription.PRODUCT_TELEPHONE) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_TELEPHONE;
												}

												if (iProductId == GAfeDescription.PRODUCT_INTERNET) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_INTERNET;
												}

												// Begin Add V5.99a

												if (iProductId == GAfeDescription.PRODUCT_ANALOGTV) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_TV;
												}

												// End Add V5.99a
												// BEGIN ADD V. 6.07h
												if (iProductId == GAfeDescription
														.lGetTypeId(string_PRODUCT_VON)) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_VON;
												}

												// END ADD V. 6.07h

												// BEGIN ADD v6.07o
												if (iProductId == GAfeDescription.PRODUCT_CPS) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_CPS;
												}

												// END ADD v6.07o
												// BEGIN ADD V6.20f
												if (iProductId == GAfeDescription.PRODUCT_DIGITALTV) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_IDTV;
												}

												if (iProductId == GAfeDescription.PRODUCT_MOBILE) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_MOBILE;
												}

												if (iProductId == GAfeDescription.PRODUCT_FULLMOBILE) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_FULLMOBILE;
												}
												if (iProductId == GAfeDescription.PRODUCT_TTV) {
													iBlockingStatusTypeId = GAfeDescription.BLOCKINGSTATUSTYPE_TTV;
												}
												// END ADD V6.20f
												// objBlockingStatusRow = objBlockingStatus.objGetBlockStatusRow(lUsageBlockId);

												objBlockingStatusRow = objBlockingStatus
														.objGetBlockStatusRow(
																lUsageBlockId,
																iBlockingStatusTypeId);

												// End add V5.82a

												// Begin  add V6.02b
												if (null != objBlockingStatusRow)

												// End  add V6.02b
												{
													objObjectDescriptionRow = (ObjectDescriptionRow) objectDescriptionTable
															.odrSearchByDescIDAndLangID(
																	objBlockingStatusRow.lDescriptionID,
																	bSession.lLanguageId);
												}

												if ((null != objObjectDescriptionRow)
														&& (null != objObjectDescriptionRow.strDescription)) {
													bProductLineOvw.strUsageBlock = objObjectDescriptionRow.strDescription;
												}

												long lCollectionBlockId = 0;

												// BEGIN ADD V5.88a
												// lCollectionBlockId = customerProductLineRow.lCollectionBlockId;
												lCollectionBlockId = (((CustomerProductLineRow) (vctObjCPLInternal
														.elementAt(iCPLCounter))).lCollectionBlockId);

												// END ADD V5.88a

												// Begin Add V5.82a
												// objBlockingStatusRow = objBlockingStatus.objGetBlockStatusRow(lCollectionBlockId);
												objBlockingStatusRow = objBlockingStatus
														.objGetBlockStatusRow(
																lCollectionBlockId,
																iBlockingStatusTypeId);

												// End Add V5.82a

												// Begin  add V6.02b
												if (null != objBlockingStatusRow)

												// End  add V6.02b
												{
													objObjectDescriptionRow = (ObjectDescriptionRow) objectDescriptionTable
															.odrSearchByDescIDAndLangID(
																	objBlockingStatusRow.lDescriptionID,
																	bSession.lLanguageId);
												}

												if ((null != objObjectDescriptionRow)
														&& (null != objObjectDescriptionRow.strDescription)) {
													bProductLineOvw.strCollectionBlock = objObjectDescriptionRow.strDescription;
												}

												/* Begin Add 7.04b */
												long lModemBlockId = 0;

												lModemBlockId = (((CustomerProductLineRow) (vctObjCPLInternal
														.elementAt(iCPLCounter))).lModemBlockId);
												objBlockingStatusRow = objBlockingStatus
														.objGetBlockStatusRow(
																lModemBlockId,
																iBlockingStatusTypeId);

												if (null != objBlockingStatusRow) {
													objObjectDescriptionRow = objectDescriptionTable
															.odrSearchByDescIDAndLangID(
																	objBlockingStatusRow.lDescriptionID,
																	bSession.lLanguageId);
												}

												if ((null != objObjectDescriptionRow)
														&& (null != objObjectDescriptionRow.strDescription)) {
													bProductLineOvw.strModemBlock = objObjectDescriptionRow.strDescription;
												}

												if ((iProductId == GAfeDescription.PRODUCT_MOBILE)
														&& (null != bProductLineOvw.lCustomerProductLineID)) {
													if (bProductLineOvw.lCustomerProductLineID
															.longValue() > 0) {
														String strMSISDN = strGetMobileCPLIdenValueFromCPLId(bProductLineOvw.lCustomerProductLineID
																.longValue());

														GLogger
																.chkpt("BS MSISDN : "
																		+ strMSISDN);

														if ((null != strMSISDN)
																&& !""
																		.equalsIgnoreCase(strMSISDN)) {
															PreparedStatement psLine = null;
															ResultSet rsLine = null;

															try {
																psLine = GConnectAfe
																		.psPrepareStatement(GAfeSql.S_GET_SUSPEND_MSISDN);
																psLine
																		.setString(
																				1,
																				strMSISDN);
																psLine
																		.setInt(
																				2,
																				CDMConstants.OBSOLETE_ZERO);
																psLine
																		.setInt(
																				3,
																				GAfeDescription.PURPOSEID_SUSPEND);
																rsLine = psLine
																		.executeQuery();

																if (rsLine
																		.next()) {
																	bProductLineOvw.strModemBlock = GAfeDescription.SUSPEND_DESC;
																}
															} finally {
																GConnectAfe
																		.close(rsLine);
																GConnectAfe
																		.close(psLine);
															}
														}
													}
												} else if ((iProductId == GAfeDescription.PRODUCT_FULLMOBILE)
														&& (null != bProductLineOvw.lCustomerProductLineID)) {
													if (lModemBlockId != 0) {
														bProductLineOvw.strModemBlock = GAfeDescription.SUSPEND_DESC;
													}
												}

												/* End Add 7.04b */

												// END ADD V5.71c
												// BEGIN DELETE V5.26a
												// comment: function should be called taking obsolete into consideration also
												// bProductLineOvw.strShortDesc                  =       strGetEigenschappen(((CustomerProductLineRow)(vctObjCPLInternal.elementAt(iCPLCounter))).lCustomerProductLineID);
												// END DELETE V5.26a
												// BEGIN ADD V5.26a
												// comment: calling function to get EigenChappen

												//BEGIN ADD v10.00b
                                                if (!bBigCustomerFlag){
                                                //END ADD v10.00b
												bProductLineOvw.strShortDesc = strGetEigenschappen(
														((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).lCustomerProductLineID,
														((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).iObsolete);
												//BEGIN ADD v10.00b
                                                }
                                                else{
                                                	long lCustomerProductLineID =((CustomerProductLineRow) (vctObjCPLInternal.elementAt(iCPLCounter))).lCustomerProductLineID;
                                                	bProductLineOvw.strShortDesc =
                                                		 ProductUtils.strGetProdLineIdentifierValue(lCustomerProductLineID,
        														((CustomerProductLineRow) (vctObjCPLInternal
        																.elementAt(iCPLCounter))).iObsolete);
                                                	if(null==bProductLineOvw.strShortDesc){
                                                		CustomerProductLineIdentifierRow custPLIdRow =null;
                                                		customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);    // Getting the Customer table from the session
                                                		custPLIdRow = customerProductLineIdentifierTable.cplirSearchByCustProductLineID(lCustomerProductLineID);    // Getting CustomerProductLineIdentifier for given CustomerProductlineID

                                                		if (null != custPLIdRow) {
                                                			GLogger.chkpt("CustomerPLIdentifierValue from in memory table--->  : "+ custPLIdRow.strCustomerPLIdentifierValue);
                                                			bProductLineOvw.strShortDesc = custPLIdRow.strCustomerPLIdentifierValue;
                                                		}
                                                	}
                                                	GLogger.chkpt("ShortDesc for big customer --->  : "+ bProductLineOvw.strShortDesc);
                                                }
                                                //END ADD v10.00b

												// END ADD V5.26a
												bProductLineOvw.dtActivationDate = ((CustomerProductLineRow) (vctObjCPLInternal
														.elementAt(iCPLCounter))).dtActivationDate;
												bProductLineOvw.dtDeactivationDate = ((CustomerProductLineRow) (vctObjCPLInternal
														.elementAt(iCPLCounter))).dtDeactivationDate;

												// BEGIN DELETE V5.26a
												// comment: function to be called with obsolete as the arguement
												// bProductLineOvw.vctOpenOrder                  =       vctGetOpenOrder(lCustProductLineID);
												// END DELETE V5.26a
												// BEGIN ADD V5.26a
												// comment: calling function to get open order
												// Begin Add logger for CMTS Rel 10.4
												GLogger
														.chkpt(" value of lOpenInstallOrderStatus before calling vctGetOpenOrder: "
																+ lOpenInstallOrderStatus);
												// End Add logger for CMTS Rel 10.4
												bProductLineOvw.vctOpenOrder = vctGetOpenOrder(
														lCustProductLineID,
														((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).iObsolete);

												// END ADD V5.26a
												// Begin Add for CMTS Rel 10.4
												GLogger
														.chkpt(" value of lOpenInstallOrderStatus after calling vctGetOpenOrder: "
																+ lOpenInstallOrderStatus);
												bProductLineOvw
														.setInstallOrderStatus((int) lOpenInstallOrderStatus);
												GLogger
														.chkpt(" Successfully set the open order status in the BO ");
												// End Add for CMTS Rel 10.4
												// BEGIN ADD V5.26a
												// comment: setting the field iObsolete of the object bProductLineOvw
												bProductLineOvw.iObsolete = ((CustomerProductLineRow) (vctObjCPLInternal
														.elementAt(iCPLCounter))).iObsolete;

												// END ADD V5.26a
												bProductLineOvw.iUser = FINAL_ONE;

												bProductLineOvw
														.setlBillCycleID(((CustomerProductLineRow) (vctObjCPLInternal
																.elementAt(iCPLCounter))).lBillCycleID);

												GLogger
														.chkpt("bProductLineOvw.lBillCycleID : "
																+ bProductLineOvw
																		.getlBillCycleID());

												// Begin Add V8.01a
												if (null != arlPackIdentifier) {
													for (int iCntPackIdentifier = 0; iCntPackIdentifier < arlPackIdentifier
															.size(); iCntPackIdentifier++) {
														BPackIdentifier objBPackIdentifier = (BPackIdentifier) arlPackIdentifier
																.get(iCntPackIdentifier);

														if (bProductLineOvw.lCustomerProductLineID
																.longValue() == objBPackIdentifier
																.getlCustomerProductLineID()) {
															StringBuffer sbfPack = new StringBuffer();

															sbfPack
																	.append(strFindDescription(promotionMappingTable
																			.lGetPackDescription(objBPackIdentifier
																					.getlPackID())));
															sbfPack.append(SLASH);
															sbfPack
																	.append(objBPackIdentifier
																			.getStrPackIdentifier());
															bProductLineOvw
																	.setStrPackIndentifierDisplay(sbfPack
																			.toString());
															bProductLineOvw
																	.setStrPackIdentifier(objBPackIdentifier
																			.getStrPackIdentifier());

															break;
														}
													}
												}
												bProductLineOvw
														.setIsExtendedUseLine(isExtendedUseLine);

												// End Add V8.01a
												vctGetAllData
														.addElement(bProductLineOvw);
												if(FINAL_ZERO == iObsolete){
													if(bProductLineOvw.getIsExtendedUseLine()){
														vctGetAllExtendedData
														.addElement(bProductLineOvw);
													}else{
														vctGetAllNonExtendedData
														.addElement(bProductLineOvw);
													}
												}

											} // end of the if loop
										} // end of the for loop
									} // end of the if loop
								} // end of the for loop
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop
			if (arlCPLID != null && arlCPLID.size() > 0) {
				GLogger.chkpt("Calling RProduct.arlGetPackIdentifierDetails");
				arlPackIdentifier = ProductUtils.arlGetPackIdentifierDetails(
						arlCPLID, 0);
			}
			long lCustomerID_RoleUser = 0;

			// BEGIN ADD V5.96c Address Combo on Product overview screen
			long lAddressID = 0;

			// END ADD V5.96c Address Combo on Product overview screen
			//vctGetAllData = sortPackIdentifier(vctGetAllData);

			if (FINAL_ZERO != vctGetAllData.size()) {

				for (int iCtrBPLOvw = FINAL_ZERO; iCtrBPLOvw < vctGetAllData
						.size(); iCtrBPLOvw++) {
					bProductTempLineOvw = (BProductLineOvw) vctGetAllData
							.elementAt(iCtrBPLOvw);
					if (arlPackIdentifier != null) {
						GLogger.chkpt("arlPackIdentifier is not null");
						for (int iCntPackIdentifier = 0; iCntPackIdentifier < arlPackIdentifier
								.size(); iCntPackIdentifier++) {
							BPackIdentifier objBPackIdentifier = (BPackIdentifier) arlPackIdentifier
									.get(iCntPackIdentifier);

							if (bProductTempLineOvw.lCustomerProductLineID
									.longValue() == objBPackIdentifier
									.getlCustomerProductLineID()) {
								StringBuffer sbfPack = new StringBuffer();
								sbfPack
										.append(strFindDescription(promotionMappingTable
												.lGetPackDescription(objBPackIdentifier
														.getlPackID())));
								sbfPack.append(SLASH);
								sbfPack.append(objBPackIdentifier
										.getStrPackIdentifier());
								bProductTempLineOvw
										.setStrPackIndentifierDisplay(sbfPack
												.toString());
								bProductTempLineOvw
										.setStrPackIdentifier(objBPackIdentifier
												.getStrPackIdentifier());
								break;
							}
						}
					}
					Vector vctObjCLR2CPInternal = null;

					vctObjCLR2CPInternal = customerLR2CustomerProductTable
							.vctSearchByCustomerProductLineID(bProductTempLineOvw.lCustomerProductLineID
									.longValue());

					if (null != vctObjCLR2CPInternal) {
						for (int iCtrCPLCLR = FINAL_ZERO; iCtrCPLCLR < vctObjCLR2CPInternal
								.size(); iCtrCPLCLR++) {
							lCustomerID_RoleUser = 0;
							customerLR2CustomerProductRow = (CustomerLR2CustomerProductRow) vctObjCLR2CPInternal
									.elementAt(iCtrCPLCLR);
							customerLinkRoleRow = null;
							customerLinkRoleRow = customerLinkRoleTable
									.clrrSearchByCustLinkRoleID(customerLR2CustomerProductRow.lCustomerLinkRoleID);

							if (null != customerLinkRoleRow) {
								customerLinkRow = customerLinkTable
										.clrSearchByCustLinkID(customerLinkRoleRow.lCustomerLinkID);

								// BEGIN DELETE V5.42a
								// Added check for obsolete -Rel8 incident 304
								// if (GAfeDescription.lGetTypeId("ROLETYPE_USER") == customerLinkRoleRow.lRoleTypeID)
								// END DELETE V5.42a
								// BEGIN ADD V5.42a
								// Added check for obsolete -Rel8 incident 304
								if ((GAfeDescription
										.lGetTypeId(string_ROLETYPE_USER) == customerLinkRoleRow.lRoleTypeID)
										&& (customerLinkRoleRow.iObsolete == 0))

								// END ADD V5.42a
								{
									lCustomerID_RoleUser = customerLinkRow.lCustomerID;

									// BEGIN ADD V5.96c Address Combo on Product overview screen
									lAddressID = customerLinkRow.lAddressID;
									GLogger.debug(CLASS_NAME,
											METHOD_vdPopulateAddressData,
											"the user lCustomerID_RoleUser  = "
													+ lCustomerID_RoleUser);

									// END ADD V5.96c Address Combo on Product overview screen
									break;
								} // end of the if else if loop
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop

					if (CustomerID.longValue() == lCustomerID_RoleUser) {
						bProductTempLineOvw.iUser = FINAL_ONE;
						GLogger
								.debug(
										CLASS_NAME,
										METHOD_vdPopulateAddressData,
										"Setting  final one bProductTempLineOvw.lCustomerProductLineID = "
												+ bProductTempLineOvw.lCustomerProductLineID);
					} else {
						bProductTempLineOvw.iUser = FINAL_ZERO;
						GLogger
								.debug(
										CLASS_NAME,
										METHOD_vdPopulateAddressData,
										"Setting  final zero bProductTempLineOvw.lCustomerProductLineID = "
												+ bProductTempLineOvw.lCustomerProductLineID);
					}

					// BEGIN ADD V5.96c Address Combo on Product overview screen

					/*
					 *   �       Add this addressID to the variable lAddressID of the BProductLineOvw   object.
					 *   �       Create a new object of type BProductRoleDetail, add the addressID to variable lAddressID of this object.
					 *   �       Create a new vector vctAllInstallAddresses, if it is null.
					 *   �       Add the BProductRoleDetail business object to this vector.
					 */
					bProductTempLineOvw.lAddressID = lAddressID;

					if (null == vctTemp) {
						vctTemp = new Vector(1);
					}

					if (0 != lAddressID) {
						if (!vctTemp.contains(Long.valueOf(lAddressID))) {
							vctTemp.addElement(Long.valueOf(lAddressID));
							objTempBProductRoleDetail = new BProductRoleDetail();
							objTempBProductRoleDetail.lAddressID = Long.valueOf(
									lAddressID);

							if (null == vctAllInstallAddresses) {
								vctAllInstallAddresses = new Vector(1);
							}

							vctAllInstallAddresses
									.addElement(objTempBProductRoleDetail);
						}
					}

					lAddressID = 0;

					//                  END ADD V5.96c Address Combo on Product overview screen
				} // end of the for loop
			} // end of the if else if loop
			if(FINAL_ZERO != vctGetAllData.size() && FINAL_ZERO == iObsolete){
				vctGetAllData.removeAllElements();
				vctGetAllNonExtendedData = sortPackIdentifier(vctGetAllNonExtendedData);
				vctGetAllData.addAll(FINAL_ZERO, vctGetAllNonExtendedData);
				if(!vctGetAllExtendedData.isEmpty()){
					vctGetAllExtendedData =  sortPackIdentifier(vctGetAllExtendedData);
					vctGetAllData.addAll(vctGetAllNonExtendedData.size(), vctGetAllExtendedData);
				}
			}else{
				vctGetAllData = sortPackIdentifier(vctGetAllData);
			}
			bProductOvw.lCustomerID = CustomerID;
			bProductOvw.vctBProductLineOvw = vctGetAllData;

			// BEGIN ADD V5.96c Address Combo on Product overview screen
			if (null == vctAllInstallAddresses) {
				vctAllInstallAddresses = new Vector(1);
			}

			vdPopulateAddressData(vctAllInstallAddresses,
					bProductOvw.vctBProductLineOvw, vctTemp);

			if (null != vctAllInstallAddresses) {
				if (vctAllInstallAddresses.size() == 1) {
					lAddressID = ((BProductRoleDetail) vctAllInstallAddresses
							.elementAt(0)).lAddressID.longValue();
				} else if (vctAllInstallAddresses.size() > 1) {
					lAddressID = 0;
				}

				bProductOvw.strSelectedAddressID = Long.valueOf(lAddressID)
						.toString();
				bProductOvw.vctAllInstallAddresses = vctAllInstallAddresses;
			}

			// END ADD V5.96c Address Combo on Product overview screen
		} catch (Exception ex) {
			//ex.printStackTrace(System.out);
			GLogger.logException(ex);
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(ex); // unknown exception occurred

			throw afe;
		}

		/*GLogger.debug(CLASS_NAME, METHOD_objLoadCustomerProduct, "Printing the entire vctAllInstallAddresses vector ");

		for (int i = 0; i < bProductOvw.vctAllInstallAddresses.size(); i++) {
		    BProductRoleDetail obj = null;

		    obj = (BProductRoleDetail) bProductOvw.vctAllInstallAddresses.elementAt(i);
		    GLogger.debug(CLASS_NAME, METHOD_objLoadCustomerProduct, "obj.lAddressID : " + obj.lAddressID);
		    GLogger.debug(CLASS_NAME, METHOD_objLoadCustomerProduct, "obj.strAddress : " + obj.strAddress);
		}

		GLogger.debug(CLASS_NAME, METHOD_objLoadCustomerProduct,
		              "Printing the entire bProductOvw.vctBProductLineOvw vector ");

		for (int i = 0; i < bProductOvw.vctBProductLineOvw.size(); i++) {
		    BProductLineOvw obj = null;

		    obj = (BProductLineOvw) bProductOvw.vctBProductLineOvw.elementAt(i);
		    GLogger.debug(CLASS_NAME, METHOD_objLoadCustomerProduct,
		                  "obj.lCustomerProductLineID : " + obj.lCustomerProductLineID);
		    GLogger.debug(CLASS_NAME, METHOD_objLoadCustomerProduct, "obj.lAddressID : " + obj.lAddressID);
		}*/

		GLogger.logExit(CLASS_NAME, METHOD_objLoadCustomerProduct);

		return bProductOvw;
	}

	// BEGIN ADD V5.96c Address Combo on Product overview screen

	/**
	 * This function populates BproductRoleDetail object in vector
	 * vctAllInstallAddresses with a comma seperated
	 * address description string corresponding to its id.
	 *
	 * @param vctAllInstallAddresses
	 * @throws Exception
	 */
	private void vdPopulateAddressData(Vector vctAllInstallAddresses,
			Vector vctBProductLineOvw, Vector vctAlreadyFoundAddresses)
			throws Exception {
		BCustAddrDetail objBCustAddrDetail = null;
		Vector VctBCustAddrDetail = null;
		Vector vctCPLID = null;
		Long lngAddressID = null;

		GLogger.logEntry(CLASS_NAME, METHOD_vdPopulateAddressData);

		for (int iCount = 0; iCount < vctAllInstallAddresses.size(); iCount++) {

			// objBCustAddrDetail = new BCustAddrDetail();
			// RCustomer.getAddressDetail(((BProductRoleDetail) vctAllInstallAddresses.get(iCount)).lAddressID.longValue(),
			// objBCustAddrDetail);
			// ((BProductRoleDetail) vctAllInstallAddresses.get(iCount)).strAddress = objBCustAddrDetail.strGetAddressDesc()
			// + "," + objBCustAddrDetail.strGetCountryCode();
			lngAddressID = ((BProductRoleDetail) vctAllInstallAddresses
					.get(iCount)).lAddressID;

			if (null != lngAddressID) {
				((BProductRoleDetail) vctAllInstallAddresses.get(iCount)).strAddress = RCustomer
						.strGetAddressDescription(lngAddressID.longValue(),
								(int) bSession.lLanguageId);
			}

			GLogger.debug("/////////////", "",
					"AddressID::."
							+ ((BProductRoleDetail) vctAllInstallAddresses
									.get(iCount)).lAddressID);
			GLogger.debug("/////////////", "",
					"Address::."
							+ ((BProductRoleDetail) vctAllInstallAddresses
									.get(iCount)).strAddress);
		}

		BProductLineOvw bProductLineOvw = new BProductLineOvw();

		if (null != vctBProductLineOvw) {
			GLogger.debug(CLASS_NAME, METHOD_vdPopulateAddressData,
					"vctBProductLineOvw.size() =   "
							+ vctBProductLineOvw.size());

			for (int iCount = 0; iCount < vctBProductLineOvw.size(); iCount++) {
				bProductLineOvw = (BProductLineOvw) vctBProductLineOvw
						.elementAt(iCount);

				if (bProductLineOvw.lAddressID == 0) {
					if (null == vctCPLID) {
						vctCPLID = new Vector(1);
					}

					vctCPLID.add(bProductLineOvw.lCustomerProductLineID);
					GLogger.debug(CLASS_NAME, METHOD_vdPopulateAddressData,
							"the vector whose address ids were 0 vctCPLID =  "
									+ vctCPLID);
				}
			}

			if (null != vctCPLID) {
				VctBCustAddrDetail = RCustomer.vctBCustAddrDetailForCPL(0,
						null, null, (int) bSession.lLanguageId, vctCPLID);
			}

			// BCustAddrDetail objBCustAddrDetail = new BCustAddrDetail();
			BProductRoleDetail bProductRoleDetail = null;

			if (null != VctBCustAddrDetail) {
				BProductLineOvw objBProductLineOvwTemp = null;

				for (int iCountOuter = 0; iCountOuter < vctCPLID.size(); iCountOuter++) {
					objBCustAddrDetail = (BCustAddrDetail) VctBCustAddrDetail
							.elementAt(iCountOuter);

					if (null != objBCustAddrDetail) {
						for (int iCountInner = 0; iCountInner < vctBProductLineOvw
								.size(); iCountInner++) {
							objBProductLineOvwTemp = (BProductLineOvw) vctBProductLineOvw
									.elementAt(iCountInner);

							if (objBProductLineOvwTemp.lCustomerProductLineID == (Long) vctCPLID
									.elementAt(iCountOuter)) {
								break;
							}
						}

						bProductRoleDetail = new BProductRoleDetail();
						bProductRoleDetail.lAddressID = Long.valueOf(
								objBCustAddrDetail.lGetAddressId());
						objBProductLineOvwTemp.lAddressID = objBCustAddrDetail
								.lGetAddressId();
						bProductRoleDetail.strAddress = objBCustAddrDetail
								.strGetAddressDesc()
								+ "," + objBCustAddrDetail.strGetCountryCode();
						GLogger.debug(CLASS_NAME, METHOD_vdPopulateAddressData,
								"Before adding to vctallins. bProductRoleDetail.lAddressID = "
										+ bProductRoleDetail.lAddressID
										+ "bProductRoleDetail.strAddress = "
										+ bProductRoleDetail.strAddress);

						if (!vctAlreadyFoundAddresses
								.contains(bProductRoleDetail.lAddressID)) {
							vctAllInstallAddresses
									.addElement(bProductRoleDetail);
						}
					}
				}
			}
		}

		GLogger.logExit(CLASS_NAME, METHOD_vdPopulateAddressData);
	}

	// END ADD V5.96c Address Combo on Product overview screen

	/*
	 *       DESCRIPTION :   This function will Return the EigenShappen of the Passed CustomerProductLineID
	 *
	 *       @param          :       long - lCustomerProductLineID
	 *
	 *       @return         :       String - Eigenshappen of the ProductLine
	 *
	 **/

	//  BEGIN DELETE V 5.51a
	//  Remark : Modification for Incident 1518
	/*
	 protected String strGetEigenschappen(long lCustomerProductlineID) throws AfeException
	 {
	 final   int                                                                     FINAL_ONE                               = 1;                                            // Initialization of finalOne("1")
	 final   int                                                                     FINAL_ZERO                              = 0;                                            // Initialization of finalZero("0")
	 int                                                                     iCounter                                = 0;                                            // Initialization of Counter
	 int                                                                     iEndCounter                             = 0;                                            // Initialization of EndCounter
	 StringBuffer                                            sbfEigenChappen                 = new StringBuffer();           // Variable used to store the Eigenshappen
	 String                                                          strEigenChappen                 = "";                                           // Variable used to store the Eigenshaapen
	 long                                                            lngCustomerPLIdentifierID       = 0;                                    // Variable used to store the Eigenshaapen
	 Vector                                                          vctProductid                    = null;
	 ProductRow                                                      ProdRow                                 = null;
	 CustomerProductLineIdentifierRow        custPLIdRow                             = null;
	 //    BEGIN ADD V5.39a
	 String strPackage                                                                                       = null;
	 //    END ADD V5.39a

	 try
	 {
	 customerProductTable                                    =       (CustomerProduct)teleSessionMgr.getTable("CUSTOMERPRODUCT");                                                    // Getting the Customer table from the session
	 customerProductLineIdentifierTable              =       (CustomerProductLineIdentifier)teleSessionMgr.getTable("CUSTOMERPRODUCTLINEIDENTIFIER");                // Getting the Customer table from the session
	 if(null == productTable)
	 {
	 productTable                                                    =       (Product)teleSessionMgr.getMasterTable("PRODUCT");      // Getting the Vat table from the session
	 }
	 vctProductid            =        customerProductTable.vctSearchByCustProductLineIDAndNonObsolete(lCustomerProductlineID); // Select * from CustomerProduct where CustomerProductLineId is the one passed in the argument of the function
	 if(null != vctProductid)
	 iEndCounter             =        vctProductid.size();                                   // No of Records

	 for (iCounter = FINAL_ZERO; iCounter < iEndCounter ;iCounter++)
	 {
	 ProdRow         =        productTable.prSearchByProductID(((CustomerProductRow)vctProductid.elementAt(iCounter)).lProductID); // Select * from Product where ProductId from Customerproduct evaluated earlier
	 //    BEGIN DELETE V5.39a
	 //    if(null != ProdRow.strShortDescription)
	 //          sbfEigenChappen.append(ProdRow.strShortDescription).append("/");                        // Combining shortDescription of Products for No of Records Time
	 //    END DELETE V5.39a

	 if ((ProdRow.lProductID == GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE")) || (ProdRow.lProductID == GAfeDescription.lGetTypeId("PRODUCT_INTERNET")) || (ProdRow.lProductID == GAfeDescription.lGetTypeId("PRODUCT_CPS")))
	 {
	 lngCustomerPLIdentifierID       =       ((CustomerProductRow)vctProductid.elementAt(iCounter)).lCustomerPLIdentifierID;
	 }
	 //    BEGIN ADD V5.39a
	 if ( ProdRow.lProductTypeID == GAfeDescription.PRODUCTTYPE_PACKAGE)
	 {
	 if ( null !=ProdRow.strShortDescription )
	 {
	 strPackage =ProdRow.strShortDescription;
	 }
	 }
	 else
	 {
	 if(null != ProdRow.strShortDescription)
	 {
	 sbfEigenChappen.append(ProdRow.strShortDescription).append("/");
	 }
	 }
	 //    END ADD V5.39a
	 }
	 if(FINAL_ZERO   !=      lngCustomerPLIdentifierID)
	 {
	 custPLIdRow = customerProductLineIdentifierTable.cplirSearchByCustomerPLIdentifierIDandObsolete(lngCustomerPLIdentifierID, FINAL_ZERO); // Getting CustomerProductLineIdentifier for given CustomerProductlineID
	 }
	 if(null != custPLIdRow)
	 {
	 sbfEigenChappen.append(custPLIdRow.strCustomerPLIdentifierValue);                               // adding PL Identifier value to  strEigenChappen
	 }
	 strEigenChappen = sbfEigenChappen.toString();
	 //    BEGIN ADD V5.39a
	 if (null!=strPackage)
	 {
	 strEigenChappen=strPackage+"/"+strEigenChappen;
	 }
	 //    END ADD V5.39a
	 }
	 catch (Exception e)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 e.printStackTrace(System.out);
	 }
	 throw new AfeException("ERRCOM_00001" , e.getMessage());
	 }
	 return strEigenChappen;         // returning strEigenChappen
	 }
	 */

	//  END DELETE V 5.51a
	//  BEGIN ADD V5.52
	//  Remark : Modification for Incident 1518
	/**
	 * This function will Return the EigenShappen of the Given CustomerProductLineID.
	 * Internally it is delegating the call to RProduct.strGetEigenchappen.
	 * @param           CustomerProductLineID   CustomerProductLine ID
	 * @return          String containing the Eigenschappen
	 * @exception       Exception       when Unknown Error occurs
	 * @deprecated Use {@link #RProduct#strGetEigenschappen(long)} instead.
	 */
	protected final String strGetEigenschappen(long lCustomerProductlineID)
			throws Exception {
		return RProduct.strGetEigenschappen(lCustomerProductlineID);
	}

	//  END ADD V5.51a

	public Vector vctLoadProducts(Long CustomerProductLineID) throws Exception {
		String strDescription = ""; // Local Varaible Declaration
		Vector vctGetAllData = null; // internal local vector
		Vector vctInternal = null; // internal local vector
		SimpleDateFormat sdf = new SimpleDateFormat(string_dateFormat1); // Making the Object of the Date Formatter Class

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
		//	CustomerProductLineRow customerProductLineRow = null;

			customerProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
			CustomerProductLineRow customerProductLineRow = null;
			customerProductLineRow = customerProductLineTable
					.cplrSearchByCustProductLineIDandObsolete(
							CustomerProductLineID.longValue(), FINAL_ZERO);

			// Begin DEL v9.01d
			// CustomerProductRow customerProductRow = null;                                                                             // Initializing the Object Class for the CustomerProduct table
			// End DEL v9.01d
			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

			Vector vctobjCPInternal = null;

			vctobjCPInternal = customerProductTable
					.vctSearchByCustomerProductLineIDandObsolete(
							CustomerProductLineID.longValue(), FINAL_ZERO);
			vctGetAllData = new Vector(); // External Local Vector of ProductID, ActivationDate and DeActivationDate

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
			}

			//          Begin Modify : V3.39
			//                       if(null != vctobjCPInternal)
			if ((null != vctobjCPInternal) && (null != customerProductLineRow))

			//          End Modify : V3.39
			{

				// for each  record in the vector of CustomerProduct Records
				int ivctobjCPInternal = 0;

				ivctobjCPInternal = vctobjCPInternal.size();

				for (int iASCounter = FINAL_ZERO; iASCounter < ivctobjCPInternal; iASCounter++) {

					//                  Begin Add : V3.39
					if (!((String.valueOf(customerProductLineRow.lProductID))
							.equalsIgnoreCase(String
									.valueOf(((CustomerProductRow) (vctobjCPInternal
											.elementAt(iASCounter))).lProductID))))

					// if(!(customerProductLineRow.lProductID    ==      ((CustomerProductRow)(vctobjCPInternal.elementAt(iASCounter))).lProductID))
					//End Add : V3.39
					{
						ProductRow productRow = null; // Initializing the Object Class for the Vat table

						productRow = (ProductRow) productTable
								.prSearchByProductID(((CustomerProductRow) (vctobjCPInternal
										.elementAt(iASCounter))).lProductID);

						if (null != productRow) {
							strDescription = strFindDescription(productRow.lDescription1ID);
						}

						vctInternal = new Vector();
						vctInternal.addElement(Long.valueOf(
								((CustomerProductRow) (vctobjCPInternal
										.elementAt(iASCounter))).lProductID));

						Long DateToInsert = null;

						if (null != ((CustomerProductRow) (vctobjCPInternal
								.elementAt(iASCounter))).dtActivationDate) {
							vctInternal
									.addElement(sdf
											.format(((CustomerProductRow) (vctobjCPInternal
													.elementAt(iASCounter))).dtActivationDate));
						} else {
							vctInternal.addElement(DateToInsert);
						}

						if (null != ((CustomerProductRow) (vctobjCPInternal
								.elementAt(iASCounter))).dtDeactivationDate) {
							vctInternal
									.addElement(sdf
											.format(((CustomerProductRow) (vctobjCPInternal
													.elementAt(iASCounter))).dtDeactivationDate));
						} else {
							vctInternal.addElement(DateToInsert);
						}

						vctInternal.addElement(strDescription);
						vctGetAllData.addElement(vctInternal);
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return vctGetAllData;
	}

	/*
	 *       DESCRIPTION :   This function will tell whether the product is provisionable
	 *                                       or not
	 *
	 *       @param          :       Long CustomerProductLineID
	 *
	 *       @return         :       Boolean - True if the Product is Provisioned otherwise false
	 **/
	public boolean bCheckProvisioning(Long CustomerProductLineID)
			throws Exception {
		boolean bCheckProvisioning = false;
		Date dtActivationDate;
		int iObsolete;

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// CustomerProductLineRow customerProductLineRow = null;
			// End DEL v9.01d
			customerProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session

			Vector vctobjCPLInternal = null;

			vctobjCPLInternal = customerProductLineTable
					.vctSearchByCustProductLineIDandiObsolete(
							CustomerProductLineID.longValue(), FINAL_ZERO);

			if (null != vctobjCPLInternal) {
				int ivctobjCPLInternal = 0;

				ivctobjCPLInternal = vctobjCPLInternal.size();

				for (int iCPLCounter = 0; iCPLCounter < ivctobjCPLInternal; iCPLCounter++) {
					dtActivationDate = ((CustomerProductLineRow) (vctobjCPLInternal
							.elementAt(iCPLCounter))).dtActivationDate;
					iObsolete = ((CustomerProductLineRow) (vctobjCPLInternal
							.elementAt(iCPLCounter))).iObsolete;

					Date dtdate = new Date();

					if (null != dtActivationDate) {
						if (dtdate.before(dtActivationDate)
								&& (iObsolete == FINAL_ZERO)) {
							bCheckProvisioning = true;
						} else {
							bCheckProvisioning = false;
						} // end of the if else if loop
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bCheckProvisioning;
	}

	/*
	 *       DESCRIPTION :   This function will will get all the reason and their id from the session
	 *
	 *
	 *       @param          :       none
	 *
	 *       @return         :       Vector - Returns a Vector
	 **/
	public Vector vctDeleteReason() throws Exception {
		Vector vctGetAllReasonData = null; // vctGetAllData vector contains set of vector having the data as sepcified in the above comments
		Vector vctInternal = null; // internal local vector

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			vctGetAllReasonData = new Vector(); // External Local Vector

			// Begin DEL v9.01d
			// ReasonTypeRow reasonTypeRow = null;
			// End DEL v9.01d
			if (null == reasonTypeTable) {
				reasonTypeTable = (ReasonType) teleSessionMgr
						.getMasterTable("REASONTYPE"); // Getting the Customer table from the session
			}

			Vector vctObjRTInternal = null;

			vctObjRTInternal = reasonTypeTable
					.vctSearchByReasonTypeIDandObsolete(GAfeDescription
							.lGetTypeId("REASONTYPE_ORDERCANCEL"), FINAL_ZERO);

			if (null != vctObjRTInternal) {
				int ivctObjRTInternal = 0;

				ivctObjRTInternal = vctObjRTInternal.size();

				for (int iRTCounter = 0; iRTCounter < ivctObjRTInternal; iRTCounter++) {

					// Begin DEL v9.01d
					// ReasonDescriptionRow ReasonDescriptionRow = null;
					// End DEL v9.01d
					if (null == reasonDescriptionTable) {
						reasonDescriptionTable = (ReasonDescription) teleSessionMgr
								.getMasterTable("REASONDESCRIPTION"); // Getting the Customer table from the session
					}

					Vector vctObjRdInternal = null;

					// Begin Modify :
					// vctObjRdInternal          =   reasonDescriptionTable.vctSearchByReasonTypeID(((ReasonTypeRow)(vctObjRTInternal.elementAt(iRTCounter))).lReasonTypeID);
					vctObjRdInternal = reasonDescriptionTable
							.vctSearchByReasonTypeIDandObsolete(
									((ReasonTypeRow) (vctObjRTInternal
											.elementAt(iRTCounter))).lReasonTypeID,
									0);

					int ivctObjRdInternal = 0;
					String[] arrReasonDesc;
					String strReasonDesc = null;

					if (null != vctObjRdInternal) {
						ivctObjRdInternal = vctObjRdInternal.size();
						arrReasonDesc = new String[ivctObjRdInternal];

						for (int iStart = 0; iStart < ivctObjRdInternal; iStart++) {
							arrReasonDesc[iStart] = (String) (((ReasonDescriptionRow) vctObjRdInternal
									.elementAt(iStart)).strReasonDescription);
						}

						Arrays.sort(arrReasonDesc,
								String.CASE_INSENSITIVE_ORDER);

						for (int iEndCntr = 0; iEndCntr < arrReasonDesc.length; iEndCntr++) {
							strReasonDesc = (String) arrReasonDesc[iEndCntr];

							for (int iRdCounter = 0; iRdCounter < ivctObjRdInternal; iRdCounter++) {
								if (strReasonDesc
										.equalsIgnoreCase(((ReasonDescriptionRow) vctObjRdInternal
												.elementAt(iRdCounter)).strReasonDescription)) {

									// BEGIN ADD V7.10a
									if (((ReasonDescriptionRow) (vctObjRdInternal
											.elementAt(iRdCounter))).lReasonDescriptionID != GAfeDescription.TWOATVONONESAP_CANCEL) {

										// END ADD V7.10a
										vctInternal = new Vector();
										GLogger.chkpt("REasons for cancel");
										vctInternal
												.addElement(Long.valueOf(
														((ReasonDescriptionRow) (vctObjRdInternal
																.elementAt(iRdCounter))).lReasonTypeID));
										vctInternal
												.addElement(Long.valueOf(
														((ReasonDescriptionRow) (vctObjRdInternal
																.elementAt(iRdCounter))).lReasonDescriptionID));
										vctInternal
												.addElement((String) ((ReasonDescriptionRow) (vctObjRdInternal
														.elementAt(iRdCounter))).strReasonDescription);
										vctGetAllReasonData
												.addElement(vctInternal);
									}

									break;
								}
							} // end of the for loop
						}
					} // end of the if loop

					//                  End Modify :
				} // end of the for loop
			} // end of the if loop
		} catch (Exception ex) {
			//ex.printStackTrace(System.out);
			GLogger.logException(ex);
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return vctGetAllReasonData;
	}

	//  BEGIN DELETE V 5.43e
	//  Modification for NP6 Related Changes
	//  public int iDeleteCustProduct(Long lCustomerProductLineID, Long lReasonDescriptionID, Long lCustomerID) throws Exception
	//  END DELETE 5.43e
	//  BEGIN ADD V 5.43e

	/**
	 * This function will Delete the Customer PL or Product from the Grid and From the Session .
	 *
	 * @param  lCustomerProductLineID Line id for the line which is deleted from product overview screen
	 * @param  lReasonDescriptionID       Reason Description id for the reason selected from the screen
	 * @param  lCustomerID                        Customer ID
	 * @param  strOriginalOwner           Original owner value for telephone number , for internet value will be null
	 * @param  iNPChange                          If NP Product then Flag value for NP Related changes
	 * @return iStatus                            Returns 1 when successfull otherwise 0.
	 * @throws Exception
	 */
	public int iDeleteCustProduct(Long lCustomerProductLineID,
			Long lReasonDescriptionID, Long lCustomerID,
			String strOriginalOwner, int iNPChange) throws Exception

	//  END ADD V5.43e
	{
		int iStatus = 0;
		int iFlag = 0;
		int iCounter = 0;
		int iCounter1 = 0;
		int iCounter2 = 0;
		Vector vctCustApp2CustProd = null;
		Vector vctCustomerProduct = null;
		Vector vctCustomerProductParameter = null;
		Vector vctCustomerProductLineIdentifier = null;
		Vector vctCustomerProductStatus = null;
		Vector vctCustomerChargeType = null;
		Vector vctProcessLink = null;

		// Begin DEL v9.01d
		// Vector vctProcess = null;
		// Vector vctOrder = null;
		// End DEL v9.01d
		ObjectTypeRow objTypeRow = null;
		CustomerProductRow custProdRow = null;
		CustomerProductLineIdentifierRow custPLIdenRow = null;
		CustomerProductStatusRow custProdStatusRow = null;
		CustomerAppointmentRow custAppRow = null;
		CustomerChargeTypeRow custChargeTypeRow = null;
		CustomerProductParameterRow custProdParamRow = null;
		ProcessRow processRow = null;
		ProcessStatusRow processStatusRow = null;
		ProcessLinkRow processLinkRow = null;
		OrderRow orderRow = null;
		ApplSaveAction applSaveActionTable = null;
		ApplSaveActionRow applSaveActionRow = null;
		LAppointment lAppointment = new LAppointment(teleSessionMgr);
		long lCustomerAppointmentIDTemp = 0;

		// begin add : v 5.72a
		Vector vctMGMLines = null;

		// end add : v 5.72a
		int iCallStatus = 0;
		int iAppointmentExist = 0;
		String strNumber = "";
		String strDN = "";
		long lMainOrderID = 0;

		// BEGIN ADD V6.20b
		final char cAdd = 'A';
		final char cDelete = 'D';
		HashMap hmHouseholdDetails = null;
		BHouseholdDetails bHouseholdDetails = null;
		String strCPLIdValue = null;

		// BEGIN ADD V7.05d
		HashMap hsmSelectedModem = null;

		// END ADD V7.05d
		// END ADD V6.20b

		// BEGIN ADD V7.06e
		IAFEOUT objIafeOut = null;
		BCustomerLoginDetails objCustLogin = null;

		// END ADD V7.06e
		// BEGIN ADD V7.07d
		HashMap hmSelfInstallStatus = null;

		// END ADD V7.07d

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			applSaveActionTable = (ApplSaveAction) teleSessionMgr
					.getTable(string_APPLSAVEACTION);

			CustomerProductLineRow customerProductLineRow = null;

			customerProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT); // Getting the Customer table from the session
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE); // Getting the CUSTOMERCHARGETYPE table from the session
			customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTPARAMETER); // Getting the Customer table from the session
			customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the Customer table from the session
			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(string_PROCESSLINK); // Getting the Customer table from the session
			processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the Customer table from the session
			processStatusTable = (ProcessStatus) teleSessionMgr
					.getTable(string_PROCESSSTATUS); // Getting the Customer table from the session
			orderTable = (Order) teleSessionMgr.getTable(string_ORDER); // Getting the Customer table from the session

			if (null == objectTypeTable) {
				objectTypeTable = (ObjectType) teleSessionMgr
						.getMasterTable(string_OBJECTTYPE); // Getting the Customer table from the session
			}

			customerApp2CustomerProductLTable = (CustomerApp2CustomerProductL) teleSessionMgr
					.getTable("CUSTOMERAPP2CUSTOMERPRODUCTL"); // Getting the Customer table from the session
			customerAppointmentTable = (CustomerAppointment) teleSessionMgr
					.getTable(string_CUSTOMERAPPOINTMENT);
			objTypeRow = (ObjectTypeRow) objectTypeTable
					.otrSearchByObjectName(string_CUSTOMERPRODUCTLINE);
			vctCustomerProduct = customerProductTable
					.vctSearchByCustProductLineID(lCustomerProductLineID
							.longValue());
			vctCustomerProductLineIdentifier = customerProductLineIdentifierTable
					.vctSearchByCustProdLineIDandObsolete(
							lCustomerProductLineID.longValue(), FINAL_ZERO);
			vctCustomerChargeType = customerChargeTypeTable
					.vctSearchByCustomerProductLineIDandObsolete(
							lCustomerProductLineID.longValue(), FINAL_ZERO);

			if (null != objTypeRow) {
				vctProcessLink = processLinkTable
						.vctSearchByObjectIDandObjectTypeIDandObsolete(
								lCustomerProductLineID.longValue(),
								objTypeRow.lObjectTypeID, FINAL_ZERO);
			}

			// Pending : check for obsolete
			custPLIdenRow = customerProductLineIdentifierTable
					.cplirSearchByCustProductLineID(lCustomerProductLineID
							.longValue(), FINAL_ZERO); // Getting CustomerProductLineIdentifier for given CustomerProductlineID

			if (null != custPLIdenRow) {
				strNumber = custPLIdenRow.strCustomerPLIdentifierValue; // adding PL Identifier value to  strEigenChappen
			}

			customerProductLineRow = customerProductLineTable
					.cplrSearchByCustProductLineID(lCustomerProductLineID
							.longValue());

			if (null != customerApp2CustomerProductLTable) {
				vctCustApp2CustProd = customerApp2CustomerProductLTable
						.vctSearchByCustProdLineID(lCustomerProductLineID
								.longValue());
			}

			if ((null != vctCustApp2CustProd)
					&& (vctCustApp2CustProd.size() != FINAL_ZERO)) {
				int ivctCustApp2CustProd = 0;

				ivctCustApp2CustProd = vctCustApp2CustProd.size();

				for (iCounter = FINAL_ZERO; iCounter < ivctCustApp2CustProd; iCounter++) {
					custAppRow = (CustomerAppointmentRow) customerAppointmentTable
							.carSearchByCustApptIDandObsolete(
									((CustomerApp2CustomerProductLRow) (vctCustApp2CustProd
											.elementAt(iCounter))).lCustomerAppointmentID,
									FINAL_ZERO);

					if ((custAppRow != null)
							&& (custAppRow.lAppointmentTypeID == GAfeDescription
									.lGetTypeId("APPOINTMENTTYPE_INSTALLATION"))) {
						iAppointmentExist = FINAL_ONE;
						lCustomerAppointmentIDTemp = custAppRow.lCustomerAppointmentID;

						break;
					}
				}
			}

			if ((null == customerProductLineRow)
					|| (null == vctCustomerProductLineIdentifier)
					|| (null == vctCustomerChargeType)
					|| (null == vctProcessLink)) {
				iStatus = FINAL_ZERO;
			} else {

				// BEGIN DELETE V.6.07h
				// if (customerProductLineRow.lProductID == GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE")) {
				// END DELETE V. 6.07h
				// BEGIN ADD V.6.07h
				// Begin Add v8.00a
				//Begin Mod v9.02a  -- Added condition for FULL Mobile
				if ((customerProductLineRow.lProductID == GAfeDescription
						.lGetTypeId(string_PRODUCT_TELEPHONE))
						|| (customerProductLineRow.lProductID == GAfeDescription
								.lGetTypeId(string_PRODUCT_VON))
						|| (customerProductLineRow.lProductID == GAfeDescription
								.lGetTypeId(string_PRODUCT_MOBILE))
						|| (customerProductLineRow.lProductID == GAfeDescription.PRODUCT_FULLMOBILE)) {
					//End Mod v9.02a
					// END Addv 8.00a
					// END ADD V. 6.07h
					iFlag = lAppointment.iCheckNP(lCustomerProductLineID
							.longValue());

					if ((iFlag == FINAL_ONE)
							&& (iAppointmentExist == FINAL_ONE)) {

						// BEGIN DELETE V 5.43e
						// NOW THIS WILL done by  FROM MANAGER
						// iCallStatus = iChangeNPcase(((CustomerApp2CustomerProductLRow)(vctCustApp2CustProd.elementAt(FINAL_ZERO))).lCustomerAppointmentID, lCustomerProductLineID.longValue(),strNumber,0);
						// END DELETE V 5.43e
						// BEGIN ADD V 5.43e
						// assign the value of input fag to callstatus
						iCallStatus = iNPChange;

						// END ADD V 5.43e
					}

					// Begin Add v8.00a
					//Begin Mod v9.02a  -- Added condition for FULL Mobile
					if (customerProductLineRow.lProductID == GAfeDescription
							.lGetTypeId(string_PRODUCT_MOBILE)
							|| customerProductLineRow.lProductID == GAfeDescription.PRODUCT_FULLMOBILE) {
						teleSessionMgr.putValue(GAfeConstants.DELETE_MOBILE,
								lCustomerProductLineID);
					}
					//End Mod v9.02a
					// End Add v8.00a
					applSaveActionTable = (ApplSaveAction) teleSessionMgr
							.getTable(string_APPLSAVEACTION);
					applSaveActionRow = new ApplSaveActionRow();
					applSaveActionRow.arrArguments = new Class[3];
					applSaveActionRow.arrParams = new Object[3];

					// Setting the variables of record to entered in Appl Save container
					applSaveActionRow.iAction = Record.INSERT;
					applSaveActionRow.strType = string_TELNO;
					applSaveActionRow.strValue = " ";
					applSaveActionRow.strSystem = string_IAFEOUT;
					applSaveActionRow.strMethodName = string_blnDeletePhoneLine; // the name of the IAFEOUT Method which needs to be called
					applSaveActionRow.arrArguments[0] = String.class;
					applSaveActionRow.arrArguments[1] = Character.class;
					applSaveActionRow.arrArguments[2] = String.class;
					strDN = "";
					strDN = strNumber;

					if ((null != strNumber) && (10 > (strNumber.length()))) {
						for (int iCnt = 0; iCnt < (10 - strNumber.length()); iCnt++) {
							strDN = string_ZERO + strDN;
						}
					}

					GLogger.chkpt("LProduct strDN Value-------: " + strDN);
					applSaveActionRow.arrParams[0] = strNumber;
					applSaveActionRow.arrParams[1] = Character.valueOf('N');
					applSaveActionRow.arrParams[2] = bSession.strUserName;

					// adding the Newly created row to the ApplSaveaction Container/table
					applSaveActionTable.addRecord(applSaveActionRow);

					// BEGIN DELETE V 5.43e
					// TO MODIFY CONDITION FOR UNRESERVE NUMBER
					// if(iFlag == FINAL_ZERO)
					// END DELETE V 5.43e
					// BEGIN DELETE V 5.46a

					/*
					 * //BEGIN ADD V 5.43e
					 * //IF ORIGINAL OWNER IS TELE THEN ONLY GO FOR UNRESERVE DON'T GO FOR REACTIVEER PORTEER
					 * if((iFlag == FINAL_ZERO) &&
					 *   ((GAfeConstants.TELE).equalsIgnoreCase(strOriginalOwner)))
					 *   //END ADD V 5.43e
					 */

					// END DELETE V 5.46a
					// BEGIN ADD V 5.46a
					GLogger.chkpt("Lproduct strOriginalOwner-------: "
							+ strOriginalOwner);

					if ((iFlag == FINAL_ZERO)
							&& (null != strOriginalOwner)
							&& ((GAfeConstants.TELE)
									.equalsIgnoreCase(strOriginalOwner)))

					// END ADD V 5.46a
					{
						applSaveActionRow = new ApplSaveActionRow();
						applSaveActionRow.arrArguments = new Class[2];
						applSaveActionRow.arrParams = new Object[2];
						applSaveActionRow.iAction = Record.INSERT;
						applSaveActionRow.strType = string_TELNO;
						applSaveActionRow.strValue = " ";
						applSaveActionRow.strSystem = string_IAFEOUT;
						applSaveActionRow.strMethodName = string_strUnreserveTelNo; // the name of the IAFEOUT Method which needs to be called
						applSaveActionRow.arrArguments[0] = String.class;
						applSaveActionRow.arrArguments[1] = String.class;
						applSaveActionRow.arrParams[0] = strDN;
						applSaveActionRow.arrParams[1] = strDN;
						applSaveActionTable.addRecord(applSaveActionRow);
					}

					teleSessionMgr.putTable(string_APPLSAVEACTION,
							applSaveActionTable);
					iCallStatus = FINAL_ONE;
				} else if (customerProductLineRow.lProductID == GAfeDescription
						.lGetTypeId(string_PRODUCT_CPS)) {
					BProductDetailProperty bProductDetailPropertyTemp = new BProductDetailProperty();

					bProductDetailPropertyTemp.lCustomerProductLineID = lCustomerProductLineID;
					iCallStatus = iCancelLOA(bProductDetailPropertyTemp);
					iCallStatus = FINAL_ONE;
				}

				// BEGIN DELETE V. 6.07h
				// else if  (customerProductLineRow.lProductID == GAfeDescription.lGetTypeId("PRODUCT_INTERNET")) {
				// END DELETE V. 6.07h

				// BEGIN ADD V. 6.07h
				if ((customerProductLineRow.lProductID == GAfeDescription
						.lGetTypeId(string_PRODUCT_INTERNET))
						|| (customerProductLineRow.lProductID == GAfeDescription
								.lGetTypeId(string_PRODUCT_VON))) {

					// END ADD V. 6.07h
					MInternet mInternet = new MInternet(teleSessionMgr);
					BInternet bInternet = new BInternet();
					String strLoginId;

					mInternet
							.iDeleteCustomerProductLineInternet(lCustomerProductLineID
									.longValue());
					bInternet = objInternetDetail(lCustomerProductLineID
							.longValue(), customerProductLineRow.lProductID,
							lCustomerID.longValue());

					int ivctInternetDetail = 0;

					ivctInternetDetail = bInternet.vctInternetDetail.size();
					GLogger.chkpt("Lproduct ivctInternetDetail-------: "
							+ ivctInternetDetail);

					for (int iIndex = 0; iIndex < ivctInternetDetail; iIndex++) {
						strLoginId = (String) ((Vector) bInternet.vctInternetDetail
								.elementAt(iIndex)).elementAt(0);
						GLogger.chkpt("Lproduct strLoginId-------: "
								+ strLoginId);

						// Begin Add V. 6.07n
						if (customerProductLineRow.lProductID == GAfeDescription
								.lGetTypeId(string_PRODUCT_VON)) {
							mInternet.iReleaseVONLogin(strLoginId);

							// BEGIN ADD V7.05a
							// Delete the call to create CM for VON Box if line is deleted
							LProduct_ext objLProduct_Ext = new LProduct_ext(
									teleSessionMgr, bSession);

							objLProduct_Ext.deleteCMInApplSave("CPLID",
									lCustomerProductLineID.longValue(),
									bSession.lCustomerId, string_objCreateDocument);

							// END ADD V7.05a
						} else {

							// End Add V. 6.07n
							mInternet.iReleaseLogin(strLoginId, 'L');
						}
					}

					GLogger.chkpt("Lproduct out of loop-: ");
					iCallStatus = FINAL_ONE;
				}

				// BEGIN ADD V5.71a
				else if (customerProductLineRow.lProductID == GAfeDescription.PRODUCT_ANALOGTV) {
					iCallStatus = FINAL_ONE;
				}

				// END ADD V5.71a
				// BEGIN ADD V6.20b
				else if (customerProductLineRow.lProductID == GAfeDescription.PRODUCT_DIGITALTV) {
					GLogger.debug(CLASS_NAME, METHOD_iDeleteCustProduct,
							"Entered for Digital TV");

					int iPairingComplete = -1;

					// BEGIN ADD V7.06l
					if (null != teleSessionMgr
							.getValue(GAfeConstants.BOXTAB_HASHMAP)) {
						HashMap hmBT = (HashMap) teleSessionMgr
								.getValue(GAfeConstants.BOXTAB_HASHMAP);

						GLogger.chkpt("HashMap Size:hmBT:" + hmBT.size());
						GLogger.chkpt("HashMap hmBT:" + hmBT);

						String strCPLIdenValue = strGetMainCPLIdenValueFromCPLId(customerProductLineRow.lCustomerProductLineID);

						GLogger.chkpt("strCPLIdenValue" + strCPLIdenValue);

						if (null != hmBT.get(strCPLIdenValue)) {
							hmBT.remove(strCPLIdenValue);
						}

						GLogger.chkpt("HashMap Size" + hmBT.size());
						teleSessionMgr.putValue(GAfeConstants.BOXTAB_HASHMAP,
								hmBT);
					}

					// END ADD V7.06l

					// if Alles opslaan is presses then check for Pairing Order status else remove the object from hashmap
					if (!(Record.INSERT == customerProductLineRow.iStatusInDB)) {

						// BEGIN Add V7.06m
						GLogger.chkpt("uDeInstallSTBProduct:"
								+ bSession.strUserName);

						// IAFEOUT.uDeInstallSTBProduct(customerProductLineRow.lCustomerProductLineID,bSession.strUserName);
						applSaveActionTable = (ApplSaveAction) teleSessionMgr
								.getTable(string_APPLSAVEACTION);
						applSaveActionRow = new ApplSaveActionRow();
						applSaveActionRow.arrArguments = new Class[2];
						applSaveActionRow.arrParams = new Object[2];

						// Setting the variables of record to entered in Appl Save container
						applSaveActionRow.iAction = Record.INSERT;
						applSaveActionRow.strType = "CPLI";
						applSaveActionRow.strValue = " ";
						applSaveActionRow.strSystem = string_IAFEOUT;

						// the name of the IAFEOUT Method which needs to be called
						applSaveActionRow.strMethodName = "uDeInstallSTBProduct";
						applSaveActionRow.arrArguments[0] = (Class) Long.class
								.getField("TYPE").get(null);
						applSaveActionRow.arrArguments[1] = String.class;

						// Set the customerproductlineid
						applSaveActionRow.arrParams[0] = Long.valueOf(
								customerProductLineRow.lCustomerProductLineID);
						applSaveActionRow.arrParams[1] = bSession.strUserName;

						// adding the Newly created row to the ApplSaveaction Container/table
						applSaveActionTable.addRecord(applSaveActionRow);
						GLogger.debug(CLASS_NAME, METHOD_iDeleteCustProduct,
								"Added entry for uDeInstallSTBProduct");
						teleSessionMgr.putTable(string_APPLSAVEACTION,
								applSaveActionTable);
						GLogger.debug(CLASS_NAME, METHOD_iDeleteCustProduct,
								"uDeInstallSTBProduct done");

						// END  Add V7.06m

						// get the Idenvalue from session
						iPairingComplete = LProduct_ext
								.iCheckPairingOrderStatus(customerProductLineRow.lCustomerProductLineID);
						GLogger.debug(CLASS_NAME, METHOD_iDeleteCustProduct,
								"Pairing complete :" + iPairingComplete);

						if (1 == iPairingComplete) {
							applSaveActionTable = (ApplSaveAction) teleSessionMgr
									.getTable(string_APPLSAVEACTION);
							applSaveActionRow = new ApplSaveActionRow();
							applSaveActionRow.arrArguments = new Class[3];
							applSaveActionRow.arrParams = new Object[3];

							// Setting the variables of record to entered in Appl Save container
							applSaveActionRow.iAction = Record.INSERT;
							applSaveActionRow.strType = "CPLI";
							applSaveActionRow.strValue = " ";
							applSaveActionRow.strSystem = string_IAFEOUT;

							// the name of the IAFEOUT Method which needs to be called
							applSaveActionRow.strMethodName = "UnpairSmartcardForCancelBeforeProv";
							applSaveActionRow.arrArguments[0] = (Class) Long.class
									.getField("TYPE").get(null);
							applSaveActionRow.arrArguments[1] = String.class;
							applSaveActionRow.arrArguments[2] = String.class;

							// Set the cpl identifier
							applSaveActionRow.arrParams[0] = Long.valueOf(
									bSession.lCustomerId);
							applSaveActionRow.arrParams[1] = strNumber;
							applSaveActionRow.arrParams[2] = bSession.strUserName;

							// adding the Newly created row to the ApplSaveaction Container/table
							applSaveActionTable.addRecord(applSaveActionRow);
							GLogger.debug(CLASS_NAME,
									METHOD_iDeleteCustProduct,
									"Added entry for Unpairing Smart card");
							teleSessionMgr.putTable(string_APPLSAVEACTION,
									applSaveActionTable);
						}

						String strCPLIdenValue = strGetMainCPLIdenValueFromCPLId(customerProductLineRow.lCustomerProductLineID);

						GLogger.chkpt("strCPLIdenValue" + strCPLIdenValue);

						if (null != teleSessionMgr
								.getValue(GAfeConstants.Smartcard_HashMap)) {
							HashMap hmSC = (HashMap) teleSessionMgr
									.getValue(GAfeConstants.Smartcard_HashMap);

							GLogger.chkpt("HashMap Size" + hmSC.size());

							if (null != hmSC.get(strCPLIdenValue)) {
								hmSC.remove(strCPLIdenValue);
							}

							GLogger.chkpt("HashMap Size" + hmSC.size());
							teleSessionMgr.putValue(
									GAfeConstants.Smartcard_HashMap, hmSC);
						}
					}

					GLogger.debug(CLASS_NAME, METHOD_iDeleteCustProduct,
							"Entered Delete HH for Digital TV");

					if (GAfeDescription.LINETYPE_IDTV == ProductUtils
							.iIsDTVLine(
									customerProductLineRow.lCustomerProductLineID,
									true)) {
						if (null == teleSessionMgr
								.getValue(GAfeConstants.HouseHold_HashMap)) {
							hmHouseholdDetails = new HashMap(1);
						} else {
							hmHouseholdDetails = (HashMap) teleSessionMgr
									.getValue(GAfeConstants.HouseHold_HashMap);
						}

						GLogger.debug(CLASS_NAME, METHOD_iDeleteCustProduct,
								"hmHouseholdDetails SIZE:"
										+ hmHouseholdDetails.size());
						GLogger
								.chkpt("CPLId Value"
										+ customerProductLineRow.lCustomerProductLineID);
						strCPLIdValue = strGetMainCPLIdenValueFromCPLId(customerProductLineRow.lCustomerProductLineID);
						GLogger.debug(CLASS_NAME, METHOD_iDeleteCustProduct,
								"strCPLIdValue :" + strCPLIdValue);

						if (null == hmHouseholdDetails.get(strCPLIdValue)) {

							// call NSIC to get HH details
							long lHHId = InstallationAddressUtils
									.lGetHHIDFromCPLId(customerProductLineRow.lCustomerProductLineID);

							GLogger.debug(CLASS_NAME, "Delete Product", "lHHId"
									+ lHHId);
							GLogger.debug(CLASS_NAME, "Delete Product",
									"Getting HHinfo From NSIC");
							bHouseholdDetails = InstallationDelegate
									.objGetHouseholdDetails(lHHId);
							GLogger.debug(CLASS_NAME, "Delete Product",
									"HHinfo From NSIC Successfully retrieved"
											+ bHouseholdDetails);
							//Begin For PR 234091
							if (lHHId > 0) {
							GLogger.chkpt("Deleting HH data from CDM");
							InstallationDelegate.linkCPLIdtoHHId(1, customerProductLineRow.lCustomerProductLineID, lHHId, bSession.strUserName);
							GLogger.chkpt("HH data deleted from CDM");
							               }
							//End For PR 234091

							// hmHouseHold.put(strCplIdentifierValue,bHouseholdDetails);
						} else {
							bHouseholdDetails = (BHouseholdDetails) hmHouseholdDetails
									.get(strCPLIdValue);
						}

						GLogger.chkpt("HashMap size before Delete Product"
								+ hmHouseholdDetails.size());

						if (null != bHouseholdDetails) {
							GLogger.chkpt("HHObject" + bHouseholdDetails);

							if (cAdd == bHouseholdDetails.getcHouseholdFlag()) {
								GLogger
										.chkpt("Deleting HH from container for CPLIdenValue"
												+ strCPLIdValue);
								hmHouseholdDetails.remove(strCPLIdValue);
							} else {
								GLogger
										.chkpt("Marking HH for Delete for CPLIdenValue"
												+ strCPLIdValue);
								bHouseholdDetails.setcHouseholdFlag(cDelete);
								GLogger.chkpt("HHobject put in HashMap"
										+ bHouseholdDetails);
								hmHouseholdDetails.put(strCPLIdValue,
										bHouseholdDetails);
							}
						}

						GLogger.chkpt("HashMap size after Delete Product"
								+ hmHouseholdDetails.size());
						teleSessionMgr.putValue(
								GAfeConstants.HouseHold_HashMap,
								hmHouseholdDetails);
					}

					iCallStatus = FINAL_ONE;
				}

				// END ADD V6.20b
				// BEGIN ADD V5.96p
				else if (customerProductLineRow.lProductID == GAfeDescription.PRODUCT_CABLEACCESS) {
					iCallStatus = FINAL_ONE;
				}

				// End Add V5.96p

				// Begin Add 7.06b
				//Begin Mod v9.02a  -- Added condition for FULL Mobile
				if (customerProductLineRow.lProductID == GAfeDescription.PRODUCT_MOBILE
						|| customerProductLineRow.lProductID == GAfeDescription.PRODUCT_FULLMOBILE) {
					iCallStatus = FINAL_ONE;
				}
				//End Mod v9.02a
				// End Add 7.06b
				if (customerProductLineRow.lProductID == GAfeDescription.PRODUCT_TTV)
				{
					if (null != teleSessionMgr.getValue(GAfeConstants.HM_TTVSMARTCARD))
					{
						HashMap smartcardMap = (HashMap) teleSessionMgr.getValue(GAfeConstants.HM_TTVSMARTCARD);
						GLogger.chkpt("CPLId Value"+ customerProductLineRow.lCustomerProductLineID);
						strCPLIdValue = strGetMainCPLIdenValueFromCPLId(customerProductLineRow.lCustomerProductLineID,GAfeDescription.PRODUCTLINEIDENTIFIERTYPE_TTV);
						GLogger.debug(CLASS_NAME, METHOD_iDeleteCustProduct,"strCPLIdValue :" + strCPLIdValue);
						if (null != smartcardMap.get(strCPLIdValue))
						{
							smartcardMap.remove(strCPLIdValue);
							teleSessionMgr.putValue(GAfeConstants.HM_TTVSMARTCARD, smartcardMap);
						}
					}
					iCallStatus = FINAL_ONE;
				}

				if (iCallStatus == FINAL_ONE) {
					if (customerProductLineRow.iStatusInDB == Record.INSERT) {
						customerProductLineTable
								.deleteRecord(lCustomerProductLineID
										.longValue());

						Vector vctLinkRole2CustomerProduct = null;
						CustomerLR2CustomerProductRow customerLR2CustomerProductRow = null;

						customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
								.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session
						vctLinkRole2CustomerProduct = customerLR2CustomerProductTable
								.vctSearchByCustomerProductLineID(lCustomerProductLineID
										.longValue());

						if (null != vctLinkRole2CustomerProduct) {
							for (int iCounterTemp = 0; iCounterTemp < vctLinkRole2CustomerProduct
									.size(); iCounterTemp++) {
								customerLR2CustomerProductRow = (CustomerLR2CustomerProductRow) vctLinkRole2CustomerProduct
										.elementAt(iCounterTemp);

								if (null != customerLR2CustomerProductRow) {
									customerLR2CustomerProductTable
											.deleteRecord(
													customerLR2CustomerProductRow.lCustomerLinkRoleID,
													customerLR2CustomerProductRow.lCustomerProductLineID);
								}
							}

							teleSessionMgr.putTable(
									string_CUSTOMERLR2CUSTOMERPRODUCT,
									customerLR2CustomerProductTable); // Getting the Customer table from the session
						}
					} else {
						Date dtdate = new Date();

						// BEGIN ADD : v 5.72a
						if (customerProductLineRow.lMgmCode > 0) {
							vctMGMLines = (Vector) teleSessionMgr
									.getValue(GAfeConstants.MGM_DELETED_LINES);

							if (null == vctMGMLines) {
								vctMGMLines = new Vector();
							}

							vctMGMLines
									.addElement(Long.valueOf(
											customerProductLineRow.lCustomerProductLineID));
							teleSessionMgr.putValue(
									GAfeConstants.MGM_DELETED_LINES,
									vctMGMLines);
						}

						// BEGIN ADD : v 5.72a
						customerProductLineRow.iObsolete = FINAL_ONE;
						customerProductLineRow.strModificationUser = bSession.strUserName;
						customerProductLineRow.dtModificationDate = tstmGetSqlTimestamp(dtdate);

						if (customerProductLineRow.iStatusInDB == Record.VIEW) {
							customerProductLineRow.iStatusInDB = Record.UPDATE;
						}

						if (customerProductLineRow.iStatusInDB == Record.UPDATE) {
							customerProductLineRow.iStatusInDB = Record.UPDATE;
						}

						customerProductLineTable
								.updateRecord(customerProductLineRow);

						// BEGIN ADD V 5.96u
						vDeleteLineLevelPromotion(lCustomerProductLineID
								.longValue());

						// END ADD V 5.96u
					}

					// 4.10a   Begin Add
					// BEGIN DELETE V 5.96u
					// vDeleteLineLevelPromotion(lCustomerProductLineID.longValue());
					// END DELETE V 5.96u
					// 4.10a   End Add
					int iCanBeDeleted = 0;

					// vctCustApp2CustProd = null;
					// CustomerApp2CustomerProductLTable =       (customerApp2CustomerProductL) teleSessionMgr.getTable("CUSTOMERAPP2CUSTOMERPRODUCTL");
					vctCustApp2CustProd = customerApp2CustomerProductLTable
							.vctSearchByCustApptID(lCustomerAppointmentIDTemp);

					if ((null != vctCustApp2CustProd)
							&& (vctCustApp2CustProd.size() == FINAL_ONE)) {
						iCanBeDeleted = FINAL_ONE;
					} else if ((null != vctCustApp2CustProd)
							&& (vctCustApp2CustProd.size() > FINAL_ONE)) {
						iCanBeDeleted = FINAL_ONE;

						for (int iCountProduct = 0; iCountProduct < vctCustApp2CustProd
								.size(); iCountProduct++) {

							// BEGIN DELETE V4.10d
							// if(GAfePropertyLoader.DEBUG)
							// System.out.println(" Product Line for this Appointment "+((CustomerApp2CustomerProductLRow)vctCustApp2CustProd.elementAt(iCountProduct)).lCustomerProductLineID);
							// END DELETE V4.10d
							if (((CustomerApp2CustomerProductLRow) vctCustApp2CustProd
									.elementAt(iCountProduct)).lCustomerProductLineID != lCustomerProductLineID
									.longValue()) {
								customerProductLineRow = customerProductLineTable
										.cplrSearchByCustProductLineID(((CustomerApp2CustomerProductLRow) vctCustApp2CustProd
												.elementAt(iCountProduct)).lCustomerProductLineID);

								if ((null != customerProductLineRow)
										&& (customerProductLineRow.iObsolete == FINAL_ZERO)) {

									// BEGIN DELETE V4.10d
									// if(GAfePropertyLoader.DEBUG)
									// System.out.println(" Appointnet can not be Deleted");
									// END DELETE V4.10d
									iCanBeDeleted = FINAL_ZERO;

									break;
								}
							}
						}
					}

					// BEGIN ADD V5.46
					// Saving a boolean containing the value that the appointment has not been saved even once
					boolean bAppointment_NotSavedOnce = false;

					// END ADD V5.46

					if (iCanBeDeleted == FINAL_ONE) {
						custAppRow = (CustomerAppointmentRow) customerAppointmentTable
								.carSearchByCustApptIDandObsolete(
										lCustomerAppointmentIDTemp, FINAL_ZERO);

						if ((null != custAppRow)
								&& (custAppRow.iStatusInDB == Record.INSERT)) {
							customerAppointmentTable
									.deleteRecord(custAppRow.lCustomerAppointmentID);

							// BEGIN ADD V5.46

							/*
							 *  Saving a boolean containing the value that the appointment has not been
							 *   saved even once. Also the call to the WFM should be removed from the
							 *   application container.
							 */
							applSaveActionTable = (ApplSaveAction) teleSessionMgr
									.getTable(string_APPLSAVEACTION);

							if (null != applSaveActionTable) {
								applSaveActionRow = applSaveActionTable
										.asarSearchByActionTypeValue(
												0,
												"SaveAppointmentInWFM",
												string_Empty
														+ custAppRow.lCustomerAppointmentID);

								if (null != applSaveActionRow) {
									applSaveActionTable
											.deleteRecord(applSaveActionRow.lID);
									teleSessionMgr.putTable(string_APPLSAVEACTION,
											applSaveActionTable);
								}
							}

							bAppointment_NotSavedOnce = true;

							// END ADD V5.46
						}

						//                      Begin Modify : V3.38
						//                                                           else if(null != custAppRow)
						else if ((null != custAppRow)
								&& !((7 == custAppRow.lAppointmentStatusID) || (6 == custAppRow.lAppointmentStatusID)))

						//                      End Modify : V3.38
						{

							// then set it to One (Assigned)
							custAppRow.iObsolete = FINAL_ONE;

							// Setting the Modification User as User in the Session
							custAppRow.strModificationUser = bSession.strUserName;

							if (custAppRow.iStatusInDB == Record.VIEW) {
								custAppRow.iStatusInDB = Record.UPDATE;
							}

							if (custAppRow.iStatusInDB == Record.UPDATE) {
								custAppRow.iStatusInDB = Record.UPDATE;
							}

							customerAppointmentTable.updateRecord(custAppRow);
						}

						teleSessionMgr.putTable(string_CUSTOMERAPPOINTMENT,
								customerAppointmentTable);

						//                      BEGIN : ver 2.44 added by Abhishek
						//                      DESC : Deleting Appointment from WFM
						//                       Begin Add : V3.38
						if ((null != custAppRow)
								&& !((7 == custAppRow.lAppointmentStatusID) || (6 == custAppRow.lAppointmentStatusID))) {

							//                          End Modify : V3.38
							// BEGIN DELETE V5.01b
							// comment: to incorporate additional chk
							// lAppointment.deleteAppointmentInWfm_InApplSave(custAppRow.lWfmAppointmentID,bSession.strUserName);
							// END DELETE V5.01b
							// BEGIN ADD V5.01b
							// comment: to add the additional chk
							if (custAppRow.lWfmAppointmentID != 0) {

								// BEGIN ADD V5.46

								/*
								 *       Only if the appointment has been saved that the appointment from WFM
								 *   needs to be removed.
								 */
								if (!(bAppointment_NotSavedOnce)) {
									lAppointment
											.deleteAppointmentInWfm_InApplSave(
													custAppRow.lWfmAppointmentID,
													bSession.strUserName);
								}

								// END ADD V5.46

								// BEGIN DELETE V5.46

								/*
								 * lAppointment.deleteAppointmentInWfm_InApplSave(custAppRow.lWfmAppointmentID,bSession.strUserName);
								 */

								// END ADD V5.46
							}

							// END ADD V5.01b
							// Begin Add : V3.38
						}

						//                      End Modify : V3.38
						//E                     ND : ver 2.44 added by Abhishek
					}

					// Begin Add : V7.05d
					if (null != vctCustomerProduct) {
						int iLength = vctCustomerProduct.size();

						for (int i = 0; i < iLength; i++) {
							custProdRow = (CustomerProductRow) vctCustomerProduct
									.get(i);
							GLogger
									.debug(CLASS_NAME,
											METHOD_iDeleteCustProduct,
											"Ilength : " + i);
							GLogger.debug(CLASS_NAME,
									METHOD_iDeleteCustProduct, "custProdRow : "
											+ custProdRow);

							if (GAfeDescription.bCheckInList(
									custProdRow.lProductID,
									GAfeDescription.SELFINSTALL_PRODUCT)) {
								GLogger.chkpt("bCheckInList in : "
										+ custProdRow.lProductID);
								GLogger.debug(CLASS_NAME,
										METHOD_iDeleteCustProduct,
										"Ilength inside : " + i);
								hsmSelectedModem = (HashMap) teleSessionMgr
										.getValue(GAfeConstants.SELECTED_MODEM);
								applSaveActionTable = (ApplSaveAction) teleSessionMgr
										.getTable(string_APPLSAVEACTION);

								String strCPLIdenValue = strGetMainCPLIdenValueFromCPLId(customerProductLineRow.lCustomerProductLineID);

								GLogger.debug(CLASS_NAME,
										METHOD_iDeleteCustProduct,
										"strCPLIdenValue: " + strCPLIdenValue);

								if (null != hsmSelectedModem) {
									hsmSelectedModem.remove(strCPLIdenValue);
									GLogger.debug(CLASS_NAME,
											METHOD_iDeleteCustProduct,
											" hsmSelectedModem not null ");
									teleSessionMgr.putValue(
											GAfeConstants.SELECTED_MODEM,
											hsmSelectedModem);
								}

								// BEGIN ADD V7.07d
								hmSelfInstallStatus = (HashMap) teleSessionMgr
										.getValue(GAfeConstants.SELFINSTALL_POPUP);

								if (null != hmSelfInstallStatus) {
									hmSelfInstallStatus.remove(strCPLIdenValue);
									GLogger.debug(CLASS_NAME,
											METHOD_iDeleteCustProduct,
											" hmSelfInstallStatus not null ");
									teleSessionMgr.putValue(
											GAfeConstants.SELECTED_MODEM,
											hmSelfInstallStatus);
								}

								// END ADD V7.07d

								// remove the entry from table.
								if (null != applSaveActionTable) {
									applSaveActionRow = applSaveActionTable
											.asarSearchByActionTypeValue(
													Record.INSERT,
													"IDENTIFIER",
													strCPLIdenValue);
									GLogger.debug(CLASS_NAME,
											METHOD_iDeleteCustProduct,
											" applSaveActionTable not null ");

									if (null != applSaveActionRow) {
										applSaveActionTable
												.deleteRecord(applSaveActionRow.lID);
										GLogger.debug(CLASS_NAME,
												METHOD_iDeleteCustProduct,
												" applSaveActionRow not null ");
									}

									teleSessionMgr.putTable(string_APPLSAVEACTION,
											applSaveActionTable);
								}

								break;
							}

							// Begin Add v7.20c
							// Begin DEL v9.01d
							// HashMap hmInternetSelectedModem = null;
							// End DEL v9.01d
							HashMap hmInternetSelfInstallCreate = null;
							String strKey;

							// Begin DEL v9.01d
							// String strIdentifier = null;
							// End DEL v9.01d
							BModemDetail objBModemDetail = null;

							// GLogger.chkpt("UPC:LProduct:InternetSeldInstall:Entering the Loop");
							if (GAfeDescription
									.bCheckInList(
											custProdRow.lProductID,
											GAfeDescription.INTERNETSELFINSTALL_PRODUCT)) {

								/*
								 * if(null != teleSessionMgr.getValue(GAfeConstants.INTERNETSELECTED_MODEM))
								 * {
								 *   hmInternetSelectedModem = (HashMap)teleSessionMgr.getValue(GAfeConstants.INTERNETSELECTED_MODEM);
								 *   if(null != hmInternetSelectedModem )
								 *   {
								 *       Iterator itMod = hmInternetSelectedModem.keySet().iterator();
								 *       while( itMod.hasNext())
								 *      {
								 *           strKey= (String)itMod.next();
								 *           objBModemDetail = (BModemDetail)hmInternetSelectedModem.get(strKey);
								 *           GLogger.chkpt("UPC:LProduct:objBModemDetail"+objBModemDetail);
								 *           if(objBModemDetail.lCPLID == lCustomerProductLineID.longValue())
								 *           {
								 *               GLogger.chkpt("UPC:LProduct:lCPLID"+objBModemDetail.lCPLID+"lCustomerProductLineID"+lCustomerProductLineID.longValue());
								 *               itMod.remove();
								 *           }
								 *      }
								 *   }
								 * }
								 */

								// GLogger.chkpt("UPC:LProduct:HASHMAPINTERNET_SELF_INSTALL_CM_CREATE:"+teleSessionMgr.getValue(GAfeConstants.HASHMAPINTERNET_SELF_INSTALL_CM_CREATE));
								if (null != teleSessionMgr
										.getValue(GAfeConstants.HASHMAPINTERNET_SELF_INSTALL_CM_CREATE)) {
									hmInternetSelfInstallCreate = (HashMap) teleSessionMgr
											.getValue(GAfeConstants.HASHMAPINTERNET_SELF_INSTALL_CM_CREATE);

									if (null != hmInternetSelfInstallCreate) {
										Iterator itMod = hmInternetSelfInstallCreate
												.keySet().iterator();

										while (itMod.hasNext()) {
											strKey = (String) itMod.next();
											objBModemDetail = (BModemDetail) hmInternetSelfInstallCreate
													.get(strKey);
											GLogger
													.chkpt("UPC:LProduct:Before Removal"
															+ hmInternetSelfInstallCreate
																	.size());

											if (objBModemDetail.lCPLID == lCustomerProductLineID
													.longValue()) {
												itMod.remove();
												GLogger
														.chkpt("UPC:LProduct:After Removal"
																+ hmInternetSelfInstallCreate
																		.size());
											}
										}
									}
								}
							}

							// End Add v7.20c
						}
					}

					// End Add : V7.05d
					int ivctCustomerProduct = 0;

					if (null != vctCustomerProduct) {
						ivctCustomerProduct = vctCustomerProduct.size();
					}

					customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

					for (iCounter1 = FINAL_ZERO; iCounter1 < ivctCustomerProduct; iCounter1++) {
						custProdRow = (CustomerProductRow) vctCustomerProduct
								.elementAt(iCounter1);

						if (custProdRow.iStatusInDB == Record.INSERT) {
							customerProductTable
									.deleteRecord(custProdRow.lCustomerProductID);
						} else {
							custProdRow.iObsolete = FINAL_ONE;
							custProdRow.strModificationUser = bSession.strUserName;

							if (custProdRow.iStatusInDB == Record.VIEW) {
								custProdRow.iStatusInDB = Record.UPDATE;
							}

							if (custProdRow.iStatusInDB == Record.UPDATE) {
								custProdRow.iStatusInDB = Record.UPDATE;
							}

							customerProductTable.updateRecord(custProdRow);
						}

						vctCustomerProductParameter = null;
						vctCustomerProductParameter = customerProductParameterTable
								.vctSearchByCustomerProductID(custProdRow.lCustomerProductID);

						if ((null == vctCustomerProductParameter)
								|| (FINAL_ZERO == vctCustomerProductParameter
										.size())) {
							vctCustomerProductParameter = new Vector();
						}

						int ivctCustomerProductParameter = 0;

						if (null != vctCustomerProductParameter) {
							ivctCustomerProductParameter = vctCustomerProductParameter
									.size();
						}

						for (iCounter2 = FINAL_ZERO; iCounter2 < ivctCustomerProductParameter; iCounter2++) {
							custProdParamRow = new CustomerProductParameterRow();
							custProdParamRow = (CustomerProductParameterRow) vctCustomerProductParameter
									.elementAt(iCounter2);

							if (custProdParamRow.iStatusInDB == Record.INSERT) {
								customerProductParameterTable
										.deleteRecord(custProdParamRow.lCustomerProductParameterID);
							} else {
								custProdParamRow.iObsolete = FINAL_ONE;
								custProdParamRow.strModificationUser = bSession.strUserName;

								if (custProdParamRow.iStatusInDB == Record.VIEW) {
									custProdParamRow.iStatusInDB = Record.UPDATE;
								}

								if (custProdParamRow.iStatusInDB == Record.UPDATE) {
									custProdParamRow.iStatusInDB = Record.UPDATE;
								}

								customerProductParameterTable
										.updateRecord(custProdParamRow);
							}
						}

						vctCustomerProductStatus = new Vector();
						vctCustomerProductStatus = customerProductStatusTable
								.vctSearchByCustomerProductIDandObslete(
										custProdRow.lCustomerProductID,
										FINAL_ZERO);

						if (null == vctCustomerProductStatus) {
							vctCustomerProductStatus = new Vector();
						}

						int ivctCustomerProductStatus = 0;

						ivctCustomerProductStatus = vctCustomerProductStatus
								.size();

						for (iCounter2 = FINAL_ZERO; iCounter2 < ivctCustomerProductStatus; iCounter2++) {
							custProdStatusRow = new CustomerProductStatusRow();
							custProdStatusRow = (CustomerProductStatusRow) vctCustomerProductStatus
									.elementAt(iCounter2);

							if (custProdStatusRow.iStatusInDB == Record.INSERT) {
								customerProductStatusTable
										.deleteRecord(custProdStatusRow.lCustomerProductStatusID);
							} else {

								// then set it to One (Assigned)
								custProdStatusRow.iObsolete = FINAL_ONE;

								// Setting the Modification User as User in the Session
								custProdStatusRow.strModificationUser = bSession.strUserName;

								if (custProdStatusRow.iStatusInDB == Record.VIEW) {
									custProdStatusRow.iStatusInDB = Record.UPDATE;
								}

								if (custProdStatusRow.iStatusInDB == Record.UPDATE) {
									custProdStatusRow.iStatusInDB = Record.UPDATE;
								}

								customerProductStatusTable
										.updateRecord(custProdStatusRow);
							}
						}
					}

					if (null == vctCustomerChargeType) {
						vctCustomerChargeType = new Vector();
					}

					int ivctCustomerChargeType = 0;

					ivctCustomerChargeType = vctCustomerChargeType.size();

					for (iCounter2 = FINAL_ZERO; iCounter2 < ivctCustomerChargeType; iCounter2++) {
						custChargeTypeRow = new CustomerChargeTypeRow();
						custChargeTypeRow = (CustomerChargeTypeRow) vctCustomerChargeType
								.elementAt(iCounter2);

						if (custChargeTypeRow.iStatusInDB == Record.INSERT) {
							customerChargeTypeTable
									.deleteRecord(custChargeTypeRow.lCustomerChargeTypeID);
						} else {
							custChargeTypeRow.iObsolete = FINAL_ONE;
							custChargeTypeRow.strModificationUser = bSession.strUserName;

							if (custChargeTypeRow.iStatusInDB == Record.VIEW) {
								custChargeTypeRow.iStatusInDB = Record.UPDATE;
							}

							if (custChargeTypeRow.iStatusInDB == Record.UPDATE) {
								custChargeTypeRow.iStatusInDB = Record.UPDATE;
							}

							customerChargeTypeTable
									.updateRecord(custChargeTypeRow);
						}

						teleSessionMgr.putTable(string_CUSTOMERCHARGETYPE,
								customerChargeTypeTable);
					}

					if (null == vctCustomerProductLineIdentifier) {
						vctCustomerProductLineIdentifier = new Vector();
					}

					int ivctCustomerProductLineIdentifier = 0;

					ivctCustomerProductLineIdentifier = vctCustomerProductLineIdentifier
							.size();

					for (iCounter2 = FINAL_ZERO; iCounter2 < ivctCustomerProductLineIdentifier; iCounter2++) {
						custPLIdenRow = new CustomerProductLineIdentifierRow();
						custPLIdenRow = (CustomerProductLineIdentifierRow) vctCustomerProductLineIdentifier
								.elementAt(iCounter2);

						if (custPLIdenRow.iStatusInDB == Record.INSERT) {
							customerProductLineIdentifierTable
									.deleteRecord(custPLIdenRow.lCustomerPLIdentifierID);
						} else {
							custPLIdenRow.iObsolete = FINAL_ONE;
							custPLIdenRow.strModificationUser = bSession.strUserName;

							if (custPLIdenRow.iStatusInDB == Record.VIEW) {
								custPLIdenRow.iStatusInDB = Record.UPDATE;
							}

							if (custPLIdenRow.iStatusInDB == Record.UPDATE) {
								custPLIdenRow.iStatusInDB = Record.UPDATE;
							}

							customerProductLineIdentifierTable
									.updateRecord(custPLIdenRow);
						}
					}

					if (null == vctProcessLink) {
						vctProcessLink = new Vector();
					}

					int ivctProcessLink = 0;

					ivctProcessLink = vctProcessLink.size();

					for (iCounter2 = FINAL_ZERO; iCounter2 < ivctProcessLink; iCounter2++) {
						processLinkRow = new ProcessLinkRow();
						processLinkRow = (ProcessLinkRow) vctProcessLink
								.elementAt(iCounter2);

						if (processLinkRow.iStatusInDB == Record.INSERT) {
							processLinkTable
									.deleteRecord(processLinkRow.lProcessLinkID);
						} else {
							processLinkRow.iObsolete = FINAL_ONE;
							processLinkRow.strModificationUser = bSession.strUserName;

							if (processLinkRow.iStatusInDB == Record.VIEW) {
								processLinkRow.iStatusInDB = Record.UPDATE;
							}

							if (processLinkRow.iStatusInDB == Record.UPDATE) {
								processLinkRow.iStatusInDB = Record.UPDATE;
							}

							processLinkTable.updateRecord(processLinkRow);
						}

						processRow = (ProcessRow) processTable
								.prSearchByProcessIDandObsolete(
										processLinkRow.lProcessID, FINAL_ZERO);

						if (null == processRow) {
							continue;
						}

						// BEGIN ADD V6.20e
						if (!bCheckIfPairingProcessCompleted(processLinkRow.lProcessID)
								&& !bCheckIfDeliveryOrderInprogress(processLinkRow.lProcessID)) {
							GLogger
									.chkpt("Not Pairing Order so update Status for IDTV");

							// END ADD V6.20e
							processStatusRow = new ProcessStatusRow();
							processStatusRow.iStatusInDB = Record.INSERT;
							processStatusRow.lProcessStatusID = processStatusRow
									.lNewNr();
							processStatusRow.lProcessStatusTypeID = GAfeDescription
									.lGetTypeId(string_PROCESSSTATUSTYPE_CANCELLED);
							processStatusRow.lProcessID = processRow.lProcessID;
							processStatusRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
							processStatusRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
							processStatusTable
									.addUniqueRecord(processStatusRow);
							lMainOrderID = processRow.lOrderID;
							orderRow = (OrderRow) orderTable
									.orSearchByOrderIDandObsolete(
											processRow.lOrderID, FINAL_ZERO);

							if (null == orderRow) {
								continue;
							}

							orderRow.lOrderStatusTypeID = GAfeDescription
									.lGetTypeId("ORDERSTATUSTYPE_CANCELLED");
							orderRow.strModificationUser = bSession.strUserName;

							if (orderRow.iStatusInDB == Record.INSERT) {
								orderRow.iStatusInDB = Record.INSERT;
							} else {
								orderRow.iStatusInDB = Record.UPDATE;
							}

							orderTable.updateRecord(orderRow);

							// BEGIN ADD V4.10e
							// Delete the entries corresponding to Disconnect Document if any
							/*	vDeleteInDocumentTable(
									lMainOrderID,
									GAfeDescription
											.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O"));
											*/
							// Delete the entries corresponding to Intercept document if any
							//vDeleteInDocumentTable(lMainOrderID,
							//                     GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_W"));

							// END ADD V4.10e
							// BEGIN ADD ver 5.97a
							// BEGIN DELETE ver 6.05b
							// vDeleteInDocumentTable(lMainOrderID, GAfeDescription.DOCUMENTTYPE_CABLEACCESS_BROCHURE);
							// END DELETE ver 6.05b
							// END ADD ver 5.97a
							// BEGIN ADD V6.20e
						}

						// END ADD V6.20e
					}

					// BEGIN ADD V5.34b
					// comment: code added to update any deactivate CNA process if the line is deleted as well as update CustomerProductStatus table
					ProcessRow processCNARow = processTable
							.prSearchBylOrderIDandProcessTypeIDandObsolete(
									lMainOrderID,
									GAfeDescription
											.lGetTypeId(string_PROCESSTYPE_DEACTIVATECNA),
									FINAL_ZERO);

					if (null != processCNARow) {

						// Update process row if it is still in session
						if (processCNARow.iStatusInDB == Record.INSERT) {
							processTable.deleteRecord(processCNARow.lProcessID);
						}

						// Get the processLink rows for this process and update
						Vector vctProcessCNALinks = processLinkTable
								.vctSearchByProcessIDandObsolete(
										processCNARow.lProcessID, FINAL_ZERO);

						if (null != vctProcessCNALinks) {
							ProcessLinkRow processCNALinkRow = null;

							for (int iCounterOnLink = 0; iCounterOnLink < vctProcessCNALinks
									.size(); iCounterOnLink++) {
								processCNALinkRow = (ProcessLinkRow) vctProcessCNALinks
										.elementAt(iCounterOnLink);

								if (processCNALinkRow.iStatusInDB == Record.INSERT) {
									processLinkTable
											.deleteRecord(processCNALinkRow.lProcessLinkID);
								} else {
									processCNALinkRow.iObsolete = FINAL_ONE;
									processCNALinkRow.iStatusInDB = Record.UPDATE;
									processLinkTable
											.updateRecord(processCNALinkRow);
								}
							}
						}

						ProcessStatusRow processCNAStatusRow = null;

						processCNAStatusRow = processStatusTable
								.psrSearchByProcessIDAndStatusTypeID(
										processCNARow.lProcessID,
										GAfeDescription
												.lGetTypeId(string_PROCESSSTATUSTYPE_NEW));

						if (null != processCNAStatusRow) {
							if (processCNAStatusRow.iStatusInDB == Record.INSERT) {
								processStatusTable
										.deleteRecord(processCNAStatusRow.lProcessStatusID);
							}
						}

						if ((processCNARow.iStatusInDB == Record.VIEW)
								|| (processCNARow.iStatusInDB == Record.UPDATE)) {

							// Make a new entry in ProcessStatusTable with status cancelled
							processCNAStatusRow = new ProcessStatusRow();
							processCNAStatusRow.iStatusInDB = Record.INSERT;
							processCNAStatusRow.lProcessStatusID = processCNAStatusRow
									.lNewNr();
							processCNAStatusRow.lProcessStatusTypeID = GAfeDescription
									.lGetTypeId(string_PROCESSSTATUSTYPE_CANCELLED);
							processCNAStatusRow.lProcessID = processCNARow.lProcessID;
							processCNAStatusRow.strModificationUser = bSession.strUserName;
							processCNAStatusRow.strCreationUser = bSession.strUserName;
							processStatusTable
									.addUniqueRecord(processCNAStatusRow);
						}

						// Update CustomerProductStatus table for this process
						CustomerProductStatusRow customerProductCNAStatusRow = null;

						customerProductCNAStatusRow = customerProductStatusTable
								.cpsrSearchByProcessIDAndObsolete(
										processCNARow.lProcessID, FINAL_ZERO);

						if (null != customerProductCNAStatusRow) {
							if (customerProductCNAStatusRow.iStatusInDB == Record.INSERT) {
								customerProductStatusTable
										.deleteRecord(customerProductCNAStatusRow.lCustomerProductStatusID);
							} else {
								customerProductCNAStatusRow.iStatusInDB = Record.UPDATE;
								customerProductCNAStatusRow.iObsolete = FINAL_ONE;
								customerProductStatusTable
										.updateRecord(customerProductCNAStatusRow);
							}
						}
					}

					// END ADD V5.34b
					teleSessionMgr.putTable(string_CUSTOMERPRODUCTLINE,
							customerProductLineTable);
					teleSessionMgr.putTable(string_CUSTOMERPRODUCT,
							customerProductTable);
					teleSessionMgr.putTable(string_CUSTOMERPRODUCTPARAMETER,
							customerProductParameterTable);
					teleSessionMgr.putTable(string_CUSTOMERPRODUCTLINEIDENTIFIER,
							customerProductLineIdentifierTable);
					teleSessionMgr.putTable(string_CUSTOMERPRODUCTSTATUS,
							customerProductStatusTable);
					teleSessionMgr.putTable(string_CUSTOMERCHARGETYPE,
							customerChargeTypeTable);
					teleSessionMgr.putTable(string_PROCESSLINK, processLinkTable);
					teleSessionMgr.putTable(string_PROCESS, processTable);
					teleSessionMgr
							.putTable(string_PROCESSSTATUS, processStatusTable);
					teleSessionMgr.putTable(string_ORDER, orderTable);
				}

				ReasonDescriptionRow reasonDescriptionRow = null;

				if (null == reasonDescriptionTable) {
					reasonDescriptionTable = (ReasonDescription) teleSessionMgr
							.getMasterTable("REASONDESCRIPTION"); // Getting the Customer table from the session
				}

				reasonDescriptionRow = reasonDescriptionTable
						.rdnrSearchByReasonDescriptionIDandObsolete(
								lReasonDescriptionID.longValue(), FINAL_ZERO);

				// BEGIN ADD V4.10g
				// comment: Getting object type row for Order table
				objTypeRow = objectTypeTable
						.otrSearchBystrObjectNameandObsolete("\"ORDER\"",
								FINAL_ZERO);

				// END ADD V4.10g
				ReasonRow reasonRow = null;

				reasonTable = (Reason) teleSessionMgr.getTable("REASON"); // Getting the Customer table from the session

				// Begin Delete V5.96p
				// if (null != reasonTable) {
				// End Delete V5.96p
				// BEGIN ADD V5.96p
				if ((null != reasonTable)
						&& (Long.valueOf(0) != lReasonDescriptionID))

				// End Add V5.96p
				{
					reasonRow = new ReasonRow();
					reasonRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
					reasonRow.lReasonID = reasonRow.lNewNr();
					reasonRow.lReasonTypeID = reasonDescriptionRow.lReasonTypeID;
					reasonRow.dtReasonDate = new Date();

					// BEGIN DELETE V4.10g
					// comment: not required
					// reasonRow.lObjectTypeID = ;
					// END DELETE V4.10g
					// BEGIN ADD V4.10g
					// comment: Setting ObjectTypeID in reasonRow for Insertion in Reason table.
					reasonRow.lObjectTypeID = objTypeRow.lObjectTypeID;

					// END ADD V4.10g
					reasonRow.lObjectID = lMainOrderID;
					reasonRow.lReasonDescriptionID = lReasonDescriptionID
							.longValue();
					reasonRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
					reasonRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
					reasonTable.addRecord(reasonRow); // Adding the Record in the CustomerPromotionTable
					teleSessionMgr.putTable("REASON", reasonTable);
				} // end of the if loop
			}

			// BEGIN ADD V7.06e
			int iObsolete = 0;
			BProductOvw bProductOvw = new BProductOvw();

			bProductOvw = objLoadCustomerProduct(lCustomerID, iObsolete);
			GLogger.chkpt("bProductOvw after calling " + bProductOvw);

			if (bProductOvw.vctBProductLineOvw.size() == 0) {
				applSaveActionTable = (ApplSaveAction) teleSessionMgr
						.getTable(string_APPLSAVEACTION);
				applSaveActionRow = new ApplSaveActionRow();
				applSaveActionRow.arrArguments = new Class[1];
				applSaveActionRow.arrParams = new Object[1];

				// Setting the variables of record to entered in Appl Save container
				applSaveActionRow.iAction = Record.INSERT;
				applSaveActionRow.strType = string_TELNO;
				applSaveActionRow.strValue = " ";
				applSaveActionRow.strSystem = string_IAFEOUT;
				applSaveActionRow.strMethodName = "releaseLoginWrap"; // the name of the IAFEOUT Method which needs to be called
				objIafeOut = new IAFEOUT();
				objCustLogin = new BCustomerLoginDetails();
				objCustLogin.setCustomerId(lCustomerID.longValue());
				objCustLogin = objIafeOut.getLoginDetails(objCustLogin);
				GLogger.chkpt("objCustLogin after calling " + objCustLogin);

				if ((null != objCustLogin) && (3 != objCustLogin.getStatus())) {
					applSaveActionRow.arrArguments[0] = BCustomerLoginDetails.class;
					applSaveActionRow.arrParams[0] = objCustLogin;
					applSaveActionTable.addRecord(applSaveActionRow);
					teleSessionMgr.putTable(string_APPLSAVEACTION,
							applSaveActionTable);
				}
			}

			// Begin Add V8.00a
			GLogger.chkpt("calling lselfinstall method vDeleteRecord::"
					+ lCustomerProductLineID.longValue());
			LSelfInstall.vDeleteRecord(lCustomerProductLineID.longValue());

			// End Add V8.00a
			// END ADD V7.06e
		} catch (Exception ex) {
			GLogger.logException(ex);

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return iStatus;
	}

	/**
	 * This method returns java.sql.Timestamp from java.util.Date object
	 * @param   dtDate  java.util.Date
	 * @return  java.sql.Timestamp
	 */
	protected final java.sql.Timestamp tstmGetSqlTimestamp(java.util.Date dtDate) {
		if (null == dtDate) {
			return null;
		} else {
			Calendar cal1 = Calendar.getInstance();
			Calendar cal2 = Calendar.getInstance();

			cal1.setTime(dtDate);
			cal2.set(cal1.get(Calendar.YEAR), cal1.get(Calendar.MONTH), cal1
					.get(Calendar.DATE));

			return new java.sql.Timestamp(
					(cal2.getTime().getTime() / 1000) * 1000);
		}
	}

	public Vector vctGetOpenOrder(Long CustomerProductLineID) throws Exception {
		Vector vctGetOpenOrder = null; // internal local vector
		Vector vctTempForProcess = new Vector(); // internal local vector
		Vector vctTempForDescID = new Vector(); // internal local vector

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			vctGetOpenOrder = new Vector();

			ObjectTypeRow objectTypeRow = null; // Initializing the Object Class for the Vat table

			if (null == objectTypeTable) {
				objectTypeTable = (ObjectType) teleSessionMgr
						.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
			}

			objectTypeRow = objectTypeTable
					.otrSearchBystrObjectNameandObsolete(string_CUSTOMERPRODUCTLINE,
							FINAL_ZERO);

			// Begin DEL v9.01d
			// ProcessLinkRow processLinkRow = null;                                                                                             // Initializing the Object Class for the Vat table
			// End DEL v9.01d
			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(string_PROCESSLINK); // Getting the Vat table from the session

			Vector vctObjPLInternal = null;

			vctObjPLInternal = processLinkTable
					.vctSearchByObjectIDandObjectTypeIDandObsolete(
							CustomerProductLineID.longValue(),
							objectTypeRow.lObjectTypeID, FINAL_ZERO);

			if (null != vctObjPLInternal) {
				processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session
				orderTable = (Order) teleSessionMgr.getTable(string_ORDER); // Getting the PROCESS table from the session

				if (null == orderType) {
					orderType = (OrderType) teleSessionMgr
							.getMasterTable("ORDERTYPE"); // Getting the PROCESS table from the session
				}

				for (int iPLCounter = FINAL_ZERO; iPLCounter < vctObjPLInternal
						.size(); iPLCounter++) {
					if (-1 == vctTempForProcess.indexOf(Long.valueOf(
							((ProcessLinkRow) (vctObjPLInternal
									.elementAt(iPLCounter))).lProcessID))) {
						vctTempForProcess.addElement(Long.valueOf(
								((ProcessLinkRow) (vctObjPLInternal
										.elementAt(iPLCounter))).lProcessID));

						ProcessRow processRow = null; // Initializing the Object Class for the PROCESS table

						processRow = processTable
								.prSearchByProcessIDandObsolete(
										((ProcessLinkRow) (vctObjPLInternal
												.elementAt(iPLCounter))).lProcessID,
										FINAL_ZERO);

						if (null != processRow) {
							OrderRow orderRow = null; // Initializing the Object Class for the PROCESS table

							orderRow = orderTable.orSearchByOrderIDandObsolete(
									processRow.lOrderID, FINAL_ZERO);

							if (null != orderRow) {
								long lngOrderStatusTypeID = 0;
								long lOrderTypeID = 0;
								long lWirelessOrderTypeID = 50;
								GLogger.chkpt("Came to fill in the open orders");
								lngOrderStatusTypeID = orderRow.lOrderStatusTypeID;
								lOrderTypeID = orderRow.lOrderTypeID;
								GLogger.chkpt("lOrderTypeID is "+ lOrderTypeID);
								GLogger.chkpt("lngOrderStatusTypeID is "+ lngOrderStatusTypeID);
								// Special handling for Homespot as the wireless order should 
								// not appear in the open order column of Product Overview screen								
								if(lOrderTypeID != lWirelessOrderTypeID)
								{
									GLogger.chkpt("Not a wireless order");
									if ((lngOrderStatusTypeID == GAfeDescription
											.lGetTypeId(string_ORDERSTATUSTYPE_NEW))
											|| (lngOrderStatusTypeID == GAfeDescription
													.lGetTypeId("ORDERSTATUSTYPE_INPROGRESS"))
											|| (lngOrderStatusTypeID == GAfeDescription
													.lGetTypeId("ORDERSTATUSTYPE_ABORTED"))) {
										orderRow = null; // Initializing the Object Class for the PROCESS table
										orderRow = orderTable
												.orSearchByOrderIDandOrderStatusTypeIDandObsolete(
														processRow.lOrderID,
														lngOrderStatusTypeID,
														FINAL_ZERO);
	
										if (null != orderRow) {
											OrderTypeRow orderTypeRow = null; // Initializing the Object Class for the PROCESS table
	
											orderTypeRow = orderType
													.otrSearchByOrderTypeIDandObsolete(
															orderRow.lOrderTypeID,
															FINAL_ZERO);
	
											if (-1 == vctTempForDescID
													.indexOf(Long.valueOf(
															orderTypeRow.lDescriptionID))) {
												vctTempForDescID
														.addElement(Long.valueOf(
																orderTypeRow.lDescriptionID));
	
												if (null != orderTypeRow) {
													strObjectDesc = strFindDescription(orderTypeRow.lDescriptionID);
	
													if (strObjectDesc.length() > 0) {
														vctGetOpenOrder
																.addElement(strObjectDesc);
													}
												} // end of the if loop
											} // end of the if loop
										} // end of the if loop
									} // end of the if loop ----
								} // end of the wireless order loop
								else
								{
									GLogger.chkpt("Was a wireless order and hence not considered in open orders");
								}
							} // end of the if loop
						} // end of the if loop
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return vctGetOpenOrder;
	}

	/**
	 *  DESCRIPTION :   This function will Populate the Business Object Called
	 *                                  BProductRole for the Product Role Screen.
	 *
	 *  @param          :       Long CustomerProductLineID, Long  CustomerID
	 *
	 *  @return         :       Bussiness Object - BProductRole
	 */
	public BProductRole vctLoadProductRole(Long CustomerProductLineID,
			Long CustomerID,boolean isObsoleteCheckRequired) throws SQLException, Exception {

		// Begin DEL v9.01d
		// Vector vctGetAllData = null;  // vctGetAllData vector contains set of vector having the data as sepcified in the above comments
		// Vector vctInternal = null;    // internal local vector
		// End DEL v9.01d
		GLogger.logEntry(CLASS_NAME, METHOD_vctLoadProductRole);
		GLogger.logInput(METHOD_vctLoadProductRole, "CustomerProductLineID", CustomerProductLineID);
		int iForCount = 0;
		String strName = null;
		String strFinalAddress = null;
		String strShortDescription = null;
		String strDescription1ID = null;
		String strSalesPerson = null;
		String strDNISCode = null;
		String strTempAddress = "";
		String strProductLineIndentifierValue = null;
		Date dtCreationDate = null;
		Long lDescription1ID = null;
		Long lCustomerPLIdentifierID = null;

		// Begin DEL v9.01d
		// Long AddressID;
		// Long SAPID;

		// boolean bFlagtoContinueForCatSapID = false;
		// End DEL v9.01d
		Vector vctCbProductRole = new Vector();

		// Object of vctProductRole for making the business object
		BProductRole bProductRole = new BProductRole();
		BProductRoleDetail bProductRoleDetail = null;

		// BEGIN ADD V5.71e
		boolean bFound = true;
		CustomerLinkRole customerLinkRoleTable = null;

		// Begin DEL v9.01d
		// CustomerLinkRoleRow customerLinkRoleRow = null;
		// Vector vctObjCLRoleInternal = null;
		// End DEL v9.01d
		// END ADD V5.71e
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			if (CustomerProductLineID.longValue() == 0) {
				GLogger.chkpt("Inside IF when CustomerProductLineID.longValue() == 0") ;
				CustomerLinkRow customerLinkRow = null;

				customerLinkTable = (CustomerLink) teleSessionMgr
						.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

				Vector vctObjCLInternal = null;

				vctObjCLInternal = customerLinkTable
						.vctSearchByCustomerIDandObsolete(CustomerID
								.longValue(), FINAL_ZERO);

				// BEGIN ADD V 7.08a
				CustomerLinkRow tempCustomerLinkRow = new CustomerLinkRow();

				// END ADD V7.08a
				// BEGIN ADD V5.71e
				// Begin DEL v9.01d
				// Vector vctObjCLRInternal = new Vector();
				// End DEL v9.01d
				if (null != vctObjCLInternal) {
					customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
							.getTable(string_CUSTOMERLINKROLE);

					for (int iCounterLinkRow = FINAL_ZERO; iCounterLinkRow < vctObjCLInternal
							.size(); iCounterLinkRow++) {
						customerLinkRow = (CustomerLinkRow) vctObjCLInternal
								.elementAt(iCounterLinkRow);

						// BEGIN DELETE V7.08a
						// vctObjCLRoleInternal = customerLinkRoleTable.vctSearchBylCustomerLinkIDandiObsolete(customerLinkRow.lCustomerLinkID, FINAL_ZERO);
						//
						// if (null != vctObjCLRoleInternal && 0 < vctObjCLRoleInternal.size()) {
						// bFound = true;
						// } else {
						// bFound = false;
						// }

						// if (bFound) {
						// break;
						// }
						// END DELETE V7.08a
						// BEGIN ADD V7.08a
						if (customerLinkRow.lCustomerLinkID > tempCustomerLinkRow.lCustomerLinkID) {
							tempCustomerLinkRow = customerLinkRow;
						}

						// END ADD V7.08a
					}
				}

				// BEGIN ADD V7.08a
				customerLinkRow = tempCustomerLinkRow;

				// END ADD  V7.08a

				// END ADD V5.71e
				if (null != vctObjCLInternal) {

					// Begin DEL v9.01d
					// AddressRow addressRow = null;
					// End DEL v9.01d
					addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session
					bProductRole = new BProductRole();
					bProductRole.lCustomerID = CustomerID;

					// BEGIN ADD V5.71e
					// BEGIN DELETE V7.08a
					// if (bFound) {
					// END DELETE V7.08a
					bProductRole.lAddressID = Long.valueOf(
							customerLinkRow.lAddressID);

					// BEGIN DELETE V7.08a
					// } else {
					// bProductRole.lAddressID = Long.valueOf(((CustomerLinkRow) (vctObjCLInternal.elementAt(FINAL_ZERO))).lAddressID);
					// }
					// END DELETE V7.08a
					// END ADD V5.71e
					bProductRole.lAddressID = Long.valueOf(
							((CustomerLinkRow) (vctObjCLInternal
									.elementAt(FINAL_ZERO))).lAddressID);
					bProductRole.lCustomerProductLineID = Long.valueOf(0);
					bProductRole.strDescription1ID = "";
					bProductRole.strShortDesc = "";
					bProductRole.lDescription1ID = Long.valueOf(0);
					bProductRole.lProductLineIndentifierID = Long.valueOf(0);
					bProductRole.strProductLineIndentifierValue = "";
					bProductRole.strSalesPerson = "";
					bProductRole.strDNISregistratie = "";
					bProductRole.dtSalesDate = null;

					// Begin DEL v9.01d
					// addressRow = null;
					// End DEL v9.01d
					addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

					Vector vctAddressInternal = new Vector();

					// BEGIN ADD V5.71e
					if (bFound) {
						vctAddressInternal = addressTable
								.vctSearchByAddressIDandObsolete(
										customerLinkRow.lAddressID, FINAL_ZERO);
					} else {

						// END ADD V5.71e
						vctAddressInternal = addressTable
								.vctSearchByAddressIDandObsolete(
										((CustomerLinkRow) (vctObjCLInternal
												.elementAt(FINAL_ZERO))).lAddressID,
										FINAL_ZERO);

						// BEGIN ADD V5.71e
					}

					// END ADD V5.71e

					if (null != vctAddressInternal) {
						bProductRole.lServiceAddressID = Long.valueOf(
								((AddressRow) (vctAddressInternal
										.elementAt(FINAL_ZERO))).lServiceAddressID);
					}

					if (null == bProductRole.lServiceAddressID) {
						bProductRole.lServiceAddressID = Long.valueOf(0);
					}

					if (bProductRole.lServiceAddressID.longValue() != FINAL_ZERO) {

						// Begin DEL v9.01d
						// Long lCATSAPIDNew = Long.valueOf(0);
						// End DEL v9.01d
						LCustomer lCustomer = new LCustomer(teleSessionMgr);
						BCatsapAddress bCatsapAddress = new BCatsapAddress();

						bCatsapAddress = lCustomer
								.objAddressFromSapId(bProductRole.lServiceAddressID
										.longValue());

						if (null != bCatsapAddress) {
							if (null != bCatsapAddress.strHouseNumber) {
								strTempAddress = bCatsapAddress.strHouseNumber;
							}

							if (null != bCatsapAddress.strSubHouseNumber) {
								strTempAddress = strTempAddress + string_COMMA
										+ bCatsapAddress.strSubHouseNumber;
							}

							if (null != bCatsapAddress.strBox) {
								strTempAddress = strTempAddress + string_COMMA
										+ bCatsapAddress.strBox;
							}

							if (null != bCatsapAddress.strStreet) {
								strTempAddress = strTempAddress + string_COMMA
										+ bCatsapAddress.strStreet;
							}

							if (null != bCatsapAddress.strCity) {
								strTempAddress = strTempAddress + string_COMMA
										+ bCatsapAddress.strCity;
							}

							if (null != bCatsapAddress.strPostcode) {
								strTempAddress = strTempAddress + string_COMMA
										+ bCatsapAddress.strPostcode + ".";
							}
						}
					} else if (FINAL_ZERO != ((AddressRow) (vctAddressInternal
							.elementAt(FINAL_ZERO))).lManualAddressID) {
						manualAddressTable = (ManualAddress) teleSessionMgr
								.getTable(string_MANUALADDRESS); // Getting the Customer table from the session

						ManualAddressRow manualAddressRow = null;

						manualAddressRow = manualAddressTable
								.marSearchByManualAddressID(((AddressRow) (vctAddressInternal
										.elementAt(FINAL_ZERO))).lManualAddressID);
						bProductRole.lManualAddressID = Long.valueOf(
								manualAddressRow.lManualAddressID);

						if (null != ((AddressRow) (vctAddressInternal
								.elementAt(FINAL_ZERO))).strHouseNumber) {
							strTempAddress = ((AddressRow) (vctAddressInternal
									.elementAt(FINAL_ZERO))).strHouseNumber;
						}

						if (null != ((AddressRow) (vctAddressInternal
								.elementAt(FINAL_ZERO))).strSubHouseNumber) {
							strTempAddress = strTempAddress
									+ string_COMMA
									+ ((AddressRow) (vctAddressInternal
											.elementAt(FINAL_ZERO))).strSubHouseNumber;
						}

						if (null != ((AddressRow) (vctAddressInternal
								.elementAt(FINAL_ZERO))).strBox) {
							strTempAddress = strTempAddress
									+ string_COMMA
									+ ((AddressRow) (vctAddressInternal
											.elementAt(FINAL_ZERO))).strBox;
						}

						if (null != manualAddressRow.strStreetName) {
							strTempAddress = strTempAddress + string_COMMA
									+ manualAddressRow.strStreetName;
						}

						if (null != manualAddressRow.strCity) {
							strTempAddress = strTempAddress + string_COMMA
									+ manualAddressRow.strCity;
						}

						if (null != manualAddressRow.strZip) {
							strTempAddress = strTempAddress + string_COMMA
									+ manualAddressRow.strZip + ".";
						}
					} else {
						throw new AfeException(string_ERRAFE_00686);
					}

					for (int iCounterRole = FINAL_ZERO; iCounterRole < 4; iCounterRole++) {
						bProductRoleDetail = new BProductRoleDetail();

						if (iCounterRole == FINAL_ZERO) {
							bProductRoleDetail.strRoleDesc = "USER";
							bProductRoleDetail.lRoleTypeID = Long.valueOf(
									GAfeDescription.lGetTypeId(string_ROLETYPE_USER));
						} else if (iCounterRole == FINAL_ONE) {
							bProductRoleDetail.strRoleDesc = "USAGE";
							bProductRoleDetail.lRoleTypeID = Long.valueOf(
									GAfeDescription
											.lGetTypeId(string_ROLETYPE_USAGE));
						} else if (iCounterRole == 2) {
							bProductRoleDetail.strRoleDesc = "RECURRING";
							bProductRoleDetail.lRoleTypeID = Long.valueOf(
									GAfeDescription.lGetTypeId(string_ROLETYPE_RC));
						} else if (iCounterRole == 3) {
							bProductRoleDetail.strRoleDesc = "NON RECURRING";
							bProductRoleDetail.lRoleTypeID = Long.valueOf(
									GAfeDescription.lGetTypeId(string_ROLETYPE_NRC));
						}

						bProductRoleDetail.strClientName = bSession.strCustomerName;
						bProductRoleDetail.strAddress = strTempAddress;
						bProductRoleDetail.lCustomerID = CustomerID;

						// BEGIN ADD V5.71e
						if (bFound) {
							bProductRoleDetail.lAddressID = Long.valueOf(
									customerLinkRow.lAddressID);
						} else {
							bProductRoleDetail.lAddressID = Long.valueOf(
									((CustomerLinkRow) (vctObjCLInternal
											.elementAt(FINAL_ZERO))).lAddressID);
						}

						// END ADD V5.71e

						// BEGIN DELETE V5.71e
						// bProductRoleDetail.lAddressID = Long.valueOf(((CustomerLinkRow) (vctObjCLInternal.elementAt(FINAL_ZERO))).lAddressID);
						// BEGIN DELETE V5.71e
						bProductRoleDetail.lOldCustomerID = CustomerID;

						// BEGIN ADD V5.71e
						if (bFound) {
							bProductRoleDetail.lOldAddressID = Long.valueOf(
									customerLinkRow.lAddressID);
						} else {
							bProductRoleDetail.lOldAddressID = Long.valueOf(
									((CustomerLinkRow) (vctObjCLInternal
											.elementAt(FINAL_ZERO))).lAddressID);
						}

						// END ADD V5.71e

						// BEGIN DELETE v5.71e
						//                                              bProductRoleDetail.lOldAddressID = Long.valueOf(((CustomerLinkRow) (vctObjCLInternal.elementAt(FINAL_ZERO))).lAddressID);
						// END DELETE v5.71e
						bProductRoleDetail.CatSapID = bProductRole.lServiceAddressID;
						bProductRoleDetail.lManualAddressID = bProductRole.lManualAddressID;
						bProductRole.vctProductRole
								.addElement(bProductRoleDetail);
					} // end of the for loop
				} // end of the if loop
			} // end of the if loop
			else {
				GLogger.chkpt("Inside Else when CustomerProductLineID.longValue() != 0") ;
				long lProductID = 0;
				CustomerProductLineRow customerProductLineRow = null;

				customerProductLineTable = (CustomerProductLine) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session

				if (null == productTable) {
					productTable = (Product) teleSessionMgr
							.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
				}

				if (null != customerProductLineTable) {
					customerProductLineRow = new CustomerProductLineRow(); // Creating Object
					if(isObsoleteCheckRequired)
					{
					customerProductLineRow = customerProductLineTable
							.cplrSearchByCustProductLineIDandExt(
									CustomerProductLineID.longValue()); // Search By CustomerProductLineID
					}
					else{
						customerProductLineRow = customerProductLineTable
						.cplrSearchByCustProductLineIDandObsolete(
								CustomerProductLineID.longValue(),FINAL_ZERO); // Search By CustomerProductLineID
					}

					if (null != customerProductLineRow) // Check if customerProductLineRow is Null
					{
						lProductID = 0;
						lProductID = customerProductLineRow.lProductID; // Retreving ProductID

						ProductRow productRow = null; // Initializing the Object Class for the Vat table

						if (null != productTable) {
							productRow = new ProductRow(); // Creating Object
							productRow = productTable
									.prSearchByProductIDandObsolete(lProductID,
											FINAL_ZERO); // Search By ProductID

							if (null != productRow) // Check if productRow is Null
							{
								lDescription1ID = Long.valueOf(
										productRow.lDescription1ID);
								strShortDescription = productRow.strShortDescription; // Retreving ShortDescription
								strDescription1ID = strFindDescription(productRow.lDescription1ID); // To find Description
							} // end of the if loop
						} // end of the if loop
					} // end of the if loop
				} // end of the if loop

				CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

				customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

				if (null != customerProductLineIdentifierTable) {
					Vector vctCPLITable = new Vector(); // Creating Object

					vctCPLITable = customerProductLineIdentifierTable
							.vctSearchByCustProdLineIDandObsolete(
									CustomerProductLineID.longValue(),
									FINAL_ZERO); // Search By CustomerProductLineID

					if (null != vctCPLITable && !vctCPLITable.isEmpty()) {

						for (int iCPLICtr = FINAL_ZERO; iCPLICtr < vctCPLITable
								.size(); iCPLICtr++) {
							customerProductLineIdentifierRow = null;
							customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCPLITable
									.elementAt(iCPLICtr);
							strProductLineIndentifierValue = customerProductLineIdentifierRow.strCustomerPLIdentifierValue;

							if (FINAL_ZERO != strProductLineIndentifierValue
									.length()) {
								vctCbProductRole
										.addElement(strProductLineIndentifierValue);
							}
						} // end of the for loop

						lCustomerPLIdentifierID = Long.valueOf(
								((CustomerProductLineIdentifierRow) vctCPLITable
										.elementAt(0)).lCustomerPLIdentifierID);
					} // end of the if loop
				} // end of the if loop

				long lObjectTypeID = 0;
				//long lObjectTypeID1=0;
				long lSaleID = 0;
				//long lSaleID1=0;
				//long lSaleMaxID = 0; 
				long lSalesEntity1ID = 0;

				// Loading of the salesDetailTable Table
				SalesDetailRow salesDetailRow = null;

				salesDetailTable = (SalesDetail) teleSessionMgr
						.getTable("SALESDETAIL"); // Retrieving from session

				// Loading of the sale2SalesEntityTable Table
				Sale2SalesEntityRow sale2SalesEntityRow = null;

				sale2SalesEntityTable = (Sale2SalesEntity) teleSessionMgr
						.getTable("SALE2SALESENTITY"); // Retrieving from session

				// Loading of the salesEntityTable Table
				SalesEntityRow salesEntityRow = null;

				if (null == salesEntityTable) {
					salesEntityTable = (SalesEntity) teleSessionMgr
							.getMasterTable("SALESENTITY"); // Retrieving from session
				}

				lObjectTypeID = 0;
				lObjectTypeID = GAfeDescription
						.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE); // Retreving Object TypeID

				if (null != salesDetailTable) {
					GLogger.chkpt("Inside IF when Sales detail table is not null") ;
					//salesDetailRow = new SalesDetailRow(); // Creating New Object
					salesDetailRow = salesDetailTable
							.sdSearchByObjectIDandObjectTypeIDandObsolete(
									CustomerProductLineID.longValue(),
									lObjectTypeID, FINAL_ZERO); // Search By ObjectID and ObjectTypeID

					if (null != salesDetailRow) {
						GLogger.chkpt("Inside IF when Sales detail row is not null") ;
						lSaleID = 0;
						lSaleID = salesDetailRow.lSaleID; // Retreving SaleID

						SaleRow saleRow = null;

						saleTable = (Sale) teleSessionMgr.getTable("SALE"); // Retrieving from session
						saleRow = saleTable
								.srSearchBySaleID(salesDetailRow.lSaleID);

						if ((null != saleRow) && (null != saleRow.dtSalesDate)) {
							dtCreationDate = (Date) saleRow.dtSalesDate; // Retreving CreationDate
						} else {
							dtCreationDate = (Date) salesDetailRow.dtCreationDate; // Retreving CreationDate
						}
						
						if (null != sale2SalesEntityTable) {
							//sale2SalesEntityRow = new Sale2SalesEntityRow(); // Creating Object
							sale2SalesEntityRow = sale2SalesEntityTable
									.sseSearchBySaleID(lSaleID); // Search by SaleID

							if (null != sale2SalesEntityRow) {
								lSalesEntity1ID = 0;
								lSalesEntity1ID = sale2SalesEntityRow.lSalesEntity1ID; // Retreving SalesEntity1ID

								if (null != salesEntityTable) {
									//salesEntityRow = new SalesEntityRow(); // Creating Object
									salesEntityRow = salesEntityTable
											.serSearchBySalesEntityIDandObsolete(
													lSalesEntity1ID, FINAL_ZERO); // Search By SalesEntityID

									if (null != salesEntityRow) {
										if (null != salesEntityRow.strSalesEntityName) {
											GLogger.chkpt("Inside If : To populate Sales person");
											strSalesPerson = salesEntityRow.strSalesEntityName; // Retreving SalesPerson1
											GLogger.chkpt("Sales person :" + strSalesPerson );
										} // end of the if loop
									} // end of the if loop
								} // end of the if loop
							} // end of the if loop
						} // end of the if loop
						//Begin CR 125918
								
												
						// end of the if loop
						//Begin CR 125918
						
						if (null != saleRow && (strSalesPerson != null))
						{
							GLogger.chkpt("strSalesPerson : "+ strSalesPerson) ;
							strDNISCode = strGetDNISCodeFromDB(CustomerProductLineID);	
							GLogger.chkpt("strDNISCode : "+ strDNISCode) ;
						}// end of the if loop		
												
						if ((strSalesPerson != null) && 
								(strDNISCode == null)){
							strDNISCode = "NVT";
						}
						}
						}
						
						//END CR 125918
					 // end of the if loop

					GLogger.chkpt("DNIS Code :  " + strDNISCode);  

				bProductRole.vctProductRole = new Vector();
				bProductRole = new BProductRole();

				CustomerLinkRow customerLinkRow = null;

				customerLinkTable = (CustomerLink) teleSessionMgr
						.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

				// Begin DEL v9.01d
				// CustomerLR2CustomerProductRow customerLR2CustomerProductRow = null;
				// End DEL v9.01d
				customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session

				// BEGIN DELETE v5.71a
				// Multiple decleration. Giving compilation error
				// CustomerLinkRoleRow customerLinkRoleRow = null;
				// END DELETE v5.71a
				customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
						.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session
				customerLinkTable = (CustomerLink) teleSessionMgr
						.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session
				customerTable = (Customer) teleSessionMgr.getTable(string_CUSTOMER); // Getting the Customer table from the session
				addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

				// Begin DEL v9.01d
				// RoleTypeRow roleTypeRow = null;
				// End DEL v9.01d
				if (null == roleTypeTable) {
					roleTypeTable = (RoleType) teleSessionMgr
							.getMasterTable("ROLETYPE"); // Getting the Customer table from the session
				}

				Vector vctObjCLR2CPInternal = null;

				vctObjCLR2CPInternal = customerLR2CustomerProductTable
						.vctSearchByCustomerProductLineID(CustomerProductLineID
								.longValue());

				if (null != vctObjCLR2CPInternal) {

					// for each  record in the vector of CustomerLR2CustomerProduct Records
					for (int iCLR2Counter = FINAL_ZERO; iCLR2Counter < vctObjCLR2CPInternal
							.size(); iCLR2Counter++) {
						Vector vctObjCLRInternal = null;

						vctObjCLRInternal = customerLinkRoleTable
								.vctSearchByCustomerLinkRoleIDandObsolete(
										((CustomerLR2CustomerProductRow) (vctObjCLR2CPInternal
												.elementAt(iCLR2Counter))).lCustomerLinkRoleID,
										FINAL_ZERO);

						if (null != vctObjCLRInternal) {
							for (int iCLRCounter = FINAL_ZERO; iCLRCounter < vctObjCLRInternal
									.size(); iCLRCounter++) {
								Vector vctObjRTInternal = null;

								vctObjRTInternal = roleTypeTable
										.vctSearchByRoleTypeIDandObsolete(
												((CustomerLinkRoleRow) (vctObjCLRInternal
														.elementAt(iCLRCounter))).lRoleTypeID,
												FINAL_ZERO);

								if (null != vctObjRTInternal) {
									for (int iRTCounter = FINAL_ZERO; iRTCounter < vctObjRTInternal
											.size(); iRTCounter++) {
										Long lCustomerID = Long.valueOf(0);
										Long lAddressID = Long.valueOf(0);
										Long lCATSAPID = Long.valueOf(0);

										// Begin DEL v9.01d
										// vctInternal = new Vector();
										// End DEL v9.01d

										if (FINAL_ZERO == iForCount) {
											bProductRole.lDescription1ID = lDescription1ID;
											bProductRole.strShortDesc = strShortDescription;

											// BEGIN ADD ver 6.02a
											bProductRole.lCustomerProductLineID = CustomerProductLineID;

											// END ADD ver 6.02a
											bProductRole.strDescription1ID = strDescription1ID;
											bProductRole.vctCbProductRole = vctCbProductRole;
											bProductRole.vctCbProductRole
													.insertElementAt(
															strShortDescription,
															FINAL_ZERO);
											bProductRole.lProductLineIndentifierID = lCustomerPLIdentifierID;
											bProductRole.dtSalesDate = dtCreationDate;
											bProductRole.strSalesPerson = strSalesPerson;
											//BEGIN CR 125918
											bProductRole.strDNISregistratie =strDNISCode;
											GLogger.chkpt("strDNISregistratie :  " + bProductRole.strDNISregistratie); 
											//END CR 125918
										}
										GLogger.chkpt("BProductRole :  "+ bProductRole); 

										customerLinkRow = null;
										customerLinkRow = customerLinkTable
												.clrSearchByCustLinkIDandObsolete(
														((CustomerLinkRoleRow) (vctObjCLRInternal
																.elementAt(iCLRCounter))).lCustomerLinkID,
														FINAL_ZERO);

										if (null != customerLinkRow) {
											lCustomerID = Long.valueOf(
													customerLinkRow.lCustomerID);
											lAddressID = Long.valueOf(
													customerLinkRow.lAddressID);
										}

										CustomerRow customerRow = null; // Initializing the Object Class for the Customer table

										strName = " ";

										if ((null != customerTable)
												&& (null != lCustomerID)) {
											customerRow = (CustomerRow) customerTable
													.crSearchByCustIDandObsolete(
															lCustomerID
																	.longValue(),
															FINAL_ZERO);

											// BEGIN DELETE Ver 1.92
											// if(null != customerRow)
											// strName                         =       customerRow.strName + " " + customerRow.strFirstName;
											// END DELETE Ver 1.92
											// BEGIN ADD Ver 1.92
											if (null != customerRow) {
												if (null != customerRow.strName) {
													strName = strName
															+ customerRow.strName
															+ " ";
												}

												if (null != customerRow.strFirstName) {
													strName = strName
															+ customerRow.strFirstName;
												}
											}

											// END ADD Ver 1.92
											else {
												strName = strGetCustomerName(lCustomerID
														.longValue());
											}
										}

										if (null != lAddressID) {

											// Begin DEL v9.01d
											// AddressRow addressRow = null;
											// End DEL v9.01d
											Vector vctAddressInternal =null;
											LCustomer lCustomer = new LCustomer(
													teleSessionMgr);
											BCatsapAddress bCatsapAddress = new BCatsapAddress();

											vctAddressInternal = addressTable
													.vctSearchByAddressIDandObsolete(
															lAddressID
																	.longValue(),
															FINAL_ZERO);

											if (null != vctAddressInternal) {

												// BEGIN DELETE V4.10d

												/*
												 * if(GAfePropertyLoader.DEBUG)
												 * {
												 *   System.out.println(" Address Changed is "+((AddressRow)vctAddressInternal.elementAt(FINAL_ZERO)).lAddressID);
												 * }
												 */

												// END DELETE V4.10d
												if (FINAL_ZERO != ((AddressRow) vctAddressInternal
														.elementAt(FINAL_ZERO)).lServiceAddressID) {
													bCatsapAddress = lCustomer
															.objAddressFromSapId(((AddressRow) vctAddressInternal
																	.elementAt(FINAL_ZERO)).lServiceAddressID);
												} else if (FINAL_ZERO != ((AddressRow) vctAddressInternal
														.elementAt(FINAL_ZERO)).lManualAddressID) {
													bCatsapAddress = lCustomer
															.objGetAddressForManualAddressID(((AddressRow) vctAddressInternal
																	.elementAt(FINAL_ZERO)).lAddressID);
												}
											}

											if (null != bCatsapAddress) {
												if (null != bCatsapAddress.strHouseNumber) {
													strFinalAddress = bCatsapAddress.strHouseNumber;
												}

												if (null != bCatsapAddress.strSubHouseNumber) {
													strFinalAddress = strFinalAddress
															+ string_COMMA
															+ bCatsapAddress.strSubHouseNumber;
												}

												if (null != bCatsapAddress.strBox) {
													strFinalAddress = strFinalAddress
															+ string_COMMA
															+ bCatsapAddress.strBox;
												}

												if (null != bCatsapAddress.strStreet) {
													strFinalAddress = strFinalAddress
															+ string_COMMA
															+ bCatsapAddress.strStreet;
												}

												if (null != bCatsapAddress.strCity) {
													strFinalAddress = strFinalAddress
															+ string_COMMA
															+ bCatsapAddress.strCity;
												}

												if (null != bCatsapAddress.strPostcode) {
													strFinalAddress = strFinalAddress
															+ string_COMMA
															+ bCatsapAddress.strPostcode
															+ ".";
												}
											}
										}

										bProductRoleDetail = new BProductRoleDetail();
										bProductRoleDetail.strRoleDesc = strFindDescription(((RoleTypeRow) (vctObjRTInternal
												.elementAt(iRTCounter))).lDescriptionID);
										bProductRoleDetail.strAddress = strFinalAddress;
										bProductRoleDetail.lCustomerID = lCustomerID;
										bProductRoleDetail.lAddressID = lAddressID;
										bProductRoleDetail.lOldCustomerID = lCustomerID;
										bProductRoleDetail.lOldAddressID = lAddressID;
										bProductRoleDetail.lRoleTypeID = Long.valueOf(
												((RoleTypeRow) (vctObjRTInternal
														.elementAt(iRTCounter))).lRoleTypeID);
										bProductRoleDetail.CatSapID = lCATSAPID;
										bProductRoleDetail.strClientName = strName;
										bProductRole.vctProductRole
												.addElement(bProductRoleDetail);

										// BEGIN ADD ver 6.02a
										if (bProductRoleDetail.lRoleTypeID
												.longValue() == GAfeDescription.ROLETYPE_USER) {
											bProductRole.lCustomerID = bProductRoleDetail.lCustomerID;
											bProductRole.lAddressID = bProductRoleDetail.lAddressID;
										}

										// END ADD ver 6.02a
										iForCount++;
									} // end of the for loop
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop
					} // end of the for loop
				} // end of the if loop
			} // end of the if loop
		} // end of the try block
		catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		return bProductRole;
	}

	/**
	 *  DESCRIPTION :   This function will Populate the Business Object Called
	 *                                  BProductDetailProperty and also get all the Connectable Products from Ninas
	 *
	 *  @param          :       Vector vctGetProductConnectivityInfo, Long CustomerID
	 *
	 */
	public void vCheckValidationForProperty(long lServiceAddressID,
			long lNewAddressID, Long lCustomerID) throws Exception {

		// Begin DEL v9.01d
		// String strDescription = "";                           //Local Varaible Declaration
		// End DEL v9.01d
		boolean bFlagToContinue = true;

		// Begin DEL v9.01d
		// Vector vctInternal = new Vector();                            // internal local vector
		// End DEL v9.01d
		// Object of vctProductRole for making the business object
		BProductDetailProperty bProductDetailProperty = null;
		BProductRole bProductRole = null;

		// BEGIN ADD V6.10e
		boolean bCheckDSL = false;

		// END ADD V6.10e

		try {
			if (null != teleSessionMgr
					.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

				// Vector for storing all the Data that is populated in the tablular form
				bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

				if (FINAL_ZERO == bProductDetailProperty.lProductID.longValue()) {
					bFlagToContinue = false;
				} // end of the if loop

				if (bFlagToContinue) {

					// BEGIN ADD V6.10e
					bCheckDSL = bApplyDSLCheck(bProductDetailProperty, bSession);

					// END ADD V6.10e
					long lAddressID = 0;
					boolean bFoundProduct = true;
					Vector vctGetProductConnectivityInfo = new Vector();

					if (null != teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct)) {

						// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
						bProductRole = (BProductRole) teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct);

						BProductRoleDetail bProductRoleDetail = null;

						for (int iCounter = FINAL_ZERO; iCounter < bProductRole.vctProductRole
								.size(); iCounter++) {
							bProductRoleDetail = new BProductRoleDetail();
							bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
									.elementAt(iCounter);

							if (GAfeDescription.lGetTypeId(string_ROLETYPE_USER) == bProductRoleDetail.lRoleTypeID
									.longValue()) {
								bProductRoleDetail = new BProductRoleDetail();
								bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
										.elementAt(iCounter);

								break;
							}
						}

						if ((null != bProductRoleDetail)
								&& (GAfeDescription.lGetTypeId(string_ROLETYPE_USER) == bProductRoleDetail.lRoleTypeID
										.longValue())) {
							lAddressID = bProductRoleDetail.lAddressID
									.longValue();

							long lServiceAddressIDNew = 0;

							addressTable = (Address) teleSessionMgr
									.getTable(string_ADDRESS); // Getting the Customer table from the session

							AddressRow addressRow = null;

							addressRow = (AddressRow) addressTable
									.adSearchByAddressID(lAddressID);

							if (null != addressRow) {
								lServiceAddressIDNew = addressRow.lServiceAddressID;
							}

							if (FINAL_ZERO != lAddressID) {
								if (lServiceAddressIDNew != lServiceAddressID) {
									BProductDetailProperty bProductDetailPropertyTemp = null;

									// BEGIN DELETE V6.10b
									// vctGetProductConnectivityInfo = vctGetConnectivityInfoFromFirstAddressID(lNewAddressID);
									// END DELETE V6.10b
									// BEGIN ADD V6.10b
									// END ADD V6.10b
									try {
										vctGetProductConnectivityInfo = vctGetConnectivityInfoFromFirstAddressID(lNewAddressID);
									} catch (AfeException e) {

										// BEGIN DELETE V6.10e

										/*
										 *                  if( GPermission.bCheckPermission( "AFEORD01", "DeActivatie", bSession) &&
										 *                                  (e.strGetErrCode().equalsIgnoreCase(Constants.ERR_NEIGHBOUR_SAP_NOT_FOUND)))
										 *                                  {
										 *                                         GLogger.chkpt("LProduct , vCheckValidationForProperty , No neighbours found - Consuming for DSL.");
										 *                                       }else throw e;
										 */

										// END DELETE V6.10e
										// BEGIN ADD V6.10e
										if (!bCheckDSL) {
											throw e;
										}

										// END ADD V6.10e
									}

									// END ADD V6.10b
									// put begin delete and then begin add
									// BEGIN DELETE V 5.61b
									// bProductDetailPropertyTemp        = objNValidateNinasProduct(vctGetProductConnectivityInfo, lCustomerID);
									// END DELETE V 5.61b
									// BEGIN ADD V 5.61b

									/*
									 * BEGIN MODIFY V6.10g
									 * Additional flag added in the method signature.Flag is required to ensure that the product ids
									 * won't get copied into the return object if the details are not present in the ninas for non-DSL products.
									 * i.e. if the address is not connectible (its a manual address)
									 */

									// bProductDetailPropertyTemp = objNValidateNinasProduct(vctGetProductConnectivityInfo, lCustomerID, lNewAddressID);
									bProductDetailPropertyTemp = objNValidateNinasProduct(
											vctGetProductConnectivityInfo,
											lCustomerID, lNewAddressID, false);

									// END MODIFY V6.10g
									// END ADD V 5.61b

									if ((null != bProductDetailPropertyTemp.vctMainProductLines)
											&& (FINAL_ZERO != bProductDetailPropertyTemp.vctMainProductLines
													.size())) {
										for (int iCounter = FINAL_ZERO; iCounter < bProductDetailPropertyTemp.vctMainProductLines
												.size(); iCounter++) {
											Vector vctSInternal =null;

											vctSInternal = (Vector) bProductDetailPropertyTemp.vctMainProductLines
													.elementAt(iCounter);

											if ((String
													.valueOf(bProductDetailProperty.lProductID))
													.equalsIgnoreCase(String
															.valueOf(vctSInternal
																	.elementAt(FINAL_ZERO)))) {
												bFoundProduct = false;

												break;
											} // end of the if loop
											else {
												bFoundProduct = true;
											} // end of the if else if loop
										} // end of the for loop
									} // end of the if loop

									// BEGIN MODIFY V6.10e
									GLogger.debug(CLASS_NAME,
											"checkValidationForProperty",
											"bFoundProduct = " + bFoundProduct);
									GLogger.debug(CLASS_NAME,
											"checkValidationForProperty",
											"bCheckDSL = " + bCheckDSL);

									// BEGIN MODIFY V6.10g
									// if (bFoundProduct || (!bFoundProduct && !bCheckDSL))
									if (bFoundProduct && !bCheckDSL)

									// END MODIFY V6.10g
									// END MODIFY V6.10e
									{
										throw new AfeException(string_ERRAFE_00512);
									} // end of the if loop
								} // end of the if loop
							} // end of the if loop
						} // end of the if loop
					} // end of the if loop
				} // end of the if loop

				teleSessionMgr.putValue(BPRODUCTDETAILPROPERTY_ACPRODUCT,
						bProductDetailProperty);
			} // end of the if loop
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				/* BEGIN DELETE VER: 5.59a */

				// System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
				/* END DELETE VER: 5.59a */
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	}

	/**
	 *  DESCRIPTION :   This function will Populate the Business Object Called
	 *                                  BProductDetailProperty and also get all the Connectable Products from Ninas
	 *
	 *  @param          :       Vector vctGetProductConnectivityInfo, Long CustomerID
	 *
	 *  @return         :       Bussiness Object - BProductDetailProperty
	 */

	//  BEGIN DELETE V 5.61b
	//  public BProductDetailProperty objNValidateNinasProduct(Vector vctGetProductConnectivityInfo, Long CustomerID) throws Exception
	//  END DELETE V 5.61b
	//  BEGIN ADD V 5.61b
	/*
	 * BEGIN MODIFY V6.10g
	 * Added the boolean flag to ensure that the product lines are not copied into return object
	 * based on user profile only.
	 */
	public BProductDetailProperty objNValidateNinasProduct(
			Vector vctGetProductConnectivityInfo, Long CustomerID,
			long lAddressID, boolean bNewLine) throws Exception

	// END MODIFY V6.10g
	//END ADD V 5.61b
	{
		String strDescription = ""; // Local Varaible Declaration
		String strSystem_Ninas = ""; // Local Varaible Declaration
		String strPCompanyID; // Local Varaible Declaration
		String strCCompanyID; // Local Varaible Declaration
		String strTDesc; // Local Varaible Declaration
		Long lObjectTypeID; // Local Varaible Declaration
		Long lProductID = Long.valueOf(0);
		Long lTProductID; // Local Varaible Declaration
		Date dtRFSDate;
		Vector vctExternal = new Vector(); // internal local vector
		Vector vctInternal = new Vector(); // internal local vector

		/* Vector vctBCatSapAddress = new Vector(1); */

		// BEGIN ADD V5.83a
		// LN199:Intro Products could not be taken on any address
		AfeNinasOut objAfeNinasOut = null;

		// END DELETE V5.83a
		// Begin DEL v9.01d
		// boolean bHasOpenAction = false;
		// End DEL v9.01d
		// BEGIN DELETE  V 5.61b
		// long  lAddressID              =       0;
		// END DELETE  V 5.61b
		BProductDetailProperty bProductDetailProperty = new BProductDetailProperty();

		// BEGIN ADD V5.59b
		// ln1714 : Initializing the vector to get the Zone Codes
		Vector vctZone = new Vector(1); // vector to store the zoneids

		// Begin DEL v9.01d
		// long lZipID = 0;
		// BCustomerIntro bCustomerIntro = new BCustomerIntro();
		// End DEL v9.01d
		// END ADD V5.59b

		// BEGIN ADD: ver 5.74a
		// Vector to hold the Existing Lines information
		Vector vctExistingLines = null;

		// Vector to hold whether given product is Saleable or not.
		Vector vctProductSalesInfo = null;
		Vector vctTempProdSalesInfoRow = null;
		boolean bFillDetails = false;
		boolean bCanBeSold = false;

		// END ADD: ver 5.74a
		// BEGIN ADD V6.10a
		String strShowPopUp = string_ERRCOM_False;
		String strShowQuestionnaire = "True";

		// END ADD V6.10a
		// BEGIN ADD V6.10e
		boolean bDSLCheck = false;
		// Begin Add Rel 12.4 MultiDTV
		String strLanguageId = null;
		// End Add Rel 12.4 MultiDTV
		// END ADD V6.10e

		try {

			// BEGIN ADD V6.10e
			if (GPermission.bCheckPermission("AFEORD01", "DeActivatie",
					bSession)) {
				bDSLCheck = true;
			}

			// END ADD V6.10e
			if (null == vctGetProductConnectivityInfo) {
				vctGetProductConnectivityInfo = new Vector(1);

				// BEGIN DELETE ver 6.05f
				// vctGetProductConnectivityInfo = vctGetConnectivityInfo(CustomerID);
				// END DELETE ver 6.05f
				// BEGIN ADD V6.09a
				try {

					// END ADD V6.09a
					// BEGIN ADD ver 6.05f
					vctGetProductConnectivityInfo = vctGetConnectivityInfoFromFirstAddressID(lAddressID);

					// END ADD ver 6.05f
					// BEGIN ADD V6.09a
				} catch (AfeException e) {
					if (e.strGetErrCode().equalsIgnoreCase(
							Constants.ERR_NEIGHBOUR_SAP_NOT_FOUND)) {
						GLogger
								.chkpt("LProduct , objNValidateNinasProduct , No neighbours found - CPS check to be done.");
					}

					// BEGIN ADD V6.10e
					else if (!bDSLCheck) {
						throw e;
					}

					// END ADD V6.10e
					// BEGIN DELETE V6.10e
					// else throw e;
					// END DELETE V6.10e
				}

				// END ADD V6.09a
			}

			// BEGIN ADD: ver 5.74a
			vctExistingLines = vctCheckExistingLines(CustomerID.longValue(),
					lAddressID);

			// END ADD: ver 5.74a
			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			BProductConnectivityInfo bProductConnectivityInfo = null;

			strSystem_Ninas = GAfeDescription.strGetProperty("SYSTEM_ID_NINAS");
			lObjectTypeID = Long.valueOf(GAfeDescription
					.lGetTypeId("OBJECTTYPE_PRODUCT"));

			if ((null != vctGetProductConnectivityInfo)
					&& (FINAL_ZERO != vctGetProductConnectivityInfo.size())) {
				for (int iCounterFV = FINAL_ZERO; iCounterFV < vctGetProductConnectivityInfo
						.size(); iCounterFV++) {
					bProductConnectivityInfo = new BProductConnectivityInfo();
					bProductConnectivityInfo = (BProductConnectivityInfo) vctGetProductConnectivityInfo
							.elementAt(iCounterFV);

					Date dtdate = new Date();

					dtRFSDate = bProductConnectivityInfo.dtRFSDate;

					if (((null == dtRFSDate) || (dtdate.after(dtRFSDate)) || dtdate
							.equals(dtRFSDate))) {
						ExternalReferenceRow externalReferenceRow = null; // Initializing the Object Class for the Vat table

						if (null == externalReferenceTable) {
							externalReferenceTable = (ExternalReference) teleSessionMgr
									.getMasterTable("EXTERNALREFERENCE"); // Getting the Vat table from the session
						}

						externalReferenceRow = externalReferenceTable
								.erSearchBySystemIDandObjectTypeIDandExternalReferenceandabsolete(
										Long.valueOf(strSystem_Ninas).longValue(),
										lObjectTypeID.longValue(),
										bProductConnectivityInfo.iServiceId,
										FINAL_ZERO);

						if (null != externalReferenceRow) {
							lProductID = Long.valueOf(
									externalReferenceRow.lObjectID);

							ProductRow productRow = null; // Initializing the Object Class for the product table

							if (null == productTable) {
								productTable = (Product) teleSessionMgr
										.getMasterTable(string_PRODUCT); // Getting the product table from the session
							}

							productRow = (ProductRow) productTable
									.prSearchByProductIDandObsolete(lProductID
											.longValue(), FINAL_ZERO);
							strPCompanyID = String
									.valueOf(productRow.lCompanyID);

							CustomerRow customerRow = null; // Initializing the Object Class for the Customer table

							customerTable = (Customer) teleSessionMgr
									.getTable(string_CUSTOMER); // Getting the Customer table from the session
							customerRow = (CustomerRow) customerTable
									.crSearchByCustID(CustomerID.longValue());
							strCCompanyID = String
									.valueOf(customerRow.lCompanyID);

							if ((strPCompanyID).equals(strCCompanyID)) {
								lTProductID = lProductID;
								strTDesc = strFindDescription(productRow.lDescription1ID);

								if (FINAL_ZERO == vctExternal.size()) {
									vctInternal = new Vector();
									vctInternal.addElement(lTProductID);
									vctInternal.addElement(strTDesc);
									vctExternal.addElement(vctInternal);
								} else if (vctExternal.size() > FINAL_ZERO) {
									for (int iCount = FINAL_ZERO; iCount < vctExternal
											.size(); iCount++) {
										if (!((String.valueOf(lTProductID))
												.equals(String
														.valueOf(((Vector) vctExternal
																.elementAt(iCount))
																.elementAt(FINAL_ZERO))))) {
											vctInternal = new Vector();
											vctInternal.addElement(lTProductID);
											vctInternal.addElement(strTDesc);

											if (blnIndexProperty(vctExternal,
													lTProductID)) {
												vctExternal
														.addElement(vctInternal);
											} // end of the if loop
										} // end of the if loop
									} // end of the for loop
								} // end of the else loop
							} // end of the if loop

							// BEGIN ADD: ver 5.74a
							vctTempProdSalesInfoRow = new Vector(2);
							bFillDetails = false;

							// check whether the product can be sold or not, based on the capacity status.
							// If the vctProductSalesInfo is not yet initialised,
							if (null == vctProductSalesInfo) {
								vctProductSalesInfo = new Vector(1);
								bFillDetails = true;
							} else {

								// vctProductSalesInfo is initialised, so it will also have
								// atleast one product : search in the existing vector, updating the value if required.
								boolean bFound = false;
								Vector vctTempRow = null;

								for (int iPSCount = FINAL_ZERO; iPSCount < vctProductSalesInfo
										.size(); iPSCount++) {
									vctTempRow = (Vector) vctProductSalesInfo
											.elementAt(iPSCount);

									// if the product ID is found,
									if (lProductID.equals((Long) (vctTempRow
											.elementAt(FINAL_ZERO)))) {

										// If status is false, then check whether the current status is false;
										// if it is, then check the saleability as per capacity status, and set it back
										if (!((Boolean) ((Vector) vctProductSalesInfo
												.elementAt(iPSCount))
												.elementAt(FINAL_ONE))
												.booleanValue()) {
											bCanBeSold = bProductSaleabilityCheck(
													vctExistingLines,
													lProductID,
													bProductConnectivityInfo.iCapacityStatus);
											vctTempRow.setElementAt(
													new Boolean(bCanBeSold),
													FINAL_ONE);
											vctProductSalesInfo.setElementAt(
													vctTempRow, iPSCount);
										}

										bFound = true;

										break;
									}
								} // end of the for loop

								bFillDetails = !bFound;
							}

							if (bFillDetails) {
								bCanBeSold = bProductSaleabilityCheck(
										vctExistingLines,
										lProductID,
										bProductConnectivityInfo.iCapacityStatus);
								vctTempProdSalesInfoRow.addElement(lProductID);
								vctTempProdSalesInfoRow.addElement(new Boolean(
										bCanBeSold));
								vctProductSalesInfo
										.addElement(vctTempProdSalesInfoRow);
							}

							// END ADD: ver 5.74a
						} // end of the if loop
					} // end of the if loop
				} // end of the for loop
			}
			// Begin Add Rel 12.4 MultiDTV

			boolean bIsDTV1 = false;
			boolean bIsATV = false;
			boolean bIsInternet = false;
			boolean bIsTelephone = false;
			boolean bIsIDTV1 = false;
			int iSize=0;
			iSize=vctExternal.size();
				for (int iLoop = iSize - 1; iLoop >= 0; iLoop--) {
					vctInternal = (Vector) vctExternal.elementAt(iLoop);

					if (GAfeDescription.bCheckInList(((Long) vctInternal
							.elementAt(0)).longValue(),
							GAfeDescription.DTV_PACKAGE_PRODUCTID)) 
					{
						bIsDTV1 = true;
					}

					if (((Long) vctInternal.elementAt(0)).intValue() == GAfeDescription.PRODUCT_ATV) {
						bIsATV = true;
					}

					if (((Long) vctInternal.elementAt(0)).intValue() == GAfeDescription.PRODUCT_INTERNET) {
						bIsInternet = true;
					}

					if (((Long) vctInternal.elementAt(0)).intValue() == GAfeDescription.PRODUCT_TELEPHONE) {
						bIsTelephone = true;
					}
					
					if (GAfeDescription.bCheckInList(((Long) vctInternal
							.elementAt(0)).longValue(),
							GAfeDescription.IDTV_PACKAGE_PRODUCTID)) {
						bIsIDTV1 = true;
					}
				}
				
				GLogger.chkpt("bIsDTV1" + bIsDTV1);
				GLogger.chkpt("bIsATV" + bIsATV);
				GLogger.chkpt("bIsInternet" + bIsInternet);
				GLogger.chkpt("bIsTelephone" + bIsTelephone);
				GLogger.chkpt("bIsIDTV1" + bIsIDTV1);

				if(!(bIsDTV1 && bIsATV && bIsInternet && bIsTelephone)){
				
					BServiceException[] bServiceExceptions = null;
					GLogger.chkpt("lAddressID : "+ lAddressID);
					long lSapId = ProductUtils.lGetSAPIdFromAddressId(lAddressID);
					long lLangId = lGetLanguageId(CustomerID.longValue());
					GLogger.chkpt("12.4 lSapId : "+ lSapId);
					
							
					strLanguageId = LanguageUtils.getCatsapLanguageByUserLangId(lLangId);
					
					if(lSapId != 0)
					{
						bServiceExceptions = RProduct.getServiceExceptionsWithReasonBySapId(lSapId, strLanguageId);
					}

					if(bServiceExceptions != null && bServiceExceptions.length > 0)
					{
						String Reason = bServiceExceptions[0].getStrReasonDescription();
						GLogger.chkpt("Reason : " + bServiceExceptions[0].getStrReasonDescription());
						
						if(Reason != null){
							BNode objBNode = LProduct_ext.objGetNodeDetails(lSapId);
							long lNodeId = objBNode.getNodeId();
							BService[] bServicesOnNode = RProduct.getServiceInfoForNode(lNodeId, lLangId);
							if(bServicesOnNode != null && bServicesOnNode.length > 0){
								for(int indexA = 0; indexA < bServiceExceptions.length; indexA++){
									for(int indexB = 0; indexB < bServicesOnNode.length; indexB++){
										if(bServiceExceptions[indexA].getServiceId() == bServicesOnNode[indexB].getServiceId()){
											teleSessionMgr.putValue(GAfeConstants.REASON_EXCEPTION, Reason);
											break;
										}
									}
									if(teleSessionMgr.getValue(GAfeConstants.REASON_EXCEPTION) != null){
										break;
									}
								}
							}
						}
					}
				}
				
				if (!bIsIDTV1){
				teleSessionMgr.putValue("IDTVReasonFlag", Boolean.valueOf(false));
				}
			
			
			// End Add Rel 12.4 MultiDTV

			// BEGIN ADD V6.20a
			// managing services for IDTV from Ninas
			GLogger.chkpt("Managing Services from Ninas for IDTV");

			// boolean bIsDigiTV = false;
			boolean bIsIDTV = false;
			boolean bIsDTV = false;

			for (int iLoop = vctExternal.size() - 1; iLoop >= 0; iLoop--) {
				vctInternal = (Vector) vctExternal.elementAt(iLoop);

				if (GAfeDescription.bCheckInList(((Long) vctInternal
						.elementAt(0)).longValue(),
						GAfeDescription.DTV_PACKAGE_PRODUCTID)) {
					bIsDTV = true;
					GLogger.chkpt("Removing DTV");
					vctExternal.removeElementAt(iLoop);
				} else if (GAfeDescription.bCheckInList(((Long) vctInternal
						.elementAt(0)).longValue(),
						GAfeDescription.IDTV_PACKAGE_PRODUCTID)) {
					bIsIDTV = true;
					GLogger.chkpt("Removing IDTV");
					vctExternal.removeElementAt(iLoop);
				}
			}

			if (bIsIDTV) {
				teleSessionMgr.putValue(
						GAfeConstants.NinasServicesForDigitalTV,Integer.valueOf(
								GAfeDescription.LINETYPE_IDTV));
			} else if (bIsDTV && !bIsIDTV) {
				teleSessionMgr.putValue(
						GAfeConstants.NinasServicesForDigitalTV,Integer.valueOf(
								GAfeDescription.LINETYPE_DTV));
			}

			if (bIsDTV || bIsIDTV) {

				// Begin Add v 7.01a
				// Check if atv multiline is present for the given user.
				// If atv multiline is available then the user is eligible to bye the TSD DTV product.
				// For this set a flag in session.
				
				String strShowDTVPopUp = string_ERRCOM_False;
				
				//Begin Add Rel 12.4 MultiDTV
				boolean bATVOnSameSAP=false;
				boolean bMultiOnSameSAP=false;
				boolean bMultiOnParentSAP=false;
				//End Add Rel 12.4 MultiDTV
				
				//Begin Remove Rel 12.4 MultiDTV
//				long lCustlinkId = LProduct_ext.lGetCustomerLinkID(CustomerID,
//						Long.valueOf(lAddressID));
				//End Remove Rel 12.4 MultiDTV
				// Get all the CPLID of the customer for ATV
				
				
				//Begin Modify Rel 12.4 MultiDTV
				long lSAPId = ProductUtils.lGetSAPIdFromAddressId(lAddressID);
				GLogger.chkpt("show popup  lSAPId " + lSAPId);
				ArrayList  customerLinkIds =ProductUtils.arlGetCustLinkIdFromSapId (lSAPId);
				   
				if (customerLinkIds!= null){
					int iCustLinkSize = customerLinkIds.size();
				 for( int i =0; i< iCustLinkSize ;i++)
				 {
					 GLogger.chkpt("show popup  customerLinkIds.size() " + customerLinkIds.size());				   
					 
					 ArrayList arrATVLines_session = RProduct.arrGetCPLOnCustLinkId((Long)customerLinkIds.get(i),GAfeDescription.PRODUCT_ANALOGTV, FINAL_ZERO,FINAL_ONE);
					 if (arrATVLines_session!=null && (FINAL_ZERO != arrATVLines_session.size())) 
					 {
							iSize = arrATVLines_session.size();
							for (int iCounter = 0; iCounter < iSize; iCounter++) 
							{
								long lProduct = ProductUtils.lGetPackageProduct(((Long) arrATVLines_session.get(iCounter)).longValue());
								GLogger.chkpt("show popup  lProduct " + lProduct);
								if (GAfeDescription.PRODUCTPACKAGEID_ATVMULTI != lProduct)
								{
									bATVOnSameSAP=true;		
									break;  
								}
							}
					 }
					 
					 ArrayList arrATVLines_db = RProduct.arrGetCPLOnCustLinkId((Long)customerLinkIds.get(i),GAfeDescription.PRODUCT_ANALOGTV, FINAL_ZERO,FINAL_TWO);
					 if (arrATVLines_db!=null && (FINAL_ZERO != arrATVLines_db.size())) 
					 {
							iSize = arrATVLines_db.size();
							for (int iCounter = 0; iCounter < iSize; iCounter++) 
							{
								long lProduct = ProductUtils.lGetPackageProductFromDB(((Long) arrATVLines_db.get(iCounter)).longValue());
								GLogger.chkpt("show popup  lProduct " + lProduct);
								if (GAfeDescription.PRODUCTPACKAGEID_ATVMULTI != lProduct)
								{
									bATVOnSameSAP=true;		
									break;  
								}
							}
					 }
					 
					 if (bATVOnSameSAP)
					 {
						 break;
					  }
				 }
				}
				// Changes done for Multi DTV KPI  
				if (!bATVOnSameSAP) {
					if(RProduct.bIsMultiATVPresentOnSap(lSAPId,0,3)||RProduct.bIsMultiDTVPresentOnSap(lSAPId,0,3)){
						bMultiOnSameSAP=true; 
					}else{
						long lparentSAPId=RProduct.lGetParentSapId(lSAPId);
						GLogger.chkpt("show popup  lparentSAPId " + lparentSAPId);
						if (lparentSAPId!=0){ 	
							bMultiOnParentSAP=RProduct.bIsMultiATVPresentOnSap(lparentSAPId,0,3)||RProduct.bIsMultiDTVPresentOnSap(lparentSAPId,0,3); 
						}
					}
				}
				// End Changes done for Multi DTV KPI  
				GLogger.chkpt("show popup  bATVOnSameSAP flag " + bATVOnSameSAP);
				GLogger.chkpt("show popup  bMultiOnSameSAP flag " + bMultiOnSameSAP);
				GLogger.chkpt("show popup  bMultiOnParentSAP flag " + bMultiOnParentSAP);
				if (!bATVOnSameSAP &&!bMultiOnSameSAP && !bMultiOnParentSAP ) 
				{
					strShowDTVPopUp = "True";
				}
				//End Modify Rel 12.4 MultiDTV
				//arrATVLines = RProduct
//						.arrGetCPLOnCustLinkId(lCustlinkId,
//								GAfeDescription.PRODUCT_ANALOGTV, FINAL_ZERO,
//								FINAL_ONE);
//				GLogger.chkpt("No Of Atv lines in Lproduct  "
//						+ arrATVLines.size());
//
//				if (FINAL_ZERO != arrATVLines.size()) {
//					iSize = arrATVLines.size();
//
//					for (int iCounter = 0; iCounter < iSize; iCounter++) {
//
//						// Check if the ATV line is Multi
//						long lProduct = RProduct
//								.lGetPackageProduct(((Long) arrATVLines
//										.get(iCounter)).longValue());
//
//						if (GAfeDescription.PRODUCTPACKAGEID_ATVMULTI == lProduct) {
//							GLogger
//									.chkpt("muti atv line present for customer   ");
//							strShowDTVPopUp = "True";
//
//							break;
//						}
//					}
//				}

				GLogger.chkpt("show popup  strShowDTVPopUp " + strShowDTVPopUp);
				teleSessionMgr.putValue(GAfeConstants.DTV_SHOWPOPUP,
						strShowDTVPopUp);

				// End Add V7.01a
				if (null == productTable) {
					productTable = (Product) teleSessionMgr
							.getMasterTable(string_PRODUCT);
				}

				ProductRow productRow = productTable
						.prSearchByProductIDandObsolete(
								GAfeDescription.PRODUCT_DIGITALTV, FINAL_ZERO);

				if (null != productRow) {
					vctInternal = new Vector();
					strTDesc = strFindDescription(productRow.lDescription1ID);
					vctInternal.addElement(Long.valueOf(
							GAfeDescription.PRODUCT_DIGITALTV));
					vctInternal.addElement(strTDesc);
					GLogger.chkpt("Checking for PRODUCT_DIGITALTV-----"
							+ strTDesc);

					if (blnIndexProperty(vctExternal, Long.valueOf(
							GAfeDescription.PRODUCT_DIGITALTV))) {
						vctExternal.addElement(vctInternal);
					}
				}
			}
			

			// Begin DEL v9.01d
			// BCatsapAddress bCatsapAddress = null;                     //Making an Object of the Role Bussiness Object
			// Making an Object of Customer Loader
			// LCustomer lCustomer = new LCustomer(teleSessionMgr);
			// bHasOpenAction = false;
			// End DEL v9.01d
			customerLinkTable = (CustomerLink) teleSessionMgr
					.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session
			addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

			// BEGIN ADD V 5.61b
			actionTable = (Action) teleSessionMgr.getTable(string_ACTION);

			// END ADD V 5.61b
			// BEGIN DELETE V 5.61b
			// CustomerLinkRow   customerLinkRow =       null;

			// Vector vctObjCLInternal   =       new Vector();
			// vctObjCLInternal          =   customerLinkTable.vctSearchByCustomerIDandObsolete(CustomerID.longValue(), FINAL_ZERO);
			// if (null != vctObjCLInternal)
			// {
			// Taking out the Address ID for the first Record
			// lAddressID      =       0;
			// lAddressID      =       ((CustomerLinkRow)vctObjCLInternal.elementAt(FINAL_ZERO)).lAddressID;
			// END DELETE V 5.61b
			AddressRow addressRow = null;

			// BEGIN ADD V. 7.00a
			AddressRow addressRow1 = null;
			long[] lServiceAddressID = new long[1];
			ArrayList arlAddress = new ArrayList();

			addressRow1 = addressTable.adSearchByAddressID(lAddressID);

			if (null != addressRow1) {
				lServiceAddressID[0] = addressRow1.lServiceAddressID;

				if (0 != lServiceAddressID[0]) {
					objAfeNinasOut = new AfeNinasOut();
					arlAddress = objAfeNinasOut.arrCheckSapLinkDetails(
							lServiceAddressID,
							GAfeDescription.ORDERTYPE_INSTALL);

					if ((null != arlAddress) && (arlAddress.size() > 0)) {
						for (int iCnt = 0; iCnt < arlAddress.size(); iCnt++) {
							bProductDetailProperty.strSapGrp = (String) arlAddress
									.get(iCnt);
						}
					}
				}
			}

			// END ADD V. 7.00a
			//deleting to use new method of getting zone
			Vector vctAddress = new Vector();

			//          vctAddress = addressTable.vctSearchByAddressIDandObsolete(lAddressID, FINAL_ZERO);
			//          if (null != vctAddress && FINAL_ZERO != vctAddress.size()) {
			//              addressRow = (AddressRow) vctAddress.elementAt(FINAL_ZERO);
			//
			//              if ((null != addressRow) && (FINAL_ZERO != addressRow.lServiceAddressID)) {
			//                  bCatsapAddress = new BCatsapAddress();
			//                  bCatsapAddress = lCustomer.objAddressFromSapId(addressRow.lServiceAddressID);
			//              }
			//              //Begin Delete v5.96t
			//              // Comment : The open action is now handled by questionnaire
			//              /*
			//              //If the Catsap Status is 3,4,5 the see for the Open Action
			//              if ((null != bCatsapAddress) && ((3 == bCatsapAddress.iSapStatus) || (4 == bCatsapAddress.iSapStatus) || (5 == bCatsapAddress.iSapStatus))) {
			//                  ActionRow actionRow = null;                                                                                               // Initializing the Object Class for the Vat table
			//
			//                  Vector vctActionInternal = new Vector();
			//                  vctActionInternal = actionTable.vctSearchByActionValueandObsolete(String.valueOf(lAddressID), FINAL_ZERO);
			//
			//                  if (null != vctActionInternal && FINAL_ZERO != vctActionInternal.size()) {
			//                      for (int iCount = FINAL_ZERO; iCount < vctActionInternal.size(); iCount++) {
			//                          if (GAfeDescription.lGetTypeId("ACTIONTYPE_ADDRESSREQUEST") == ((ActionRow) vctActionInternal.elementAt(iCount)).lActionTypeID) {
			//                              bHasOpenAction = false;
			//                          }//end of the if loop
			//                      }//end of the for loop
			//                  }//end of the if loop
			//                  else {
			//                      //Open Action Not Created
			//                      bHasOpenAction = true;
			//                  }
			//              }//end of the if loop
			//              */
			//              //End Delete 5.96t
			//          }//end of the if loop
			//          // Begin Delete : 5.59a
			//          //}//end of the if loop-
			//
			//          //Begin Delete v5.96t
			//          /*
			//          if (bHasOpenAction) {
			//              vctExternal = new Vector();
			//          }
			//          */
			//          //End Delete v5.96t
			//
			//          //BEGIN ADD V5.59b
			//          //LN1714 : Calling the method to get the Zone Codes from the function vctGetCatSapZipInfo
			//
			//          //BEGIN ADD V5.65a
			//          //Made Changes for manual address check
			//          //BEGIN DELETE V 5.67a
			//          //Commented out GLogger Statements for performance enhancement
			//          //GLogger.debug("", "", "inside lproduct customerreturn going to validate bCatsapAddress=="+bCatsapAddress);
			//          //END DELETE V 5.67a
			//
			//          if (null == bCatsapAddress) {
			//              GLogger.debug("", "", "inside lproduct bcatsap null lAddressID==" + lAddressID);
			//              BCustomerAddress bCustomerAddress = new BCustomerAddress();
			//              bCustomerAddress = (BCustomerAddress) teleSessionMgr.getValue("bCustomerAddress_aCCustAdd");
			//
			//              if (null != bCustomerAddress) {
			//
			//                  GLogger.debug("", "", "inside lproduct bcatsap null bCustomerAddress.strHouseNumber==" + bCustomerAddress.strHouseNumber);
			//                  GLogger.debug("", "", "inside lproduct bcatsap null bCustomerAddress.strStreet==" + bCustomerAddress.strStreet);
			//                  GLogger.debug("", "", "inside lproduct bcatsap null bCustomerAddress.strCity==" + bCustomerAddress.strCity);
			//                  GLogger.debug("", "", "inside lproduct bcatsap null bCustomerAddress.strPostCode==" + bCustomerAddress.strPostCode);
			//
			//                  bCustomerIntro.strHouseNumber = bCustomerAddress.strHouseNumber;
			//                  bCustomerIntro.strStreetName = bCustomerAddress.strStreet;
			//                  bCustomerIntro.strZip = bCustomerAddress.strPostCode;
			//                  bCustomerIntro.strCity = bCustomerAddress.strCity;
			//              }
			//              //BEGIN ADD V5.83a
			//              //LN199:Intro Products could not be taken on any address
			//              else {
			//                  Vector vctAddressInternal = new Vector();
			//                  vctAddressInternal = addressTable.vctSearchByAddressIDandObsolete(lAddressID, FINAL_ZERO);
			//                  if (null != vctAddressInternal) {
			//                      addressRow = (AddressRow) vctAddressInternal.elementAt(FINAL_ZERO);
			//                      bCustomerIntro.strHouseNumber = addressRow.strHouseNumber;
			//                      if (0 != addressRow.lServiceAddressID) {
			//                          bCatsapAddress = lCustomer.objAddressFromSapId(addressRow.lServiceAddressID);
			//                          bCustomerIntro.strStreetName = bCatsapAddress.strStreet;
			//                          bCustomerIntro.strZip = bCatsapAddress.strPostcode;
			//                          bCustomerIntro.strCity = bCatsapAddress.strCity;
			//                      } else {
			//                          ManualAddressRow manualAddressRow = null;
			//                          manualAddressRow = manualAddressTable.marSearchByManualAddressID(addressRow.lManualAddressID);
			//                          if (null != manualAddressRow) {
			//                              bCustomerIntro.strStreetName = manualAddressRow.strStreetName;
			//                              bCustomerIntro.strZip = manualAddressRow.strZip;
			//                              bCustomerIntro.strCity = manualAddressRow.strCity;
			//                          }
			//                      }
			//                  }
			//              }
			//              //END DELETE V5.83a
			//          }
			//          //END ADD V5.65a
			//
			//          if (null != bCatsapAddress) {
			//
			//              bCustomerIntro.strHouseNumber = bCatsapAddress.strHouseNumber; //Customer House number
			//              bCustomerIntro.strStreetName = bCatsapAddress.strStreet;              //Customer Street name
			//              bCustomerIntro.strZip = bCatsapAddress.strPostcode;                           //Customer Zip id
			//              bCustomerIntro.strCity = bCatsapAddress.strCity;                              //Customer City
			//          }
			//
			//          //Made Changes for manual address check
			//          //BEGIN DELETE V 5.67a
			//          //GLogger.debug(CLASS_NAME, METHOD_vCheckValidationForProperty, "bCustomerIntro="+bCustomerIntro);
			//          //END DELETE V 5.67a
			//
			//          //BEGIN DELETE V5.83a
			//          //LN199:Intro Products could not be taken on any address
			//          //vctZone = vctGetCatSapZipInfo(bCustomerIntro.strZip, bCustomerIntro.strHouseNumber, bCustomerIntro.strCity, bCustomerIntro.strStreetName);
			//          //END DELETE V5.83a
			//          //BEGIN ADD V5.83a
			//          //LN199:Intro Products could not be taken on any address
			//          //objAfeNinasOut = new AfeNinasOut();
			//using new method to get zone
			// Begin DEL v9.01d
			// String strZone = null;
			// End DEL v9.01d
			// strZone = objAfeNinasOut.strGetZone(bCustomerIntro.strZip, bCustomerIntro.strCity, bCustomerIntro.strStreetName, bCustomerIntro.strHouseNumber);
			// begin delete V6.05i
			// strZone = LTelephony.strGetZoneFromAddressID(lAddressID);
			// if (null != strZone) {
			// vctZone.addElement(strZone);
			// }
			// end delete V6.05i
			// begin add V6.05i
			GLogger
					.debug(
							CLASS_NAME,
							string_METHOD_objNValidateNinasProduct,
							"just before call to vctZone LProduct_ext.vctGetZoneFromAddressID(lAddressID); ");

			// BEGIN ADD V6.10e
			try {

				// END ADD V6.10e
				vctZone = LProduct_ext.vctGetZoneFromAddressID(lAddressID);

				// BEGIN ADD V6.10e
			} catch (Exception ex) {
				if (!bDSLCheck) {
					throw ex;
				}
			}

			// END ADD V6.10e

			// end add V6.05i
			// END DELETE V5.83a
			// BEGIN ADD V6.09a
			// removing Zones from vector vctZone where CPS is not available
			if(vctZone!=null){
			for (int i = vctZone.size() - 1; i >= 0; i--) {
				int iCpsFlag = 0;
				String strTemp = null;
				PreparedStatement psQuery = null;
				ResultSet rsCpsFlag = null;

				try {
					strTemp = string_ZERO + (String) vctZone.elementAt(i);
					psQuery = GConnectDinoman
							.psPrepareStatement(GAfeSql.S_ROUTING_NUMBERS);
					psQuery.setString(1, strTemp);
					GLogger.chkpt("CPS check for Zone : " + strTemp);
					rsCpsFlag = psQuery.executeQuery();

					if (rsCpsFlag.next()) {
						iCpsFlag = rsCpsFlag.getInt("CPS_FLAG");
						GLogger.chkpt("iCpsFlag value returned : " + iCpsFlag);
					} else {
						GLogger.chkpt("Result set is null");
					}
				} finally {
					GConnectDinoman.close(rsCpsFlag);
					GConnectDinoman.close(psQuery);
				}

				if (iCpsFlag == 0) {
					vctZone.removeElementAt(i);
				}
			}
			}
			
			GLogger.chkpt("After CPS Zone check, vctZone" + vctZone);

			// END ADD V6.09a
			GLogger.debug(CLASS_NAME, string_METHOD_objNValidateNinasProduct,
					"vctZone = " + vctZone);

			if ((null != vctZone) && (0 < vctZone.size())) {
				teleSessionMgr.putValue("VCT_ZONEID", vctZone);
				GLogger.debug(CLASS_NAME, string_METHOD_objNValidateNinasProduct,
						"vctZone = " + vctZone);

				// END ADD V5.59b
				// LN1714
				if (null != teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct)) {

					// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
					BProductRole bProductRole = new BProductRole();

					bProductRole = (BProductRole) teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct);
					lAddressID = 0;

					if ((null != bProductRole.vctProductRole)
							&& (FINAL_ZERO != bProductRole.vctProductRole
									.size())) {
						if (null == ((BProductRoleDetail) (bProductRole.vctProductRole
								.elementAt(FINAL_ZERO))).lAddressID) {
							lAddressID = 0;
						} else {
							lAddressID = ((BProductRoleDetail) (bProductRole.vctProductRole
									.elementAt(FINAL_ZERO))).lAddressID
									.longValue();
						}

						// Begin DEL v9.01d
						// long lServiceAddressIDNew = 0;
						// End DEL v9.01d
						// Begin DELETE V 5.61b
						// AddressRow            addressRow                      = null;
						// End DELETE V 5.61b
						//                                                                      Vector vctAddress       =       new Vector();
						vctAddress = addressTable
								.vctSearchByAddressIDandObsolete(lAddressID,
										FINAL_ZERO);

						if ((null != vctAddress)
								&& (FINAL_ZERO != vctAddress.size())) {
							addressRow = (AddressRow) vctAddress
									.elementAt(FINAL_ZERO);
						}

						if (null != addressRow) {
							if ((GAfeDescription.lGetTypeId(string_COUNTRY_BELGIUM) == addressRow.lCountryID)
									|| (GAfeDescription.COUNTRY_NEDERLAND == addressRow.lCountryID)) {

								// ProductRow productRow = null;                                                                                                 // Initializing the Object Class for the product table
								if (null == productTable) {
									productTable = (Product) teleSessionMgr
											.getMasterTable(string_PRODUCT); // Getting the product table from the session
								}

								ProductRow productRow = (ProductRow) productTable
										.prSearchByProductIDandObsolete(
												GAfeDescription
														.lGetTypeId(string_PRODUCT_CPS),
												FINAL_ZERO);

								if (null != productRow) {
									vctInternal = new Vector();
									strTDesc = strFindDescription(productRow.lDescription1ID);
									vctInternal
											.addElement(Long.valueOf(
													GAfeDescription
															.lGetTypeId(string_PRODUCT_CPS)));
									vctInternal.addElement(strTDesc);

									if (blnIndexProperty(vctExternal, Long.valueOf(
											GAfeDescription
													.lGetTypeId(string_PRODUCT_CPS)))) {
										vctExternal.addElement(vctInternal);
									}
								} // end of the if loop
							}

							// BEGIN ADD V6.20a

							/*
							 //if (GAfeDescription.lGetTypeId("COUNTRY_BELGIUM") == addressRow.lCountryID )
							 //{
							 ProductRow productRow = null;
							 GLogger.chkpt("Checking for Product");
							 if (null == productTable)
							 {
							 productTable = (Product) teleSessionMgr.getMasterTable("PRODUCT");
							 }
							 productRow = (ProductRow) productTable.prSearchByProductIDandObsolete(GAfeDescription.PRODUCT_DIGITALTV, FINAL_ZERO);
							 if (null != productRow)
							 {
							 vctInternal = new Vector();
							 strTDesc = strFindDescription(productRow.lDescription1ID);
							 vctInternal.addElement(Long.valueOf(GAfeDescription.PRODUCT_DIGITALTV));
							 vctInternal.addElement(strTDesc);
							 GLogger.chkpt("Checking for PRODUCT_DIGITALTV-----"+strTDesc);
							 GLogger.chkpt("Checking for PRODUCT_DIGITALTV-----"+GAfeDescription.PRODUCT_DIGITALTV);
							 if (blnIndexProperty(vctExternal, Long.valueOf(GAfeDescription.PRODUCT_DIGITALTV)))
							 {
							 vctExternal.addElement(vctInternal);
							 }
							 }
							 //}
							 */

							// END ADD V6.20a
							/*
							 * //BEGIN DELETE V 6.09a
							 * moving check for VON out of if(null!=vctZone) as VON is available in all zones
							 *
							 * // Begin ADD v.6.07g
							 *
							 * if (GAfeDescription.lGetTypeId("COUNTRY_BELGIUM") == addressRow.lCountryID ) {
							 *          ProductRow productRow = null;                                                                                                    // Initializing the Object Class for the product table
							 *              GLogger.chkpt("Checking for Product");
							 *          if (null == productTable) {
							 *              productTable = (Product) teleSessionMgr.getMasterTable("PRODUCT");   // Getting the product table from the session
							 *          }
							 *
							 *          productRow = (ProductRow) productTable.prSearchByProductIDandObsolete(GAfeDescription.lGetTypeId("PRODUCT_VON"), FINAL_ZERO);
							 *
							 *          if (null != productRow) {
							 *              vctInternal = new Vector();
							 *              strTDesc = strFindDescription(productRow.lDescription1ID);
							 *              vctInternal.addElement(Long.valueOf(GAfeDescription.lGetTypeId("PRODUCT_VON")));
							 *              vctInternal.addElement(strTDesc);
							 *
							 *              GLogger.chkpt("Checking for Von-----"+strTDesc);
							 *                   GLogger.chkpt("Checking for Von-----"+GAfeDescription.lGetTypeId("PRODUCT_VON"));
							 *              if (blnIndexProperty(vctExternal, Long.valueOf(GAfeDescription.lGetTypeId("PRODUCT_VON")))) {
							 *                  vctExternal.addElement(vctInternal);
							 *              }
							 *          }//end of the if loop
							 *      //end of the if loop
							 *      }//end of the if loop
							 *      //End ADD for v.6.07g
							 *                       //END DELETE V 6.09a
							 */
						} // end of the if loop
					} // end of the if loop
				}
			}

			// BEGIN ADD V7.06a
			// To Show Mobile Product in the drop down list in Product Detail screen
			if (null != teleSessionMgr.getValue(string_BProductDetailRole_aCProduct)) {
				BProductRole bProductRole = new BProductRole();

				bProductRole = (BProductRole) teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct);
				lAddressID = 0;

				if ((null != bProductRole.vctProductRole)
						&& (FINAL_ZERO != bProductRole.vctProductRole.size())) {
					if (null == ((BProductRoleDetail) (bProductRole.vctProductRole
							.elementAt(FINAL_ZERO))).lAddressID) {
						lAddressID = 0;
					} else {
						lAddressID = ((BProductRoleDetail) (bProductRole.vctProductRole
								.elementAt(FINAL_ZERO))).lAddressID.longValue();
					}
				}

				// Begin Add ver 7.07c
				if (0 != lAddressID) {
					vctAddress = addressTable.vctSearchByAddressIDandObsolete(
							lAddressID, FINAL_ZERO);

					if ((null != vctAddress)
							&& (FINAL_ZERO != vctAddress.size())) {
						addressRow = (AddressRow) vctAddress
								.elementAt(FINAL_ZERO);
					}
				}

				// End Add ver 7.07c
				// Begin Add V8.00c
				if (null != teleSessionMgr.getValue(string_MVNO_FOREIGN)) {
					teleSessionMgr.removeValue(string_MVNO_FOREIGN);
				}

				// End Add V8.00c

				if (null != addressRow) {
					if (null == productTable) {
						productTable = (Product) teleSessionMgr
								.getMasterTable(string_PRODUCT); // Getting the product table from the session
					}

					ProductRow productRow = (ProductRow) productTable
							.prSearchByProductIDandObsolete(GAfeDescription
									.lGetTypeId(string_PRODUCT_MOBILE), FINAL_ZERO);

					if (null != productRow) {

						// Begin Add V8.00c
						if (GAfeDescription.lGetTypeId(string_COUNTRY_BELGIUM) != addressRow.lCountryID) {
							teleSessionMgr.putValue(string_MVNO_FOREIGN,
									Boolean.valueOf(true));
						}

						// End Add V8.00c
						vctInternal = new Vector();
						strTDesc = strFindDescription(productRow.lDescription1ID);
						vctInternal.addElement(Long.valueOf(GAfeDescription
								.lGetTypeId(string_PRODUCT_MOBILE)));
						vctInternal.addElement(strTDesc);

						if (blnIndexProperty(vctExternal, Long.valueOf(
								GAfeDescription.lGetTypeId(string_PRODUCT_MOBILE)))) {
							vctExternal.addElement(vctInternal);
						}
					}

					else {
						productRow = (ProductRow) productTable
								.prSearchByProductIDandObsolete(
										GAfeDescription.PRODUCT_FULLMOBILE,
										FINAL_ZERO);

						if (null != productRow) {

							if (GAfeDescription.lGetTypeId(string_COUNTRY_BELGIUM) != addressRow.lCountryID) {
								GLogger.debug(CLASS_NAME,
										string_METHOD_objNValidateNinasProduct,
										"Full Mobile Foreign");
								teleSessionMgr.putValue(string_MVNO_FOREIGN,
										Boolean.valueOf(true));
							}

							vctInternal = new Vector();
							strTDesc = strFindDescription(productRow.lDescription1ID);
							vctInternal.addElement(Long.valueOf(
									GAfeDescription.PRODUCT_FULLMOBILE));
							vctInternal.addElement(strTDesc);

							if (blnIndexProperty(vctExternal, Long.valueOf(
									GAfeDescription.PRODUCT_FULLMOBILE))) {
								vctExternal.addElement(vctInternal);
							}
						}

					}
				}
			}

			// END ADD V7.06a

			// Begin Add 9.02d
			if (null != addressRow) {
				if (null == productTable) {
					productTable = (Product) teleSessionMgr
							.getMasterTable(string_PRODUCT); // Getting the product table from the session
				}

				ProductRow productRow = (ProductRow) productTable
						.prSearchByProductIDandObsolete(
								GAfeDescription.PRODUCT_FULLMOBILE, FINAL_ZERO);

				if (null != productRow) {

					if (GAfeDescription.lGetTypeId(string_COUNTRY_BELGIUM) != addressRow.lCountryID) {
						teleSessionMgr.putValue(string_MVNO_FOREIGN, Boolean.valueOf(
								true));
					}
					vctInternal = new Vector();
					strTDesc = strFindDescription(productRow.lDescription1ID);
					vctInternal.addElement(Long
							.valueOf(GAfeDescription.PRODUCT_FULLMOBILE));
					vctInternal.addElement(strTDesc);

					if (blnIndexProperty(vctExternal, (Long
							.valueOf(GAfeDescription.PRODUCT_FULLMOBILE)))) {
						vctExternal.addElement(vctInternal);
					}
				}
			}
			// End Add 9.02d
			GLogger.chkpt("Entering TTV product case");
			if (null != addressRow)
			{
				if (GAfeDescription.lGetTypeId(string_COUNTRY_BELGIUM) == addressRow.lCountryID)
				{
					if (null == productTable) {
						productTable = (Product) teleSessionMgr.getMasterTable(string_PRODUCT); // Getting the product table from the session
					}

					ProductRow productRow = (ProductRow) productTable.prSearchByProductIDandObsolete(GAfeDescription.PRODUCT_TTV, FINAL_ZERO);

					if (null != productRow)
					{
						vctInternal = new Vector();
						strTDesc = strFindDescription(productRow.lDescription1ID);
						vctInternal.addElement(Long.valueOf(GAfeDescription.PRODUCT_TTV));
						vctInternal.addElement(strTDesc);
						GLogger.chkpt("TTV product case>>"+strTDesc);
						if (blnIndexProperty(vctExternal, (Long.valueOf(GAfeDescription.PRODUCT_TTV)))) {
							vctExternal.addElement(vctInternal);
							GLogger.chkpt("TTV product added in vctExternal>>"+vctExternal+" internal vector value"+vctInternal);
						}
					}
				}
			}
			GLogger.chkpt("After TTV product case>>"+vctExternal);
			// BEGIN ADD V6.09a
			// moving changes of V6.07g ie. check for VON out of if(null!=vctZone) as VON is available in all zones
			if (null != teleSessionMgr.getValue(string_BProductDetailRole_aCProduct)) {

				// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
				BProductRole bProductRole = new BProductRole();

				bProductRole = (BProductRole) teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct);
				lAddressID = 0;

				if ((null != bProductRole.vctProductRole)
						&& (FINAL_ZERO != bProductRole.vctProductRole.size())) {
					if (null == ((BProductRoleDetail) (bProductRole.vctProductRole
							.elementAt(FINAL_ZERO))).lAddressID) {
						lAddressID = 0;
					} else {
						lAddressID = ((BProductRoleDetail) (bProductRole.vctProductRole
								.elementAt(FINAL_ZERO))).lAddressID.longValue();
					}

					vctAddress = addressTable.vctSearchByAddressIDandObsolete(
							lAddressID, FINAL_ZERO);

					if ((null != vctAddress)
							&& (FINAL_ZERO != vctAddress.size())) {
						addressRow = (AddressRow) vctAddress
								.elementAt(FINAL_ZERO);
					}

					if (null != addressRow) {

						// BEGIN DELETE V7.05a
						// if (GAfeDescription.lGetTypeId("COUNTRY_BELGIUM") == addressRow.lCountryID ) {
						// END DELETE V7.05a
						// BEGIN ADD V7.05a
						// If Internet has been added (connectable for Internet COAX) then add VON also.
						if (!blnIndexProperty(vctExternal, Long.valueOf(
								GAfeDescription.PRODUCT_INTERNET))) {

							// END ADD V7.05a
							// ProductRow productRow = null;                                                                                                      // Initializing the Object Class for the product table
							GLogger.chkpt("Checking for Product");

							if (null == productTable) {
								productTable = (Product) teleSessionMgr
										.getMasterTable(string_PRODUCT); // Getting the product table from the session
							}

							ProductRow productRow = (ProductRow) productTable
									.prSearchByProductIDandObsolete(
											GAfeDescription
													.lGetTypeId(string_PRODUCT_VON),
											FINAL_ZERO);

							if (null != productRow) {
								vctInternal = new Vector();
								strTDesc = strFindDescription(productRow.lDescription1ID);
								vctInternal.addElement(Long.valueOf(GAfeDescription
										.lGetTypeId(string_PRODUCT_VON)));
								vctInternal.addElement(strTDesc);
								GLogger.chkpt(string_CheckingForVon
										+ strTDesc);
								GLogger.chkpt(string_CheckingForVon
										+ GAfeDescription
												.lGetTypeId(string_PRODUCT_VON));

								if (blnIndexProperty(vctExternal, Long.valueOf(
										GAfeDescription
												.lGetTypeId(string_PRODUCT_VON)))) {
									vctExternal.addElement(vctInternal);
								}
							} // end of the if loop
						} // end of the if loop

						// Putting checks for DSL
						// Here the country may not be belgium but the address row will not be null
						// BEGIN ADD V6.10a
						// Add the variables bShowPopUp and bShowQuestionnaire to the session with default values
						// ProductRow productRow = null;// Initializing the Object Class for the product table
						GLogger
								.chkpt("Checking for Product of Internet for DSL");

						if (null == productTable) {
							productTable = (Product) teleSessionMgr
									.getMasterTable(string_PRODUCT); // Getting the product table from the session
						}

						ProductRow productRow = (ProductRow) productTable
								.prSearchByProductIDandObsolete(
										GAfeDescription.PRODUCT_INTERNET,
										FINAL_ZERO);

						// Proceed only if master data has a row for INTERNET
						if (null != productRow) {

							// calculating the values of showQuestionnaire and showPopUp
							// BEGIN MODIFY V6.10g
							// BEGIN MODIFY V6.10e
							if (bDSLCheck && bNewLine)

							// END MODIFY V6.10e
							// END MODIFY V6.10g
							{
								GLogger
										.debug(
												CLASS_NAME,
												string_METHOD_objNValidateNinasProduct,
												"********DSL Profile successfull******");

								// blnIndexProperty returns false if the element is already added
								if (blnIndexProperty(vctExternal, Long.valueOf(
										GAfeDescription.PRODUCT_INTERNET))) {

									// Since internet is not yet added, add internet to the vctExternal for DSL
									GLogger
											.debug(
													CLASS_NAME,
													string_METHOD_objNValidateNinasProduct,
													"Internet not existing so populating Internet");
									vctInternal = new Vector();
									strTDesc = strFindDescription(productRow.lDescription1ID); // todo check if description is right? No as loop is finished
									vctInternal.addElement(Long.valueOf(
											GAfeDescription.PRODUCT_INTERNET));
									vctInternal.addElement(strTDesc);

									// BEGIN ADD V6.10e
									if (vctExternal.isEmpty()) {

										// END ADD V6.10e
										vctExternal.addElement(vctInternal);

										// BEGIN ADD V6.10e
									} else {

										// vctExternal.setElementAt(vctInternal, 0);
										vctExternal.addElement(vctInternal);
									}

									// END ADD V6.10e

									// Since only DSL product is available no pop up is required. Also no questionnaire is needed
									strShowPopUp = string_ERRCOM_False;
									strShowQuestionnaire = string_ERRCOM_False;
								} else {

									// Means Internet was already populated, thus both COAX and DSL are available
									// Thus populate the value of POPUP in session as true
									GLogger.debug(CLASS_NAME,
											string_METHOD_objNValidateNinasProduct,
											"Internet already existing");
									strShowPopUp = "True";

									// todo saving in session back?
								}
							} else {

								// Means no DSL profile so normal flow will execute
								// pop up is not to be shown
								GLogger.debug(CLASS_NAME,
										string_METHOD_objNValidateNinasProduct,
										"********DSL Profile FAIL******");
								strShowPopUp = string_ERRCOM_False;
							}
						}

						// Saving the values back into the session
						GLogger
								.debug(CLASS_NAME,
										string_METHOD_objNValidateNinasProduct,
										"Final value of strShowPopUp = "
												+ strShowPopUp);
						GLogger.debug(CLASS_NAME,
								string_METHOD_objNValidateNinasProduct,
								"Final value of strShowQuestionnaire = "
										+ strShowQuestionnaire);
						teleSessionMgr.putValue(GAfeConstants.DSL_SHOWPOPUP,
								strShowPopUp);
						teleSessionMgr.putValue(
								GAfeConstants.DSL_SHOWQUESTIONNAIRE,
								strShowQuestionnaire);

						// END ADD V6.10a
					}
				}
			}

			// END ADD V6.09a
			// BEGIN ADD V5.59b
			// LN1714
			// END ADD V5.59b
			// LN1714
			// BEGIN ADD V5.65a
			// Made Changes for manual address check
			// BEGIN DELETE V 5.63a
			// LN1714: Remove the exception
			// BEGIN ADD V5.62a
			// LN1714 : Exception thrown when the customer's address is not connectable
			if ((null != vctExternal) && (0 == vctExternal.size())) {
				throw new AfeException("ERRAFE_00588");
			}

			// END ADD V5.62a
			// END DELETE V 5.63a
			// BEGIN ADD V5.65a

			// BEGIN ADD: ver 5.74a
			bProductDetailProperty.vctProductSalesInfo = vctProductSalesInfo;

			// END ADD: ver 5.74a
			bProductDetailProperty.vctMainProductLines = vctExternal;
			bProductDetailProperty.lCurrencyID = Long.valueOf(GAfeDescription
					.lGetTypeId(string_CURRENCY_DEFAULT));
			GLogger.chkpt("checking Bo for main product lines "+bProductDetailProperty);

			// Begin DEL v9.01d
			// CurrencyRow currencyRow = null;           // Initializing the Object Class for the Currency table
			// End DEL v9.01d
			if (null == currencyTable) {
				currencyTable = (Currency) teleSessionMgr
						.getMasterTable(string_CURRENCY); // Getting the Customer table from the session
			}

			// BEGIN ADD V5.71a
			// Call for a New method to display Analog TV Line along with other Line types
			// Begin Delete v5.96t
			// Comment: This is no Longer required
			// addTVLine(bProductDetailProperty, teleSessionMgr, bSession.lLanguageId);
			// ENd v5.96t
			// END ADD V5.71a
			Vector vctobjCurrency = new Vector();

			vctobjCurrency = currencyTable.vctGetAllExisting();

			// Begin DEL v9.01d
			// PaymentMethodRow paymentMethodRow = null;         // Initializing the Object Class for the PaymentMethod table
			// End DEL v9.01d
			if (null == paymentMethodTable) {
				paymentMethodTable = (PaymentMethod) teleSessionMgr
						.getMasterTable(string_PAYMENTMETHOD); // Getting the Customer table from the session
			}

			Vector vctobjPMInternal = new Vector();

			vctobjPMInternal = paymentMethodTable.vctGetAllExisting();
			bProductDetailProperty.iPayMethChecked = FINAL_ZERO;

			if (null != vctobjCurrency) {

				// for each  record in the vector of Currency Records
				for (int iASCounter = FINAL_ZERO; iASCounter < vctobjCurrency
						.size(); iASCounter++) {
					vctInternal = new Vector();
					vctInternal.addElement(Long.valueOf(
							((CurrencyRow) (vctobjCurrency
									.elementAt(iASCounter))).lCurrencyID));
					vctInternal
							.addElement((String) ((CurrencyRow) (vctobjCurrency
									.elementAt(iASCounter))).strCurrency);
					bProductDetailProperty.vctCurrency.addElement(vctInternal);
				} // end of the for loop
			} // end of the if loop for handling null pointer exception

			if (null != vctobjPMInternal) {

				// for each  record in the vector of PaymentMethod Records
				for (int iACounter = FINAL_ZERO; iACounter < vctobjPMInternal
						.size(); iACounter++) {
					ObjectDescriptionRow objectDescriptionRow = null; // Initializing the Object Class for the Currency table

					if (null == objectDescriptionTable) {
						objectDescriptionTable = (ObjectDescription) teleSessionMgr
								.getMasterTable(string_OBJECTDESCRIPTION); // Getting the Customer table from the session
					}

					objectDescriptionRow = (ObjectDescriptionRow) objectDescriptionTable
							.odrSearchByDescIDAndLangID(
									((PaymentMethodRow) (vctobjPMInternal
											.elementAt(iACounter))).lDescriptionID,
									(Long.valueOf(string_ONE)).longValue());

					if (null != objectDescriptionRow) {
						strDescription = objectDescriptionRow.strDescription;
					}

					vctInternal = new Vector();
					vctInternal.addElement(Long.valueOf(
							((PaymentMethodRow) (vctobjPMInternal
									.elementAt(iACounter))).lPaymentMethodID));
					vctInternal.addElement(strDescription);
					bProductDetailProperty.vctPaymentMethod
							.addElement(vctInternal);
				} // end of the for loop
			} // end of the if loop for handling null pointer exception
		} catch (AfeException afe) {
			GLogger.logException(afe);

			throw afe;
		} catch (Exception ex) {
			GLogger.logException(ex);

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bProductDetailProperty;
	}

	/**
	 *  DESCRIPTION :   This function will Populate the Business Object Called
	 *                                  BProductDetailProperty and also get all the Connectable Products from Ninas
	 *
	 *  @param          :       Vector vctGetProductConnectivityInfo, Long CustomerID
	 *
	 *  @return         :       Bussiness Object - BProductDetailProperty
	 */
	public BProductDetailProperty objValidateNinasProduct(
			Vector vctGetProductConnectivityInfo, Long CustomerID)
			throws Exception {
		String strDescription = ""; // Local Varaible Declaration
		String strSystem_Ninas = ""; // Local Varaible Declaration
		String strPCompanyID; // Local Varaible Declaration
		String strCCompanyID; // Local Varaible Declaration
		String strTDesc; // Local Varaible Declaration
		Long lObjectTypeID; // Local Varaible Declaration
		Long lProductID = Long.valueOf(0);
		Long lTProductID; // Local Varaible Declaration
		Date dtRFSDate;
		Vector vctExternal = new Vector(); // internal local vector
		Vector vctInternal = new Vector(); // internal local vector

		// Object of vctProductRole for making the business object
		BProductDetailProperty bProductDetailProperty = new BProductDetailProperty();

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			BProductConnectivityInfo bProductConnectivityInfo = null;

			strSystem_Ninas = GAfeDescription.strGetProperty("SYSTEM_ID_NINAS");
			lObjectTypeID = Long.valueOf(GAfeDescription
					.lGetTypeId("OBJECTTYPE_PRODUCT"));

			// Loading the Tables Into Memory
			if (null == externalReferenceTable) {
				externalReferenceTable = (ExternalReference) teleSessionMgr
						.getMasterTable("EXTERNALREFERENCE"); // Getting the Vat table from the session
			}

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the product table from the session
			}

			customerTable = (Customer) teleSessionMgr.getTable(string_CUSTOMER); // Getting the Customer table from the session

			for (int iCounterFV = FINAL_ZERO; iCounterFV < vctGetProductConnectivityInfo
					.size(); iCounterFV++) {
				bProductConnectivityInfo = null;
				bProductConnectivityInfo = (BProductConnectivityInfo) vctGetProductConnectivityInfo
						.elementAt(iCounterFV);

				Date dtdate = new Date();

				dtRFSDate = bProductConnectivityInfo.dtRFSDate;

				if ((dtdate.after(dtRFSDate)) || dtdate.equals(dtRFSDate)
						|| (null == dtRFSDate)) {
					ExternalReferenceRow externalReferenceRow = null; // Initializing the Object Class for the Vat table

					externalReferenceRow = externalReferenceTable
							.erSearchBySystemIDandObjectTypeIDandExternalReferenceandabsolete(
									Long.valueOf(strSystem_Ninas).longValue(),
									lObjectTypeID.longValue(),
									bProductConnectivityInfo.iServiceId,
									FINAL_ZERO);

					if (null != externalReferenceRow) {
						lProductID = Long.valueOf(externalReferenceRow.lObjectID);

						ProductRow productRow = null; // Initializing the Object Class for the product table

						productRow = (ProductRow) productTable
								.prSearchByProductIDandObsolete(lProductID
										.longValue(), FINAL_ZERO);
						strPCompanyID = String.valueOf(productRow.lCompanyID);

						CustomerRow customerRow = null; // Initializing the Object Class for the Customer table

						customerRow = (CustomerRow) customerTable
								.crSearchByCustID(CustomerID.longValue());
						strCCompanyID = String.valueOf(customerRow.lCompanyID);

						if ((strPCompanyID).equals(strCCompanyID)) {
							lTProductID = lProductID;
							strTDesc = strFindDescription(productRow.lDescription1ID);

							if (FINAL_ZERO == vctExternal.size()) {
								vctInternal = new Vector();
								vctInternal.addElement(lTProductID);
								vctInternal.addElement(strTDesc);
								vctExternal.addElement(vctInternal);
							} else if (vctExternal.size() > FINAL_ZERO) {
								for (int iCount = FINAL_ZERO; iCount < vctExternal
										.size(); iCount++) {
									if (!((String.valueOf(lTProductID))
											.equals(String
													.valueOf(((Vector) vctExternal
															.elementAt(iCount))
															.elementAt(FINAL_ZERO))))) {
										vctInternal = new Vector();
										vctInternal.addElement(lTProductID);
										vctInternal.addElement(strTDesc);

										if (blnIndexProperty(vctExternal,
												lTProductID)) {
											vctExternal.addElement(vctInternal);
										} // end of the if loop
									} // end of the if loop
								} // end of the for loop
							} // end of the else loop
						} // end of the if loop
					} // end of the if loop
				} // end of the if loop
			} // end of the for loop

			// BEGIN ADD V6.20a
			// managing services for IDTV from Ninas
			GLogger.chkpt("Managing Services from Ninas for IDTV");

			boolean bIsDigiTV = false;

			for (int iLoop = vctExternal.size() - 1; iLoop >= 0; iLoop--) {
				vctInternal = (Vector) vctExternal.elementAt(iLoop);

				if (GAfeDescription.bCheckInList(((Long) vctInternal
						.elementAt(0)).longValue(),
						GAfeDescription.DTV_PACKAGE_PRODUCTID)) {
					bIsDigiTV = true;
					GLogger.chkpt("Removing DTV");
					teleSessionMgr.putValue(
							GAfeConstants.NinasServicesForDigitalTV,
							Integer.valueOf(GAfeDescription.LINETYPE_DTV));
					vctExternal.removeElementAt(iLoop);
				} else if (GAfeDescription.bCheckInList(((Long) vctInternal
						.elementAt(0)).longValue(),
						GAfeDescription.IDTV_PACKAGE_PRODUCTID)) {
					bIsDigiTV = true;
					GLogger.chkpt("Removing IDTV");
					teleSessionMgr.putValue(
							GAfeConstants.NinasServicesForDigitalTV,
							Integer.valueOf(GAfeDescription.LINETYPE_IDTV));
					vctExternal.removeElementAt(iLoop);
				}
			}

			if (bIsDigiTV) {
				if (null == productTable) {
					productTable = (Product) teleSessionMgr
							.getMasterTable(string_PRODUCT);
				}

				ProductRow productRow = productTable
						.prSearchByProductIDandObsolete(
								GAfeDescription.PRODUCT_DIGITALTV, FINAL_ZERO);

				if (null != productRow) {
					vctInternal = new Vector();
					strTDesc = strFindDescription(productRow.lDescription1ID);
					vctInternal.addElement(Long.valueOf(
							GAfeDescription.PRODUCT_DIGITALTV));
					vctInternal.addElement(strTDesc);
					GLogger.chkpt("Checking for PRODUCT_DIGITALTV-----"
							+ strTDesc);

					if (blnIndexProperty(vctExternal, Long.valueOf(
							GAfeDescription.PRODUCT_DIGITALTV))) {
						vctExternal.addElement(vctInternal);
					}
				}
			}

			// END ADD V6.20a
			if (null != teleSessionMgr.getValue(string_BProductDetailRole_aCProduct)) {

				// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
				BProductRole bProductRole = new BProductRole();

				bProductRole = (BProductRole) teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct);

				long lAddressID = 0;

				lAddressID = ((BProductRoleDetail) (bProductRole.vctProductRole
						.elementAt(FINAL_ZERO))).lAddressID.longValue();

				// Begin DEL v9.01d
				// long lServiceAddressIDNew = 0;
				// End DEL v9.01d
				addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

				AddressRow addressRow = null;
				Vector vctAddress = new Vector();

				vctAddress = addressTable.vctSearchByAddressIDandObsolete(
						lAddressID, FINAL_ZERO);

				if ((null != vctAddress) && (FINAL_ZERO != vctAddress.size())) {
					addressRow = (AddressRow) vctAddress.elementAt(FINAL_ZERO);
				}

				if (null != addressRow) {
					if ((GAfeDescription.lGetTypeId(string_COUNTRY_BELGIUM) == addressRow.lCountryID)
							|| (GAfeDescription.COUNTRY_NEDERLAND == addressRow.lCountryID)) {

						// ProductRow productRow = null;                                                                                                 // Initializing the Object Class for the product table
						ProductRow productRow = (ProductRow) productTable
								.prSearchByProductIDandObsolete(GAfeDescription
										.lGetTypeId(string_PRODUCT_CPS), FINAL_ZERO);

						if (null != productRow) {
							vctInternal = new Vector();
							strTDesc = strFindDescription(productRow.lDescription1ID);
							vctInternal.addElement(Long.valueOf(GAfeDescription
									.lGetTypeId(string_PRODUCT_CPS)));
							vctInternal.addElement(strTDesc);

							if (blnIndexProperty(vctExternal, Long.valueOf(
									GAfeDescription.lGetTypeId(string_PRODUCT_CPS)))) {
								vctExternal.addElement(vctInternal);
							}
						}
					}

					// end of the if loop

					// Begin ADD v.6.07g
					if (GAfeDescription.lGetTypeId(string_COUNTRY_BELGIUM) == addressRow.lCountryID) {

						// ProductRow productRow = null;                                                                                                  // Initializing the Object Class for the product table
						GLogger.chkpt("Checking for Product");

						if (null == productTable) {
							productTable = (Product) teleSessionMgr
									.getMasterTable(string_PRODUCT); // Getting the product table from the session
						}

						ProductRow productRow = (ProductRow) productTable
								.prSearchByProductIDandObsolete(GAfeDescription
										.lGetTypeId(string_PRODUCT_VON), FINAL_ZERO);

						if (null != productRow) {
							vctInternal = new Vector();
							strTDesc = strFindDescription(productRow.lDescription1ID);
							vctInternal.addElement(Long.valueOf(GAfeDescription
									.lGetTypeId(string_PRODUCT_VON)));
							vctInternal.addElement(strTDesc);
							GLogger.chkpt(string_CheckingForVon + strTDesc);
							GLogger
									.chkpt(string_CheckingForVon
											+ GAfeDescription
													.lGetTypeId(string_PRODUCT_VON));

							if (blnIndexProperty(vctExternal, Long.valueOf(
									GAfeDescription.lGetTypeId(string_PRODUCT_VON)))) {
								vctExternal.addElement(vctInternal);
							}
						} // end of the if loop

						// end of the if loop
						// end of the if loop
						// End ADD for v.6.07g
					} // end of the if loop

					// BEGIN ADD V6.20a

					/*
					 // if (GAfeDescription.lGetTypeId("COUNTRY_BELGIUM") == addressRow.lCountryID )
					 // {
					 ProductRow productRow = null;
					 GLogger.chkpt("Checking for Product");
					 if (null == productTable)
					 {
					 productTable = (Product) teleSessionMgr.getMasterTable("PRODUCT");
					 }
					 productRow = (ProductRow) productTable.prSearchByProductIDandObsolete(GAfeDescription.PRODUCT_DIGITALTV, FINAL_ZERO);
					 if (null != productRow)
					 {
					 vctInternal = new Vector();
					 strTDesc = strFindDescription(productRow.lDescription1ID);
					 vctInternal.addElement(Long.valueOf(GAfeDescription.PRODUCT_DIGITALTV));
					 vctInternal.addElement(strTDesc);
					 GLogger.chkpt("Checking for PRODUCT_DIGITALTV-----"+strTDesc);
					 GLogger.chkpt("Checking for PRODUCT_DIGITALTV-----"+GAfeDescription.PRODUCT_DIGITALTV);
					 if (blnIndexProperty(vctExternal, Long.valueOf(GAfeDescription.PRODUCT_DIGITALTV)))
					 {
					 vctExternal.addElement(vctInternal);
					 }
					 }
					 //}
					 */

					// END ADD V6.20a
				}
			}

			bProductDetailProperty.vctMainProductLines = vctExternal;
			bProductDetailProperty.lCurrencyID = Long.valueOf(GAfeDescription
					.lGetTypeId(string_CURRENCY_DEFAULT));

			// Begin DEL v9.01d
			// CurrencyRow currencyRow = null;           // Initializing the Object Class for the Currency table
			// End DEL v9.01d
			if (null == currencyTable) {
				currencyTable = (Currency) teleSessionMgr
						.getMasterTable(string_CURRENCY); // Getting the Customer table from the session
			}

			Vector vctobjCurrency = new Vector();

			vctobjCurrency = currencyTable.vctGetAllExisting();

			// Begin DEL v9.01d
			// PaymentMethodRow paymentMethodRow = null;         // Initializing the Object Class for the PaymentMethod table
			// End DEL v9.01d
			if (null == paymentMethodTable) {
				paymentMethodTable = (PaymentMethod) teleSessionMgr
						.getMasterTable(string_PAYMENTMETHOD); // Getting the Customer table from the session
			}

			Vector vctobjPMInternal = new Vector();

			vctobjPMInternal = paymentMethodTable.vctGetAllExisting();
			bProductDetailProperty.iPayMethChecked = FINAL_ZERO;

			if (null != vctobjCurrency) {

				// for each  record in the vector of Currency Records
				for (int iASCounter = FINAL_ZERO; iASCounter < vctobjCurrency
						.size(); iASCounter++) {
					vctInternal = new Vector();
					vctInternal.addElement(Long.valueOf(
							((CurrencyRow) (vctobjCurrency
									.elementAt(iASCounter))).lCurrencyID));
					vctInternal
							.addElement((String) ((CurrencyRow) (vctobjCurrency
									.elementAt(iASCounter))).strCurrency);
					bProductDetailProperty.vctCurrency.addElement(vctInternal);
				} // end of the for loop
			} // end of the if loop for handling null pointer exception

			if (null != vctobjPMInternal) {

				// for each  record in the vector of PaymentMethod Records
				for (int iACounter = FINAL_ZERO; iACounter < vctobjPMInternal
						.size(); iACounter++) {
					ObjectDescriptionRow objectDescriptionRow = null; // Initializing the Object Class for the Currency table

					if (null == objectDescriptionTable) {
						objectDescriptionTable = (ObjectDescription) teleSessionMgr
								.getMasterTable(string_OBJECTDESCRIPTION); // Getting the Customer table from the session
					}

					objectDescriptionRow = (ObjectDescriptionRow) objectDescriptionTable
							.odrSearchByDescIDAndLangID(
									((PaymentMethodRow) (vctobjPMInternal
											.elementAt(iACounter))).lDescriptionID,
									(Long.valueOf(string_ONE)).longValue());

					if (null != objectDescriptionRow) {
						strDescription = objectDescriptionRow.strDescription;
					}

					vctInternal = new Vector();
					vctInternal.addElement(Long.valueOf(
							((PaymentMethodRow) (vctobjPMInternal
									.elementAt(iACounter))).lPaymentMethodID));
					vctInternal.addElement(strDescription);
					bProductDetailProperty.vctPaymentMethod
							.addElement(vctInternal);
				} // end of the for loop
			} // end of the if loop for handling null pointer exception
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bProductDetailProperty;
	}

	/**
	 *  DESCRIPTION :   This function UnReserves the Number and Puts it into the session Vector
	 *
	 *  @param          :       Long CsutomerID
	 *
	 *  @return         :       Vector  -       Returns Vector
	 */
	protected Vector vctGetConnectivityInfo(Long lCustomerID) throws Exception {

		// intializing the variables
		long lAddressID = 0;
		Vector vctGetProductConnectivityInfo =null;

		try {

			// Begin DEL v9.01d
			// CustomerLinkRow customerLinkRow = null;
			// End DEL v9.01d
			customerLinkTable = (CustomerLink) teleSessionMgr
					.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session
			addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

			Vector vctObjCLInternal = null;

			vctObjCLInternal = customerLinkTable
					.vctSearchByCustomerIDandObsolete(lCustomerID.longValue(),
							FINAL_ZERO);

			if (null != vctObjCLInternal) {

				// Taking out the Address ID for the first Record
				lAddressID = 0;
				lAddressID = ((CustomerLinkRow) vctObjCLInternal
						.elementAt(FINAL_ZERO)).lAddressID;

				if (FINAL_ZERO == lAddressID) {

					// Throw Exception as Address ID was not found
					throw new AfeException("ERRAFE_00685");
				} else {
					vctGetProductConnectivityInfo = vctGetConnectivityInfoFromFirstAddressID(lAddressID);
				}
			} // end of the if loop
			else {

				// No address attached to this customer
				throw new AfeException("ERRAFE_00685");
			}
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return vctGetProductConnectivityInfo;
	}

	/**
	 *  DESCRIPTION :   This function UnReserves the Number and Puts it into the session Vector
	 *
	 *  @param          :       Long lAddressID
	 *
	 *  @return         :       void    -       Returns Nothing
	 */

	// Begin Delete v5.96t
	// Comment: The body of methoid is changed as the connectivity logic is changed
	/*
	 * protected Vector vctGetConnectivityInfoFromFirstAddressID(long lAddressID) throws Exception
	 * {
	 *    long lSapID = 0;
	 *    boolean bHasOpenAction = false;
	 *    boolean bIsEven = false;
	 *    int iHouseNumber = 0;
	 *    String strNodeID = "";
	 *    //BEGIN DELETE v5.71d
	 *    //CallableStatement csStmt1 = null;             //Callable      statement object
	 *    //ResultSet rsGetData = null;                           //Making an Object of the ResultSet
	 *    //GConnectCatsap gConnect = null;
	 *    //END DELETE v5.71d
	 *    //BEGIN ADD v5.71d
	 *    AfeNinasOut objAfeNinasOut = null;
	 *    BSAPDetailsFromCATSAP[] arrBsapDetailsFromCATSAP = null;
	 *    BSAPDetailsFromCATSAP objSapDetails = null;
	 *    //END ADD v5.71d
	 *
	 *
	 *    Vector vctGetProductConnectivityInfo = new Vector();
	 *
	 *    try {
	 *
	 *        BCatsapAddress bCatsapAddress = new BCatsapAddress();                       //Making an Object of the Role Bussiness Object
	 *
	 *        LCustomer lCustomer = new LCustomer(teleSessionMgr);
	 *        addressTable = (Address) teleSessionMgr.getTable("ADDRESS");                // Getting the Customer table from the session
	 *        actionTable = (Action) teleSessionMgr.getTable("ACTION");                   // Getting the Vat table from the session
	 *        manualAddressTable = (ManualAddress) teleSessionMgr.getTable("MANUALADDRESS");              // Getting the Customer table from the session
	 *
	 *        AddressRow addressRow = null;
	 *
	 *        Vector vctAddressInternal = new Vector();
	 *        vctAddressInternal = addressTable.vctSearchByAddressIDandObsolete(lAddressID, FINAL_ZERO);
	 *
	 *        if (null == vctAddressInternal || FINAL_ZERO == vctAddressInternal.size()) {
	 *            throw new AfeException("ERRAFE_00512");
	 *        } else if (null != vctAddressInternal) {
	 *            //Check Whether there is a Open Action of the Type Address Request against it.
	 *            addressRow = null;
	 *            addressRow = (AddressRow) vctAddressInternal.elementAt(FINAL_ZERO);
	 *            try {
	 *                iHouseNumber = 0;
	 *                iHouseNumber = Integer.parseInt(strHouseNumberFormatting(addressRow.strHouseNumber));
	 *
	 *                if (FINAL_ZERO == (iHouseNumber % 2)) {
	 *                    //The House Number is Even
	 *                    bIsEven = true;
	 *                } else {
	 *                    //The House Number is Odd
	 *                    bIsEven = false;
	 *                }
	 *
	 *            } catch (NumberFormatException nfe) {
	 *                throw nfe;
	 *            }
	 *
	 *            lSapID = 0;
	 *
	 *            if (FINAL_ZERO != addressRow.lServiceAddressID) {
	 *                lSapID = addressRow.lServiceAddressID;
	 *                bCatsapAddress = lCustomer.objAddressFromSapId(lSapID);
	 *
	 *                if (null != bCatsapAddress) {
	 * / BEGIN DELETE: ver 5.81a
	 *                    // vctGetProductConnectivityInfo = lCustomer.vctGetProductConnectivityInfo(bCatsapAddress.strNodeId, bCatsapAddress.strLanguage);
	 * / END DELETE: ver 5.81a
	 *
	 * / BEGIN ADD: Ver 5.81a
	 *                    //BEGIN DELETE ver 5.96e
	 *                    //vctGetProductConnectivityInfo = lCustomer.vctGetProductConnectivityInfo(
	 *                    //                                            bCatsapAddress.strNodeId, bCatsapAddress.strLanguage,
	 *                    //                                            GAfeDescription.SALES_CAPACITY_CHECK);
	 *                    // END ADD: ver 5.81a
	 *                                            //END DELETE ver 5.96e
	 *                                            //BEGIN ADD ver 5.96e
	 *                                            vctGetProductConnectivityInfo = lCustomer.vctGetProductConnectivityInfo(
	 *                                                                bCatsapAddress.strNodeId, bCatsapAddress.strLanguage,
	 *                                                                GAfeDescription.SALES_CAPACITY_CHECK,Long.valueOf(bCatsapAddress.lServiceAddressID));
	 *                                            //END ADD ver 5.96e
	 * / END ADD: ver 5.81a
	 *                }
	 *            } else {
	 *                bHasOpenAction = false;
	 *
	 *                ActionRow actionRow = null;                                                                                         // Initializing the Object Class for the Vat table
	 *
	 *                Vector vctActionInternal = new Vector();
	 *                vctActionInternal = actionTable.vctSearchByActionValueandObsolete(String.valueOf(lAddressID), FINAL_ZERO);
	 *
	 *                if (null != vctActionInternal && FINAL_ZERO != vctActionInternal.size()) {
	 *                    for (int iCount = FINAL_ZERO; iCount < vctActionInternal.size(); iCount++) {
	 *                        if (GAfeDescription.lGetTypeId("ACTIONTYPE_ADDRESSREQUEST") == ((ActionRow) vctActionInternal.elementAt(iCount)).lActionTypeID) {
	 *                            bHasOpenAction = true;
	 *
	 *                        }//end of the if loop
	 *
	 *                    }//end of the for loop
	 *
	 *                }//end of the if loop
	 *
	 *            }//end of the if loop
	 *
	 *            if (bHasOpenAction) {
	 *                //No SapID Available move for the Manual Address ID
	 *                if (FINAL_ZERO != addressRow.lManualAddressID) {
	 *                    ManualAddressRow manualAddressRow = null;
	 *                    manualAddressRow = manualAddressTable.marSearchByManualAddressID(addressRow.lManualAddressID);
	 *
	 *                    if (null != manualAddressRow) {
	 *                        //Got the Manual Address ID
	 *                        //BEGIN ADD v5.71d
	 *                        String strHouseNr = (addressRow.strHouseNumber).trim();
	 *                        if (strHouseNr.length() > 5) {
	 *                            strHouseNr = strHouseNr.substring(0, 5);
	 *                        }
	 *                        objAfeNinasOut = new AfeNinasOut();
	 *
	 * / BEGIN DELETE: ver 5.85a
	 *
	 *                                                    arrBsapDetailsFromCATSAP =
	 *                                                            objAfeNinasOut.arrSearchSapDetailByAddress(null, (manualAddressRow.strZip).trim(),
	 *                                                                                                       (manualAddressRow.strCity).trim(), (manualAddressRow.strStreetName).trim(),
	 *                                                                                                       strHouseNr, null, null);
	 *                                                    if (arrBsapDetailsFromCATSAP != null)
	 *                                                    {
	 *                                                            strNodeID = arrBsapDetailsFromCATSAP[0].getNodeId();
	 *                                                    }
	 *                                                    else
	 *                                                    {
	 */

	//  END DELETE: ver 5.85a
	//  BEGIN DELETE: ver 5.81a
	/*
	 objSapDetails = objAfeNinasOut.objGetSapInfoByAddress(null,
	 (manualAddressRow.strZip).trim(),
	 (manualAddressRow.strCity).trim(),
	 (manualAddressRow.strStreetName).trim(),
	 null, null, null); //Pass house number as null to get neighbours Info

	 */

	//  END DELETE: ver 5.81a
	// BEGIN DETELE v5.86a
	/*
	 // BEGIN ADD: Ver 5.81a

	 objSapDetails = objAfeNinasOut.objGetSapInfoByAddress(null,
	 (manualAddressRow.strZip).trim(),
	 (manualAddressRow.strCity).trim(),
	 (manualAddressRow.strStreetName).trim(),
	 null, null, null, true);

	 //Pass true as bNeighbourinfo to get neighbours Info
	 // END ADD: ver 5.81a
	 */

	// END DELETE v5.86a
	// BEGIN ADD V 5.96u
	// try
	// {
	// END ADD V 5.96u
	// BEGIN ADD v5.86a
	// Begin Delete v5.96t
	// objSapDetails = objAfeNinasOut.objGetSapInfoByAddress(null,
	// (manualAddressRow.strZip).trim(),
	// (manualAddressRow.strCity).trim(),
	// (manualAddressRow.strStreetName).trim(),
	// strHouseNr, null, null, true);
	// END ADD v5.86a
	// if (objSapDetails != null) {
	// strNodeID = objSapDetails.getNodeId();
	// }
	// BEGIN ADD V 5.96u
	// }
	// catch (AfeException afe)
	// {
	// BEGIN DELETE V 5.96u
	/*
	 * if (afe.strGetErrCode().trim().equalsIgnoreCase(GErrorCodes.ERRSAP_00052))
	 * {
	 */

	// END DELETE V 5.96u
	// GLogger.debug(CLASS_NAME, "vctGetConnectivityInfoFromFirstAddressID", "Consuming exception to display intro product in the product combo");
	// BEGIN DELETE V 5.96u
	/*
	 * }
	 * else
	 * {
	 *       throw afe;
	 * }
	 */

	// END DELETE V 5.96u
	// }
	// END ADD V 5.96u
	// End Delte v5.96t
	//  BEGIN DELETE: ver 5.85a
	// }
	//  END DELETE: ver 5.85a
	// END ADD V5.71d
	// BEGIN DELETE v5.71d
	//                                                       gConnect = new GConnectCatsap(this);
	//
	//                                                       if (gConnect.bIsCatsapConnected())
	//                                                       {
	//                                                               //calling the Stored Proc
	//                                                               csStmt1 = gConnect.csPrepareCall("{CALL CS_ADDR_CHECK_BY_ADDRESS(?,?,?,?)}");
	//
	//                                                               csStmt1.setLong(1, Long.parseLong((manualAddressRow.strZip).trim()));
	//                                                               csStmt1.setString(2, (manualAddressRow.strCity).trim());
	//                                                               csStmt1.setString(3, (manualAddressRow.strStreetName).trim());
	//
	//                                                               String strHouseNr = (addressRow.strHouseNumber).trim();
	//
	//                                                               if (strHouseNr.length() > 5)
	//                                                               {
	//                                                                       strHouseNr = strHouseNr.substring(0, 5);
	//                                                               }
	//
	//                                                               csStmt1.setString(4, strHouseNr);
	//                                                               csStmt1.execute();
	//                                                               rsGetData = csStmt1.getResultSet();
	//
	//                                                               if (null != rsGetData && rsGetData.next())
	//                                                               {
	//                                                                       strNodeID = (String) (rsGetData.getString("NODEID"));
	//                                                               }
	//                                                               else
	//                                                               {
	//                                                                       if (csStmt1.getMoreResults())
	//                                                                       {
	//                                                                               rsGetData = csStmt1.getResultSet();
	//
	//                                                                               strNodeID = "";
	//
	//                                                                               while (null != rsGetData && rsGetData.next())
	//                                                                               {
	//                                                                                       try
	//                                                                                       {
	//                                                                                               iHouseNumber = 0;
	//                                                                                               iHouseNumber = Integer.parseInt(strHouseNumberFormatting(rsGetData.getObject("HOUSENUMBER").toString()));
	//
	//                                                                                               if (FINAL_ZERO == (iHouseNumber % 2))
	//                                                                                               {
	//                                                                                                       if (bIsEven)
	//                                                                                                       {
	//                                                                                                               //The House Number is Even
	//                                                                                                               strNodeID = (String) (rsGetData.getString("NODEID"));
	//                                                                                                               break;
	//                                                                                                       }
	//                                                                                                       else
	//                                                                                                       {
	//                                                                                                               continue;
	//                                                                                                       }
	//                                                                                               }
	//                                                                                               else if (FINAL_ZERO != (iHouseNumber % 2))
	//                                                                                               {
	//                                                                                                       if (!bIsEven)
	//                                                                                                       {
	//                                                                                                               //The House Number is Even
	//                                                                                                               strNodeID = (String) (rsGetData.getString("NODEID"));
	//                                                                                                               break;
	//                                                                                                       }
	//                                                                                                       else
	//                                                                                                       {
	//                                                                                                               continue;
	//                                                                                                       }
	//                                                                                               }
	//                                                                                       }
	//                                                                                       catch (NumberFormatException nfe)
	//                                                                                       {
	//                                                                                               throw nfe;
	//                                                                                       }
	//                                                                               }
	//                                                                       }
	//                                                               }
	//                                                       }//end of the if loop
	// END DELETE v5.71d
	// }//end of the if loop
	// } else {
	// throw new AfeException("ERRAFE_00686");
	// }//end of the if else if loop
	// BEGIN DELETE: ver 5.81a
	// vctGetProductConnectivityInfo = lCustomer.vctGetProductConnectivityInfo(strNodeID, "1");
	// END DELETE: ver 5.81a
	// BEGIN ADD V 5.96u
	// try
	// {
	// END ADD V 5.96u
	// BEGIN ADD: Ver 5.81a
	// vctGetProductConnectivityInfo = lCustomer.vctGetProductConnectivityInfo(strNodeID,
	// "1", GAfeDescription.SALES_CAPACITY_CHECK,null);
	// END ADD: ver 5.81a
	// BEGIN ADD V 5.96u
	// }
	// catch (AfeException afe)
	// {
	// BEGIN DELETE V 5.96u
	/*
	 * if (afe.strGetErrCode().trim().equalsIgnoreCase(GErrorCodes.ERRNIS_00403))
	 * {
	 */

	// END DELETE V 5.96u
	// GLogger.debug(CLASS_NAME, "vctGetConnectivityInfoFromFirstAddressID", "Consuming exception to display intro product in the product combo");
	// BEGIN DELETE V 5.96u
	/*
	 * }
	 * else
	 * {
	 *       throw afe;
	 * }
	 */

	// END DELETE V 5.96u
	// }
	// END ADD V 5.96u
	// }//end of the if loop
	// BEGIN ADD V5.10a
	// comment: to close the resultset and statement
	// BEGIN DELETE v5.71d
	//                 if (null != rsGetData)
	//                               {
	//                                       rsGetData.close();
	//                               }
	//                               if (null != csStmt1)
	//                               {
	//                                       csStmt1.close();
	//                               }
	//
	//                               rsGetData = null;
	//                               csStmt1 = null;
	// END DELETE v5.71d
	// END ADD V5.10a
	// }//end of the if loop
	/*
	 *   } catch (AfeException afee)                       //catch block starts to catch exceptions
	 *         {
	 *             if (GAfePropertyLoader.DEBUG) {
	 *                 afee.printStackTrace(System.out);
	 *             }
	 *             throw afee;
	 *         } catch (Exception ex) {
	 *             if (GAfePropertyLoader.DEBUG) {
	 *                 ex.printStackTrace(System.out);
	 *             }
	 *             throw new AfeException("ERRCOM_00002", ex.getMessage());//unknown exception occurred
	 *         }
	 */

	// BEGIN ADD V5.10a
	// comment: to add finally block and check for connection/resultset/callable statement closure
	// BEGIN DELETE v5.71d
	//         finally
	//               {
	//                       try
	//                       {
	//                               if (null != rsGetData)
	//                               {
	//                                       rsGetData.close();
	//                                       rsGetData = null;
	//                               }
	//                               if (null != csStmt1)
	//                               {
	//                                       csStmt1.close();
	//                                       csStmt1 = null;
	//
	//                               }
	//                               if (null != gConnect)
	//                               {
	//                                       gConnect.bClose();
	//                                       gConnect = null;
	//                               }
	//                       }
	//                       catch (Exception e)
	//                       {
	//                               //consume it
	//                       }
	//               }
	// END DELETE v5.71d
	// END ADD V5.10a
	// Return BO
	// return vctGetProductConnectivityInfo;
	// }
	/**
	 *  DESCRIPTION :   The Function will save all the Related Infomation of the Document Table
	 *                                  back into the Session
	 *
	 *  @param          :       vctExternal long DocumentTypeID
	 *  @param          :       lProductID long DocumentTypeID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 */
	protected boolean blnIndexProperty(Vector vctExternal, Long lProductID)
			throws Exception {
		boolean bFlagtoReturn = true;
		Vector vctInternal = null;

		try {
			if (null != vctExternal) {
				int iSizeOfVector = 0;

				iSizeOfVector = vctExternal.size();

				for (int iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
					vctInternal = null;
					vctInternal = (Vector) vctExternal.elementAt(iCounter);

					if ((String.valueOf(lProductID)).equals(String
							.valueOf(vctInternal.elementAt(FINAL_ZERO)))) {
						bFlagtoReturn = false;

						return bFlagtoReturn;
					} // end of the if loop
				} // end of the for loop
			}
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bFlagtoReturn;
	}

	/**
	 *  DESCRIPTION :   This function will Populate the Business Object Called
	 *                                  BProductDetailProperty and also get all the Connectable Products from Ninas
	 *
	 *  @param          :       Vector vctGetProductConnectivityInfo, Long CustomerID
	 *
	 *  @return         :       Bussiness Object - BProductDetailProperty
	 */
	public int iValidateFirstNew(Long CustomerID) throws Exception {

		// Begin DEL v9.01d
		// Long AddressID;
		// Long SAPID;
		// End DEL v9.01d
		boolean bFlagToThrow = false;
		int iValidate = 0;

		try {

			if ((FINAL_ONE == bSession.iCustomerIsBadPayer)
					|| (2 == bSession.iCustomerIsBadPayer)) {


				iValidate = FINAL_ONE;

				if (GAfeConstants.True == bSession.isPaymentPlanActiveOnCustomer) {
					throw new AfeException("ERRAFE_12019"); /*
															 * Error
															 * " Customer has an active payment plan account"
															 */
				} else {
					throw new AfeException("ERRAFE_00152"); /*
															 * Error
															 * " Customer is a bad Payer"
															 */
				}
			}


			// BEgin DEL v9.01d
			// CustomerLinkRow customerLinkRow = null;
			customerLinkTable = (CustomerLink) teleSessionMgr
					.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

			// AddressRow addressRow = null;
			// End DEL v9.01d
			addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

			Vector vctObjCLInternal = null;

			vctObjCLInternal = customerLinkTable
					.vctSearchByCustomerIDandObsolete(CustomerID.longValue(),
							FINAL_ZERO);

			if (null != vctObjCLInternal) {
				GLogger.chkpt("Inside if vctObjCLInternal!=null");
			} // end of the if loop
			else {
				bFlagToThrow = true;
			}

			if (bFlagToThrow) {
				iValidate = FINAL_ONE;

				throw new AfeException("ERRAFE_00515"); /* Error " ERRAFE_00515 - There Should be atleast one connectable address for the customer" */
			}

			CustomerRow customerRow = null; // Initializing the Object Class for the Customer table

			customerTable = (Customer) teleSessionMgr.getTable(string_CUSTOMER); // Getting the Customer table from the session

			if ((null != customerTable) && (null != CustomerID)) {
				customerRow = (CustomerRow) customerTable
						.crSearchByCustIDandObsolete(CustomerID.longValue(),
								FINAL_ZERO);

				if (FINAL_ZERO == customerRow.lContactInfoID) {
					throw new AfeException("ERRAFE_00657"); /* Error " ERRAFE_00515 - There Should be atleast one connectable address for the customer" */
				}
			}
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				/* BEGIN DELETE VER: 5.59a */

				// System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
				/* END DELETE VER: 5.59a */
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
 finally {
			// BEGIN ADD ver 12.0
	 	GLogger.chkpt("Inside finally");
			// BEGIN ADD ver 12.0
		}

		return iValidate;
	}

	/**
	 *  DESCRIPTION :   This function will Populate the Business Object Called
	 *                                  BProductDetailProperty in the case of the New Product Line that is Chosen
	 *
	 *  @param          :       Long CustomerProductLineID, Long ProductID, Long  CustomerID
	 *
	 *  @return         :       Bussiness Object - BProductDetailProperty
	 */
	public BProductDetailProperty objGetDetailNewProductLine(Long ProductID,
			Long CustomerID, String strProductLineType) throws Exception {
		int iVatCompliant = 0; // Local Varaible Declaration
		int iLevel = 0; // Local Varaible Declaration
		int iParentInstance = 0; // Local Varaible Declaration
		String strDescription = ""; // Local Varaible Declaration
		Vector vctInternal = null; // internal local vector
		int customerTenantId =0;

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d

		// Object of vctProductRole for making the business object
		BProductDetailProperty bProductDetailProperty = new BProductDetailProperty();

		// Begin DEL v9.01d
		// BProductDetail bProductDetail = new BProductDetail();
		// BProductParameter bProductParameter = new BProductParameter();
		// End DEL v9.01d
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// CurrencyRow currencyRow = null;           // Initializing the Object Class for the Currency table
			// End DEL v9.01d
			if (null == currencyTable) {
				currencyTable = (Currency) teleSessionMgr
						.getMasterTable(string_CURRENCY); // Getting the Customer table from the session
			}

			Vector vctobjCurrency = null;

			vctobjCurrency = currencyTable.vctGetAllExisting();

			// Begin DEL v9.01d
			// PaymentMethodRow paymentMethodRow = null;         // Initializing the Object Class for the PaymentMethod table
			// End DEL v9.01d
			if (null == paymentMethodTable) {
				paymentMethodTable = (PaymentMethod) teleSessionMgr
						.getMasterTable(string_PAYMENTMETHOD); // Getting the Customer table from the session
			}

			Vector vctobjPMInternal = null;

			vctobjPMInternal = paymentMethodTable.vctGetAllExisting();
			bProductDetailProperty.lCustomerID = CustomerID;
			bProductDetailProperty.lCustomerProductLineID = Long.valueOf(0);
			bProductDetailProperty.lProductID = ProductID;
			bProductDetailProperty.iPayMethChecked = FINAL_ONE;

			// BEGIN ADD V5.32b
			// comment: populating the values on selection some value
			ProductRow productRow = null;

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT);
			}

			productRow = (ProductRow) productTable
					.prSearchByProductIDandObsolete(ProductID.longValue(),
							FINAL_ZERO);

			if (null != productRow) {
				bProductDetailProperty.strProductType = strFindDescription(productRow.lDescription1ID);
				bProductDetailProperty.strProductLineType = strFindDescription(productRow.lDescription1ID);
			}

			// END ADD V5.32b

			CustomerRow customerRow = null; // Initializing the Object Class for the Customer table

			customerTable = (Customer) teleSessionMgr.getTable(string_CUSTOMER); // Getting the Customer table from the session
			customerRow = (CustomerRow) customerTable
					.crSearchByCustID(CustomerID.longValue());

			if (null != customerRow) {
				iVatCompliant = customerRow.iVatCompliant;
				customerTenantId = customerRow.tenantId;
			}
			
			GLogger.chkpt("customerTenantId in objGetDetailNewProductLine :-"
					+ customerTenantId);

			bProductDetailProperty.iVatComplaint = iVatCompliant;
			bProductDetailProperty.lCurrencyIDOld = Long.valueOf(GAfeDescription
					.lGetTypeId(string_CURRENCY_DEFAULT));
			bProductDetailProperty.lCurrencyID = Long.valueOf(GAfeDescription
					.lGetTypeId(string_CURRENCY_DEFAULT));

			// BEGIN ADD ver 5.96e
			// BEGIN DELETE v6.07k
			// if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_CABLEACCESS)
			// {
			// bProductDetailProperty.lPaymentMethodUsage = Long.valueOf(GAfeDescription.PAYMENTMTDID_CASH);
			// bProductDetailProperty.lPaymentMethodUsageOld =  Long.valueOf(GAfeDescription.PAYMENTMTDID_CASH);
			//
			// bProductDetailProperty.lPaymentMethodNRC =  Long.valueOf(GAfeDescription.PAYMENTMTDID_CASH);
			// bProductDetailProperty.lPaymentMethodNRCOld =  Long.valueOf(GAfeDescription.PAYMENTMTDID_CASH);
			//
			// bProductDetailProperty.lPaymentMethodRCOld =  Long.valueOf(GAfeDescription.PAYMENTMTDID_CASH);
			// bProductDetailProperty.lPaymentMethodRC =  Long.valueOf(GAfeDescription.PAYMENTMTDID_CASH);
			// }
			// else
			// {
			// END DELETE v6.07k
			// END ADD ver 5.96e
			// Begin Delete V7.04j
			//                              bProductDetailProperty.lPaymentMethodUsage = Long.valueOf(((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ZERO)).lPaymentMethodID);
			//                              bProductDetailProperty.lPaymentMethodUsageOld = Long.valueOf(((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ZERO)).lPaymentMethodID);
			//
			//                              bProductDetailProperty.lPaymentMethodNRC = Long.valueOf(((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ZERO)).lPaymentMethodID);
			//                              bProductDetailProperty.lPaymentMethodNRCOld = Long.valueOf(((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ZERO)).lPaymentMethodID);
			//
			//                              bProductDetailProperty.lPaymentMethodRCOld = Long.valueOf(((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ZERO)).lPaymentMethodID);
			//                              bProductDetailProperty.lPaymentMethodRC = Long.valueOf(((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ZERO)).lPaymentMethodID);
			// End Delete 7.04j
			// Begin Add 7.04j
			bProductDetailProperty.lPaymentMethodUsage = Long.valueOf(
					((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ONE)).lPaymentMethodID);
			bProductDetailProperty.lPaymentMethodUsageOld = Long.valueOf(
					((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ONE)).lPaymentMethodID);
			bProductDetailProperty.lPaymentMethodNRC = Long.valueOf(
					((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ONE)).lPaymentMethodID);
			bProductDetailProperty.lPaymentMethodNRCOld = Long.valueOf(
					((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ONE)).lPaymentMethodID);
			bProductDetailProperty.lPaymentMethodRCOld = Long.valueOf(
					((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ONE)).lPaymentMethodID);
			bProductDetailProperty.lPaymentMethodRC = Long.valueOf(
					((PaymentMethodRow) vctobjPMInternal.elementAt(FINAL_ONE)).lPaymentMethodID);

			// End Add 7.04j

			// BEGIN ADD ver 5.96e
			// BEGIN DELETE v6.07k
			// }
			// END DELETE v6.07k
			bProductDetailProperty.iFlagForNewOrOld = FINAL_ONE;
			bProductDetailProperty.strProductLineType = strProductLineType;

			// END ADD ver 5.96e
			//begin Add EuroDocsis , Added check
			GLogger.chkpt("InternetLogging Aging :-"
					+ teleSessionMgr.getValue("getAgingInternetLogin"));
			if (null == teleSessionMgr.getValue("getAgingInternetLogin")) {
				//End Add EuroDocsis , added check
				if (GAfeDescription.lGetTypeId(string_PRODUCT_INTERNET) == bProductDetailProperty.lProductID
						.longValue()) {
					IAFEOUT iAFEOUT = new IAFEOUT();
					Vector vctLogin_Mail = new Vector();

					vctLogin_Mail = iAFEOUT.vctGetLogin(
							bProductDetailProperty.lCustomerID, "M");

					if (null != vctLogin_Mail) {

						// Begin DEL v9.01d

						/*
						 * if (GAfePropertyLoader.DEBUG) {
						 * int iSizeOfvctLogin = 0;
						 * iSizeOfvctLogin = vctLogin_Mail.size();
						 * }//end of the if loop
						 */

						// End DEL v9.01d
						bProductDetailProperty.vctGetLoginfromILMMAIL = vctLogin_Mail;
					} // end of the if loop

					Vector vctLogin_URL = new Vector();

					vctLogin_URL = iAFEOUT.vctGetLogin(
							bProductDetailProperty.lCustomerID, "U");

					if (null != vctLogin_URL) {

						// Begin DEL v9.01d

						/*
						 * if (GAfePropertyLoader.DEBUG) {
						 * int iSizeOfvctLogin = 0;
						 * iSizeOfvctLogin = vctLogin_URL.size();
						 * }//end of the if loop
						 */

						// End DEL v9.01d
						bProductDetailProperty.vctGetLoginfromILMURL = vctLogin_URL;
					} // end of the if loop
				} // end of the if loop
			}

			// BEGIN ADD v5.80a

			/*
			 * if(null == objLProduct_ext)
			 * {
			 */
			LProduct_ext objLProduct_ext = new LProduct_ext(teleSessionMgr,
					bSession);

			// }
			objLProduct_ext.vdPopulateTariffs(bProductDetailProperty);

			// END ADD v5.80a

			if (GAfeDescription.lGetTypeId(string_PRODUCT_INTERNET) == bProductDetailProperty.lProductID
					.longValue()) {
				GLogger.chkpt("For Internet product check: customerTenantId :-"
						+ customerTenantId);
				if ((null != teleSessionMgr
						.getMasterTable("VctProductSelected_Internet"))
						&& (null != teleSessionMgr
								.getMasterTable("VctProductNonSelected_Internet"))
								&& Tenant.getTenant(customerTenantId).isFullgc()) {
					GLogger.chkpt("For Internet product check: Inside If :-"
							+ customerTenantId);			
					bProductDetailProperty.vctProductSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductSelected_Internet");
					
					bProductDetailProperty.vctProductNonSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductNonSelected_Internet");
					
				} else {
					GLogger.chkpt("For Internet product check: Inside Else :-"
							+ customerTenantId);	
					iLevel = FINAL_ONE;
					iParentInstance = FINAL_ONE;
					
					vdMainRMethodOfProductsNewProductLine(
							bProductDetailProperty, ProductID, CustomerID,
							bProductDetailProperty.lCurrencyID, iLevel,
							iParentInstance);
					if (Tenant.getTenant(customerTenantId).isFullgc()){
						teleSessionMgr.putMasterTable(
								"VctProductSelected_Internet",
								bProductDetailProperty.vctProductSelected);
						teleSessionMgr.putMasterTable(
								"VctProductNonSelected_Internet",
								bProductDetailProperty.vctProductNonSelected);	
					}
				}
			}

			if (GAfeDescription.lGetTypeId(string_PRODUCT_TELEPHONE) == bProductDetailProperty.lProductID
					.longValue()) {
				GLogger.chkpt("For Telephone product check: customerTenantId :-"
						+ customerTenantId);
				if ((null != teleSessionMgr
						.getMasterTable("VctProductSelected_Telephonie"))
						&& (null != teleSessionMgr
								.getMasterTable("VctProductNonSelected_Telephonie"))
								&& Tenant.getTenant(customerTenantId).isFullgc()) {
					GLogger.chkpt("For Telephone product check: Inside If :-"
							+ customerTenantId);	
					bProductDetailProperty.vctProductSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductSelected_Telephonie");
					bProductDetailProperty.vctProductNonSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductNonSelected_Telephonie");
				} else {
					GLogger.chkpt("For Telephone product check: Inside Else :-"
							+ customerTenantId);	
					iLevel = FINAL_ONE;
					iParentInstance = FINAL_ONE;
					vdMainRMethodOfProductsNewProductLine(
							bProductDetailProperty, ProductID, CustomerID,
							bProductDetailProperty.lCurrencyID, iLevel,
							iParentInstance);
					if (Tenant.getTenant(customerTenantId).isFullgc()){
						teleSessionMgr.putMasterTable(
								"VctProductSelected_Telephonie",
								bProductDetailProperty.vctProductSelected);
						teleSessionMgr.putMasterTable(
								"VctProductNonSelected_Telephonie",
								bProductDetailProperty.vctProductNonSelected);
					}
				}
			}

			if (GAfeDescription.lGetTypeId(string_PRODUCT_CPS) == bProductDetailProperty.lProductID
					.longValue()) {
				if ((null != teleSessionMgr
						.getMasterTable("VctProductSelected_Intro"))
						&& (null != teleSessionMgr
								.getMasterTable("VctProductNonSelected_Intro"))
								&& Tenant.getTenant(customerTenantId).isFullgc()) {
					bProductDetailProperty.vctProductSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductSelected_Intro");
					bProductDetailProperty.vctProductNonSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductNonSelected_Intro");
				} else {
					iLevel = FINAL_ONE;
					iParentInstance = FINAL_ONE;
					vdMainRMethodOfProductsNewProductLine(
							bProductDetailProperty, ProductID, CustomerID,
							bProductDetailProperty.lCurrencyID, iLevel,
							iParentInstance);
					if (Tenant.getTenant(customerTenantId).isFullgc()){
						teleSessionMgr.putMasterTable("VctProductSelected_Intro",
								bProductDetailProperty.vctProductSelected);
						teleSessionMgr.putMasterTable(
								"VctProductNonSelected_Intro",
								bProductDetailProperty.vctProductNonSelected);
					}
				}
			}

			// BEGIN ADD V.6.07h
			if (GAfeDescription.lGetTypeId(string_PRODUCT_VON) == bProductDetailProperty.lProductID
					.longValue()) {
				if ((null != teleSessionMgr
						.getMasterTable("VctProductSelected_VON"))
						&& (null != teleSessionMgr
								.getMasterTable("VctProductNonSelected_VON"))
								&& Tenant.getTenant(customerTenantId).isFullgc()) {
					bProductDetailProperty.vctProductSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductSelected_VON");
					bProductDetailProperty.vctProductNonSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductNonSelected_VON");
				} else {
					iLevel = FINAL_ONE;
					iParentInstance = FINAL_ONE;
					vdMainRMethodOfProductsNewProductLine(
							bProductDetailProperty, ProductID, CustomerID,
							bProductDetailProperty.lCurrencyID, iLevel,
							iParentInstance);
					if (Tenant.getTenant(customerTenantId).isFullgc()){
						teleSessionMgr.putMasterTable("VctProductSelected_VON",
								bProductDetailProperty.vctProductSelected);
						teleSessionMgr.putMasterTable("VctProductNonSelected_VON",
								bProductDetailProperty.vctProductNonSelected);
					}
				}
			}

			// END ADD V.6.07h
			// BEGIN ADD V5.71a
			// To populate Analog TV product in case Analog TV Line is chosen
			if (GAfeDescription.PRODUCT_ANALOGTV == bProductDetailProperty.lProductID
					.longValue()) {
				if ((null != teleSessionMgr
						.getMasterTable(GMasterDataConstants.VCTPRODUCTSELECTED_ANALOGTV))
						&& (null != teleSessionMgr
								.getMasterTable(GMasterDataConstants.VCTPRODUCTNONSELECTED_ANALOGTV))
								&& Tenant.getTenant(customerTenantId).isFullgc()) {
					bProductDetailProperty.vctProductSelected = (Vector) teleSessionMgr
							.getMasterTable(GMasterDataConstants.VCTPRODUCTSELECTED_ANALOGTV);
					bProductDetailProperty.vctProductNonSelected = (Vector) teleSessionMgr
							.getMasterTable(GMasterDataConstants.VCTPRODUCTNONSELECTED_ANALOGTV);
				} else {
					iLevel = FINAL_ONE;
					iParentInstance = FINAL_ONE;
					vdMainRMethodOfProductsNewProductLine(
							bProductDetailProperty, ProductID, CustomerID,
							bProductDetailProperty.lCurrencyID, iLevel,
							iParentInstance);
					if (Tenant.getTenant(customerTenantId).isFullgc()){
						teleSessionMgr.putMasterTable(
								GMasterDataConstants.VCTPRODUCTSELECTED_ANALOGTV,
								bProductDetailProperty.vctProductSelected);
						teleSessionMgr
						.putMasterTable(
								GMasterDataConstants.VCTPRODUCTNONSELECTED_ANALOGTV,
								bProductDetailProperty.vctProductNonSelected);
					}
				}
			}

			// END ADD V5.71a
			// BEGIN ADD ver 5.96e
			if (GAfeDescription.PRODUCT_CABLEACCESS == bProductDetailProperty.lProductID
					.longValue()
					|| GAfeDescription.PRODUCT_TTV == bProductDetailProperty.lProductID
							.longValue()) {
				iLevel = FINAL_ONE;
				iParentInstance = FINAL_ONE;
				vdMainRMethodOfProductsNewProductLine(bProductDetailProperty,
						ProductID, CustomerID,
						bProductDetailProperty.lCurrencyID, iLevel,
						iParentInstance);
			}

			// END ADD ver 5.96e
			// BEGIN ADD V6.20a
			if (GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
					.longValue()) {

				// BEGIN Delete v7.20g. Done to fetch the correct description according to the nanguage id.
				// if ((null != teleSessionMgr.getMasterTable("VctProductSelected_DigitalTV")) && (null != teleSessionMgr.getMasterTable("VctProductNonSelected_DigitalTV")))
				// {
				// bProductDetailProperty.vctProductSelected = (Vector) teleSessionMgr.getMasterTable("VctProductSelected_DigitalTV");
				// bProductDetailProperty.vctProductNonSelected = (Vector) teleSessionMgr.getMasterTable("VctProductNonSelected_DigitalTV");
				// }
				// else
				// {
				// END Delete v7.20g
				iLevel = FINAL_ONE;
				iParentInstance = FINAL_ONE;
				vdMainRMethodOfProductsNewProductLine(bProductDetailProperty,
						ProductID, CustomerID,
						bProductDetailProperty.lCurrencyID, iLevel,
						iParentInstance);
				teleSessionMgr.putMasterTable("VctProductSelected_DigitalTV",
						bProductDetailProperty.vctProductSelected);
				teleSessionMgr.putMasterTable(
						"VctProductNonSelected_DigitalTV",
						bProductDetailProperty.vctProductNonSelected);

				// }
			}

			// END ADD V6.20a
			// BEGIN ADD V7.06b

			//todo remove logger
			GLogger
					.chkpt("LProduct: Set nonselected product for new line: bProductDetailProperty.lProductID"
							+ (bProductDetailProperty.lProductID).longValue());
			if (GAfeDescription.PRODUCT_MOBILE == bProductDetailProperty.lProductID
					.longValue()) {
				if ((null != teleSessionMgr
						.getMasterTable("VctProductSelected_Mobile"))
						&& (null != teleSessionMgr
								.getMasterTable("VctProductNonSelected_Mobile"))
								&& Tenant.getTenant(customerTenantId).isFullgc()) {
					bProductDetailProperty.vctProductSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductSelected_Mobile");
					bProductDetailProperty.vctProductNonSelected = (Vector) teleSessionMgr
							.getMasterTable("VctProductNonSelected_Mobile");
				} else {
					iLevel = FINAL_ONE;
					iParentInstance = FINAL_ONE;
					//todo: Remove logger
					GLogger
							.chkpt(string_CallingvdMainRMethodOfProductsNewProductLineforproductd
									+ bProductDetailProperty.lProductID
											.longValue());
					GLogger
							.chkpt(string_CallingvdMainRMethodOfProductsNewProductLineforproductd
									+ ProductID);
					vdMainRMethodOfProductsNewProductLine(
							bProductDetailProperty, ProductID, CustomerID,
							bProductDetailProperty.lCurrencyID, iLevel,
							iParentInstance);
					if (Tenant.getTenant(customerTenantId).isFullgc()){
						teleSessionMgr.putMasterTable("VctProductSelected_Mobile",
								bProductDetailProperty.vctProductSelected);
						teleSessionMgr.putMasterTable(
								"VctProductNonSelected_Mobile",
								bProductDetailProperty.vctProductNonSelected);
					}
				}
			}
			//Begin Add v9.02c

			if (GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
					.longValue()) {
				GLogger.chkpt("GAfeDescription.FULLMOBILE_SELECTEDPRODUCTS: "
						+ GAfeDescription.FULLMOBILE_SELECTEDPRODUCTS
								.toString());
				GLogger
						.chkpt("GAfeDescription.FULLMOBILE_NONSELECTEDPRODUCTS: "
								+ GAfeDescription.FULLMOBILE_NONSELECTEDPRODUCTS
										.toString());
				teleSessionMgr
						.removeMasterTable(GAfeDescription.FULLMOBILE_NONSELECTEDPRODUCTS);
				teleSessionMgr
						.removeMasterTable(GAfeDescription.FULLMOBILE_SELECTEDPRODUCTS);
				if ((null != teleSessionMgr
						.getMasterTable(GAfeDescription.FULLMOBILE_SELECTEDPRODUCTS))
						&& (null != teleSessionMgr
								.getMasterTable(GAfeDescription.FULLMOBILE_NONSELECTEDPRODUCTS))
								&& Tenant.getTenant(customerTenantId).isFullgc()) {
					GLogger
							.chkpt("Inside if VctProductNonSelected_FullMobile & VctProductSelected_FullMobile not null");
					bProductDetailProperty.vctProductSelected = (Vector) teleSessionMgr
							.getMasterTable(GAfeDescription.FULLMOBILE_SELECTEDPRODUCTS);
					bProductDetailProperty.vctProductNonSelected = (Vector) teleSessionMgr
							.getMasterTable(GAfeDescription.FULLMOBILE_NONSELECTEDPRODUCTS);
					GLogger
							.chkpt("LProduct:bProductDetailProperty.vctProductNonSelected"
									+ bProductDetailProperty.vctProductNonSelected
											.toString());
					GLogger
							.chkpt("LProduct:bProductDetailProperty.vctProductNonSelected"
									+ bProductDetailProperty.vctProductSelected
											.toString());
				} else {
					iLevel = FINAL_ONE;
					iParentInstance = FINAL_ONE;
					//todo: Remove logger
					GLogger
							.chkpt(string_CallingvdMainRMethodOfProductsNewProductLineforproductd
									+ bProductDetailProperty.lProductID
											.longValue());
					GLogger
							.chkpt(string_CallingvdMainRMethodOfProductsNewProductLineforproductd
									+ ProductID);
					vdMainRMethodOfProductsNewProductLine(
							bProductDetailProperty, ProductID, CustomerID,
							bProductDetailProperty.lCurrencyID, iLevel,
							iParentInstance);
					if (Tenant.getTenant(customerTenantId).isFullgc()){
						teleSessionMgr.putMasterTable(
								GAfeDescription.FULLMOBILE_SELECTEDPRODUCTS,
								bProductDetailProperty.vctProductSelected);
						teleSessionMgr.putMasterTable(
								GAfeDescription.FULLMOBILE_NONSELECTEDPRODUCTS,
								bProductDetailProperty.vctProductNonSelected);
					}
					GLogger
							.chkpt("LProduct:bProductDetailProperty.vctProductNonSelected in else :"
									+ bProductDetailProperty.vctProductNonSelected
											.toString());
					GLogger
							.chkpt("LProduct:bProductDetailProperty.vctProductNonSelected in else : "
									+ bProductDetailProperty.vctProductSelected
											.toString());
				}
			}
			GLogger
					.chkpt("LProduct:bProductDetailProperty.vctProductNonSelected"
							+ bProductDetailProperty.vctProductNonSelected);

			//End Add v9.02c
			// END ADD V7.06b
			// BEGIN   ADD : ver 4.01a
			// Changed due to session problem
			bProductDetailProperty.vctProductSelected = bProductDetailProperty
					.cloneMeVector(bProductDetailProperty.vctProductSelected);
			bProductDetailProperty.vctProductNonSelected = bProductDetailProperty
					.cloneMeVector(bProductDetailProperty.vctProductNonSelected);

			// END ADD : ver 4.01a
			vdRemoveForbProductsFromUpperGrid(bProductDetailProperty,
					bProductDetailProperty.vctProductSelected,
					bProductDetailProperty.vctProductNonSelected);

			if (null != vctobjCurrency) {

				// for each  record in the vector of Currency Records
				for (int iASCounter = FINAL_ZERO; iASCounter < vctobjCurrency
						.size(); iASCounter++) {
					vctInternal = new Vector();
					vctInternal.addElement(Long.valueOf(
							((CurrencyRow) (vctobjCurrency
									.elementAt(iASCounter))).lCurrencyID));
					vctInternal.addElement(((CurrencyRow) (vctobjCurrency
							.elementAt(iASCounter))).strCurrency);
					bProductDetailProperty.vctCurrency.addElement(vctInternal);
				}
			}

			if (null != vctobjPMInternal) {

				// Loading the Tables into Memory
				if (null == objectDescriptionTable) {
					objectDescriptionTable = (ObjectDescription) teleSessionMgr
							.getMasterTable(string_OBJECTDESCRIPTION); // Getting the Customer table from the session
				}

				// for each  record in the vector of PaymentMethod Records
				for (int iACounter = FINAL_ZERO; iACounter < vctobjPMInternal
						.size(); iACounter++) {
					ObjectDescriptionRow objectDescriptionRow = null; // Initializing the Object Class for the Currency table

					objectDescriptionRow = objectDescriptionTable
							.odrSearchByDescIDAndLangID(
									((PaymentMethodRow) (vctobjPMInternal
											.elementAt(iACounter))).lDescriptionID,
									(Long.valueOf(string_ONE)).longValue());

					if (null != objectDescriptionRow) {
						strDescription = objectDescriptionRow.strDescription;
					}

					// BEGIN DELETE v6.07k
					// BEGIN ADD ver 5.96e
					// if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_CABLEACCESS)
					// {
					// if(((PaymentMethodRow) (vctobjPMInternal.elementAt(iACounter))).lPaymentMethodID == GAfeDescription.PAYMENTMTDID_CASH)
					// {
					// vctInternal = new Vector();
					// vctInternal.addElement(Long.valueOf(((PaymentMethodRow) (vctobjPMInternal.elementAt(iACounter))).lPaymentMethodID));
					// vctInternal.addElement(strDescription);
					// bProductDetailProperty.vctPaymentMethod.addElement(vctInternal);
					// }
					// }
					// else
					// {
					// END ADD ver 5.96e
					// END DELETE v6.07k
					vctInternal = new Vector();
					vctInternal.addElement(Long.valueOf(
							((PaymentMethodRow) (vctobjPMInternal
									.elementAt(iACounter))).lPaymentMethodID));
					vctInternal.addElement(strDescription);
					bProductDetailProperty.vctPaymentMethod
							.addElement(vctInternal);

					// BEGIN DELETE v6.07k
					// BEGIN ADD ver 5.96e
					// }
					// END ADD ver 5.96e
					// END DELETE v6.07k
				} // end of the for loop
			} // end of the if loop for handling null pointer exception

			// BEGIN ADD V5.32a
			// Comment: Changes made for MGM
			bProductDetailProperty.lMGMCode = GAfeConstants.MGM_NOMGMCODE;
			bProductDetailProperty.lMGMCodeOld = GAfeConstants.MGM_NOMGMCODE;

			// End ADD V5.32a
		} catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   ex.printStackTrace(System.out);
			 * }
			 */
		//	ex.printStackTrace(System.out);
			GLogger.logException(ex);

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bProductDetailProperty;
	}

	/**
	 *  DESCRIPTION :   The Function is a Recursive Function for the Population of the Upper Grid
	 *                                  in the New Case of the Product Property Screen
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long ProductID, Long CustomerID, Long CurrencyID, int iLevel, int iParentInstance
	 *
	 *  @return         :       Vector  -       Returns a Vector
	 *
	 *  Performance of the Function Done
	 */
	public void vdMainRMethodOfProductsNewProductLine(
			BProductDetailProperty bProductDetailProperty, Long ProductID,
			Long CustomerID, Long CurrencyID, int iLevel, int iParentInstance)
			throws SQLException, Exception {		
		Long lOptionGroup; // Local Varaible Declaration
		Long lProductID; // Local Varaible Declaration
		int iMin = 0; // Local Varaible Declaration
		int iMax = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iSParentInstance = 0;     //Local Varaible Declaration
		// End DEL v9.01d
		int iInstance = 0; // Local Varaible Declaration
		int iSLevel = 0; // Local Varaible Declaration
		int iSelCount = 0; // Local Varaible Declaration

		try {
			BProductDetail bProductDetail = null;

			iInstance = 0;

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			// Begin DEL v9.01d
			// Vector vctObjGDInternal = null;
			// End DEL v9.01d
			List lstObjGDInternal = null;

			//          BEGIN UPDATE: V 3.10
			//          Updated Code for fixing DEFECT id 70, Obsolete Masters
			//          Changed the Code to Take Valid Option Group depending on Current Date.
			//                        vctObjGDInternal        =   optionGroupTable.vctSearchByProductIDandObsolete(ProductID.longValue(), FINAL_ZERO);

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   System.out.println("Before vctObjGDInternal for checking Valid Option Group");
			 * }
			 */

			// BEGIN DELETE v5.80a
			// vctObjGDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(ProductID.longValue(), FINAL_ZERO, new java.util.Date());
			// END DELETE v5.80a
			// BEGIN ADD v5.80a
			// vctObjGDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(ProductID.longValue(), FINAL_ZERO, new java.util.Date(), bProductDetailProperty.iRateClassIDNew);
			lstObjGDInternal = optionGroupTable
					.searchByProductIDValidandObsolete(ProductID.longValue(),
							FINAL_ZERO, new java.util.Date(),
							bProductDetailProperty.iRateClassIDNew);

			// END ADD v5.80a

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   System.out.println("After vctObjGDInternal for checking Valid Option Group"+vctObjGDInternal);
			 * }
			 */

			//          END UPDATE: V 3.10
			//          Updated Code for fixing DEFECT id 70, Obsolete Masters
			if (!lstObjGDInternal.isEmpty()) {

				// Loading the Tables into Memory
				if (null == optionProductTable) {
					optionProductTable = (OptionProduct) teleSessionMgr
							.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
				}

				if (null == productTable) {
					productTable = (Product) teleSessionMgr
							.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
				}

				// for each  record in the vector of OptionGroup Records
				for (int iASCounter = FINAL_ZERO; iASCounter < lstObjGDInternal
						.size(); iASCounter++) {
					optionGroupRow = null;
					optionGroupRow = (OptionGroupRow) lstObjGDInternal
							.get(iASCounter);
					lOptionGroup = Long.valueOf(optionGroupRow.lOptionGroupID);
					iMin = optionGroupRow.iMinMandProducts;
					iMax = optionGroupRow.iMaxMandProducts;
					GLogger.chkpt("optionGroupRow.lOptionGroupID  : "
							+ optionGroupRow.lOptionGroupID);
					GLogger.chkpt("optionGroupRow.iMinMandProducts  : "
							+ optionGroupRow.iMinMandProducts);
					GLogger.chkpt("optionGroupRow.iMaxMandProducts  : "
							+ optionGroupRow.iMaxMandProducts);

					OptionProductRow optionProductRow = null; // Initializing the Object Class for the OptionGroup table
					Vector vctObjCOOGIDInternal = null;

					// BEGIN DELETE v5.80a
					// vctObjCOOGIDInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup.longValue(), FINAL_ZERO);
					// END DELETE v5.80a
					// BEGIN ADD v5.80a
					vctObjCOOGIDInternal = optionProductTable
							.vctSearchByOptionGroupIDandObsolete(lOptionGroup
									.longValue(), FINAL_ZERO,
									bProductDetailProperty.iRateClassIDNew);

					// END ADD v5.80a

					if (null != vctObjCOOGIDInternal) {
						iSelCount = vctObjCOOGIDInternal.size();
					}

					if ((iMin == iSelCount) && (iMax == iSelCount)) {						
						Vector vctObjPIDOPIDInternal = new Vector();

						// BEGIN DELETE V5.80a
						// vctObjPIDOPIDInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup.longValue(), FINAL_ZERO);
						// END DELETE v5.80a
						// BEGIN ADD V5.80a
						vctObjPIDOPIDInternal = optionProductTable
								.vctSearchByOptionGroupIDandObsolete(
										lOptionGroup.longValue(), FINAL_ZERO,
										bProductDetailProperty.iRateClassIDNew);

						// END ADD v5.80a

						if (null != vctObjPIDOPIDInternal) {

							// for each  record in the vector of OptionProduct Records
							for (int iOPDCounter = FINAL_ZERO; iOPDCounter < vctObjPIDOPIDInternal
									.size(); iOPDCounter++) {
								optionProductRow = null;
								optionProductRow = (OptionProductRow) vctObjPIDOPIDInternal
										.elementAt(iOPDCounter);

								// add code here
								ProductRow productRow = null; // Initializing the Object Class for the Vat table

								productRow = (ProductRow) productTable
										.prSearchByProductIDandObsolete(
												optionProductRow.lProductID,
												FINAL_ZERO);

								if (null != productRow) {
									if (0 == productRow.lLevelID) {
										GLogger.chkpt("Inside if productRow.lLevelID = 0");
									} else if (1 == productRow.lLevelID) {
										bProductDetail = new BProductDetail();
										iSLevel = iLevel + FINAL_ONE; // Increasing the Level by one
										iInstance = iInstance + FINAL_ONE;

										// Begin DEL v9.01d
										// iSParentInstance = iParentInstance;
										// End DEL v9.01d

										//                                      BEGIN UPDATE: V 3.10
										//                                      Updated Code for fixing DEFECT id 70, Obsolete Masters
										//                                      Changed the Call objGetDetailProductNonSelected with an additional input parameters.
										//                                                                                                            bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRow.lProductID), lOptionGroup, Long.valueOf(optionProductRow.lOptionProductID), optionProductRow.iProvisionable, optionProductRow.iBillable, CurrencyID, FINAL_ZERO, iSLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
										iIsDefault = FINAL_ZERO;

										// System.out.println("Before Calling objGetDetailProductNonSelected : optionProductRow.lProductID"+optionProductRow.lProductID);
										// BEGIN DELETE V6.02d
										// bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRow.lProductID), lOptionGroup, Long.valueOf(optionProductRow.lOptionProductID), optionProductRow.iProvisionable, optionProductRow.iBillable, CurrencyID, FINAL_ZERO, iSLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
										// END DELETE V6.02d
										// BEGIN ADD V6.02d
										// todo: Remove loggers
										GLogger
												.chkpt("Calling objGetDetailProductNonSelected for optionProductRow.lProductID id : "
														+ optionProductRow.lProductID);
										GLogger
												.chkpt("Calling objGetDetailProductNonSelected for optionProductRow.lOptionProductID id : "
														+ optionProductRow.lOptionProductID);
										GLogger
												.chkpt("Calling objGetDetailProductNonSelected for bProductDetailProperty.vctProductSelected  : "
														+ bProductDetailProperty.vctProductSelected);
										bProductDetail = objGetDetailProductNonSelected(
												CustomerID,
												Long.valueOf(
														optionProductRow.lProductID),
												lOptionGroup,
												Long.valueOf(
														optionProductRow.lOptionProductID),
												optionProductRow.iProvisionable,
												optionProductRow.iBillable,
												CurrencyID,
												FINAL_ZERO,
												iSLevel,
												iInstance,
												iParentInstance,
												bProductDetailProperty.lPaymentMethodRC,
												bProductDetailProperty.lPaymentMethodNRC,
												bProductDetailProperty.lPaymentMethodUsage,
												iIsDefault,
												bProductDetailProperty.vctProductSelected,
												bProductDetailProperty);

										// END ADD V6.02d
										// System.out.println("After Calling objGetDetailProductNonSelected : optionProductRow.lProductID"+bProductDetail.lProductID);

										//                                      END UPDATE: V 3.10
										//                                      Updated Code for fixing DEFECT id 70, Obsolete Masters
										GLogger
												.chkpt("Calling objGetDetailProductNonSelected vdMainRMethodOfProductsNewProductLine with "
														+ optionProductRow.lProductID);
										bProductDetailProperty.vctProductSelected
												.addElement(bProductDetail);
										vdMainRMethodOfProductsNewProductLine(
												bProductDetailProperty,
												Long.valueOf(
														optionProductRow.lProductID),
												CustomerID, CurrencyID,
												iSLevel, iInstance); // Calling the same function again Recursively
									} // end of the if else if part
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop for handling the null pointer exception
					} // end of the if loop
					else {
						iSLevel = 0;

						Vector vctObjALLDATAOPInternal = null;

						// BEGIN DELETE V5.80a
						// vctObjALLDATAOPInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup.longValue(), FINAL_ZERO);
						// END DELETE V5.80a

						// BEGIN ADD V5.80a
						vctObjALLDATAOPInternal = optionProductTable
								.vctSearchByOptionGroupIDandObsolete(
										lOptionGroup.longValue(), FINAL_ZERO,
										bProductDetailProperty.iRateClassIDNew);

						// END ADD V5.80a
						iSLevel = iLevel + FINAL_ONE;

						if (null != vctObjALLDATAOPInternal) {

							// for each  record in the vector of OptionProduct Records
							for (int iADataCounter = FINAL_ZERO; iADataCounter < vctObjALLDATAOPInternal
									.size(); iADataCounter++) {
								optionProductRow = null; // Initializing the Object Class for the OptionGroup table
								optionProductRow = (OptionProductRow) vctObjALLDATAOPInternal
										.elementAt(iADataCounter);
								lProductID = Long.valueOf(
										optionProductRow.lProductID);

								ProductRow productRow = null; // Initializing the Object Class for the Vat table

								productRow = productTable
										.prSearchByProductIDandObsolete(
												lProductID.longValue(),
												FINAL_ZERO);
												
								if (null != productRow) {									
									if (FINAL_ONE == productRow.lLevelID) {

										iIsDefault = FINAL_ZERO;

										/* 13.1 : BEGIN : VOO : Added for multi-tenancy */
										// If package level product, then check is product tenancy is equal to customer tenancy.
										if(FINAL_TWO == productRow.lProductTypeID)
										{
											int customerTenantId = 0;
											int productTenantId = 0;

											// Fetching product tenancy from product row. 
											productTenantId = productRow.tenantId;
											if(GLogger.isDebugEnabled())
											{
												GLogger.chkpt("vdMainRMethodOfProductsNewProductLine : productId : " + productRow.lProductID);
												GLogger.chkpt("vdMainRMethodOfProductsNewProductLine : productTenantId : " + productTenantId);	
											}

											// Fetching the customer tenancy from customer table if customerId != 0, i.e. when we have the customerId in session.
											if (0 != CustomerID)
											{
												// Getting the Customer table from the session
												customerTable = (Customer) GConnectMemoryDB.getTable(string_CUSTOMER); 
												// Fetching the customer row from customer table.
												CustomerRow customerRow = (CustomerRow) customerTable.crSearchByCustID(CustomerID.longValue());
												// Fetching tenant id from customer row.
												customerTenantId = customerRow.tenantId;
												if(GLogger.isDebugEnabled())
												{
													GLogger.chkpt("vdMainRMethodOfProductsNewProductLine : customerId : " + customerRow.lCustomerID);
													GLogger.chkpt("vdMainRMethodOfProductsNewProductLine : customerTenantId : " + customerTenantId);
												}
											}
											// Assigning customerTenantId as productTenantId. This is done when the code will initially be invoked at the time of server start up. 
											else 
											{
												customerTenantId = Integer.parseInt(GAfeConstants.DEFAULT_TENANTID);
//												customerTenantId = Tenant.getDefaultTenant().getId();
											}

											// comparing the product and customer tenancy, and calling the method objGetDetailProductNonSelected.
											if(productTenantId == customerTenantId)
											{												
												bProductDetail = objGetDetailProductNonSelected(
														CustomerID,
														lProductID,
														lOptionGroup,
														Long.valueOf(
																optionProductRow.lOptionProductID),
																optionProductRow.iProvisionable,
																optionProductRow.iBillable,
																CurrencyID,
																FINAL_ZERO,
																iSLevel,
																FINAL_ZERO,
																FINAL_ZERO,
																bProductDetailProperty.lPaymentMethodRC,
																bProductDetailProperty.lPaymentMethodNRC,
																bProductDetailProperty.lPaymentMethodUsage,
																iIsDefault,
																bProductDetailProperty.vctProductSelected,
																bProductDetailProperty);

												bProductDetailProperty.vctProductNonSelected.addElement(bProductDetail);
											}
										}
										else
										{
											//		                                      BEGIN MODIFY: V 3.10
											//                                      Modified Code for fixing DEFECT id 70, Obsolete Masters
											//                                      Changed the Call objGetDetailProductNonSelected with an additional input parameter as iIsDefault

											/*
											 *  We need to show this product on the upper grid. So we will populate
											 * the BProdutDetail business object for this productId.
											 */

											//                                      bProductDetail = objGetDetailProductNonSelected(CustomerID, lProductID, lOptionGroup, Long.valueOf(optionProductRow.lOptionProductID), optionProductRow.iProvisionable, optionProductRow.iBillable, CurrencyID, FINAL_ZERO, iSLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
											//BEGIN DELETE V5.89A
											//                                              iIsDefault = FINAL_ONE;
											//END DELETE V5.89A
											//BEGIN ADD V5.89A									

											//                                      END ADD V5.89A
											// BEGIN DELETE V6.02d
											// bProductDetail = objGetDetailProductNonSelected(CustomerID, lProductID, lOptionGroup, Long.valueOf(optionProductRow.lOptionProductID), optionProductRow.iProvisionable, optionProductRow.iBillable, CurrencyID, FINAL_ZERO, iSLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
											// END DELETE V6.02d
											// BEGIN ADD V6.02d
											bProductDetail = objGetDetailProductNonSelected(
													CustomerID,
													lProductID,
													lOptionGroup,
													Long.valueOf(
															optionProductRow.lOptionProductID),
															optionProductRow.iProvisionable,
															optionProductRow.iBillable,
															CurrencyID,
															FINAL_ZERO,
															iSLevel,
															FINAL_ZERO,
															FINAL_ZERO,
															bProductDetailProperty.lPaymentMethodRC,
															bProductDetailProperty.lPaymentMethodNRC,
															bProductDetailProperty.lPaymentMethodUsage,
															iIsDefault,
															bProductDetailProperty.vctProductSelected,
															bProductDetailProperty);

											// END ADD V6.02d

											//                                      END MODIFY: V 3.10
											//                                      Modified Code for fixing DEFECT id 70, Obsolete Masters
											bProductDetailProperty.vctProductNonSelected
											.addElement(bProductDetail);
										}	
										/* 13.1 : END : VOO : Added for multi-tenancy */
									} // end of the else loop
																	
								} // end of the for loop
							} // end of the for loop
						} // end of the if loop for the null pointer exception handling
					} // end of the else part of the if loop
				} // end of the for Loop
			} // end of the if loop for handling the null pointer exception
		} catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD: V 3.10
		//      Added Code for fixing DEFECT id 70, Obsolete Masters
		//      Caught Exception
		catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   ex.printStackTrace(System.out);
			 * }
			 */
			GLogger.logException(ex);
		}

		//      Added Code for fixing DEFECT id 70, Obsolete Masters
		//      END ADD: V 3.10
	}

	/**
	 *  DESCRIPTION :   This function will Populate the Business Object Called
	 *                                  BProductDetailProperty for the Detail Case
	 *
	 *  @param          :       Long CustomerProductLineID, Long ProductID, Long  CustomerID
	 *
	 *  @return         :       Bussiness Object - BProductDetailProperty
	 */
	public BProductDetailProperty objGetPropertyDetailOld(
			Long CustomerProductLineID, Long ProductID, Long CustomerID)
			throws SQLException, Exception {
		Vector vctInternal = null; // internal local vector
		Vector vctGetAllPaymentMethCurrID = new Vector(); // internal local vector
		String strDescription = ""; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iSelCounter = 0;                                  //Local Varaible Declaration
		// End DEL v9.01d
		int iVatCompliant = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iVisibleOnSelection = 0;                          //Local Varaible Declaration
		// End DEL v9.01d
		int iVRLevel = 0; // Local Varaible Declaration
		Long lTempProductID; // Local Varaible Declaration
		Long lChargeType; // Local Varaible Declaration
		Long lCusotmerAccountID; // Local Varaible Declaration

		// Begin DEL v9.01d
		// Long lCustomerProductID;                                      //Local Varaible Declaration
		// Long lCustomerProductLineID;                          //Local Varaible Declaration
		// Long lCustomerProductLineIdentifier;          //Local Varaible Declaration
		// Long lPriceSettingID;                                 //Local Varaible Declaration
		// long lDescription1ID = 0;                             //Local Varaible Declaration
		// End DEL v9.01d
		// BEGIN ADD ver 6.02c
		CustomerProductLine objCustomerProductLine = null;
		CustomerProductLineRow objCustomerProductLineRow = null;

		// END ADD ver 6.02c

		// Object of vctProductRole for making the business object
		BProductDetailProperty bProductDetailProperty = new BProductDetailProperty();
		BProductDetail bProductDetail = new BProductDetail();

		// Begin DEL v9.01d
		// BProductParameter bProductParameter = new BProductParameter();
		// End DEL v9.01d
		GLogger.chkpt("objGetPropertyDetailOld TJ");

		try {
			Vector vctBillFrequencyDetails = null;

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// CurrencyRow currencyRow = null;           // Initializing the Object Class for the Currency table
			// End DEL v9.01d

			if (null == currencyTable) {
				currencyTable = (Currency) teleSessionMgr
						.getMasterTable(string_CURRENCY); // Getting the Customer table from the session
			}

			Vector vctobjCurrency = new Vector();

			vctobjCurrency = currencyTable.vctGetAllExisting();

			// Begin DEL v9.01d
			// PaymentMethodRow paymentMethodRow = null;         // Initializing the Object Class for the PaymentMethod table
			// End DEL v9.01d
			if (null == paymentMethodTable) {
				paymentMethodTable = (PaymentMethod) teleSessionMgr
						.getMasterTable(string_PAYMENTMETHOD); // Getting the Customer table from the session
			}

			Vector vctobjPMInternal = new Vector();

			vctobjPMInternal = paymentMethodTable.vctGetAllExisting();

			// Begin DEL v9.01d
			// CustomerChargeTypeRow customerChargeTypeRow = null;               // Initializing the Object Class for the Currency table
			// End DEL v9.01d
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE); // Getting the Customer table from the session

			Vector vctObjCPLID = new Vector();

			vctObjCPLID = customerChargeTypeTable
					.vctSearchByCustomerProductLineIDandObsolete(
							CustomerProductLineID.longValue(), FINAL_ZERO);

			if (null != vctObjCPLID) {

				// for each  record in the vector of CustomerChargeType Records
				GLogger.chkpt("null != vctObjCPLID TJ");

				for (int iASCounter = FINAL_ZERO; iASCounter < vctObjCPLID
						.size(); iASCounter++) {
					lCusotmerAccountID = Long.valueOf(
							((CustomerChargeTypeRow) (vctObjCPLID
									.elementAt(iASCounter))).lCustomerAccountID);
					lChargeType = Long.valueOf(
							((CustomerChargeTypeRow) (vctObjCPLID
									.elementAt(iASCounter))).lChargeTypeID);

					if (lChargeType.longValue() == GAfeDescription
							.lGetTypeId(string_CHARGETYPE_NRC)) {
						vctGetAllPaymentMethCurrID = vctGetAllPaymentMethCurrID(lCusotmerAccountID);

						if ((null != vctGetAllPaymentMethCurrID)
								&& (FINAL_ZERO != vctGetAllPaymentMethCurrID
										.size())) {
							if (null != vctGetAllPaymentMethCurrID
									.elementAt(FINAL_ZERO)) {
								bProductDetailProperty.lPaymentMethodNRC = (Long) (vctGetAllPaymentMethCurrID
										.elementAt(FINAL_ZERO));
								bProductDetailProperty.lPaymentMethodNRCOld = bProductDetailProperty.lPaymentMethodNRC;
							} else {
								bProductDetailProperty.lPaymentMethodNRC = Long.valueOf(
										0);
								bProductDetailProperty.lPaymentMethodNRCOld = Long.valueOf(
										0);
							}

							if (null != vctGetAllPaymentMethCurrID
									.elementAt(FINAL_ONE)) {
								bProductDetailProperty.lCurrencyIDOld = (Long) (vctGetAllPaymentMethCurrID
										.elementAt(FINAL_ONE));
								bProductDetailProperty.lCurrencyID = bProductDetailProperty.lCurrencyIDOld;
							} else {
								bProductDetailProperty.lCurrencyIDOld = Long.valueOf(
										0);
								bProductDetailProperty.lCurrencyID = Long.valueOf(0);
							}
						} else {
							bProductDetailProperty.lPaymentMethodNRC = Long.valueOf(
									0);
							bProductDetailProperty.lPaymentMethodNRCOld = Long.valueOf(
									0);
							bProductDetailProperty.lCurrencyIDOld = Long.valueOf(0);
							bProductDetailProperty.lCurrencyID = Long.valueOf(0);
						}
					}

					if (lChargeType.longValue() == GAfeDescription
							.lGetTypeId(string_CHARGETYPE_RC)) {
						vctGetAllPaymentMethCurrID = vctGetAllPaymentMethCurrID(lCusotmerAccountID);

						if ((null != vctGetAllPaymentMethCurrID)
								&& (FINAL_ZERO != vctGetAllPaymentMethCurrID
										.size())
								&& (null != vctGetAllPaymentMethCurrID
										.elementAt(FINAL_ZERO))) {
							bProductDetailProperty.lPaymentMethodRC = (Long) (vctGetAllPaymentMethCurrID
									.elementAt(FINAL_ZERO));
							bProductDetailProperty.lPaymentMethodRCOld = bProductDetailProperty.lPaymentMethodRC;
						} else {
							bProductDetailProperty.lPaymentMethodRC = Long.valueOf(
									0);
							bProductDetailProperty.lPaymentMethodRCOld = Long.valueOf(
									0);
						}
					}

					if (lChargeType.longValue() == GAfeDescription
							.lGetTypeId("CHARGETYPE_USAGE")) {
						vctGetAllPaymentMethCurrID = vctGetAllPaymentMethCurrID(lCusotmerAccountID);

						if ((null != vctGetAllPaymentMethCurrID)
								&& (FINAL_ZERO != vctGetAllPaymentMethCurrID
										.size())) {
							if (null != vctGetAllPaymentMethCurrID
									.elementAt(FINAL_ZERO)) {
								bProductDetailProperty.lPaymentMethodUsageOld = (Long) (vctGetAllPaymentMethCurrID
										.elementAt(FINAL_ZERO));
								bProductDetailProperty.lPaymentMethodUsage = bProductDetailProperty.lPaymentMethodUsageOld;
							} else {
								bProductDetailProperty.lPaymentMethodUsageOld = Long.valueOf(
										0);
								bProductDetailProperty.lPaymentMethodUsage = Long.valueOf(
										0);
							}
						} else {
							bProductDetailProperty.lPaymentMethodUsageOld = Long.valueOf(
									0);
							bProductDetailProperty.lPaymentMethodUsage = Long.valueOf(
									0);
						}
					}
				} // end of the for loop
			} // End of making the Querry
			else {
				bProductDetailProperty.lPaymentMethodUsageOld = Long.valueOf(0);
				bProductDetailProperty.lPaymentMethodNRCOld = Long.valueOf(0);
				bProductDetailProperty.lPaymentMethodRCOld = Long.valueOf(0);
				bProductDetailProperty.lPaymentMethodUsage = Long.valueOf(0);
				bProductDetailProperty.lPaymentMethodNRC = Long.valueOf(0);
				bProductDetailProperty.lPaymentMethodRC = Long.valueOf(0);
				bProductDetailProperty.lCurrencyIDOld = Long.valueOf(0);
				bProductDetailProperty.lCurrencyID = Long.valueOf(0);
			}

			bProductDetailProperty.vctCurrency = new Vector();
			bProductDetailProperty.lCustomerID = CustomerID;
			bProductDetailProperty.lCustomerProductLineID = CustomerProductLineID;
			bProductDetailProperty.lProductID = ProductID;

			// BEGIN ADD V6.07c
			if (null == objLProduct_ext) {
				objLProduct_ext = new LProduct_ext(teleSessionMgr, bSession);
			}

			GLogger.chkpt("vctGetBillFrequencyIDByCPLID bef TJ");
			vctBillFrequencyDetails = objLProduct_ext
					.vctGetBillFrequencyIDByCPLID(bProductDetailProperty.lCustomerProductLineID
							.longValue());
			GLogger.chkpt("vctGetBillFrequencyIDByCPLID aft TJ");
			GLogger.chkpt("vctGetBillFrequencyIDByCPLID before bill freq old");
			GLogger.chkpt("vctGetBillFrequencyIDByCPLID bill freq old value: "
					+ vctBillFrequencyDetails.elementAt(0));
			bProductDetailProperty.lBillFrequencyIDOld = ((Long) vctBillFrequencyDetails
					.elementAt(0)).longValue();
			GLogger.chkpt("vctGetBillFrequencyIDByCPLID after bill freq old");
			bProductDetailProperty.lBillFrequencyIDNew = bProductDetailProperty.lBillFrequencyIDOld;
			GLogger
					.chkpt("vctGetBillFrequencyIDByCPLID before recurring description");
			GLogger
					.chkpt("vctGetBillFrequencyIDByCPLID recurring description value: "
							+ vctBillFrequencyDetails.elementAt(1));
			bProductDetailProperty.strRecurringTypeDescription = (String) vctBillFrequencyDetails
					.elementAt(1);
			GLogger
					.chkpt("vctGetBillFrequencyIDByCPLID after recurring description");

			// End Add V6.07c
			GLogger.chkpt("vctGetBillFrequencyIDByCPLID bef CPL");
			// BEGIN ADD ver 6.02c
			objCustomerProductLine = (CustomerProductLine) GConnectMemoryDB
					.getTable(GAfeConstants.CUSTOMERPRODUCTLINE);
			GLogger.chkpt("vctGetBillFrequencyIDByCPLID after CPL");

			if (null != objCustomerProductLine) {
				objCustomerProductLineRow = objCustomerProductLine
						.cplrSearchByCustProductLineID(CustomerProductLineID
								.longValue());
				GLogger.chkpt("vctGetBillFrequencyIDByCPLID in first CPL if");

				if (null != objCustomerProductLineRow) {
					bProductDetailProperty.strCreationUser = objCustomerProductLineRow.strCreationUser;
					GLogger.debug(CLASS_NAME, "objGetPropertyDetailOld",
							" bProductDetailProperty.strCreationUser :"
									+ bProductDetailProperty.strCreationUser);
				}
			}

			GLogger.chkpt("vctGetBillFrequencyIDByCPLID after CPL if");
			// END ADD ver 6.02c
			bProductDetailProperty.iPayMethChecked = FINAL_ZERO;
			bProductDetailProperty.iHelpActivated = FINAL_ZERO;
			bProductDetailProperty.iFlagForNewOrOld = FINAL_ZERO;

			// BEGIN ADD ver 5.80g
			if (null == objLProduct_ext) {
				objLProduct_ext = new LProduct_ext(teleSessionMgr, bSession);
			}

			GLogger.chkpt("vctGetBillFrequencyIDByCPLID bef tariff");
			objLProduct_ext.vdPopulateTariffs(bProductDetailProperty);

			// END ADD ver 5.80g
			// BEGIN ADD V5.80d
			bProductDetailProperty.iRateClassIDOld = iGetRateClassIDByCPLID(CustomerProductLineID
					.longValue());
			bProductDetailProperty.iRateClassIDNew = bProductDetailProperty.iRateClassIDOld;

			// END ADD V5.80d
			// Begin Ver 2.5
			// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).

			// BEGIN DELETE VER. 6.07h
			// if (  GAfeDescription.lGetTypeId("PRODUCT_INTERNET") == bProductDetailProperty.lProductID.longValue( )) {
			// END DELETE VER. 6.07h
			// BEGIN ADD VER. 6.07h
			GLogger.chkpt("vctGetBillFrequencyIDByCPLID bef internet");
			if (GAfeDescription.lGetTypeId(string_PRODUCT_INTERNET) == bProductDetailProperty.lProductID
					.longValue()) {

				GLogger.chkpt("vctGetBillFrequencyIDByCPLID inside internet");
				// END DELETE VER. 6.07h
				IAFEOUT iAFEOUT = new IAFEOUT();
				Vector vctLogin_Mail = new Vector();

				vctLogin_Mail = iAFEOUT.vctGetLogin(
						bProductDetailProperty.lCustomerID, "M");

				// Begin Ver 2.0
				// Changes for showing aged Logins on Internet screen
				BInternet bInternet = (BInternet) teleSessionMgr
						.getValue(string_BInternet_aCProduct);

				// Changes for showing aged Logins on Internet screen
				// end Ver 2.0

				if (null != vctLogin_Mail) {
					if (GAfePropertyLoader.DEBUG) {
						int iSizeOfvctLogin = 0;

						iSizeOfvctLogin = vctLogin_Mail.size();

						// Begin Ver 2.0
						// Changes for showing aged Logins on Internet screen
						if (null != bInternet) {
							Vector vctTemp = null;

							// Changes for showing aged Logins on Internet screen
							// Begin Ver 2.0

							for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++) {
								if (null == ((BChangeILogin) vctLogin_Mail
										.elementAt(iCounterLog))) {
									continue;

									// Begin Ver 2.0
									// Changes for showing aged Logins on Internet screen
								} else {

									// Begin Ver 2.5
									// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
									if (!(bCheckForLogin(
											bInternet.vctInternetDetail,
											((BChangeILogin) vctLogin_Mail
													.elementAt(iCounterLog)).strLogin))) {
										vctTemp = new Vector();
										vctTemp
												.addElement(((BChangeILogin) vctLogin_Mail
														.elementAt(iCounterLog)).strLogin);
										vctTemp.addElement(Integer.valueOf(0));
										bInternet.vctInternetDetail
												.addElement(vctTemp);
									}

									// End Ver 2.5
									// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								} // end of the if loop

								// end Ver 2.0

								// Begin Ver 2.0
								// Changes for showing aged Logins on Internet screen
								teleSessionMgr.putValue(string_BInternet_aCProduct,
										bInternet);

								// Changes for showing aged Logins on Internet screen
								// end Ver 2.0
							} // end of the if loop
						} // end of the if loop
					} // end of the if loop

					bProductDetailProperty.vctGetLoginfromILMMAIL = vctLogin_Mail;
				} // end of the if loop

				Vector vctLogin_URL = new Vector();

				vctLogin_URL = iAFEOUT.vctGetLogin(
						bProductDetailProperty.lCustomerID, "U");

				if (null != vctLogin_URL) {
					if (GAfePropertyLoader.DEBUG) {
						int iSizeOfvctLogin = 0;

						iSizeOfvctLogin = vctLogin_URL.size();

						// Begin Ver 2.0
						// Changes for showing aged Logins on Internet screen
						if (null != bInternet) {
							Vector vctTemp = null;

							// Changes for showing aged Logins on Internet screen
							// Begin Ver 2.0

							for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++) {
								if (null == ((BChangeILogin) vctLogin_URL
										.elementAt(iCounterLog))) {
									continue;

									// Begin Ver 2.0
									// Changes for showing aged Logins on Internet screen
								} else {
									boolean bFlagtoAdd = true;
									String strTempLogin = "";

									if (null != bInternet.vctInternetDetail) {
										for (int iCtrForLogins = FINAL_ZERO; iCtrForLogins < bInternet.vctInternetDetail
												.size(); iCtrForLogins++) {
											Vector vctLoginTemp = new Vector();

											vctLoginTemp = (Vector) bInternet.vctInternetDetail
													.elementAt(iCtrForLogins);
											strTempLogin = String
													.valueOf(vctLoginTemp
															.elementAt(FINAL_ZERO));

											if ((strTempLogin)
													.equalsIgnoreCase(((BChangeILogin) vctLogin_URL
															.elementAt(iCounterLog)).strLogin)) {
												bFlagtoAdd = false;
											}

											// Begin Ver 2.5
											// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
											if (bCheckForLogin(
													bInternet.vctInternetDetail,
													((BChangeILogin) vctLogin_URL
															.elementAt(iCounterLog)).strLogin)) {
												bFlagtoAdd = false;
											}

											// End Ver 2.5
											// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
										} // end of the for loop
									} // end of the if loop

									if (bFlagtoAdd) {
										vctTemp = new Vector();
										vctTemp
												.addElement(((BChangeILogin) vctLogin_URL
														.elementAt(iCounterLog)).strLogin);
										vctTemp.addElement(Integer.valueOf(0));
										bInternet.vctInternetDetail
												.addElement(vctTemp);
									} // end of the if loop
								} // end of the if loop

								// end Ver 2.0
							} // end of the if loop

							// Begin Ver 2.0
							// Changes for showing aged Logins on Internet screen
							teleSessionMgr.putValue(string_BInternet_aCProduct,
									bInternet);

							// Changes for showing aged Logins on Internet screen
							// end Ver 2.0
						} // end of the if loop
					} // end of the if loop

					bProductDetailProperty.vctGetLoginfromILMURL = vctLogin_URL;
				} // end of the if loop
			} // end of the if loop

			// End Ver 2.5
			GLogger.chkpt("vctGetBillFrequencyIDByCPLID bef Productrow check");
			ProductRow productRow = null; // Initializing the Object Class for the product table

			if (null == productTable) {
				GLogger
						.chkpt("vctGetBillFrequencyIDByCPLID in Productrow fetch");
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the product table from the session
				GLogger
						.chkpt("vctGetBillFrequencyIDByCPLID after Productrow fetch");
			}

			GLogger
					.chkpt("vctGetBillFrequencyIDByCPLID before search for Productrow ");
			productRow = productTable.prSearchByProductIDandObsolete(ProductID
					.longValue(), FINAL_ZERO);
			GLogger
					.chkpt("vctGetBillFrequencyIDByCPLID after search for Productrow ");

			if (null != productRow) {
				bProductDetailProperty.strProductType = strFindDescription(productRow.lDescription1ID);
				bProductDetailProperty.strProductLineType = strFindDescription(productRow.lDescription1ID);
			}

			GLogger
					.chkpt("vctGetBillFrequencyIDByCPLID after null for Productrow ");

			vctInternal = new Vector();
			vctInternal.addElement(bProductDetailProperty.strProductLineType);
			vctInternal.addElement(ProductID);
			bProductDetailProperty.vctMainProductLines.addElement(vctInternal);

			CustomerRow customerRow = null; // Initializing the Object Class for the Customer table

			GLogger
					.chkpt("vctGetBillFrequencyIDByCPLID before search for Customertable");
			customerTable = (Customer) teleSessionMgr.getTable(string_CUSTOMER); // Getting the Customer table from the session
			customerRow = customerTable
					.crSearchByCustID(CustomerID.longValue());
			GLogger
					.chkpt("vctGetBillFrequencyIDByCPLID after search for Customertable");

			if (null != customerRow) {
				iVatCompliant = customerRow.iVatCompliant;
			}

			GLogger.chkpt("BProductDetailProperty_aCProduct TJ"
					+ bProductDetailProperty);
			bProductDetailProperty.iVatComplaint = iVatCompliant;

			// Begin Ver 2.5
			// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
			//Begin ADd Astha
			boolean bCheck = bCheckNewCplidForPendingOrderMove(CustomerProductLineID);
			GLogger.chkpt("bCheck" + bCheck);
			if (bCheck) {
				GLogger.chkpt(string_BProductDetailProperty_aCProduct_New);
				teleSessionMgr.putValue(string_BProductDetailProperty_aCProduct_New,
						bProductDetailProperty);
			} else {
				GLogger.chkpt(BPRODUCTDETAILPROPERTY_ACPRODUCT);
				teleSessionMgr.putValue(BPRODUCTDETAILPROPERTY_ACPRODUCT,
						bProductDetailProperty);
			}
			//End Add Astha
			// Do Not Remove it by Mistake from here
			// End Ver 2.5
			// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
			CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
			customerProductRow = customerProductTable
					.cprSearchByCustomerProductLineIDandProductIDandObsolete(
							CustomerProductLineID.longValue(), ProductID
									.longValue(), FINAL_ZERO);

			/* Making a for Loop that moves from the first Record to the Last Record */
			/* and in which we add all the result's to a local internal vector which */
			/* further adds the record to the external vector that is returned. */
			/* Each Record in the External Vector is added as a Row of all the Records */
			/* that are fetched from the ResultSet's each Row */
			Long lParentID = null;
			int iLevel;
			int iParentInstance;

			GLogger.chkpt("customerProductRow  TJ" + customerProductRow);

			if (null != customerProductRow) {
				lParentID = Long.valueOf(customerProductRow.lCustomerProductID);
				GLogger.chkpt("lParentID check" + lParentID);
				// Begin DEL v9.01d
				// lCustomerProductLineIdentifier = Long.valueOf(customerProductRow.lCustomerPLIdentifierID);
				// End DEL v9.01d
				iLevel = FINAL_ONE;
				iParentInstance = FINAL_ONE;
				lTempProductID = Long.valueOf(customerProductRow.lProductID);

				//              BEGIN MODIFY: V 3.10
				//              Modified Code for fixing DEFECT id 70, Obsolete Masters
				//              Changed the Call vdGetDetailPSelected with an additional input parameter (Creation Date).
				vdGetDetailPSelected(bProductDetailProperty,
						CustomerProductLineID, lParentID, lTempProductID,
						iLevel, iParentInstance,
						bProductDetailProperty.lCurrencyID, CustomerID);

				//              vdGetDetailPSelected(bProductDetailProperty, CustomerProductLineID, lParentID, lTempProductID, iLevel, iParentInstance, bProductDetailProperty.lCurrencyID, CustomerID, customerProductRow.dtCreationDate);
				//END MODIFy: V 3.10
				//Modified Code forfixing DEFECT id 70, Obsolete Masters
			} // end of the if loop for handling null pointer exception

			// Get the basic package customerProduct Id for the future use

			Long lPackageCustomerProductID = Long.valueOf(0);

			customerProductRow = null; // Initializing the Object Class for the CustomerProduct table
			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
			}

			Vector vctCustomerPackage = new Vector();

			if (null != customerProductTable) {
				vctCustomerPackage = customerProductTable
						.vctSearchByCustomerProductLineIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), FINAL_ZERO);
			}
			GLogger.chkpt("vctCustomerPackage check" + vctCustomerPackage);
			if ((null != vctCustomerPackage)
					&& (FINAL_ZERO != vctCustomerPackage.size())) {
				for (int iCounter = FINAL_ZERO; iCounter < vctCustomerPackage
						.size(); iCounter++) {
					customerProductRow = new CustomerProductRow();
					customerProductRow = (CustomerProductRow) vctCustomerPackage
							.elementAt(iCounter);
					GLogger.chkpt("customerProductRow.lParentID check"
							+ customerProductRow.lParentID);
					GLogger.chkpt("lParentID check-->" + lParentID.longValue());
					if (customerProductRow.lParentID == lParentID.longValue()) {
						GLogger.chkpt("Inside if parent id equals");
						productRow = null; // Initializing the Object Class for the Vat table
						productRow = (ProductRow) productTable
								.prSearchByProductIDandObsolete(
										customerProductRow.lProductID,
										FINAL_ZERO);
						GLogger.chkpt("productRow check-->" + productRow);
						// BEGIN DELETE V6.13a

						/* if (FINAL_ONE != productRow.iHidden) { */

						// END DELETE V6.13a
						// BEGIN ADD V6.13a
						// Checking if its a package level product rather than checking for hidden
						if (FINAL_TWO == productRow.lProductTypeID) {

							// END ADD V6.13a
							GLogger.chkpt("This is the changed logic");
							lPackageCustomerProductID = Long.valueOf(
									customerProductRow.lProductID);

							break;
						}
					}
				}
			}

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
			}

			Vector vctProductID = new Vector();

			vctProductID = customerProductTable
					.vctSearchByCustomerProductLineIDandObsolete(
							bProductDetailProperty.lCustomerProductLineID
									.longValue(), FINAL_ZERO); // Select * from CustomerProduct where CustomerProductLineId is the one passed in the argument of the function

			// Begin DEL v9.01d
			// int iGetMaxInstanceInVector = 0;
			// int iFindProductInVector = 0;
			// End DEL v9.01d
			int iSInstance1 = 2;
			int iAddedProduct = 0;
			int iSInstance2 = 0;

			GLogger.chkpt("vctProductID TJ" + vctProductID);

			if (null != vctProductID) {
				iAddedProduct = 0;

				for (int iCounter = FINAL_ZERO; iCounter < vctProductID.size(); iCounter++) {
					customerProductRow = null;
					customerProductRow = (CustomerProductRow) vctProductID
							.elementAt(iCounter);
					productRow = null; // Initializing the Object Class for the product table

					// BEGIN ADD V5.41a
					productRow = (ProductRow) productTable
							.prSearchByProductID(customerProductRow.lProductID);

					// END ADD V5.41a
					// BEGIN DELETE V5.41a
					// productRow        =   (ProductRow)productTable.prSearchByProductIDandObsolete(customerProductRow.lProductID, FINAL_ZERO);
					// END DELETE V5.41a

					if (FINAL_ONE == productRow.iHidden) {

						//                      BEGIN DELETE V5.24
						//                      comment: reconciled version with release6 patch25

						/*
						 //                      BEGIN DELETE : V5.22
						 if (productRow.lProductID != GAfeDescription.lGetTypeId("PRODUCT_VOLLEDIGE_INSTALLATIE_ALGEMEEN") )
						 {
						 */

						//                      END DELETE V5.24
						//                      BEGIN MODIFY V5.24
						//                      comment: uncommenting to reconcile with release6 patch25
						//                      BEGIN ADD : V3.39
						int iSizeOfselVec = FINAL_ZERO;
						int iToAddHiddenProd = FINAL_ZERO;

						iSizeOfselVec = bProductDetailProperty.vctProductSelected
								.size();

						for (int iSelVec = 0; iSelVec < iSizeOfselVec; iSelVec++) {
							bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
									.elementAt(iSelVec);

							if (bProductDetail.lProductID.longValue() == productRow.lProductID) {
								iToAddHiddenProd = 1;

								break;
							}
						}

						if (iToAddHiddenProd != 1) {

							//                          END ADD : V3.39
							//                           END DELETE : V5.22
							//                          END MODIFY V5.24
							iLevel = 2;
							iSInstance2 = iSInstance1 + iAddedProduct;
							iParentInstance = FINAL_ONE;
							bProductDetail = new BProductDetail();

							//                          BEGIN MODIFY: V 3.10
							//                          Modified Code for fixing DEFECT id 70, Obsolete Masters
							//                          Changed the Call objGetDetailProductSelected with another argument OptionProductRow as null.
							OptionProductRow OPRow = null;

							//                          bProductDetail  =       objGetDetailProductSelected(bProductDetailProperty.lCustomerProductLineID, Long.valueOf(customerProductRow.lCustomerProductID), Long.valueOf(customerProductRow.lProductID), Long.valueOf(customerProductRow.lPriceSettingID), Long.valueOf(customerProductRow.lCustomerPLIdentifierID), customerProductRow.dtActivationDate, customerProductRow.dtDeactivationDate, Long.valueOf(customerProductRow.lParentID), iLevel, iSInstance2, iParentInstance, bProductDetailProperty.lCurrencyID, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, CustomerID, productRow.iHidden);
							GLogger.chkpt("objGetDetailProductSelected TJ");
							bProductDetail = objGetDetailProductSelected(
									bProductDetailProperty.lCustomerProductLineID,
									Long.valueOf(
											customerProductRow.lCustomerProductID),
									Long.valueOf(customerProductRow.lProductID),
									Long.valueOf(customerProductRow.lPriceSettingID),
									Long.valueOf(
											customerProductRow.lCustomerPLIdentifierID),
									customerProductRow.dtActivationDate,
									customerProductRow.dtDeactivationDate,
									Long.valueOf(customerProductRow.lParentID),
									iLevel, iSInstance2, iParentInstance,
									bProductDetailProperty.lCurrencyID,
									bProductDetailProperty.lPaymentMethodRC,
									bProductDetailProperty.lPaymentMethodNRC,
									bProductDetailProperty.lPaymentMethodUsage,
									CustomerID, productRow.iHidden, OPRow);

							//                          END MODIFY: V 3.10
							//                          Modified Code for fixing DEFECT id 70, Obsolete Masters
							bProductDetail.lOptionGroupID = Long.valueOf(0);
							bProductDetail.lOptionProductID = Long.valueOf(0);
							bProductDetail.iProvisionable = productRow.iProvisionable;
							bProductDetail.iBillable = productRow.iBillable;
							GLogger
									.chkpt("CustomerProduct Object value for MVNO RTP: "
											+ customerProductRow);
							GLogger.chkpt("Product Object value for MVNO RTP: "
									+ productRow);
							bProductDetail.iRTPable = productRow.iS_RTPABLE;
							GLogger.chkpt("After MVNO RTP: ");
							bProductDetailProperty.vctProductSelected
									.insertElementAt(
											bProductDetail,
											(bProductDetailProperty.vctProductSelected
													.size()));
							iAddedProduct++;

							//                          Begin Add : V3.39
						}

						//                      End Add : V3.39
					}
				} // end of the for loop
			} // end of the if loop

			GLogger.chkpt("BProductDetailProperty_aCProduct selected TJ"
					+ bProductDetailProperty);

			if (null != vctobjCurrency) {

				// for each  record in the vector of Currency Records
				for (int iASCounter = FINAL_ZERO; iASCounter < vctobjCurrency
						.size(); iASCounter++) {
					vctInternal = new Vector();
					vctInternal.addElement(Long.valueOf(
							((CurrencyRow) (vctobjCurrency
									.elementAt(iASCounter))).lCurrencyID));
					vctInternal
							.addElement((String) ((CurrencyRow) (vctobjCurrency
									.elementAt(iASCounter))).strCurrency);
					bProductDetailProperty.vctCurrency.addElement(vctInternal);
				} // end of the for loop
			} // end of the if loop for handling null pointer exception

			GLogger.chkpt("vctobjPMInternal TJ");

			if (null != vctobjPMInternal) {

				// Loading the Tables Into Memory
				if (null == objectDescriptionTable) {
					objectDescriptionTable = (ObjectDescription) teleSessionMgr
							.getMasterTable(string_OBJECTDESCRIPTION); // Getting the Customer table from the session
				}

				// for each  record in the vector of PaymentMethod Records
				for (int iACounter = FINAL_ZERO; iACounter < vctobjPMInternal
						.size(); iACounter++) {
					ObjectDescriptionRow objectDescriptionRow = null; // Initializing the Object Class for the Currency table

					objectDescriptionRow = objectDescriptionTable
							.odrSearchByDescIDAndLangID(
									((PaymentMethodRow) (vctobjPMInternal
											.elementAt(iACounter))).lDescriptionID,
									(Long.valueOf(string_ONE)).longValue());

					if (null != objectDescriptionRow) {
						strDescription = objectDescriptionRow.strDescription;
					}

					// BEGIN DELETE ver 6.07k
					// BEGIN ADD ver 5.96e

					/*
					 * if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_CABLEACCESS)
					 * {
					 *       if(((PaymentMethodRow) (vctobjPMInternal.elementAt(iACounter))).lPaymentMethodID == GAfeDescription.PAYMENTMTDID_CASH)
					 *       {
					 *               vctInternal = new Vector();
					 *               vctInternal.addElement(Long.valueOf(((PaymentMethodRow) (vctobjPMInternal.elementAt(iACounter))).lPaymentMethodID));
					 *               vctInternal.addElement(strDescription);
					 *               bProductDetailProperty.vctPaymentMethod.addElement(vctInternal);
					 *       }
					 * }
					 * else
					 * {
					 */

					// END ADD ver 5.96e
					// END DELETE ver 6.07k
					vctInternal = new Vector();
					vctInternal.addElement(Long.valueOf(
							((PaymentMethodRow) (vctobjPMInternal
									.elementAt(iACounter))).lPaymentMethodID));
					vctInternal.addElement(strDescription);
					bProductDetailProperty.vctPaymentMethod
							.addElement(vctInternal);

					// BEGIN DELETE ver 6.07k
					// BEGIN ADD ver 5.96e
					// }
					// END ADD ver 5.96e
					// END DELETE ver 6.07k
				} // end of the for loop
			} // end of the if loop for handling null pointer exception

			iVRLevel = 2;
			GLogger.chkpt("vdMainRMethodOfProducts bef TJ");
			vdMainRMethodOfProducts(CustomerProductLineID,
					lPackageCustomerProductID, CustomerID,
					bProductDetailProperty.lCurrencyID, iVRLevel,
					bProductDetailProperty);
			GLogger.chkpt("vdMainRMethodOfProducts aft TJ");
			vdRemoveForbProductsFromUpperGrid(bProductDetailProperty,
					bProductDetailProperty.vctProductSelected,
					bProductDetailProperty.vctProductNonSelected);
			if (bCheck) {
				GLogger.chkpt("Inside bcheck for check ugdg already done"
						+ bProductDetailProperty.lCustomerProductLineID);
				long lOrderID = ProductUtils
						.lGetOrderIDForCPLID(bProductDetailProperty.lCustomerProductLineID);
				GLogger.chkpt("lOrderID" + lOrderID);
				String strVariable = OrderUtils.strGetOrderParamFromOrder(lOrderID,
						83);
				GLogger.chkpt("strVariable" + strVariable);
				if (strVariable != null) {
					bProductDetailProperty.iUpDowngradeFlag = 1;
				} else {
					bProductDetailProperty.iUpDowngradeFlag = 0;
				}
				GLogger.chkpt("bProductDetailProperty. iUpDowngradeFlag"
						+ bProductDetailProperty.iUpDowngradeFlag);
				teleSessionMgr.putValue(
						"BProductDetailProperty_aCProductOrders_New",
						bProductDetailProperty);
			}
		} catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   GGeneric.printStackTrace(ex,GGeneric.iDebugLevelThree,this);
			 * }
			 */
		//	ex.printStackTrace(System.out);
			GLogger.logException(ex);

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		GLogger.chkpt("Hi there the Bproduct id is Sunsat3 : " +bProductDetailProperty);
		return bProductDetailProperty;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Remove all the Forbidden Products from
	 *                                  The upper Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Vector vctProductSelected, Vector vctProductNonSelected
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 */
	protected void vdRemoveForbProductsFromUpperGrid(
			BProductDetailProperty bProductDetailProperty,
			Vector vctProductSelected, Vector vctProductNonSelected)
			throws Exception {
		int iSizeOfVector = 0; // Local Variable Declaration
		int iCount = 0; // Local Variable Declaration
		int iSizeVector = 0; // Local Variable Declaration
		long lForbProductID = 0; // Local Variable Declaration

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			iSizeOfVector = vctProductSelected.size();

			// Loading the Tables into Memory
			if (null == forbiddenProductTable) {
				forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
						.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
			}

			for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {

				// Begin DEL v9.01d
				// ForbiddenProductRow forbiddenProductRow = null;                                                                                                                               // Initializing the Object Class for the OptionGroup table
				// End DEl v9.01d
				Vector vctObjGetALLDATAFPInternal = null;

				vctObjGetALLDATAFPInternal = forbiddenProductTable
						.vctSearchByProductIDandObsolete(
								(((BProductDetail) vctProductSelected
										.elementAt(iCount)).lProductID)
										.longValue(), FINAL_ZERO);

				if (null != vctObjGetALLDATAFPInternal) {

					// for each  record in the vector of FORBIDDENPRODUCT Records
					for (int iFPCounter = FINAL_ZERO; iFPCounter < vctObjGetALLDATAFPInternal
							.size(); iFPCounter++) {
						lForbProductID = ((ForbiddenProductRow) (vctObjGetALLDATAFPInternal
								.elementAt(iFPCounter))).lForbProductID;

						if (lForbProductID != FINAL_ZERO) {

							// For Going Around the VctNonSelected Vector
							iSizeVector = FINAL_ZERO;
							iSizeVector = bProductDetailProperty.vctProductNonSelected
									.size();

							for (int iCounter = FINAL_ZERO; iCounter < iSizeVector; iCounter++) {
								if (null != (vctProductNonSelected
										.elementAt(iCounter))) {
									if ((String
											.valueOf(((BProductDetail) bProductDetailProperty.vctProductNonSelected
													.elementAt(iCounter)).lProductID))
											.equals(String
													.valueOf(lForbProductID))) {

										// Begin DEL v9.01d
										// BProductDetail bProductDetail = new BProductDetail();
										// If the ProductID of the Vector vctProductNonSelected
										// is equals to the Forb ProductID then do this
										// bProductDetail = ((BProductDetail) bProductDetailProperty.vctProductNonSelected.elementAt(iCounter));
										// End DEL v9.01d
										// Remove that products from vctProductNonSelected
										bProductDetailProperty.vctProductNonSelected
												.removeElementAt(iCounter);
										iSizeVector--; // This is Very Important to Dec the Size of the Vector is Case of Deletion
										iCounter--; // This is Very Important to Dec the Counter is Case of Deletion Because if we do not decrement the Counter it will begin Pointing to the Next Instamce in the Vector that is after deletion Logic
									} // end of the if loop
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop
					} // end of the for loop
				} // end of the if loop
			} // end of the for loop
		} // end of the try block
		catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   ex.printStackTrace(System.out);
			 * }
			 */
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	}

	/**
	 *  DESCRIPTION :   The Function will Get Populate the VctSelected Vector of the BO
	 *                                  for the Lower Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long CustomerProductLineID, Long lParentID, Long lProductID, int iLevel, int iParentInstance, Long CurrencyID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 */
	protected void vdGetDetailPSelected(
			BProductDetailProperty bProductDetailProperty,
			Long CustomerProductLineID, Long lParentID, Long lProductID,
			int iLevel, int iParentInstance, Long CurrencyID, Long CustomerID)
			throws Exception {
		Long lOptionGroupID;
		Long ProductID;
		Long CustomerProductID;
		int iSLevel = 0;
		int iInstance = 0;
		int iSParentInstance = 0;
		int iLevelInstance = 0;
		BProductDetail bProductDetail = null;

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// OptionGroupRow optionGroupRow = null;                                                                                             // Initializing the Object Class for the OptionGroup table
			// End DEL v9.01d
			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			Vector vctObjOGInternal = null;

			// BEGIN DELETE V5.80a
			// vctObjOGInternal = optionGroupTable.vctSearchByProductIDandObsolete(lProductID.longValue(), FINAL_ZERO);
			// END DELETE V5.80a
			// BEGIN ADD V5.80a
			vctObjOGInternal = optionGroupTable
					.vctSearchByProductIDandObsolete(lProductID.longValue(),
							FINAL_ZERO, bProductDetailProperty.iRateClassIDNew);

			// END ADD V5.80a

			if (null != vctObjOGInternal) {

				// Loading the Tables into Memory
				if (null == optionProductTable) {
					optionProductTable = (OptionProduct) teleSessionMgr
							.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
				}

				customerProductTable = (CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

				// for each  record in the vector of OptionGroup Records
				for (int iOGCounter = FINAL_ZERO; iOGCounter < vctObjOGInternal
						.size(); iOGCounter++) {
					lOptionGroupID = Long.valueOf(
							((OptionGroupRow) (vctObjOGInternal
									.elementAt(iOGCounter))).lOptionGroupID);

					// Begin DEL v9.01d
					// OptionProductRow optionProductRow = null;                                                                                         // Initializing the Object Class for the OptionGroup table
					// End DEL v9.01d

					Vector vctObjOPInternal = null;

					// BEGIN DELETE V5.80a
					// vctObjOPInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroupID.longValue(), FINAL_ZERO);
					// END DELETE V5.80a

					// BEGIN ADD V5.80a
					vctObjOPInternal = optionProductTable
							.vctSearchByOptionGroupIDandObsolete(lOptionGroupID
									.longValue(), FINAL_ZERO,
									bProductDetailProperty.iRateClassIDNew);

					// END ADD V5.80a

					if (null != vctObjOPInternal) {
						for (int iOPCounter = FINAL_ZERO; iOPCounter < vctObjOPInternal
								.size(); iOPCounter++) {

							// Begin DEL v9.01d
							// CustomerProductRow customerProductRow = null;                                                                             // Initializing the Object Class for the CustomerProduct table
							// End DEL v9.01d
							Vector vctobjCPInternal = new Vector();

							vctobjCPInternal = customerProductTable
									.vctSearchByParentIDandProductIDandObsolete(
											lParentID.longValue(),
											((OptionProductRow) (vctObjOPInternal
													.elementAt(iOPCounter))).lProductID,
											FINAL_ZERO);

							if (null != vctobjCPInternal) {
								for (int iCPCounter = FINAL_ZERO; iCPCounter < vctobjCPInternal
										.size(); iCPCounter++) {

									//                                  BEGIN ADD: V 3.10
									//                                  Added Code for fixing DEFECT id 70, Obsolete Masters
									//                                  Added code to check for the valid Option Group by Unique combination of ProductId and ParentProductID
									//                                  together with the Creation Date of Product.
									boolean bToTakeOpGrp = false;
									Timestamp dtCreationDateOfChildProduct = null;
									java.sql.Date dtCreationDate = null;

									dtCreationDateOfChildProduct = ((CustomerProductRow) (vctobjCPInternal
											.elementAt(iCPCounter))).dtCreationDate;

									try {
										dtCreationDate = java.sql.Date
												.valueOf(dtCreationDateOfChildProduct
														.toString().substring(
																0, 10));
									} catch (Exception ex) {
										GLogger.logException(ex);
									}

									OptionProductRow OPRow = null;

									OPRow = (OptionProductRow) (vctObjOPInternal
											.elementAt(iOPCounter));

									// BEGIN DELETE V5.80a
									// bToTakeOpGrp = bGetValidOptionGroup(OPRow.lProductID, lParentID.longValue(), lOptionGroupID.longValue(), dtCreationDate);
									// END DELETE v5.80a
									// BEGIN ADD V5.80a
									bToTakeOpGrp = bGetValidOptionGroup(
											OPRow.lProductID, lParentID
													.longValue(),
											lOptionGroupID.longValue(),
											dtCreationDate,
											bProductDetailProperty);

									// END ADD v5.80a

									if (bToTakeOpGrp) {

										//                                      END ADD: V 3.10
										//                                      Added Code for fixing DEFECT id 70, Obsolete Masters
										//bProductDetail = new BProductDetail(); // Allocating of Memory that is Initialisation of the BO for each of the Loop's
										iSLevel = iLevel + 1; // Incrementing of the Level Field
										iInstance = iInstance + 1; // Incrementing of the Instance Field
										iSParentInstance = iParentInstance; // Incrementing of the ParentInstance Field

										//                                      BEGIN MODIFY: V 3.10
										//                                      Modified Code for fixing DEFECT id 70, Obsolete Masters
										//                                      Modified the Call objGetDetailProductNonSelected with an additional input parameter as iIsDefault
										// bProductDetail  =       objGetDetailProductSelected(CustomerProductLineID, Long.valueOf(((CustomerProductRow)(vctobjCPInternal.elementAt(iCPCounter))).lCustomerProductID), Long.valueOf(((CustomerProductRow)(vctobjCPInternal.elementAt(iCPCounter))).lProductID), Long.valueOf(((CustomerProductRow)(vctobjCPInternal.elementAt(iCPCounter))).lPriceSettingID), Long.valueOf(((CustomerProductRow)(vctobjCPInternal.elementAt(iCPCounter))).lCustomerPLIdentifierID), ((CustomerProductRow)(vctobjCPInternal.elementAt(iCPCounter))).dtActivationDate, ((CustomerProductRow)(vctobjCPInternal.elementAt(iCPCounter))).dtDeactivationDate, Long.valueOf(((CustomerProductRow)(vctobjCPInternal.elementAt(iCPCounter))).lParentID), iSLevel, iInstance, iSParentInstance, CurrencyID, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, CustomerID, FINAL_ZERO);
										bProductDetail = objGetDetailProductSelected(
												CustomerProductLineID,
												Long.valueOf(
														((CustomerProductRow) (vctobjCPInternal
																.elementAt(iCPCounter))).lCustomerProductID),
												Long.valueOf(
														((CustomerProductRow) (vctobjCPInternal
																.elementAt(iCPCounter))).lProductID),
												Long.valueOf(
														((CustomerProductRow) (vctobjCPInternal
																.elementAt(iCPCounter))).lPriceSettingID),
												Long.valueOf(
														((CustomerProductRow) (vctobjCPInternal
																.elementAt(iCPCounter))).lCustomerPLIdentifierID),
												((CustomerProductRow) (vctobjCPInternal
														.elementAt(iCPCounter))).dtActivationDate,
												((CustomerProductRow) (vctobjCPInternal
														.elementAt(iCPCounter))).dtDeactivationDate,
												Long.valueOf(
														((CustomerProductRow) (vctobjCPInternal
																.elementAt(iCPCounter))).lParentID),
												iSLevel,
												iInstance,
												iSParentInstance,
												CurrencyID,
												bProductDetailProperty.lPaymentMethodRC,
												bProductDetailProperty.lPaymentMethodNRC,
												bProductDetailProperty.lPaymentMethodUsage,
												CustomerID, FINAL_ZERO, OPRow);

										//                                      END MODIFY: V 3.10
										//                                      Modified Code for fixing DEFECT id 70, Obsolete Masters

										// BEGIN DELETE: Ver 2.3 on 08/02/2002
										// Added one more  argument to the function
										// iLevelInstance        =       iSearchPositionInVectorLevelInstance(bProductDetailProperty.vctProductSelected, (iSLevel - FINAL_ONE), iParentInstance);
										// END   DELETE: Changed on 08/02/2002
										// BEGIN ADD : Ver 2.3 Changed on 08/02/2002
										// Added one more  argument to the function
										iLevelInstance = iSearchPositionInVectorLevelInstance(
												bProductDetailProperty.vctProductSelected,
												(iSLevel - FINAL_ONE),
												iParentInstance, lParentID
														.longValue());

										// END   ADD : Changed on 08/02/2002

										if (FINAL_ZERO == iLevelInstance) {
											bProductDetailProperty.vctProductSelected
													.addElement(bProductDetail);
										} else {
											bProductDetailProperty.vctProductSelected
													.insertElementAt(
															bProductDetail,
															(iLevelInstance + FINAL_ONE));
										} // end of the if else if loop

										CustomerProductID = Long.valueOf(
												((CustomerProductRow) (vctobjCPInternal
														.elementAt(iCPCounter))).lCustomerProductID);
										ProductID = Long.valueOf(
												((CustomerProductRow) (vctobjCPInternal
														.elementAt(iCPCounter))).lProductID);
										vdGetDetailPSelected(
												bProductDetailProperty,
												CustomerProductLineID,
												CustomerProductID, ProductID,
												iSLevel, iInstance, CurrencyID,
												CustomerID);

										//                                      BEGIN ADD: V 3.10
										//                                      Added Brace for fixing DEFECT id 70, Obsolete Masters
									} // end of code for obsolete masters

									//                                  END UPDATE: V 3.10
									//                                  Added Brace for fixing DEFECT id 70, Obsolete Masters
								} // end of the for loop
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop

					// Vector ProductSelectedForRTP = new Vector();
					//  ProductSelectedForRTP = bProductDetailProperty.vctProductSelected;
					//  BProductDetail bProductDetailRTP = new BProductDetail();
					int sizeOfVector = bProductDetailProperty.vctProductSelected
							.size();
					GLogger.chkpt("Before RTP check for loop ");
					for (int counter = 0; counter < sizeOfVector; counter++) {
						GLogger.chkpt("In RTP check");
						//bProductDetailRTP = ((BProductDetail) ProductSelectedForRTP.elementAt(counter));
						//bProductDetailRTP.iRTPable = (RProduct.bIsRTPProduct(bProductDetailRTP.lProductID.longValue())?  1 : 0);
						((BProductDetail) bProductDetailProperty.vctProductSelected
								.elementAt(counter)).iRTPable = (ProductUtils
								.bIsRTPProduct(((BProductDetail) bProductDetailProperty.vctProductSelected
										.elementAt(counter)).lProductID
										.longValue()) ? 1 : 0);
						GLogger.chkpt("After RTP check");
					}
				} // end of the for loop
			} // end of the if loop
		} catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   ex.printStackTrace(System.out);
			 * }
			 */

			// BEGIN ADD V 7.06n
			//ex.printStackTrace(System.out);
			GLogger.logException(ex);
			GLogger.debug(CLASS_NAME, "vdGetDetailPSelected", ex.getMessage());

			// END ADD V 7.06n
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	}

	/**
	 *  DESCRIPTION :   The Function will Search the Position of the Vector that has been send mostly it is being used for
	 *                                  vctProductSelected or anyother vector and for a particular Level and Instance as same will search
	 *                                  the Position in the Vector.
	 *
	 *  @param          :       Vector vctFindProductInVector, int iLevel, int iInstance
	 *
	 *  @return         :       int             -       Returns the Postion In the Vector
	 */

	//  BEGIN DELETE: Ver 2.3 Changed on 08/02/2002
	//    Added one more  argument to the function
	//  protected int iSearchPositionInVectorLevelInstance(Vector vctFindProductInVector, int iLevel, int iInstance) throws Exception
	//  END   DELETE: Ver 2.3 Changed on 08/02/2002
	//  BEGIN ADD : Changed on 08/02/2002
	//    Added one more  argument to the function
	protected int iSearchPositionInVectorLevelInstance(
			Vector vctFindProductInVector, int iLevel, int iInstance,
			long lParentID) throws Exception

	//  END   ADD : Changed on 08/02/2002
	{
		int iPositionToPutBO = 0; // Local Variable Declaration
		int iSizeOfVector = 0; // Local Variable Declaration
		int iCount = 0; // Local Variable Declaration
		boolean bFlag = false; // Internal Local Flag

		try {
			iSizeOfVector = vctFindProductInVector.size();

			for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {

				// BEGIN DELETE: Ver 2.3 Changed on 08/02/2002
				// Added one more  argument to the function
				// if((iLevel      ==      ((BProductDetail)vctFindProductInVector.elementAt(iCount)).iLevel) && (iInstance        ==      ((BProductDetail)vctFindProductInVector.elementAt(iCount)).iInstance))
				// END   DELETE: Changed on 08/02/2002
				// BEGIN ADD : Ver 2.3 Changed on 08/02/2002
				// Added one more  argument to the function
				if ((iLevel == ((BProductDetail) vctFindProductInVector
						.elementAt(iCount)).iLevel)
						&& (iInstance == ((BProductDetail) vctFindProductInVector
								.elementAt(iCount)).iInstance)
						&& (lParentID == ((BProductDetail) vctFindProductInVector
								.elementAt(iCount)).lCustomerProductID
								.longValue()))

				// END   ADD : Changed on 08/02/2002
				{
					bFlag = true;

					break;
				} // end of the if loop
			} // end of the for loop

			if (bFlag) {
				iPositionToPutBO = iCount;
			} // end of the if loop
		} // end of the try block
		catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   ex.printStackTrace(System.out);
			 * }
			 */
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return iPositionToPutBO;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Populate the BO called the BProductDetail for
	 *                                  The Lower Grid
	 *
	 *  @param          :       Long CustomerProductLineID, Long CustomerProductID, Long ProductID, Long PriceSettingID, Long CustomerPLIdentifierID, Date ActivationDate, Date DeActivationDate, Long ParentID, int iSLevel, int iInstance, int iParentInstance, Long CurrencyID
	 *
	 *  @return         :       BProductDetail  -       The BProductDetail Bussiness Object
	 */

	//  BEGIN MODIFY: V 3.10
	//  Modified Code for fixing DEFECT id 70, Obsolete Masters
	//  Changed the Call objGetDetailProductNonSelected with additional input parameters
	// public BProductDetail objGetDetailProductSelected(Long CustomerProductLineID, Long CustomerProductID, Long ProductID, Long PriceSettingID, Long CustomerPLIdentifierID, Date ActivationDate, Date DeActivationDate, Long ParentID, int iSLevel, int iInstance, int iParentInstance, Long CurrencyID, Long PaymentMethodRC, Long PaymentMethodNRC, Long PaymentMethodUsage, Long CustomerID, int iHidden) throws Exception
	public BProductDetail objGetDetailProductSelected(
			Long CustomerProductLineID, Long CustomerProductID, Long ProductID,
			Long PriceSettingID, Long CustomerPLIdentifierID,
			Date ActivationDate, Date DeActivationDate, Long ParentID,
			int iSLevel, int iInstance, int iParentInstance, Long CurrencyID,
			Long PaymentMethodRC, Long PaymentMethodNRC,
			Long PaymentMethodUsage, Long CustomerID, int iHidden,
			OptionProductRow optionProductRow) throws Exception

	//  END MODIFY: V 3.10
	//  Modified Code for fixing DEFECT id 70, Obsolete Masters
	{
		long lDescription1ID = 0; // Local Varaible Declaration
		double dSum = 0; // Local Varaible Declaration
		double dAddChargeAmount = 0; // Local Varaible Declaration
		double dChargeAmount = 0; // Local Varaible Declaration
		Long lRecurringTypeID; // Local Varaible Declaration
		String strPeriodicity = ""; // Local Varaible Declaration
		int iVisibleOnSelection = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// Vector vctGetAllOptionData;
		// Begin Add V5.96j
		// CustomerProductRow custProductRow = null;   //Local Variable Declaration
		// End DEL v9.01d
		Vector vctTemp = null; // Local Variable Declaration

		// End Add V5.96j
		BProductDetail bProductDetail = new BProductDetail();

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			bProductDetail.lProductID = ProductID;
			bProductDetail.lCustomerProductID = CustomerProductID;
			bProductDetail.dtActivationDate = ActivationDate;
			bProductDetail.dtDeactivationDate = DeActivationDate;
			bProductDetail.iLevel = iSLevel;
			bProductDetail.iInstance = iInstance;
			bProductDetail.iParentInstance = iParentInstance;
			bProductDetail.lPriceSettingID = PriceSettingID;

			ProductRow productRow = null; // Initializing the Object Class for the Vat table

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
			}

			productRow = (ProductRow) productTable
					.prSearchByProductIDandObsolete(ProductID.longValue(),
							FINAL_ZERO);

			if (null != productRow) {
				lDescription1ID = productRow.lDescription1ID;
				iVisibleOnSelection = productRow.iVisibleOnSelection;
				GLogger.chkpt("Before RTPAble" + ProductID.longValue());
				GLogger.chkpt("Value productRow.iS_RTPABLE"
						+ productRow.iS_RTPABLE);
				bProductDetail.iRTPable = productRow.iS_RTPABLE;
				GLogger.chkpt("After bProductDetail.iRTPable "
						+ bProductDetail.iRTPable);
			}

			bProductDetail.lProductTypeID = Long.valueOf(productRow.lProductTypeID);

			// BEGIN ADD V5.01a
			// comment: setting the sorting1id of the products in the selected vector
			bProductDetail.lSorting1ID = productRow.lSorting1ID;

			// END ADD V5.01a
			if (lDescription1ID != FINAL_ZERO) {
				strObjectDesc = strFindDescription(lDescription1ID);
				bProductDetail.strDescription1 = strObjectDesc;
			}

			bProductDetail.iVisibleOnSelection = iVisibleOnSelection;

			//          Begin Modify : V3.32
			//          Change made to fix defectid=1 (Volledige Installatie not to be shown in upper grid)
			//                       bProductDetail.iHidden                          =       iHidden;
			// Begin Add V5.96j
			if (null == objLProduct_ext) {
				objLProduct_ext = new LProduct_ext(teleSessionMgr, bSession);
			}

			vctTemp = objLProduct_ext
					.vctGetBillFrequencyIDByCPLID(CustomerProductLineID
							.longValue());

			if (null != vctTemp) {
				lRecurringTypeID = (Long) vctTemp.elementAt(0);
			} else {
				lRecurringTypeID = Long.valueOf(0);
			}

			// End Add V5.96j
			if (iHidden == FINAL_ZERO) {
				bProductDetail.iHidden = productRow.iHidden;
			} else {
				bProductDetail.iHidden = iHidden;
			}

			//          Change made to fix defectid=1 (Volledige Installatie not to be shown in upper grid)
			//          End Modify : V3.32
			// Begin DEL v9.01d
			// vctGetAllOptionData = new Vector();       //Local Initilisation of the Vector
			// End DEL v9.01d

			//          BEGIN MODIFY: V 3.10
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters
			//          Removed the Call vctGetAllOptionData and filled that up with Option Product Row.
			//                      vctGetAllOptionData                                     =       vctGetAllOptionData(ProductID, ParentID);       //Calling the Function named vctGetAllOptionData
			//                      if((vctGetAllOptionData.size() == 4))
			//                      {
			//                              bProductDetail.lOptionGroupID           =       (Long)(vctGetAllOptionData.elementAt(0));
			//                              bProductDetail.lOptionProductID         =       (Long)(vctGetAllOptionData.elementAt(1));
			//                              bProductDetail.iProvisionable           =       ((Integer)(vctGetAllOptionData.elementAt(2))).intValue();
			//                              bProductDetail.iBillable                        =       ((Integer)(vctGetAllOptionData.elementAt(3))).intValue();
			//                      }
			if (null != optionProductRow) {
				bProductDetail.lOptionGroupID = Long.valueOf(
						optionProductRow.lOptionGroupID);
				bProductDetail.lOptionProductID = Long.valueOf(
						optionProductRow.lOptionProductID);
				bProductDetail.iProvisionable = optionProductRow.iProvisionable;
				bProductDetail.iBillable = optionProductRow.iBillable;
			}

			//          END MODIFY: V 3.10
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters
			if (null == CurrencyID) {
				CurrencyID = Long.valueOf(string_ONE);
			}

			dSum = 0;

			if (null != bProductDetail.lPriceSettingID) {

				// Begin DEL v9.01d
				// ChargeRow chargeRow = null;                                                                                   // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				// begin add V5.96j

				// End add V5.96j
				Vector vctobjCRInternal = new Vector();

				// Begin Delete V5.96j
				// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(PriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_USAGE"), PaymentMethodUsage.longValue());
				// End Delete V5.96j
				// Begin Add V5.96j
				vctobjCRInternal = chargeTable
						.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
								PriceSettingID.longValue(), CurrencyID
										.longValue(), FINAL_ZERO,
								GAfeDescription.lGetTypeId("CHARGETYPE_USAGE"),
								PaymentMethodUsage.longValue(),
								lRecurringTypeID.longValue());

				// End Add V5.96j

				if (null != vctobjCRInternal) {
					if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
							.elementAt(FINAL_ZERO))).lVatID) {
						VatRow vatRow = null; // Initializing the Object Class for the Vat table

						if (null == vatTable) {
							vatTable = (Vat) teleSessionMgr
									.getMasterTable("VAT"); // Getting the Vat table from the session
						}

						vatRow = (VatRow) vatTable.vrSearchByVatIDandObsolete(
								((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).lVatID,
								FINAL_ZERO);

						if (null != vatRow) {
							dAddChargeAmount = vatRow.dVatAmount;
						}

						dChargeAmount = dChargeAmount
								+ ((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).dChargeAmount;
						dChargeAmount = ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).dChargeAmount
								+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).dChargeAmount) / 100);
					} // end of the if loop

					dSum = dSum + dChargeAmount;
				} // end of the if loop

				// Begin DEL v9.01d
				// chargeRow = null;                                                                                     // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				vctobjCRInternal = new Vector();

				// Begin Delete V5.96j
				// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(PriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_RC"), PaymentMethodRC.longValue());
				// End Delete V5.96j
				// Begin Add V5.96j
				vctobjCRInternal = chargeTable
						.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
								PriceSettingID.longValue(), CurrencyID
										.longValue(), FINAL_ZERO,
								GAfeDescription.lGetTypeId(string_CHARGETYPE_RC),
								PaymentMethodRC.longValue(), lRecurringTypeID
										.longValue());

				// End Add V5.96j
				// BEGIN MODIFY V6.05a
				// BEGIN DELETE V6.02d
				// if (null != vctobjCRInternal) {
				// END DELETE V6.02d
				// BEGIN ADD V6.02d
				if (null != vctobjCRInternal) {

					// END ADD V6.02d
					// END MODIFY V6.05a
					if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
							.elementAt(FINAL_ZERO))).lVatID) {
						VatRow vatRow = null; // Initializing the Object Class for the Vat table

						if (null == vatTable) {
							vatTable = (Vat) teleSessionMgr
									.getMasterTable("VAT"); // Getting the Vat table from the session
						}

						vatRow = (VatRow) vatTable.vrSearchByVatIDandObsolete(
								((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).lVatID,
								FINAL_ZERO);

						if (null != vatRow) {
							dAddChargeAmount = vatRow.dVatAmount;
						}

						dChargeAmount = dChargeAmount
								+ ((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).dChargeAmount;
						dChargeAmount = ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).dChargeAmount
								+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).dChargeAmount) / 100);
					} // end of the if loop

					dSum = dSum + dChargeAmount;
				} // end of the if loop

				// Begin DEL v9.01d
				// chargeRow = null;                                                                                     // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				vctobjCRInternal = new Vector();

				// Begin Delete V5.96j
				// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(PriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_NRC"), PaymentMethodNRC.longValue());
				// End Delete V5.96j
				// BEGIN DELETE V6.02d
				// BEGIN ADD V5.96j
				// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(PriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_NRC"), PaymentMethodNRC.longValue(),lRecurringTypeID.longValue());
				// End Add V5.96j
				// END DELETE V6.02d
				// BEGIN ADD V6.02d
				vctobjCRInternal = chargeTable
						.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
								PriceSettingID.longValue(), CurrencyID
										.longValue(), FINAL_ZERO,
								GAfeDescription.lGetTypeId(string_CHARGETYPE_NRC),
								PaymentMethodNRC.longValue(), 0);

				// END ADD V6.02d
				// BEGIN DELETE V6.02d
				// if (null != vctobjCRInternal) {
				// END DELETE V6.02d
				// BEGIN MODIFY V6.05a
				// BEGIN ADD V6.02d
				if (null != vctobjCRInternal) {

					// END ADD V6.02d
					// END MODIFY V6.05a
					if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
							.elementAt(FINAL_ZERO))).lVatID) {
						VatRow vatRow = null; // Initializing the Object Class for the Vat table

						if (null == vatTable) {
							vatTable = (Vat) teleSessionMgr
									.getMasterTable("VAT"); // Getting the Vat table from the session
						}

						vatRow = (VatRow) vatTable.vrSearchByVatIDandObsolete(
								((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).lVatID,
								FINAL_ZERO);

						if (null != vatRow) {
							dAddChargeAmount = vatRow.dVatAmount;
						}

						dChargeAmount = dChargeAmount
								+ ((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).dChargeAmount;
						dChargeAmount = ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).dChargeAmount
								+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
										.elementAt(FINAL_ZERO))).dChargeAmount) / 100);
					} // end of the if loop

					dSum = dSum + dChargeAmount;

					// Begin Delete V5.96j
					// if (FINAL_ZERO != (((ChargeRow) (vctobjCRInternal.elementAt(FINAL_ZERO))).lRecurringTypeID)) {
					// lRecurringTypeID = Long.valueOf(((ChargeRow) (vctobjCRInternal.elementAt(FINAL_ZERO))).lRecurringTypeID);
					// End Delete V5.96j
					// BEGIN DELETE V6.02d

					/*
					 *   RecurringTypeRow recurringTypeRow = null;                                                                       // Initializing the Object Class for the Vat table
					 *
					 *   if (null == recurringTypeTable) {
					 *       recurringTypeTable = (RecurringType) teleSessionMgr.getMasterTable("RECURRINGTYPE");        // Getting the Vat table from the session
					 *   }
					 *   recurringTypeRow = (RecurringTypeRow) recurringTypeTable.rtrSearchByRecurringTypeIDandObsolete(lRecurringTypeID.longValue(), FINAL_ZERO);
					 *
					 *   if (null != recurringTypeRow) {
					 *       strPeriodicity = recurringTypeRow.strRecurringTypeDescription;
					 *   }
					 */

					// END DELETE V6.02d
					// Begin Delete V5.96j
					// }//end of the if loop
					// End Delete V5.96j
				} // end of the if loop
			} // end of the if loop

			// BEGIN ADD V6.02d
			RecurringTypeRow recurringTypeRow = null; // Initializing the Object Class for the Vat table

			if (null == recurringTypeTable) {
				recurringTypeTable = (RecurringType) teleSessionMgr
						.getMasterTable("RECURRINGTYPE"); // Getting the Vat table from the session
			}

			recurringTypeRow = (RecurringTypeRow) recurringTypeTable
					.rtrSearchByRecurringTypeIDandObsolete(lRecurringTypeID
							.longValue(), FINAL_ZERO);

			if (null != recurringTypeRow) {
				strPeriodicity = recurringTypeRow.strRecurringTypeDescription;
			}

			// END ADD V6.02d
			if (strPeriodicity.length() > 0) {
				bProductDetail.strPeriodicity = strPeriodicity;
			} else {
				bProductDetail.strPeriodicity = "";
			}

			// Begin v9.01c Modify
			// String strDescForProp = "";
			// strDescForProp = "DECPLACES_CURRENCY_" + String.valueOf(CurrencyID);

			bProductDetail.dPrice = dSum;

			// bProductDetail.dPrice = dbValidateCharge(bProductDetail.dPrice, Integer.parseInt(GAfeDescription.strGetProperty(strDescForProp)));
			// End V9.01c Modify
			bProductDetail.vctParameters = vctLoadParameters(
					CustomerProductLineID, CustomerProductID, ProductID,
					CustomerPLIdentifierID, bProductDetail.lOptionProductID,
					CustomerID);

			// BEGIN ADD V5.58a
			// if Product is URL then sort parameter in ascending order
			if (GAfeDescription.PRODUCT_URL == bProductDetail.lProductID
					.intValue() ||   GAfeDescription.bCheckInList(bProductDetail.lProductID, GAfeDescription.Pro_id)) {
				System.out.println("calling sort function 1"+bProductDetail.lProductID
						.intValue());
				sortProductParameter(bProductDetail);
			}

			// END ADD V5.58a

			CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

			customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

			Vector vctCustomerProductStatus = null;

			vctCustomerProductStatus = customerProductStatusTable
					.vctSearchByCustomerProductIDandObslete(CustomerProductID
							.longValue(), FINAL_ZERO);

			if (null != vctCustomerProductStatus) {
				customerProductStatusRow = new CustomerProductStatusRow();
				customerProductStatusRow = (CustomerProductStatusRow) vctCustomerProductStatus
						.elementAt(FINAL_ZERO);

				long lComponentActionID = 0;

				lComponentActionID = customerProductStatusRow.lComponentActionID;

				// BEGIN ADD V 5.93a
				long lComponentStatusID = 0;

				lComponentStatusID = customerProductStatusRow.lComponentStatusID;

				// END ADD V 5.93a
				// BEGIN DELETE V 5.93a
				// if (lComponentActionID == GAfeDescription.lGetTypeId("COMPONENTACTION_REVERT"))
				// END DELETE V 5.93a
				// BEGIN ADD V 5.93a
				if ((lComponentActionID == GAfeDescription
						.lGetTypeId("COMPONENTACTION_REVERT"))
						&& ((lComponentStatusID == GAfeDescription.COMPONENTSTATUS_COMPLETED) || (lComponentStatusID == GAfeDescription.COMPONENTSTATUS_CANCELLED))) {
					bProductDetail.strProductStatus = "";
				} else if ((lComponentActionID == GAfeDescription
						.lGetTypeId("COMPONENTACTION_REVERT"))
						&& ((lComponentStatusID != GAfeDescription.COMPONENTSTATUS_COMPLETED) && (lComponentStatusID != GAfeDescription.COMPONENTSTATUS_CANCELLED)))

				// END ADD V 5.93a
				{
					bProductDetail.strProductStatus = "AGE";
				} else if (lComponentActionID == GAfeDescription
						.lGetTypeId("COMPONENTACTION_ADD")) {
					bProductDetail.strProductStatus = "ADD";
				}

				if (blnGetForProperty("PRODUCT_DOMAIN",
						bProductDetail.lProductID)) {
					if (lComponentActionID == GAfeDescription
							.lGetTypeId("COMPONENTACTION_POSTINSTALLPROVISIONING")) {
						if ((null != bProductDetail.vctParameters)
								&& (FINAL_ZERO != bProductDetail.vctParameters
										.size())) {
							for (int iCtrDmName = FINAL_ZERO; iCtrDmName < bProductDetail.vctParameters
									.size(); iCtrDmName++) {
								BProductParameter bProductParameter = null;

								bProductParameter = (BProductParameter) bProductDetail.vctParameters
										.elementAt(iCtrDmName);

								if (blnGetForProperty(
										"PRODUCTPARAMETER_DOMAINNAME",
										bProductParameter.lParameterID)) {
									if ((null != bProductParameter.vctParameterValues)
											&& (FINAL_ZERO != bProductParameter.vctParameterValues
													.size())) {
										Vector vctIntnal = null;

										vctIntnal = (Vector) (bProductParameter.vctParameterValues)
												.elementAt(FINAL_ZERO);

										if (FINAL_ZERO != ((Vector) bProductParameter.vctParameterValues)
												.size()) {
											bProductDetail.strProductStatus = String
													.valueOf(vctIntnal
															.elementAt(FINAL_ZERO));
										}
									}
								}
							}
						}
					}
				}
			}
		} // end of the try block
		catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   ex.printStackTrace(System.out);
			 * }
			 */
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bProductDetail;
	}

	/**
	 *  DESCRIPTION :   The Function will is used to get all the Option Product Data for the
	 *                                  The Lower Grid
	 *
	 *  @param          :       Long ProductIDMain, Long ParentID
	 *
	 *  @return         :       Vector  -       Returns a Vector
	 */
	protected Vector vctGetAllOptionData(Long ProductIDMain, Long ParentID)
			throws Exception {
		Long lOptionGroup; // Local Varaible Declaration
		long lProductID = 0; // Local Varaible Declaration
		String strProductID; // Local Varaible Declaration
		Vector vctInternal = new Vector(); // internal local vector

		// BEGIN ADD ver 5.80b
		int iRateClassID = 0;

		// END ADD ver 5.80b
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
			customerProductRow = customerProductTable
					.cprSearchByCustProductID(ParentID.longValue());

			if (null != customerProductRow) {
				lProductID = customerProductRow.lProductID;

				//              BEGIN ADD ver 5.80b
				iRateClassID = iGetRateClassIDByCPLID(customerProductRow.lCustomerProductLineID);

				// END ADD ver 5.80b
				// Begin DEL v9.01d
				// OptionGroupRow optionGroupRow = null;                                                                                         // Initializing the Object Class for the OptionGroup table
				// End DEL v9.01d
				if (null == optionGroupTable) {
					optionGroupTable = (OptionGroup) teleSessionMgr
							.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
				}

				Vector vctObjOGInternal = null;

				// BEGIN DELETE ver 5.80b
				// vctObjOGInternal = optionGroupTable.vctSearchByProductIDandObsolete(lProductID, FINAL_ZERO);
				// END DELETE ver 5.80b
				// BEGIN ADD ver 5.80b
				vctObjOGInternal = optionGroupTable
						.vctSearchByProductIDandObsolete(lProductID,
								FINAL_ZERO, iRateClassID);

				// END ADD ver 5.80b
				if (null != vctObjOGInternal) {

					// for each  record in the vector of OptionGroup Records
					for (int iASCounter = FINAL_ZERO; iASCounter < vctObjOGInternal
							.size(); iASCounter++) {
						lOptionGroup = Long.valueOf(
								((OptionGroupRow) (vctObjOGInternal
										.elementAt(iASCounter))).lOptionGroupID);

						// Begin DEL v9.01d
						// OptionProductRow optionProductRow = null;                                                                                             // Initializing the Object Class for the OptionGroup table
						// End DEL v9.01d
						if (null == optionProductTable) {
							optionProductTable = (OptionProduct) teleSessionMgr
									.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
						}

						Vector vctObjOGIDInternal = null;

						// BEGIN DELETE ver 5.80b
						// vctObjOGIDInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup.longValue(), FINAL_ZERO);
						// END DELETE ver 5.80b
						// BEGIN ADD ver 5.80b
						vctObjOGIDInternal = optionProductTable
								.vctSearchByOptionGroupIDandObsolete(
										lOptionGroup.longValue(), FINAL_ZERO,
										iRateClassID);

						// END ADD ver 5.80b
						if (null != vctObjOGIDInternal) {

							// for each  record in the vector of OptionProduct Records
							for (int iODIDCounter = FINAL_ZERO; iODIDCounter < vctObjOGIDInternal
									.size(); iODIDCounter++) {
								strProductID = String
										.valueOf(Long.valueOf(
												((OptionProductRow) (vctObjOGIDInternal
														.elementAt(iODIDCounter))).lProductID));

								if (strProductID.equals(String
										.valueOf(ProductIDMain))) {
									vctInternal = new Vector();
									vctInternal.addElement(lOptionGroup);
									vctInternal
											.addElement(Long.valueOf(
													((OptionProductRow) (vctObjOGIDInternal
															.elementAt(iODIDCounter))).lOptionProductID));
									vctInternal
											.addElement(Integer.valueOf(
													((OptionProductRow) (vctObjOGIDInternal
															.elementAt(iODIDCounter))).iProvisionable));
									vctInternal
											.addElement(Integer.valueOf(
													((OptionProductRow) (vctObjOGIDInternal
															.elementAt(iODIDCounter))).iBillable));
								} // end of the if loop
							} // end of the for Loop
						} // end of the if loop for handling null pointer exception
					} // end of the for loop
				} // end of the if loop for handling null pointer exception
			} // end of the if loop
		} catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   ex.printStackTrace(System.out);
			 * }
			 */
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return vctInternal;
	}

	/**
	 *  DESCRIPTION :   The Function is used to find out all the payment methods and also the
	 *                                  currency id of the corresponding customer
	 *
	 *  @param          :       Long CustomerAccountID
	 *
	 *  @return         :       Vector  -       This function Returns a Vector
	 */
	public Vector vctGetAllPaymentMethCurrID(Long CustomerAccountID)
			throws Exception {
		Long lPaymentMethodID = null; // Local Varaible Declaration
		Long lCurrencyID = null; // Local Varaible Declaration
		Vector vctInternal = new Vector(); // Local Internal Vector

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			CustomerAccountRow customerAccountRow = null; // Initializing the Object Class for the Currency table

			customerAccountTable = (CustomerAccount) teleSessionMgr
					.getTable("CUSTOMERACCOUNT"); // Getting the Customer table from the session
			customerAccountRow = (CustomerAccountRow) customerAccountTable
					.crSearchByCustomerAccountID(CustomerAccountID.longValue());

			if (null != customerAccountRow) {
				if (FINAL_ZERO != customerAccountRow.lPaymentMethodID) {
					lPaymentMethodID = Long.valueOf(
							customerAccountRow.lPaymentMethodID);
				}

				if (FINAL_ZERO != customerAccountRow.lCurrencyID) {
					lCurrencyID = Long.valueOf(customerAccountRow.lCurrencyID);
				}

				vctInternal.addElement(lPaymentMethodID);
				vctInternal.addElement(lCurrencyID);
			}
		} catch (Exception ex) {

			/*
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 *   ex.printStackTrace(System.out);
			 * }
			 */
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return vctInternal;
	}

	/**
	 *  DESCRIPTION :   The Function will Load all the Product Parameters for the Lower Grid this is a internal fnc
	 *
	 *
	 *  @param          :       Long CustomerProductLineID, Long CustomerProductID, Long ProductID, Long CustomerPLIdentifierID, Long OptionProductID
	 *
	 *  @return         :       Vector  -       This Function will return a Vector
	 */
	protected Vector vctLoadParameters(Long CustomerProductLineID,
			Long CustomerProductID, Long ProductID,
			Long CustomerPLIdentifierID, Long OptionProductID, Long CustomerID)
			throws SQLException, Exception {

		// Begin DEL v9.01d
		// Long lCustomerPLIdentifierValue;                      //Local Varaible Declaration
		// End DEL v9.01d
		Long lProductParameterID = null; // Local Varaible Declaration

		// Begin DEL v9.01d
		// Long lProductParamID;                                 //Local Varaible Declaration
		// End DEL v9.01d
		Long lParameterID; // Local Varaible Declaration
		Long lPParameterID; // Local Varaible Declaration

		// Begin DEL v9.01d
		// Long lValues;                                                 //Local Varaible Declaration
		// End DEL v9.01d
		String lCPPValue = ""; // Local Varaible Declaration
		String strValues = ""; // Local Varaible Declaration

		// Begin DEL v9.01d
		// String strCustomerPLIValue = "";              //Local Varaible Declaration
		// End DEL v9.01d
		String strCustomerPLIdentifierValue = ""; // Local Varaible Declaration
		String strNValues = ""; // Local Varaible Declaration
		int iSelected = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iCombo;                                                           //Local Varaible Declaration
		// End DEL v9.01d
		int iIntCounter = 0; // Local Varaible Declaration
		int iIntgrCounter = 0; // Local Varaible Declaration
		int iSizeOfVct = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		Vector vctInternal = new Vector(); // Local Internal Vector Declaration
		Vector vctFExternal = new Vector(); // Local Internal Vector Declaration
		Vector vctExternal = new Vector(); // Local Internal Vector Declaration
		Vector vctParameters = new Vector(); // Local Internal Vector Declaration

		//      BEGIN ADD : V3.10
		//      Changed the Code for Defect Id 70 - Obsolete Masters
		PackageParameterRow packageParameterRows = null;

		//      Changed the Code for Defect Id 70 - Obsolete Masters
		//      END ADD : V3.10

		// Making an Object of the Bussiness Object of the BProductParameter
		BProductParameter bProductParameter = new BProductParameter();

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			bProductParameter.vctParameterValues = new Vector();

			CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

			customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session
			customerProductLineIdentifierRow = customerProductLineIdentifierTable
					.cplirSearchByCustomerPLIdentifierIDandobsolete(
							CustomerPLIdentifierID.longValue(), FINAL_ZERO);
GLogger.chkpt("Sunsat CustomerPLIdentifierID.longValue() "+CustomerPLIdentifierID.longValue());

			if (null != customerProductLineIdentifierRow) {
				GLogger.chkpt("Sunsat Inside customerProductLineIdentifierRow "+customerProductLineIdentifierRow);
				bProductParameter = new BProductParameter();
				bProductParameter.strParameterName = "";
				vctInternal = new Vector();
				strCustomerPLIdentifierValue = "";
				strValues = "";

				if (null != customerProductLineIdentifierRow.strCustomerPLIdentifierValue) {
					strCustomerPLIdentifierValue = customerProductLineIdentifierRow.strCustomerPLIdentifierValue;
				}

				lParameterID = Long.valueOf(0);
				lParameterID = Long.valueOf(
						customerProductLineIdentifierRow.lProductLineIdentifierTypeID);
				bProductParameter.strParameterName = strFindDescription_PID(lParameterID
						.longValue());
				bProductParameter.lParameterID = lParameterID;
				bProductParameter.iParameter = FINAL_ZERO;
				bProductParameter.iEditable = FINAL_ZERO;
				bProductParameter.iMandatory = FINAL_ONE;
				bProductParameter.iVisibleOnSelection = FINAL_ONE;
				bProductParameter.iProvisionable = FINAL_ZERO;
				bProductParameter.iBillable = FINAL_ZERO;
				bProductParameter.iCombo = FINAL_ONE;

				// Vector of the Vector with two fields 1. lPValues2. iSelected [ Flag 1= selected/default 0 = non selected ]
				bProductParameter.strParamOldValue = strCustomerPLIdentifierValue;
				strValues = "";
				strValues = strCustomerPLIdentifierValue;
				iSelected = FINAL_ONE;
				vctInternal = new Vector();
				vctInternal.addElement(strValues);
				vctInternal.addElement(Integer.valueOf(iSelected));

				if (FINAL_ZERO != strValues.length()) {
					vctFExternal.addElement(vctInternal);
				}

				if (GAfeDescription
						.lGetTypeId("PRODUCTLINEIDENTIFIERTYPE_LOGIN") == lParameterID
						.longValue()) {
					if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) {
						BInternet bInternet = null;

						bInternet = new BInternet();
						bInternet = (BInternet) teleSessionMgr
								.getValue(string_BInternet_aCProduct);

						Vector vctInternetDetail = new Vector();
						Vector vctInternalInternet;
						Vector vctInt;

						vctInternetDetail = bInternet.vctInternetDetail;
						iSizeOfVct = vctInternetDetail.size();

						for (iCounter = FINAL_ZERO; iCounter < iSizeOfVct; iCounter++) {
							vctInternalInternet = new Vector();
							strValues = "";
							vctInternalInternet = (Vector) vctInternetDetail
									.elementAt(iCounter);
							strValues = String.valueOf(vctInternalInternet
									.elementAt(FINAL_ZERO));
							if (!(bCheckForLogin(vctFExternal, strValues))) {
								iSelected = FINAL_ZERO;
								vctInt = new Vector();

								// Begin Ver 2.5
								// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								if ((blnGetForProperty("PRODUCT_URL", ProductID))) {
									if ((null != teleSessionMgr
											.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT))
											|| (null != teleSessionMgr
													.getValue("BProductDetailProperty_aCProductOrders"))) {
										Vector vctTempLogin = null;
										BProductDetailProperty bProductDetailProperty = null;

										// Vector for storing all the Data that is populated in the tablular form
										bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
												.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

										if (null == bProductDetailProperty) {
											bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
													.getValue("BProductDetailProperty_aCProductOrders");
										}

										vctTempLogin = bProductDetailProperty.vctGetLoginfromILMMAIL;

										int iSizeOfvctLogin = 0;

										iSizeOfvctLogin = vctTempLogin.size();

										if (FINAL_ZERO != iSizeOfvctLogin) {
											for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++) {
												if (null == ((BChangeILogin) vctTempLogin
														.elementAt(iCounterLog))) {
													continue;
												}

												if ((String
														.valueOf(((BChangeILogin) vctTempLogin
																.elementAt(iCounterLog)).strLogin
																.trim()))
														.equalsIgnoreCase(strValues
																.trim())) {

													// Begin Ver 2.80
													// Changes Made for Fixing Upgrade Downgrade Logins problem
													// Check whether the login is there in url then add it else dont add
													// Call Another function
													if (bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
															bProductDetailProperty.vctGetLoginfromILMURL,
															strValues)) {
														if (!(bCheckForLogin(
																vctFExternal,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctFExternal, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctFExternal
																	.addElement(vctInt);
														} // end of the if loop
													} else {
														GLogger.chkpt("Inside else statement");
													}

													// End Ver 2.80
													// Changes Made for Fixing Upgrade Downgrade Logins problem
												} // end of the if loop
												else {
													if (!bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
															bProductDetailProperty.vctGetLoginfromILMMAIL,
															strValues)) {
														if (!(bCheckForLogin(
																vctFExternal,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctFExternal
																	.addElement(vctInt);
														} // end of the if loop
													} // end of the if loop
													else {
														GLogger.chkpt("Inside else statement");
													} // end of the if else if loop
												} // end of the if else if loop
											} // end of the for loop
										} else {
											if (!(bCheckForLogin(vctFExternal,
													strValues)))

											// if(bValidateLogin_ToExistingVector(vctFExternal, strValues))
											{

												// Intentionally allocated memory
												vctInt = new Vector();
												vctInt.addElement(strValues);
												vctInt.addElement(Integer.valueOf(
														iSelected));
												vctFExternal.addElement(vctInt);
											} // end of the if loop
										} // end of the if else if loop
									} // end of the if loop
								} else if ((blnGetForProperty(
										"PRODUCT_MAILBOX", ProductID))
										|| (blnGetForProperty(
												"PRODUCT_DOMAINMAILSERVER",
												ProductID))) {
									Vector vctTempLogin = null;

									if ((null != teleSessionMgr
											.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT))
											|| (null != teleSessionMgr
													.getValue("BProductDetailProperty_aCProductOrders"))) {
										BProductDetailProperty bProductDetailProperty = null;

										// Vector for storing all the Data that is populated in the tablular form
										bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
												.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

										if (null == bProductDetailProperty) {
											bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
													.getValue("BProductDetailProperty_aCProductOrders");
										}

										vctTempLogin = bProductDetailProperty.vctGetLoginfromILMURL;

										int iSizeOfvctLogin = 0;

										iSizeOfvctLogin = vctTempLogin.size();

										if (FINAL_ZERO != iSizeOfvctLogin) {
											for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++) {
												if (null == ((BChangeILogin) vctTempLogin
														.elementAt(iCounterLog))) {
													continue;
												}

												if ((String
														.valueOf(((BChangeILogin) vctTempLogin
																.elementAt(iCounterLog)).strLogin
																.trim()))
														.equalsIgnoreCase(strValues
																.trim())) {

													// Begin Ver 2.80
													// Changes Made for Fixing Upgrade Downgrade Logins problem
													// Check whether the login is there in url then add it else dont add
													// Call Another function
													if (bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
															bProductDetailProperty.vctGetLoginfromILMMAIL,
															strValues)) {
													if (!(bCheckForLogin(
																vctFExternal,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctFExternal, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctFExternal
																	.addElement(vctInt);
														} // end of the if loop
													} else {
														GLogger.chkpt("Inside else statement");
													}

													// End Ver 2.80
													// Changes Made for Fixing Upgrade Downgrade Logins problem
												} // end of the if loop
												else {
													if (!bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
															bProductDetailProperty.vctGetLoginfromILMURL,
															strValues)) {
														if (!(bCheckForLogin(
																vctFExternal,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctFExternal
																	.addElement(vctInt);
														} // end of the if loop
													} // end of the if loop
													else {
														GLogger.chkpt("Inside else statement");
													} // end of the if else if loop
												} // end of the if else if loop
											} // end of the for loop
										} else {
											if (!(bCheckForLogin(vctFExternal,
													strValues)))

											// if(bValidateLogin_ToExistingVector(vctFExternal, strValues))
											{

												// Intentionally allocated memory
												vctInt = new Vector();
												vctInt.addElement(strValues);
												vctInt.addElement(Integer.valueOf(
														iSelected));
												vctFExternal.addElement(vctInt);
											} // end of the if loop
										} // end of the if else if  loop
									} // end of the if loop
								} else {
									if (!(bCheckForLogin(vctFExternal,
											strValues)))

									// if(bValidateLogin_ToExistingVector(vctFExternal, strValues))
									{

										// Intentionally allocated memory
										vctInt = new Vector();
										vctInt.addElement(strValues);
										vctInt
												.addElement(Integer.valueOf(
														iSelected));
										vctFExternal.addElement(vctInt);
									} // end of the if loop
								} // end of the if loop

								// End Ver 2.5
								// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop

					// Deleted all the Content From here
					BProductDetailProperty bProductDetailProperty = new BProductDetailProperty();

					if ((blnGetForProperty("PRODUCT_MAILBOX", ProductID))
							|| (blnGetForProperty("PRODUCT_DOMAINMAILSERVER",
									ProductID))) {
						Vector vctLogin = new Vector();

						//                      IAFEOUT iAFEOUT         =       new IAFEOUT();
						//                      vctLogin        =       iAFEOUT.vctGetLogin(CustomerID, "M");
						if (null != teleSessionMgr
								.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

							// Vector for storing all the Data that is populated in the tablular form
							bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
									.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
							vctLogin = bProductDetailProperty.vctGetLoginfromILMMAIL;
							teleSessionMgr.putValue(
									BPRODUCTDETAILPROPERTY_ACPRODUCT,
									bProductDetailProperty);
						}

						if (null != teleSessionMgr
								.getValue("BProductDetailProperty_aCProductOrders")) {

							// Vector for storing all the Data that is populated in the tablular form
							bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
									.getValue("BProductDetailProperty_aCProductOrders");
							vctLogin = bProductDetailProperty.vctGetLoginfromILMMAIL;
							teleSessionMgr.putValue(
									"BProductDetailProperty_aCProductOrders",
									bProductDetailProperty);
						}

						if ((null != vctLogin)
								&& (FINAL_ZERO != vctLogin.size())) {
							boolean bInserted = false;

							for (int iCounterLog = FINAL_ZERO; iCounterLog < vctLogin
									.size(); iCounterLog++) {
								String strLogin = "";
								Vector vctInt = null;

								if (null == ((BChangeILogin) vctLogin
										.elementAt(iCounterLog))) {
									continue;
								}

								strLogin = String
										.valueOf(((BChangeILogin) vctLogin
												.elementAt(iCounterLog)).strLogin);

								if (!(bCheckForLogin(vctFExternal, strLogin))) {
									vctInt = new Vector();

									// changed subject to confirm
									bProductParameter.iEditable = FINAL_ONE;
									iSelected = FINAL_ZERO;
									vctInt.addElement(strLogin);
									vctInt.addElement(Integer.valueOf(iSelected));
									vctFExternal.addElement(vctInt);
									bInserted = true;
								}
							}

							if (bInserted) {

								// For Removing the Unwanted Space Coming Inbetween
								for (iCounter = FINAL_ZERO; iCounter < vctFExternal
										.size(); iCounter++) {
									Vector vctInt = new Vector();

									vctInt = (Vector) vctFExternal
											.elementAt(iCounter);

									if (("").equalsIgnoreCase(String
											.valueOf(vctInt
													.elementAt(FINAL_ZERO)))) {
										vctFExternal.removeElementAt(iCounter);
									}
								}
							}
						}
					}

					if ((blnGetForProperty("PRODUCT_URL", ProductID))) {
						Vector vctURL = new Vector();

						//                      IAFEOUT iAFEOUT         =       new IAFEOUT();
						//                      vctURL  =       iAFEOUT.vctGetLogin(CustomerID, "U");
						if (null != teleSessionMgr
								.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

							// Vector for storing all the Data that is populated in the tablular form
							bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
									.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
							vctURL = bProductDetailProperty.vctGetLoginfromILMURL;

							if (GAfePropertyLoader.DEBUG) {

								GLogger.chkpt("Inside if statement");// System.out.println("In detail mode vctload parameter for mailbox vctURL:" + vctURL);
							}

							teleSessionMgr.putValue(
									BPRODUCTDETAILPROPERTY_ACPRODUCT,
									bProductDetailProperty);
						}

						if (null != teleSessionMgr
								.getValue("BProductDetailProperty_aCProductOrders")) {

							// Vector for storing all the Data that is populated in the tablular form
							bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
									.getValue("BProductDetailProperty_aCProductOrders");
							vctURL = bProductDetailProperty.vctGetLoginfromILMURL;

							if (GAfePropertyLoader.DEBUG) {

								GLogger.chkpt("Inside if statement ");// System.out.println("In detail mode vctload parameter for mailbox vctURL for order:" + vctURL);
							}

							teleSessionMgr.putValue(
									"BProductDetailProperty_aCProductOrders",
									bProductDetailProperty);
						}

						if ((null != vctURL) && (FINAL_ZERO != vctURL.size())) {
							if (null != teleSessionMgr
									.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

								// Vector for storing all the Data that is populated in the tablular form
								bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
										.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
								bProductDetailProperty.vctGetLoginfromILMURL = vctURL;
								teleSessionMgr.putValue(
										BPRODUCTDETAILPROPERTY_ACPRODUCT,
										bProductDetailProperty);
							}

							boolean bInsertedURL = false;

							for (int iCounterLog = FINAL_ZERO; iCounterLog < vctURL
									.size(); iCounterLog++) {
								String strURL = "";
								Vector vctInt = null;

								if (null == ((BChangeILogin) vctURL
										.elementAt(iCounterLog))) {
									continue;
								}

								strURL = String.valueOf(((BChangeILogin) vctURL
										.elementAt(iCounterLog)).strLogin);

								if (!(bCheckForLogin(vctFExternal, strURL))) {
									vctInt = new Vector();
									iSelected = FINAL_ZERO;

									// changed subject to confirm
									bProductParameter.iEditable = FINAL_ONE;
									vctInt.addElement(strURL);
									vctInt.addElement(Integer.valueOf(iSelected));
									vctFExternal.addElement(vctInt);
									bInsertedURL = true;
								}
							}

							if (bInsertedURL) {

								// For Removing the Unwanted Space Coming Inbetween
								for (iCounter = FINAL_ZERO; iCounter < vctFExternal
										.size(); iCounter++) {
									Vector vctInt = new Vector();

									vctInt = (Vector) vctFExternal
											.elementAt(iCounter);

									if (("").equalsIgnoreCase(String
											.valueOf(vctInt
													.elementAt(FINAL_ZERO)))) {
										vctFExternal.removeElementAt(iCounter);
									}
								}
							}
						}
					}
				} // end of the if loop

				bProductParameter.vctParameterValues = vctFExternal;

				if (FINAL_ONE == bProductParameter.vctParameterValues.size()) {
					((Vector) bProductParameter.vctParameterValues
							.elementAt(FINAL_ZERO)).setElementAt(Integer.valueOf(
							string_ONE), FINAL_ONE);
				}

				if (FINAL_ONE == bProductParameter.vctParameterValues.size()) {
					bProductParameter.strParamDefValue = String
							.valueOf(((Vector) bProductParameter.vctParameterValues
									.elementAt(FINAL_ZERO))
									.elementAt(FINAL_ZERO));
				}

				vctParameters.addElement(bProductParameter);
			}

			// Begin DEL v9.01d
			// ProductParameterRow productParameterRow = null;           // Initializing the Object Class for the PRODUCTPARAMETER table
			// End DEL v9.01d
			if (null == productParameterTable) {
				productParameterTable = (ProductParameter) teleSessionMgr
						.getMasterTable("PRODUCTPARAMETER"); // Getting the PRODUCTPARAMETER table from the session
			}

			productParameterTable = (ProductParameter) teleSessionMgr
					.getMasterTable("PRODUCTPARAMETER"); // Getting the PRODUCTPARAMETER table from the session

			Vector vctObjPPDInternal = new Vector();

			vctObjPPDInternal = productParameterTable
					.vctSearchByProductIDandObsolete(ProductID.longValue(),
							FINAL_ZERO);

			if (null != vctObjPPDInternal) {

				// for each  record in the vector of ProductParameter Records
				for (int iPPCounter = FINAL_ZERO; iPPCounter < vctObjPPDInternal
						.size(); iPPCounter++) {
					iIntgrCounter = 0;
					vctExternal = new Vector();
					bProductParameter = new BProductParameter();
					lPParameterID = Long.valueOf(0);
					bProductParameter.strParameterName = "";
					lPParameterID = Long.valueOf(
							((ProductParameterRow) (vctObjPPDInternal
									.elementAt(iPPCounter))).lProductParameterID);
					bProductParameter.lParameterID = lPParameterID;
					bProductParameter.strParameterName = strFindPPIDDescription(lPParameterID);
					bProductParameter.iParameter = FINAL_ONE;
					bProductParameter.iEditable = ((ProductParameterRow) (vctObjPPDInternal
							.elementAt(iPPCounter))).iEditable;
					bProductParameter.iMandatory = ((ProductParameterRow) (vctObjPPDInternal
							.elementAt(iPPCounter))).iMandatory;
					bProductParameter.iVisibleOnSelection = ((ProductParameterRow) (vctObjPPDInternal
							.elementAt(iPPCounter))).iVisibleOnSelection;
					bProductParameter.iProvisionable = ((ProductParameterRow) (vctObjPPDInternal
							.elementAt(iPPCounter))).iProvisionable;
					bProductParameter.iBillable = ((ProductParameterRow) (vctObjPPDInternal
							.elementAt(iPPCounter))).iBillable;
					bProductParameter.strExternalDesc =((ProductParameterRow) (vctObjPPDInternal
							.elementAt(iPPCounter))).strExternalDesc;

					CustomerProductParameterRow customerProductParameterRow = null; // Initializing the Object Class for the Currency table

					customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCTPARAMETER); // Getting the Customer table from the session
					GLogger.chkpt("Sunsat Inside CustomerProductID.longValue() "+CustomerProductID.longValue());
					GLogger.chkpt("Sunsat Inside lPParameterID.longValue() "+lPParameterID.longValue());
					customerProductParameterRow = (CustomerProductParameterRow) customerProductParameterTable
							.cprSearchByCustProductIDandProductParameterandObsolete(
									CustomerProductID.longValue(),
									lPParameterID.longValue(), FINAL_ZERO);
					if ((null != customerProductParameterRow)
							&& (lPParameterID.longValue() == customerProductParameterRow.lProductParameterID)) {
						lProductParameterID = Long.valueOf(
								customerProductParameterRow.lProductParameterID);
						// BEGIN ADD V5.44d
						// if the value if null populate with ""
						lCPPValue = "";
						GLogger.chkpt("Sunsat Inside customerProductParameterRow.strCustomerProductParameterValue "+customerProductParameterRow.strCustomerProductParameterValue);
						if (null != customerProductParameterRow.strCustomerProductParameterValue) {
							if(bProductParameter.lParameterID==74041){
							GLogger.chkpt("inside if check sunsat lproduct");
							}
							// END ADD V5.44d
							lCPPValue = customerProductParameterRow.strCustomerProductParameterValue;

							// BEGIN ADD V5.44d
						}
						// END ADD V5.44d

						//                      BEGIN ADD : V3.20
						//                      Change made for Upgrade Downgrade TCR-114
						bProductParameter.lCustomerProductParameterID = Long.valueOf(
								customerProductParameterRow.lCustomerProductParameterID);

						//                      Change made for Upgrade Downgrade TCR-114
						//                      END ADD : V3.20
					}

					// Vector of the Vector with two fields 1. lPValues2. iSelected [ Flag 1= selected/default 0 = non selected ]
					vctInternal = new Vector();
					strValues = "";
					bProductParameter.strParamOldValue = String
							.valueOf(lCPPValue);
					GLogger.chkpt("lCPPValue  for sunsat"+lCPPValue);
					strValues = lCPPValue;
					
					if (null == strValues) {
						strValues = "";
					}

					iSelected = FINAL_ONE;
					vctInternal.addElement(strValues);
					vctInternal.addElement(Integer.valueOf(iSelected));

					// Begin Add V7.07a -- Added for getting default Parameter Value from Master Data
					vctInternal.addElement(Integer.valueOf(FINAL_ZERO));

					// End Add V7.07a
					vctExternal.addElement(vctInternal);

					// Begin DEL v9.01d
					// PackageParameterRow packageParameterRow = null;           // Initializing the Object Class for the Currency table
					// End DEL v9.01d
					if (null == packageParameterTable) {
						packageParameterTable = (PackageParameter) teleSessionMgr
								.getMasterTable("PACKAGEPARAMETER"); // Getting the Customer table from the session
					}

					Vector vctObPPIDjInternal = new Vector();

					if (null != packageParameterTable) {
						if ((null != OptionProductID)
								&& (null != lProductParameterID)) {
							vctObPPIDjInternal = packageParameterTable
									.vctSearchByProductParameterIDandOptionProductID(
											lProductParameterID.longValue(),
											OptionProductID.longValue());
						}
					}

					if (null != vctObPPIDjInternal) {
						iIntgrCounter = vctObPPIDjInternal.size();
					}

					if (FINAL_ZERO == iIntgrCounter) {

						// Begin DEL v9.01d
						// ProductParameterValueRow productParameterValueRow = null;             // Initializing the Object Class for the Currency table
						// End DEL v9.01d
						if (null == productParameterValueTable) {
							productParameterValueTable = (ProductParameterValue) teleSessionMgr
									.getMasterTable("PRODUCTPARAMETERVALUE"); // Getting the Customer table from the session
						}

						Vector vctObjPPVOInternal = null;

						if (null != lProductParameterID) {
							vctObjPPVOInternal = new Vector();
							vctObjPPVOInternal = productParameterValueTable
									.vctSearchByProductParameterIDandObsolete(
											lProductParameterID.longValue(),
											FINAL_ZERO);
						}

						if (null != vctObjPPVOInternal) {
							iIntCounter = vctObjPPVOInternal.size();
						}

						if (!(FINAL_ZERO == iIntCounter)) {
							if (null != vctObjPPVOInternal) {

								// for each  record in the vector of ProductParameterValue Records
								for (int iPPVIDCounter = FINAL_ZERO; iPPVIDCounter < vctObjPPVOInternal
										.size(); iPPVIDCounter++) {
									strNValues = "";
									strNValues = ((ProductParameterValueRow) (vctObjPPVOInternal
											.elementAt(iPPVIDCounter))).strProductParameterValue;

									if (!(strValues
											.equalsIgnoreCase(strNValues))) {
										vctInternal = new Vector();
										bProductParameter.iCombo = FINAL_ONE;

										// Vector of the Vector with two fields 1. lPValues2. iSelected [ Flag 1= selected/default 0 = non selected ]
										iSelected = FINAL_ZERO;
										vctInternal.addElement(strNValues);
										vctInternal.addElement(Integer.valueOf(
												iSelected));

										// Begin Add V7.07a -- Added for getting default Parameter Value from Master Data
										vctInternal
												.addElement(Integer.valueOf(
														((ProductParameterValueRow) vctObjPPVOInternal
																.elementAt(iPPVIDCounter)).iIsDefault));

										// End Add V7.07a
										vctExternal.addElement(vctInternal);
									} // end of the if loop
								} // end of the for loop
							} // end of the if loop for handling null pointer exception
						} // end of the if loop
					} // end of the if part of the if else if loop
					else if (FINAL_ONE == iIntgrCounter) {
						bProductParameter.iEditable = FINAL_ZERO;
					}

					//                  BEGIN ADD: V 3.10
					//                  Change made for fixing DEFECT id 70, Obsolete Masters
					//                  Capture the values of Telephone Number
					else {
						bProductParameter.iCombo = FINAL_ONE;

						for (int iPackParamCntr = 0; iPackParamCntr < iIntgrCounter; iPackParamCntr++) {
							packageParameterRows = (PackageParameterRow) vctObPPIDjInternal
									.elementAt(iPackParamCntr);
							strNValues = packageParameterRows.strProductParameterValue;

							if (!(strValues.equalsIgnoreCase(strNValues))) {
								vctInternal = new Vector();
								iSelected = FINAL_ZERO;
								vctInternal.addElement(strNValues);
								vctInternal.addElement(Integer.valueOf(iSelected));

								// Begin Add V7.07a -- Added for getting default Parameter Value from Master Data
								vctInternal.addElement(Integer.valueOf(
										packageParameterRows.iIsDefault));

								// End Add V7.07a
								vctExternal.addElement(vctInternal);
							} // end of the if loop
						}
					}

					//                  Change made for fixing DEFECT id 70, Obsolete Masters
					//                  END ADD: V3.10
					if ((FINAL_ONE == bProductParameter.iEditable)
							&& (FINAL_ZERO == vctExternal.size())) {
						vctInternal = new Vector();
						strValues = "";
						iSelected = FINAL_ONE;
						vctInternal.addElement(strValues);
						vctInternal.addElement(Integer.valueOf(iSelected));
						vctExternal.addElement(vctInternal);
					}
					boolean bTabletExist = false;
					//bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected.elementAt(iCount);
					if(GAfeConstants.TABLET_PRODUCTTYPEID == ProductUtils.getProductTypeID(ProductID.intValue())){
						bTabletExist = isTabletExists(CustomerProductLineID,ProductID);
						if(teleSessionMgr.getValue(GAfeDescription.TABLET_ALREADY_PRESENT)!=null){
							GLogger.chkpt("Beofre removing TABLET_ALREADY_PRESENT:: loc 1");
							teleSessionMgr.removeValue(GAfeDescription.TABLET_ALREADY_PRESENT);
						}
						if(bTabletExist){
							teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, true);
						}
						else{
							teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, false);
						}
					}
				/*	if(teleSessionMgr.getValue(GAfeDescription.TABLET_ALREADY_PRESENT)!=null){
						teleSessionMgr.removeValue(GAfeDescription.TABLET_ALREADY_PRESENT);
					}
					if(bTabletExist){
						teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, true);
					}
					else{
						teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, false);
					}*/
					
					GLogger.chkpt("vctExternal before adding device"+vctExternal);
					if(ProductUtils.getProductTypeID(ProductID.intValue()) == GAfeConstants.TABLET_PRODUCTTYPEID){
						if(bProductParameter.strExternalDesc!=null){
							if(bProductParameter.strExternalDesc.equals(GAfeConstants.DESC_DESCRIPTION)){
								GLogger.chkpt("sunsat bProductParameter double click  ->"+ bProductParameter.strExternalDesc);
								List<String> listDescription = fetchDeviceDescriptionForProduct(ProductID, GAfeConstants.OBSOLETEZERO, bSession.lLanguageId);
								for(String description:listDescription){
									if(!(strValues.equals(description))){
									Vector vctInternal2 = new Vector();
									vctInternal2.addElement(description);
									vctInternal2.addElement(Integer.valueOf(FINAL_ZERO));
									//vctInternal2.addElement(new Integer(FINAL_ZERO));
									vctExternal.addElement(vctInternal2);
									}
								}
								if(!(strValues.equals(GAfeDescription.SELECT))){
								Vector vctInt1 = new Vector();
								vctInt1.addElement(GAfeDescription.SELECT);
								vctInt1.addElement(Integer.valueOf(FINAL_ZERO));
								//vctInt1.addElement(new Integer(FINAL_ZERO));
								vctExternal.addElement(vctInt1);
								}
							//	bProductParameter.vctParameterValues = vctExternal1;					
							}
						}
						
					}
				bProductParameter.vctParameterValues = vctExternal;
				if(bProductParameter.lParameterID == 74301 || bProductParameter.lParameterID == 74311
						|| bProductParameter.lParameterID ==	74321 || bProductParameter.lParameterID ==	74331
						|| bProductParameter.lParameterID ==	74341 || bProductParameter.lParameterID == 74351){
						GLogger.chkpt("bProductParameter  for sunsat"+bProductParameter);
					}
					vctParameters.addElement(bProductParameter);

					if (FINAL_ONE == bProductParameter.vctParameterValues
							.size()) {
						((Vector) bProductParameter.vctParameterValues
								.elementAt(FINAL_ZERO)).setElementAt(
										Integer.valueOf(string_ONE), FINAL_ONE);
					}

					if (FINAL_ONE == bProductParameter.vctParameterValues
							.size()) {
						bProductParameter.strParamDefValue = String
								.valueOf(((Vector) bProductParameter.vctParameterValues
										.elementAt(FINAL_ZERO))
										.elementAt(FINAL_ZERO));
					}
				} // end of the for Loop
			} // end of the if loop for handling null pointer exception
		} catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		return vctParameters;
	}

	/**
	 *  DESCRIPTION :   The Function will Return the Description by searching the descriptionid1 from the
	 *                                  The product parameter table and then from descriptionid1 get the description from
	 *                                  the objectdescription table
	 *
	 *  @param          :       Long ProductParameterID
	 *
	 *  @return         :       String  -       This function returns a String that is the Description of the Description id that is send to this fns
	 */
	protected String strFindPPIDDescription(Long ProductParameterID)
			throws Exception {
		String strDescription = ""; // Local Varaible Declaration

		try {
			ProductParameterRow productParameterRow = null; // Initializing the Object Class for the Currency table

			if (null == productParameterTable) {
				productParameterTable = (ProductParameter) teleSessionMgr
						.getMasterTable("PRODUCTPARAMETER"); // Getting the Customer table from the session
			}

			if (null != productParameterTable) {
				productParameterRow = productParameterTable
						.pprSearchByProductParameterIDandObsolete(
								ProductParameterID.longValue(), FINAL_ZERO);
			}

			if (null != productParameterRow) {
				strDescription = strFindDescription(productParameterRow.lDescription1ID);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the Vector
		return strDescription;
	}

	/**
	 *  DESCRIPTION :   The Function will return the description by searching the description1id from the PRODUCTLINEIDENTIFIERTYPE
	 *                                  Table
	 *
	 *  @param          :       Long CustomerPLIdentifierID
	 *
	 *  @return         :       String  -       Returns the Description in the form of the string
	 */
	protected String strFindDescription_PID(long CustomerPLIdentifierID)
			throws Exception {
		String strDescription = ""; // Local Varaible Declaration

		try {
			ProductLineIdentifierTypeRow productLineIdentifierTypeRow = null; // Initializing the Object Class for the Currency table

			if (null == productLineIdentifierTypeTable) {
				productLineIdentifierTypeTable = (ProductLineIdentifierType) teleSessionMgr
						.getMasterTable("PRODUCTLINEIDENTIFIERTYPE"); // Getting the Customer table from the session
			}

			if (null != productLineIdentifierTypeTable) {
				productLineIdentifierTypeRow = productLineIdentifierTypeTable
						.plitrSearchByProductLineIdentifierTypeIDandObsolete(
								CustomerPLIdentifierID, FINAL_ZERO);
			}

			if (null != productLineIdentifierTypeRow) {
				strDescription = strFindDescription(productLineIdentifierTypeRow.lDescriptionID);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return strDescription;
	}

	/**
	 *  DESCRIPTION :   The function will return the description from the objectdescription table from the descriptionid that
	 *                                  is passed to this function
	 *
	 *  @param          :       Long DescriptionID
	 *
	 *  @return         :       String  -       Returns the Description in the form the string.
	 */
	protected String strFindDescription(long DescriptionID) throws Exception {
		String strDescription = ""; // Local Varaible Declaration

		try {

			// long      lStart  =       System.currentTimeMillis();
			ObjectDescriptionRow objectDescriptionRow = null; // Initializing the Object Class for the Currency table

			if (null == objectDescriptionTable) {
				if (null == objectDescriptionTable) {
					objectDescriptionTable = (ObjectDescription) teleSessionMgr
							.getMasterTable(string_OBJECTDESCRIPTION); // Getting the Customer table from the session
				}
			}

			objectDescriptionRow = objectDescriptionTable
					.odrSearchByDescriptionIDAndLanguageID(DescriptionID,
							bSession.lLanguageId, FINAL_ZERO);

			if (null != objectDescriptionRow) {
				strDescription = objectDescriptionRow.strDescription;
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return strDescription;
	}

	/**
	 *  DESCRIPTION :   The Function is a recursive function for the population of
	 *                                  The Lower Grid
	 *
	 *  @param          :       Long CustomerProductLineID, Long ProductID, Long CustomerID, Long CurrencyID, int iLevel
	 *
	 *  @return         :       Vector  -       This function will return a vector of BProduuct BO
	 */
	protected void vdMainRMethodOfProducts(Long CustomerProductLineID,
			Long ProductID, Long CustomerID, Long CurrencyID, int iLevel,
			BProductDetailProperty bProductDetailProperty) throws SQLException,
			Exception {
		Long lOptionGroup; // Local Varaible Declaration
		Long lProductID; // Local Varaible Declaration
		int iMin = 0; // Local Varaible Declaration
		int iMax = 0; // Local Varaible Declaration
		int iSelCount = 0; // Local Varaible Declaration
		int iParentInstance = 0; // Local Varaible Declaration
		int iInstance = 0; // Local Varaible Declaration
		int iSLevel = 0; // Local Varaible Declaration
		int iJLevel = 0; // Local Varaible Declaration
		int iMaxMand = 0; // Local Varaible Declaration

		// Making Object of the Bussiness Object
		//      BEGIN MODIFY : V3.10
		//      BProductDetail bProductDetail   =       new BProductDetail();
		BProductDetail bProductDetail = null;

		//      END MODIFY : V3.10
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			// Begin DEL v9.01d
			// Vector vctObjGDInternal = new Vector();
			// End DEL v9.01d
			List lstObjGDInternal = null;

			//          BEGIN MODIFY : V 3.10
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters
			//          Taking Valid Option Group Depending on Current Date.
			//                        vctObjGDInternal        =   optionGroupTable.vctSearchByProductIDValidandObsolete(ProductID.longValue(), FINAL_ZERO);
			// BEGIN DELETE V5.80a
			// vctObjGDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(ProductID.longValue(), FINAL_ZERO, new java.util.Date());
			// END DELETE V5.80a
			// BEGIN ADD V5.80a
			// vctObjGDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(ProductID.longValue(), FINAL_ZERO, new java.util.Date(), bProductDetailProperty.iRateClassIDNew);
			GLogger.chkpt("lCustomerProductlinid check"
					+ bProductDetailProperty.lCustomerProductLineID);
			GLogger.chkpt("iRateClassIDNew for non selected"
					+ bProductDetailProperty.iRateClassIDNew);
			GLogger.chkpt("ProductID.longValue()" + ProductID.longValue());
			lstObjGDInternal = optionGroupTable
					.searchByProductIDValidandObsolete(ProductID.longValue(),
							FINAL_ZERO, new java.util.Date(),
							bProductDetailProperty.iRateClassIDNew);
			GLogger.chkpt("lstObjGDInternal" + lstObjGDInternal);
			// END ADD V5.80a

			//          END MODIFY : V 3.10
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters
			GLogger.chkpt("vctObjGDInternal bef TJ");

			if (!lstObjGDInternal.isEmpty()) {
				GLogger.chkpt("vctObjGDInternal size TJ"
						+ lstObjGDInternal.size());

				// for each  record in the vector of OptionGroup Records
				for (int iASCounter = FINAL_ZERO; iASCounter < lstObjGDInternal
						.size(); iASCounter++) {
					lOptionGroup = Long.valueOf(((OptionGroupRow) (lstObjGDInternal
							.get(iASCounter))).lOptionGroupID);
					iMin = ((OptionGroupRow) (lstObjGDInternal.get(iASCounter))).iMinMandProducts;
					iMax = ((OptionGroupRow) (lstObjGDInternal.get(iASCounter))).iMaxMandProducts;

					// Begin DEL v9.01d
					// OptionProductRow optionProductRow = null;                                                                                         // Initializing the Object Class for the OptionGroup table
					// End DEL v9.01d
					if (null == optionProductTable) {
						optionProductTable = (OptionProduct) teleSessionMgr
								.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
					}

					Vector vctObjCOOGIDInternal = null;

					// BEGIN DELETE v5.80a
					// vctObjCOOGIDInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup.longValue(), FINAL_ZERO);
					// END DELETE v5.80a

					// BEGIN ADD v5.80a
					vctObjCOOGIDInternal = optionProductTable
							.vctSearchByOptionGroupIDandObsolete(lOptionGroup
									.longValue(), FINAL_ZERO,
									bProductDetailProperty.iRateClassIDNew);

					// END ADD v5.80a

					if (null != vctObjCOOGIDInternal) {
						iSelCount = vctObjCOOGIDInternal.size();
					}

					if ((iMin == iSelCount) && (iMax == iSelCount)) {

						// Begin DEL v9.01d
						// optionProductRow = null;                                                                                                                              // Initializing the Object Class for the OptionGroup table
						// End DEL v9.01d
						GLogger.chkpt("iMin == iSelCount TJ");

						if (null == optionProductTable) {
							optionProductTable = (OptionProduct) teleSessionMgr
									.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
						}

						Vector vctObjPIDOPIDInternal = new Vector();

						// BEGIN DELETE v5.80a
						// vctObjPIDOPIDInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup.longValue(), FINAL_ZERO);
						// END DELETE v5.80a
						// BEGIN ADD v5.80a
						vctObjPIDOPIDInternal = optionProductTable
								.vctSearchByOptionGroupIDandObsolete(
										lOptionGroup.longValue(), FINAL_ZERO,
										bProductDetailProperty.iRateClassIDNew);

						// END ADD v5.80a
						GLogger.chkpt("vctObjPIDOPIDInternal TJ"
								+ vctObjPIDOPIDInternal);

						if (null != vctObjPIDOPIDInternal) {

							// for each  record in the vector of OptionProduct Records
							for (int iOPDCounter = FINAL_ZERO; iOPDCounter < vctObjPIDOPIDInternal
									.size(); iOPDCounter++) {
								iSLevel = 0;
								iSLevel = iLevel + FINAL_ONE; // Increasing the Level by one

								//                              BEGIN ADD : V3.10
								//                               Changed the code for Obsolete Masters - TCR70
								//                               Added Code to get all the products in the Upper Grid which are mandatory in New Option Group but were not part of Old Option Group.
								OptionProductRow opProdRow = null;
								CustomerProductRow CustProductRow = null;

								if (null == customerProductTable) {
									customerProductTable = (CustomerProduct) teleSessionMgr
											.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
								}

								opProdRow = (OptionProductRow) vctObjPIDOPIDInternal
										.elementAt(iOPDCounter);

								/* BEGIN DELETE VER: 5.59a */

								// if(GAfePropertyLoader.DEBUG)
								// {
								// System.out.println("##############  Line ID #############: >"+CustomerProductLineID.longValue());
								// System.out.println("##############  ProductID #############: >"+opProdRow.lProductID);
								// }
								/* END DELETE VER: 5.59a */
								CustProductRow = (CustomerProductRow) customerProductTable
										.cprSearchByCustomerProductLineIDandProductIDandObsolete(
												CustomerProductLineID
														.longValue(),
												opProdRow.lProductID,
												FINAL_ZERO);
								iInstance = FINAL_ZERO;
								iParentInstance = FINAL_ZERO;
								bProductDetail = new BProductDetail();

								// BEGIN DELETE V5.28a
								// comment: we need to modify the condition to display products correctly in the upper grid

								/**
								 * // Begin Modify : V3.34
								 * //Begin Update: Ver 3.37
								 * //if (null == CustProductRow && null == CustProductRow.dtCreationDate)
								 * if (null == CustProductRow || null == CustProductRow.dtCreationDate)
								 * //End Update: Ver 3.37
								 * // End Modify : V3.34
								 */
								// END DELETE V5.28a
								// BEGIN ADD V5.28a
								// comment: check on dtCreationDate is not required
								GLogger.chkpt("CustProductRow TJ"
										+ CustProductRow);

								if (null == CustProductRow)

								// END ADD V5.28a
								{

									//                                  BEGIN DELETE V5.89A
									//                                                                                                                iIsDefault = FINAL_ONE;
									//                                  END DELETE V5.89A
									//                                  BEGIN ADD V5.89A
									iIsDefault = FINAL_ZERO;

									//                                  END ADD V5.89A

									/* BEGIN DELETE VER: 5.59a */

									// if(GAfePropertyLoader.DEBUG)
									// {
									// System.out.println("##############  ProductId which was mandatory #############: >"+opProdRow.lProductID);
									// }
									/* END DELETE VER: 5.59a */

									// BEGIN DELETE V6.02d
									// bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(opProdRow.lProductID), lOptionGroup, Long.valueOf(opProdRow.lOptionProductID), opProdRow.iProvisionable, opProdRow.iBillable, CurrencyID, FINAL_ZERO, iSLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
									// END DELETE V6.02d
									// BEGIN ADD V6.02d
									bProductDetail = objGetDetailProductNonSelected(
											CustomerID,
											Long.valueOf(opProdRow.lProductID),
											lOptionGroup,
											Long.valueOf(opProdRow.lOptionProductID),
											opProdRow.iProvisionable,
											opProdRow.iBillable,
											CurrencyID,
											FINAL_ZERO,
											iSLevel,
											iInstance,
											iParentInstance,
											bProductDetailProperty.lPaymentMethodRC,
											bProductDetailProperty.lPaymentMethodNRC,
											bProductDetailProperty.lPaymentMethodUsage,
											iIsDefault,
											bProductDetailProperty.vctProductSelected,
											bProductDetailProperty);

									// END ADD V6.02d

									/* BEGIN DELETE VER: 5.59a */

									// if(GAfePropertyLoader.DEBUG)
									// {
									// System.out.println("##############  Desc #############: >"+bProductDetail.strDescription1);
									// }
									/* END DELETE VER: 5.59a */
									bProductDetailProperty.vctProductNonSelected
											.addElement(bProductDetail);
								} else {

									//                                  Changed the code for Obsolete Masters - TCR70
									//                                  End ADD : V3.10
									//                                  BEGIN MODIFY : V3.10
									//                                  Changed the code for Obsolete Masters - TCR70
									//                                  Changed the call for vdMainRMethodOfProducts to avoid typeCasting of its arguments
									//                                                                                               vdMainRMethodOfProducts(CustomerProductLineID, Long.valueOf(((OptionProductRow)(vctObjPIDOPIDInternal.elementAt(iOPDCounter))).lProductID), CustomerID, CurrencyID, iSLevel, bProductDetailProperty);       //Calling the same function again Recursively
									GLogger
											.chkpt("vdMainRMethodOfProducts else TJ");
									vdMainRMethodOfProducts(
											CustomerProductLineID, Long.valueOf(
													opProdRow.lProductID),
											CustomerID, CurrencyID, iSLevel,
											bProductDetailProperty); // Calling the same function again Recursively
								}

								//                              Changed the code for Obsolete Masters - TCR70
								//                              End ADD : V3.10
							} // end of the for loop
						} // end of the if loop for handling the null pointer exception
					} // end of the if loop
					else {
						iSelCount = 0;
						GLogger.chkpt("iMin == iSelCount TJ else");

						// Begin DEL v9.01d
						// optionProductRow = null;                                                                                                                              // Initializing the Object Class for the OptionGroup table
						// End DEL v9.01d

						if (null == optionProductTable) {
							optionProductTable = (OptionProduct) teleSessionMgr
									.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
						}

						Vector vctObjALLDATAOPInternal = new Vector();

						// BEGIN DELETE v5.80a
						// vctObjALLDATAOPInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup.longValue(), FINAL_ZERO);
						// END DELETE v5.80a
						// BEGIN ADD v5.80a
						vctObjALLDATAOPInternal = optionProductTable
								.vctSearchByOptionGroupIDandObsolete(
										lOptionGroup.longValue(), FINAL_ZERO,
										bProductDetailProperty.iRateClassIDNew);

						// END ADD v5.80a

						if (null != vctObjALLDATAOPInternal) {
							GLogger.chkpt("vctObjALLDATAOPInternal TJ:"
									+ vctObjALLDATAOPInternal.size());

							// for each  record in the vector of OptionProduct Records
							for (int iADataCounter = FINAL_ZERO; iADataCounter < vctObjALLDATAOPInternal
									.size(); iADataCounter++) {
								lProductID = Long.valueOf(
										((OptionProductRow) (vctObjALLDATAOPInternal
												.elementAt(iADataCounter))).lProductID);

								ProductRow productRow = null; // Initializing the Object Class for the Vat table

								if (null == productTable) {
									productTable = (Product) teleSessionMgr
											.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
								}

								productRow = (ProductRow) productTable
										.prSearchByProductIDandObsolete(
												lProductID.longValue(),
												FINAL_ZERO);

								if (null != productRow) {				
									if (FINAL_ZERO == productRow.lLevelID) {
										break;
									} else {

										/* 13.1 : VOO : Added for multi-tenancy */
										// If package level product, then check is product tenancy is equal to customer tenancy.
										if(FINAL_TWO == productRow.lProductTypeID)
										{
											int customerTenantId = 0;
											int productTenantId = 0;

											// Fetching product tenancy from product row. 
											productTenantId = productRow.tenantId;
											if(GLogger.isDebugEnabled())
											{
												GLogger.chkpt("vdMainRMethodOfProducts : productId : " + productRow.lProductID);
												GLogger.chkpt("vdMainRMethodOfProducts : productTenantId : " + productTenantId);
											}

											// Fetching the customer tenancy from customer table if customerId != 0, i.e. when we have the customerId in session.
											if (0 != CustomerID)
											{
												// Getting the Customer table from the session
												customerTable = (Customer) teleSessionMgr.getTable(string_CUSTOMER); 
												// Fetching the customer row from customer table.
												CustomerRow customerRow = (CustomerRow) customerTable.crSearchByCustID(CustomerID.longValue());
												// Fetching tenant id from customer row.
												customerTenantId = customerRow.tenantId;

												if(GLogger.isDebugEnabled())
												{
													GLogger.chkpt("vdMainRMethodOfProducts : customerId : " + customerRow.CUSTOMERID);
													GLogger.chkpt("vdMainRMethodOfProducts : customerTenantId : " + customerTenantId);
												}
											}
											// Assigning customerTenantId as productTenantId. This is done when the code will initially be invoked at the time of server start up. 
											else 
											{
												customerTenantId = productTenantId;
												if(GLogger.isDebugEnabled())
												{
													GLogger.chkpt("vdMainRMethodOfProducts : ELSE : customerTenantId : " + customerTenantId);
												}
											}

											// comparing the product and customer tenancy, and calling the method objGetDetailProductNonSelected.
											if(productTenantId == customerTenantId)
											{		

												iJLevel = FINAL_ZERO;
												iJLevel = iLevel + FINAL_ONE;
												iInstance = FINAL_ZERO;
												iParentInstance = FINAL_ZERO;

												/*
												 *  We need to show this product on the upper grid. So we will populate
												 * the BProdutDetail business object for this productId.
												 */
												bProductDetail = new BProductDetail();
												iIsDefault = FINAL_ZERO;
												GLogger.chkpt("objGetDetailProductNonSelected TJ");
												bProductDetail = objGetDetailProductNonSelected(
														CustomerID,
														lProductID,
														lOptionGroup,
														Long.valueOf(
																((OptionProductRow) (vctObjALLDATAOPInternal
																		.elementAt(iADataCounter))).lOptionProductID),
																		((OptionProductRow) (vctObjALLDATAOPInternal
																				.elementAt(iADataCounter))).iProvisionable,
																				((OptionProductRow) (vctObjALLDATAOPInternal
																						.elementAt(iADataCounter))).iBillable,
																						CurrencyID,
																						FINAL_ZERO,
																						iJLevel,
																						iInstance,
																						iParentInstance,
																						bProductDetailProperty.lPaymentMethodRC,
																						bProductDetailProperty.lPaymentMethodNRC,
																						bProductDetailProperty.lPaymentMethodUsage,
																						iIsDefault,
																						bProductDetailProperty.vctProductSelected,
																						bProductDetailProperty);

												optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

												if (null == optionGroupTable) {
													optionGroupTable = (OptionGroup) teleSessionMgr
													.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
												}

												optionGroupRow = optionGroupTable
												.prSearchByOptionGroupID(bProductDetail.lOptionGroupID
														.longValue());

												if (null != optionGroupRow) {
													iMaxMand = optionGroupRow.iMaxMandProducts;
												} // end of the if loop

												int iCounterMinMand = 0;
												int iCountMasterProduct = 0;

												for (int iCountMinMand = FINAL_ZERO; iCountMinMand < bProductDetailProperty.vctProductSelected
												.size(); iCountMinMand++) {
													if (((BProductDetail) bProductDetailProperty.vctProductSelected
															.elementAt(iCountMinMand)).lOptionGroupID
															.longValue() == bProductDetail.lOptionGroupID
															.longValue()) {
														++iCounterMinMand;
													}

													if (((BProductDetail) bProductDetailProperty.vctProductSelected
															.elementAt(iCountMinMand)).lProductID
															.longValue() == optionGroupRow.lProductID) {
														++iCountMasterProduct;
													}
												}

												if (FINAL_ZERO != iCountMasterProduct) {
													iMaxMand = iMaxMand
													* iCountMasterProduct;
												}

												if (iCounterMinMand < iMaxMand) {
													bProductDetailProperty.vctProductNonSelected
													.addElement(bProductDetail);
												}

												int iFindProductInVectorLevelProductID = 0;

												iFindProductInVectorLevelProductID = iFindProductInVectorLevelProductID(
														bProductDetail,
														bProductDetailProperty.vctProductSelected);
												GLogger
												.chkpt("iFindProductInVectorLevelProductID TJ"
														+ iFindProductInVectorLevelProductID);

												if (FINAL_ZERO != iFindProductInVectorLevelProductID) {
													vdMainRMethodOfProducts(
															CustomerProductLineID,
															bProductDetail.lProductID,
															CustomerID, CurrencyID,
															bProductDetail.iLevel,
															bProductDetailProperty); // Calling the same function again Recursively
												}
											}								
										}
										else
										{
											iJLevel = FINAL_ZERO;
											iJLevel = iLevel + FINAL_ONE;
											iInstance = FINAL_ZERO;
											iParentInstance = FINAL_ZERO;

											/*
											 *  We need to show this product on the upper grid. So we will populate
											 * the BProdutDetail business object for this productId.
											 */
											bProductDetail = new BProductDetail();

											//                                      BEGIN MODIFY : V 3.10
											//                                      Modified Code for fixing DEFECT id 70, Obsolete Masters
											//                                      Changed the Call objGetDetailProductNonSelected with additional input parameters

											//                                      bProductDetail = objGetDetailProductNonSelected(CustomerID, lProductID, lOptionGroup, Long.valueOf(((OptionProductRow)(vctObjALLDATAOPInternal.elementAt(iADataCounter))).lOptionProductID), ((OptionProductRow)(vctObjALLDATAOPInternal.elementAt(iADataCounter))).iProvisionable, ((OptionProductRow)(vctObjALLDATAOPInternal.elementAt(iADataCounter))).iBillable, CurrencyID, FINAL_ZERO, iJLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
											//BEGIN DELETE V5.89A
											//                                              iIsDefault = FINAL_ONE;
											//END DELETE V5.89A
											//BEGIN ADD V5.89A
											iIsDefault = FINAL_ZERO;

											//                                      END ADD V5.89A

											// BEGIN DELETE V6.02d
											// bProductDetail = objGetDetailProductNonSelected(CustomerID, lProductID, lOptionGroup, Long.valueOf(((OptionProductRow) (vctObjALLDATAOPInternal.elementAt(iADataCounter))).lOptionProductID), ((OptionProductRow) (vctObjALLDATAOPInternal.elementAt(iADataCounter))).iProvisionable, ((OptionProductRow) (vctObjALLDATAOPInternal.elementAt(iADataCounter))).iBillable, CurrencyID, FINAL_ZERO, iJLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
											// END DELETE V6.02d
											// BEGIN ADD V6.02d
											GLogger
											.chkpt("objGetDetailProductNonSelected TJ");
											bProductDetail = objGetDetailProductNonSelected(
													CustomerID,
													lProductID,
													lOptionGroup,
													Long.valueOf(
															((OptionProductRow) (vctObjALLDATAOPInternal
																	.elementAt(iADataCounter))).lOptionProductID),
																	((OptionProductRow) (vctObjALLDATAOPInternal
																			.elementAt(iADataCounter))).iProvisionable,
																			((OptionProductRow) (vctObjALLDATAOPInternal
																					.elementAt(iADataCounter))).iBillable,
																					CurrencyID,
																					FINAL_ZERO,
																					iJLevel,
																					iInstance,
																					iParentInstance,
																					bProductDetailProperty.lPaymentMethodRC,
																					bProductDetailProperty.lPaymentMethodNRC,
																					bProductDetailProperty.lPaymentMethodUsage,
																					iIsDefault,
																					bProductDetailProperty.vctProductSelected,
																					bProductDetailProperty);

											// END ADD V6.02d

											//                                      END MODIFY : V 3.10
											//                                      Deleted Code for fixing DEFECT id 70, Obsolete Masters
											// Condition to add the products
											// bProductdetail.optiongroupid min max find out
											// vctselected how many products are there in vctproductselected
											// lcount got it < max dekhao nahin to nahin dikhao
											// then add otherwise not add
											optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

											if (null == optionGroupTable) {
												optionGroupTable = (OptionGroup) teleSessionMgr
												.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
											}

											optionGroupRow = optionGroupTable
											.prSearchByOptionGroupID(bProductDetail.lOptionGroupID
													.longValue());

											if (null != optionGroupRow) {
												iMaxMand = optionGroupRow.iMaxMandProducts;
											} // end of the if loop

											int iCounterMinMand = 0;
											int iCountMasterProduct = 0;

											for (int iCountMinMand = FINAL_ZERO; iCountMinMand < bProductDetailProperty.vctProductSelected
											.size(); iCountMinMand++) {
												if (((BProductDetail) bProductDetailProperty.vctProductSelected
														.elementAt(iCountMinMand)).lOptionGroupID
														.longValue() == bProductDetail.lOptionGroupID
														.longValue()) {
													++iCounterMinMand;
												}

												if (((BProductDetail) bProductDetailProperty.vctProductSelected
														.elementAt(iCountMinMand)).lProductID
														.longValue() == optionGroupRow.lProductID) {
													++iCountMasterProduct;
												}
											}

											if (FINAL_ZERO != iCountMasterProduct) {
												iMaxMand = iMaxMand
												* iCountMasterProduct;
											}

											if (iCounterMinMand < iMaxMand) {
												bProductDetailProperty.vctProductNonSelected
												.addElement(bProductDetail);
											}

											int iFindProductInVectorLevelProductID = 0;

											iFindProductInVectorLevelProductID = iFindProductInVectorLevelProductID(
													bProductDetail,
													bProductDetailProperty.vctProductSelected);
											GLogger
											.chkpt("iFindProductInVectorLevelProductID TJ"
													+ iFindProductInVectorLevelProductID);

											if (FINAL_ZERO != iFindProductInVectorLevelProductID) {
												vdMainRMethodOfProducts(
														CustomerProductLineID,
														bProductDetail.lProductID,
														CustomerID, CurrencyID,
														bProductDetail.iLevel,
														bProductDetailProperty); // Calling the same function again Recursively
											}
										}
									} // end of the if else if loop									
								} // end of the the if loop
							} // end of the for loop
						} // end of the if loop for the null pointer exception handling
					} // end of the else part of the if loop
				} // end of the for Loop
			} // end of the if loop for handling the null pointer exception
		} catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
	}

	/**
	 *  DESCRIPTION :   The Function will get all the details of a product in
	 *                                  The upper Grid
	 *
	 *  @param          :       Long CustomerID, Long ProductID, Long OptionGroup, Long OptionProductID, int Provisionable, int Billable, Long CurrencyID, int Hidden, int iLevel, int iInstance, int iParentInstance
	 *
	 *  @return         :       BProductDetail  -       Returns the BProductDetail Bussiness Object
	 */

	//  BEGIN MODIFY : V 3.10
	//  Modified Code for fixing DEFECT id 70, Obsolete Masters
	//  Changed the signature of the function to add extra Input parameters
	//   protected BProductDetail objGetDetailProductNonSelected(Long CustomerID, Long ProductID, Long OptionGroup, Long OptionProductID, int Provisionable, int Billable, Long CurrencyID, int Hidden, int iLevel, int iInstance, int iParentInstance, Long PaymentMethodRC, Long PaymentMethodNRC, Long PaymentMethodUsage) throws SQLException, Exception
	// BEGIN DELETE V6.02d
	// protected BProductDetail objGetDetailProductNonSelected(Long CustomerID, Long ProductID, Long OptionGroup, Long OptionProductID, int Provisionable, int Billable, Long CurrencyID, int Hidden, int iLevel, int iInstance, int iParentInstance, Long PaymentMethodRC, Long PaymentMethodNRC, Long PaymentMethodUsage, int iIsDefault, Vector vctSelectedProducts) throws SQLException, Exception
	// END DELETE V6.02d
	// BEGIN ADD V6.02d
	protected BProductDetail objGetDetailProductNonSelected(Long CustomerID,
			Long ProductID, Long OptionGroup, Long OptionProductID,
			int Provisionable, int Billable, Long CurrencyID, int Hidden,
			int iLevel, int iInstance, int iParentInstance,
			Long PaymentMethodRC, Long PaymentMethodNRC,
			Long PaymentMethodUsage, int iIsDefault,
			Vector vctSelectedProducts,
			BProductDetailProperty bProductDetailProperty) throws SQLException,
			Exception

	// END ADD V6.02d
	//END ADD: V 3.10
	//Deleted Code for fixing DEFECT id 70, Obsolete Masters
	{ // Starting Braces of the Function
		GLogger.chkpt("bProductDetailProperty.lCustomerProductLineID -->"
				+ bProductDetailProperty.lCustomerProductLineID);
		GLogger.chkpt("OptionProductID in objGetDetailProductNonSelected" +OptionProductID);
		GLogger.chkpt("OptionGroup in objGetDetailProductNonSelected" +OptionGroup);
		GLogger.chkpt("ProductID in objGetDetailProductNonSelected" +ProductID);

		Long lProductLineIdentifierTypeID; // Local Varaible Declaration
		Long lProductParameterID; // Local Varaible Declaration
		Long lDefaultLogicID; // Local Varaible Declaration
		int iSelected; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iCombo;                                                   //Local Varaible Declaration
		// End DEL v9.01d
		int iMainCounter = 0; // Local Varaible Declaration
		int iCounterForCount = 0; // Local Varaible Declaration
		int iNCounter = 0; // Local Varaible Declaration
		int iStartFrom = 0; // Local Varaible Declaration
		int iCounterForCountMain = 0; // Local Varaible Declaration
		int iSizeOfVct = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		String strValues; // Local Varaible Declaration
		String strProdParamDefaultValue = ""; // Local Varaible Declaration
		String strDefaultLogic; // Local Varaible Declaration
		String strFinalString = ""; // Local Varaible Declaration
		String strFinalDefaultLogic; // Local Varaible Declaration
		Vector vctInternal = new Vector(0); // Local Internal Vector Declaration
		Vector vctExternal = new Vector(0); // Local Internal Vector Declaration
		Vector vctAllBillableParameters = new Vector(0); // Local Internal Vector Declaration

		// Making Object of the Bussiness Objects
		BProductDetail bProductDetail = new BProductDetail();
		BProductParameter bProductParameter = null;
		boolean bCheck = false;

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d
		// BEGIN DELETE Ver 5.57a
		// if(GAfePropertyLoader.DEBUG)
		// {
		// System.out.println("**********************************************");
		// System.out.println(" Just into objGetDetailProductNonSelected");
		// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
		// lStart  =       System.currentTimeMillis();
		// System.out.println("**********************************************");
		// }
		// END DELETE Ver 5.57a

		try {
			ProductRow productRow = null; // Initializing the Object Class for the Vat table

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
			}

			// BEGIN DELETE Ver 5.57a
			// if(GAfePropertyLoader.DEBUG)
			// {
			// System.out.println(" After Getting productTable..Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			// lStart  =       System.currentTimeMillis();
			// }
			// END DELETE Ver 5.57a
			productRow = (ProductRow) productTable
					.prSearchByProductIDandObsolete(ProductID.longValue(),
							FINAL_ZERO);

			// BEGIN DELETE Ver 5.57a
			// if(GAfePropertyLoader.DEBUG)
			// {
			// System.out.println(" After Searching ProductRow..Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			// lStart  =       System.currentTimeMillis();
			// }
			// END DELETE Ver 5.57a
			strObjectDesc = strFindDescription(productRow.lDescription1ID);

			// BEGIN DELETE Ver 5.57a
			// if(GAfePropertyLoader.DEBUG)
			// {
			// System.out.println(" After Getting ObjectDesc..Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			// lStart  =       System.currentTimeMillis();
			// }
			// END DELETE Ver 5.57a
			bProductDetail.lProductID = ProductID;
			bProductDetail.lCustomerProductID = Long.valueOf(0); /* Space as it is still in the upper grid. */
			bProductDetail.iLevel = iLevel;
			bProductDetail.iInstance = iInstance;
			bProductDetail.iParentInstance = iParentInstance;
			bProductDetail.lProductTypeID = Long.valueOf(productRow.lProductTypeID);
			bProductDetail.strDescription1 = strObjectDesc;
			bProductDetail.dtActivationDate = null; /* As it is on the upper grid, nonselected so spaces */
			bProductDetail.dtDeactivationDate = null; /* As it is on the upper grid, nonselected so spaces */
			bProductDetail.iVisibleOnSelection = productRow.iVisibleOnSelection;
			bProductDetail.lOptionGroupID = OptionGroup;
			bProductDetail.lOptionProductID = OptionProductID;

			// BEGIN ADD V4.10h
			// comment: picking up the sortingID
			bProductDetail.lSorting1ID = productRow.lSorting1ID;

			// END ADD V4.10h
			// BEGIN ADD V6.02d
			GLogger.debug(CLASS_NAME, "objGetDetailProductNonSelected",
					"bProductDetailProperty.lBillFrequencyIDNew = "
							+ bProductDetailProperty.lBillFrequencyIDNew);
			GLogger.debug(CLASS_NAME, "objGetDetailProductNonSelected",
					"bProductDetailProperty.lProductID = "
							+ bProductDetailProperty.lProductID);
			GLogger.debug(CLASS_NAME, "objGetDetailProductNonSelected",
					"bProductDetail.lProductID = " + bProductDetail.lProductID);

			if (bProductDetailProperty.lBillFrequencyIDNew == 0) {

				// BEGIN DELETE ver 6.05d

				/*
				 * if(bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_ANALOGTV)
				 * {
				 *       GLogger.debug("LProduct", "objGetDetailProductNonSelected", "Setting to Annual");
				 *       bProductDetail.lBillFrequencyId = GAfeDescription.BillFrequency_Annual;
				 * }
				 * else
				 * {
				 *       GLogger.debug("LProduct", "objGetDetailProductNonSelected", "Setting to Montly");
				 *       bProductDetail.lBillFrequencyId = GAfeDescription.BillFrequency_Monthly;
				 * }
				 */

				// END DELETE ver 6.05d
				// BEGIN ADD ver 6.05d
				if (GAfeDescription.PRODUCTTYPE_PACKAGE == bProductDetail.lProductTypeID
						.longValue()) {
					bProductDetail.lBillFrequencyId = LProduct_ext
							.lGetDefaultBillFrequencyId(bProductDetail.lProductID);
					GLogger.debug(CLASS_NAME, "objGetDetailProductNonSelected",
							"bProductDetail.lProductID : "
									+ bProductDetail.lProductID
									+ " bProductDetail.lBillFrequencyId : "
									+ bProductDetail.lBillFrequencyId);
				}

				// END ADD ver 6.05d
			} else {
				GLogger.debug(CLASS_NAME, "objGetDetailProductNonSelected",
						"Setting to that of Line");
				bProductDetail.lBillFrequencyId = bProductDetailProperty.lBillFrequencyIDNew;
			}

			// END ADD V6.02d

			if (FINAL_ZERO == Hidden) {
				bProductDetail.iBillable = Billable;
				bProductDetail.iProvisionable = Provisionable;

				//              Begin Add : V3.32
				//              Change made to fix defectid=1 (Volledige Installatie not to be shown in upper grid)
				bProductDetail.iHidden = productRow.iHidden;

				//              Change made to fix defectid=1 (Volledige Installatie not to be shown in upper grid)
				//              End Add : V3.32
			} else {
				bProductDetail.iBillable = productRow.iBillable;
				bProductDetail.iProvisionable = productRow.iProvisionable;

				//              Begin Add : V3.32
				//              Change made to fix defectid=1 (Volledige Installatie not to be shown in upper grid)
				bProductDetail.iHidden = Hidden; // Hidden is the Input Parameter to this Function

				//              Change made to fix defectid=1 (Volledige Installatie not to be shown in upper grid)
				//              End Add : V3.32
			}

			//          Begin Delete : V3.32
			//          Change made to fix defectid=1 (Volledige Installatie not to be shown in upper grid)
			//                       bProductDetail.iHidden                          =       Hidden;                 //Hidden is the Input Parameter to this Function
			//          Change made to fix defectid=1 (Volledige Installatie not to be shown in upper grid)
			//          End Delete : V3.32
			//Begin Add Astha
			bCheck = bCheckNewCplidForPendingOrderMove(bProductDetailProperty.lCustomerProductLineID);
			GLogger.chkpt("bCheck for nonselected" + bCheck);
			//End Add Astha
			/*
			 * [Maximam one identifier is possible for every product]
			 * It is not necessary to have productlineIdentifier for every product.
			 */
			if (FINAL_ZERO != productRow.lProductLineIdentifierTypeID) {
				bProductParameter = new BProductParameter();
				lProductLineIdentifierTypeID = Long.valueOf(0);
				bProductParameter.strParameterName = "";
				lProductLineIdentifierTypeID = Long.valueOf(
						productRow.lProductLineIdentifierTypeID);
				bProductParameter.lParameterID = lProductLineIdentifierTypeID;
				bProductParameter.iParameter = FINAL_ZERO;
				bProductParameter.iEditable = FINAL_ONE;
				bProductParameter.iMandatory = FINAL_ONE;
				bProductParameter.iVisibleOnSelection = FINAL_ONE;
				bProductParameter.iProvisionable = FINAL_ZERO;
				bProductParameter.iBillable = FINAL_ZERO;
				bProductParameter.iCombo = FINAL_ONE;
				bProductParameter.strParameterName = strFindDescription_PID(lProductLineIdentifierTypeID
						.longValue());
				bProductParameter.strExternalDesc = getExtDesc(bProductParameter.lParameterID.longValue());
				strValues = "";
				iSelected = FINAL_ZERO;
				vctInternal.addElement(strValues);
				vctInternal.addElement(Integer.valueOf(iSelected));

				if (FINAL_ZERO != strValues.length()) {
					vctExternal.addElement(vctInternal);
				}

				/*
				 * Check in the session for bInternet business object. If you find that
				 * business object then only do as follows
				 */
				if (GAfeDescription
						.lGetTypeId("PRODUCTLINEIDENTIFIERTYPE_LOGIN") == lProductLineIdentifierTypeID
						.longValue()) {
					if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) {
						BInternet bInternet = null;

						bInternet = new BInternet();
						bInternet = (BInternet) teleSessionMgr
								.getValue(string_BInternet_aCProduct);

						Vector vctInternetDetail = new Vector();
						Vector vctInternalInternet;
						Vector vctInt;

						vctInternetDetail = bInternet.vctInternetDetail;

						if (null != vctInternetDetail) {
							iSizeOfVct = vctInternetDetail.size();
						}

						for (iCounter = FINAL_ZERO; iCounter < iSizeOfVct; iCounter++) {
							vctInternalInternet = new Vector();
							vctInternalInternet = (Vector) vctInternetDetail
									.elementAt(iCounter);
							strValues = String.valueOf(vctInternalInternet
									.elementAt(FINAL_ZERO));

							// Begin Ver 3.02
							// Fix for the validation for Aged Logins being able to be attached to aged mailalaises.
							if (!(bCheckForLogin(vctExternal, strValues)))

							// End Ver 3.02
							// Fix for the validation for Aged Logins being able to be attached to aged mailalaises.
							{
								if (FINAL_ZERO == vctExternal.size()) {
									iSelected = FINAL_ONE;
									bProductParameter.iEditable = FINAL_ZERO;
								} else {
									iSelected = FINAL_ZERO;
								}

								vctInt = new Vector();

								if ((blnGetForProperty("PRODUCT_URL", ProductID))) {
									if ((null != teleSessionMgr
											.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT))
											|| (null != teleSessionMgr
													.getValue("BProductDetailProperty_aCProductOrders"))) {
										Vector vctTempLogin = null;

										// BEGIN DELETE V6.02d
										// BProductDetailProperty bProductDetailProperty = null;
										// END DELETE V6.02d

										// Vector for storing all the Data that is populated in the tablular form
										GLogger
												.chkpt("New bproductdetailproperty"
														+ bProductDetailProperty);
										//Begin Add Astha
										if (bCheck
												&& null != (BProductDetailProperty) teleSessionMgr
														.getValue(string_BProductDetailProperty_aCProduct_New)) {
											bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
													.getValue(string_BProductDetailProperty_aCProduct_New);
										} else if (!bCheck) {
											bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
													.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
										}
										//End Add Astha

										if (null == bProductDetailProperty) {
											//Begin Add Astha
											if (null != (BProductDetailProperty) teleSessionMgr
													.getValue(string_BProductDetailProperty_aCProduct_New)
													&& bCheck) {
												bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
														.getValue(string_BProductDetailProperty_aCProduct_New);
												GLogger
														.chkpt("New bproductdetailproperty"
																+ bProductDetailProperty);
											} else if (!bCheck) {
												bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
														.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
												GLogger
														.chkpt("Old bproductdetailproperty"
																+ bProductDetailProperty);
											}
											//End Add Astha
										}

										vctTempLogin = bProductDetailProperty.vctGetLoginfromILMMAIL;

										int iSizeOfvctLogin = 0;

										iSizeOfvctLogin = vctTempLogin.size();

										if (FINAL_ZERO != iSizeOfvctLogin) {
											for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++) {
												if (null == ((BChangeILogin) vctTempLogin
														.elementAt(iCounterLog))) {
													continue;
												}

												if ((String
														.valueOf(((BChangeILogin) vctTempLogin
																.elementAt(iCounterLog)).strLogin
																.trim()))
														.equalsIgnoreCase(strValues
																.trim())) {

													// Begin Ver 2.80
													// Changes Made for Fixing Upgrade Downgrade Logins problem
													// Check whether the login is there in url then add it else dont add
													// Call Another function
													if (bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
															bProductDetailProperty.vctGetLoginfromILMURL,
															strValues)) {
														if (!(bCheckForLogin(
																vctExternal,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctExternal, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctExternal
																	.addElement(vctInt);
														} // end of the if loop
													} else {
														GLogger.chkpt("Inside else statement ");
													}

													// End Ver 2.80
													// Changes Made for Fixing Upgrade Downgrade Logins problem
												} // end of the if loop
												else {
													if (!bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
															bProductDetailProperty.vctGetLoginfromILMMAIL,
															strValues)) {
														if (!(bCheckForLogin(
																vctExternal,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctExternal, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctExternal
																	.addElement(vctInt);
														} // end of the if loop
													} // end of the if loop
													else {
														GLogger.chkpt("Inside else statement ");
													}
												} // end of the if else if loop
											} // end of the for loop
										} else {
											if (!(bCheckForLogin(vctExternal,
													strValues)))

											// if(bValidateLogin_ToExistingVector(vctExternal, strValues))
											{

												// Intentionally allocated memory
												vctInt = new Vector();
												vctInt.addElement(strValues);
												vctInt.addElement(Integer.valueOf(
														iSelected));
												vctExternal.addElement(vctInt);
											} // end of the if loop
										} // end of the if else if loop
									} // end of the if loop
								} else if ((blnGetForProperty(
										"PRODUCT_MAILBOX", ProductID))
										|| (blnGetForProperty(
												"PRODUCT_DOMAINMAILSERVER",
												ProductID))) {
									if ((null != teleSessionMgr
											.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT))
											|| (null != teleSessionMgr
													.getValue("BProductDetailProperty_aCProductOrders"))) {
										Vector vctTempLogin = null;

										// BEGIN DELETE V6.02d
										// BProductDetailProperty bProductDetailProperty = null;
										// END DELETE V6.02d

										// Vector for storing all the Data that is populated in the tablular form
										GLogger
												.chkpt("bproductdetailproperty before checking1"
														+ bProductDetailProperty);
										bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
												.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
										if (null == bProductDetailProperty) {
											GLogger
													.chkpt("bproductdetailproperty before checking2"
															+ bProductDetailProperty);
											//Begin Add Astha
											if (bCheck) {
												bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
														.getValue("BProductDetailProperty_aCProductOrders_New");
												GLogger
														.chkpt("New bproductdetailproperty"
																+ bProductDetailProperty);
											} else {
												bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
														.getValue("BProductDetailProperty_aCProductOrders");
												GLogger
														.chkpt("Old bproductdetailproperty"
																+ bProductDetailProperty);
											}
											//End Add Astha

										}
										GLogger
												.chkpt("bproductdetailproperty before checking3"
														+ bProductDetailProperty);
										vctTempLogin = bProductDetailProperty.vctGetLoginfromILMURL;

										int iSizeOfvctLogin = 0;

										iSizeOfvctLogin = vctTempLogin.size();

										if (FINAL_ZERO != iSizeOfvctLogin) {
											for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++) {
												if (null == ((BChangeILogin) vctTempLogin
														.elementAt(iCounterLog))) {
													continue;
												}

												if ((String
														.valueOf(((BChangeILogin) vctTempLogin
																.elementAt(iCounterLog)).strLogin
																.trim()))
														.equalsIgnoreCase(strValues
																.trim())) {

													// Begin Ver 2.80
													// Changes Made for Fixing Upgrade Downgrade Logins problem
													// Check whether the login is there in url then add it else dont add
													// Call Another function
													if (bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
															bProductDetailProperty.vctGetLoginfromILMMAIL,
															strValues)) {
														if (!(bCheckForLogin(
																vctExternal,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctExternal, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctExternal
																	.addElement(vctInt);
														} // end of the if loop
													} else {
														GLogger.chkpt("Inside else statement ");
													}

													// End Ver 2.80
													// Changes Made for Fixing Upgrade Downgrade Logins problem
												} // end of the if loop
												else {
													if (!bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
															bProductDetailProperty.vctGetLoginfromILMURL,
															strValues)) {
														if (!(bCheckForLogin(
																vctExternal,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctExternal, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctExternal
																	.addElement(vctInt);
														} // end of the if loop
													} // end of the if loop
													else {
														GLogger.chkpt("Inside else statement ");
													} // end of the if else if loop
												} // end of the if else if loop
											} // end of the for loop
										} else {
											if (!(bCheckForLogin(vctExternal,
													strValues)))

											// if(bValidateLogin_ToExistingVector(vctExternal, strValues))
											{

												// Intentionally allocated memory
												vctInt = new Vector();
												vctInt.addElement(strValues);
												vctInt.addElement(Integer.valueOf(
														iSelected));
												vctExternal.addElement(vctInt);
											} // end of the if loop
										} // end of if else if loop
									} // end of the if loop
								} else {
									if (!(bCheckForLogin(vctExternal, strValues)))

									// if(bValidateLogin_ToExistingVector(vctExternal, strValues))
									{

										// Intentionally allocated memory
										// BEGIN ADD V.6.07n
										// BEGIN MODIFY v7.05e
										// if( !((ProductID.longValue() == GAfeDescription.PRODUCT_NETPHONE) && (strValues.equals(""))) )
										if (!((GAfeDescription
												.bCheckInLongList(
														ProductID.longValue(),
														GAfeDescription.VON_PACKAGE_PRODUCTID)) && (strValues
												.equals(""))))

										// END MODIFY V7.05e
										{

											// END ADD V.6.07n
											vctInt = new Vector();
											vctInt.addElement(strValues);
											vctInt.addElement(Integer.valueOf(
													iSelected));
											vctExternal.addElement(vctInt);

											// BEGIN ADD V.6.07n
										}

										// END ADD V.6.07n
									} // end of the if loop
								} // end of the if loop

								// Begin Ver 3.02
								// Fix for the validation for Aged Logins being able to be attached to aged mailalaises.
							} // end of the if loop

							// Begin Ver 3.02
							// Fix for the validation for Aged Logins being able to be attached to aged mailalaises.
						} // end of the for loop
					} // end of the if loop
				} // end of the if loop

				// End Ver 2.5
				// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
				// BEGIN DELETE V6.02d
				// BProductDetailProperty bProductDetailProperty = null;
				// END DELETE V6.02d
				if (null != teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

					// Vector for storing all the Data that is populated in the tablular form
					bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
							.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
				}

				if (null != teleSessionMgr
						.getValue("BProductDetailProperty_aCProductOrders")) {

					// Vector for storing all the Data that is populated in the tablular form
					//Begin Add Astha
					if (bCheck) {
						bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
								.getValue("BProductDetailProperty_aCProductOrders_New");
						GLogger.chkpt("New bproductdetailproperty"
								+ bProductDetailProperty);
					} else {
						bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
								.getValue("BProductDetailProperty_aCProductOrders");
						GLogger.chkpt("Old bproductdetailproperty"
								+ bProductDetailProperty);
					}
					//End Add Astha
				}
				if (null == bProductDetailProperty) {
					bProductDetailProperty = new BProductDetailProperty();
				}

				// BEGIN DELETE Ver 5.57a
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println(" Before Mailbox objGetDetailProductNonSelected");
				// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
				// lStart  =       System.currentTimeMillis();
				// }
				// END DELETE Ver 5.57a
				if ((blnGetForProperty("PRODUCT_MAILBOX", ProductID))
						|| (blnGetForProperty("PRODUCT_DOMAINMAILSERVER",
								ProductID))) {
					Vector vctLogin = new Vector();

					//                  IAFEOUT iAFEOUT         =       new IAFEOUT();
					//                  vctLogin        =       iAFEOUT.vctGetLogin(CustomerID, "M");
					vctLogin = bProductDetailProperty.vctGetLoginfromILMMAIL;

					if ((null != vctLogin) && (FINAL_ZERO != vctLogin.size())) {
						int iSizeOfVeclogin = 0;

						iSizeOfVeclogin = vctLogin.size();

						for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfVeclogin; iCounterLog++) {
							String strLogin = "";
							Vector vctInt = null;

							if (null == ((BChangeILogin) vctLogin
									.elementAt(iCounterLog))) {
								continue;
							}

							strLogin = String.valueOf(((BChangeILogin) vctLogin
									.elementAt(iCounterLog)).strLogin);
							;

							if (!(bCheckForLogin(vctExternal, strLogin))) {
								vctInt = new Vector();

								if (FINAL_ZERO == vctExternal.size()) {
									iSelected = FINAL_ONE;
									bProductParameter.iEditable = FINAL_ZERO;
								} else {
									iSelected = FINAL_ZERO;
								}

								vctInt.addElement(strLogin);
								vctInt.addElement(Integer.valueOf(iSelected));
								vctExternal.addElement(vctInt);
							}
						}
					}
				}
				GLogger.chkpt("bproductdetailproperty 1"
						+ bProductDetailProperty);
				// BEGIN DELETE Ver 5.57a
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println(" After Mailbox/ befor URL objGetDetailProductNonSelected");
				// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
				// lStart  =       System.currentTimeMillis();
				// }
				// END DELETE Ver 5.57a
				if ((blnGetForProperty("PRODUCT_URL", ProductID))) {
					Vector vctURL = new Vector();

					//                  IAFEOUT iAFEOUT         =       new IAFEOUT();
					//                  vctURL  =       iAFEOUT.vctGetLogin(CustomerID, "U");
					if ((null != vctURL) && (FINAL_ZERO != vctURL.size())) {
						vctURL = bProductDetailProperty.vctGetLoginfromILMURL;

						int iSizeOfvctURL = 0;

						iSizeOfvctURL = vctURL.size();

						for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctURL; iCounterLog++) {
							String strURL = "";
							Vector vctInt = null;

							if (null == ((BChangeILogin) vctURL
									.elementAt(iCounterLog))) {
								continue;
							}

							strURL = String.valueOf(((BChangeILogin) vctURL
									.elementAt(iCounterLog)).strLogin);
							;

							if (!(bCheckForLogin(vctExternal, strURL))) {
								vctInt = new Vector();

								if (FINAL_ZERO == vctExternal.size()) {
									iSelected = FINAL_ONE;
									bProductParameter.iEditable = FINAL_ZERO;
								} else {
									iSelected = FINAL_ZERO;
								}

								vctInt.addElement(strURL);
								vctInt.addElement(Integer.valueOf(iSelected));
								vctExternal.addElement(vctInt);
							}
						}
					}
				}
				GLogger.chkpt("bproductdetailproperty 2"
						+ bProductDetailProperty);
				// BEGIN DELETE Ver 5.57a
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println(" After URL objGetDetailProductNonSelected");
				// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
				// lStart  =       System.currentTimeMillis();
				// }
				// END DELETE Ver 5.57a
				bProductParameter.vctParameterValues = vctExternal;

				if (FINAL_ONE == bProductParameter.vctParameterValues.size()) {
					((Vector) bProductParameter.vctParameterValues
							.elementAt(FINAL_ZERO)).setElementAt(Integer.valueOf(
							string_ONE), FINAL_ONE);
				}

				if (FINAL_ONE == bProductParameter.vctParameterValues.size()) {
					bProductParameter.strParamDefValue = String
							.valueOf(((Vector) bProductParameter.vctParameterValues
									.elementAt(FINAL_ZERO))
									.elementAt(FINAL_ZERO));
				}

				bProductDetail.vctParameters.addElement(bProductParameter);
			} // end of the if loop

			// BEGIN DELETE Ver 5.57a
			// if(GAfePropertyLoader.DEBUG)
			// {
			// System.out.println(" In the middle 1 objGetDetailProductNonSelected");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			// lStart  =       System.currentTimeMillis();
			// }
			// END DELETE Ver 5.57a
			// Begin DEL v9.01d
			// ProductParameterRow productParameterRow = null;           // Initializing the Object Class for the Currency table
			// End DEL v9.01d
			if (null == productParameterTable) {
				productParameterTable = (ProductParameter) teleSessionMgr
						.getMasterTable("PRODUCTPARAMETER"); // Getting the Customer table from the session
			}

			Vector vctObjPPALLDATAInternal = new Vector();

			vctObjPPALLDATAInternal = productParameterTable
					.vctSearchByProductIDandObsolete(ProductID.longValue(),
							FINAL_ZERO);

			if (null != vctObjPPALLDATAInternal) {

				// Loading the Tables into Memory
				if (null == packageParameterTable) {
					packageParameterTable = (PackageParameter) teleSessionMgr
							.getMasterTable("PACKAGEPARAMETER"); // Getting the Customer table from the session
				}

				if (null == productParameterValueTable) {
					productParameterValueTable = (ProductParameterValue) teleSessionMgr
							.getMasterTable("PRODUCTPARAMETERVALUE"); // Getting the Customer table from the session
				}

				if (null == defaultLogicTable) {
					defaultLogicTable = (DefaultLogic) teleSessionMgr
							.getMasterTable("DEFAULTLOGIC"); // Getting the Customer table from the session
				}

				ProductParameterRow productParameterRowTemp = null;

				// for each  record in the vector of ProductParameter Records
				for (int iPPCounter = FINAL_ZERO; iPPCounter < vctObjPPALLDATAInternal
						.size(); iPPCounter++) {
					iCounterForCountMain = FINAL_ZERO;
					iCounterForCount = FINAL_ZERO;

					// BEGIN ADD V5.43d
					iMainCounter = 0;
					iNCounter = 0;

					// END ADD V5.43d
					productParameterRowTemp = (ProductParameterRow) vctObjPPALLDATAInternal
							.elementAt(iPPCounter);
					bProductParameter = new BProductParameter();
					vctExternal = new Vector();
					lProductParameterID = Long.valueOf(0);
					bProductParameter.strParameterName = "";
					lProductParameterID = Long.valueOf(
							productParameterRowTemp.lProductParameterID);
					bProductParameter.lParameterID = lProductParameterID;
					strProdParamDefaultValue = productParameterRowTemp.strProductParameterDefaultValue;
					lDefaultLogicID = Long.valueOf(
							productParameterRowTemp.lDefaultLogicID);
					bProductParameter.iParameter = FINAL_ONE;
					bProductParameter.iEditable = productParameterRowTemp.iEditable;
					bProductParameter.iMandatory = productParameterRowTemp.iMandatory;
					bProductParameter.iVisibleOnSelection = productParameterRowTemp.iVisibleOnSelection;
					bProductParameter.iProvisionable = productParameterRowTemp.iProvisionable;
					bProductParameter.iBillable = productParameterRowTemp.iBillable;
					bProductParameter.strParameterName = strFindPPIDDescription(lProductParameterID);
					
					//BEGIN : 14.40 : Sun Sat
					GLogger.chkpt("sunsat bProductParameter ->"+ bProductParameter);
					GLogger.chkpt("sunsat productParameterRowTemp.strExternalDesc ->"+ productParameterRowTemp.strExternalDesc);
					bProductParameter.strExternalDesc = productParameterRowTemp.strExternalDesc;
					//END : 14.40 : Sun Sat
					PackageParameterRow packageParameterRow = null; // Initializing the Object Class for the Currency table
					Vector vctObOPPIDjOInternal = new Vector();

					if (null != packageParameterTable) {
						vctObOPPIDjOInternal = packageParameterTable
								.vctSearchByOptionProductIDandProductParameterIDandObsolete(
										OptionProductID.longValue(),
										lProductParameterID.longValue(),
										FINAL_ZERO);
					}

					if (null != vctObOPPIDjOInternal) {
						iCounterForCountMain = vctObOPPIDjOInternal.size();
					}

					iCounterForCount = iCounterForCountMain;

					//                  BEGIN DELETE: V 3.10
					//                  Deleted code for fixing DEFECT id 70, Obsolete Masters
					//                  Changed this to get Multiple values from Packageparameter

					/*
					 if(!(iCounterForCount == FINAL_ZERO))
					 {

					 packageParameterRow             = null;         // Initializing the Object Class for the Currency table

					 packageParameterRow     =   packageParameterTable.oprSearchBylOptionProductIDandlProductParameterIDandiObsolete(OptionProductID.longValue(), lProductParameterID.longValue(), FINAL_ZERO);

					 if(packageParameterRow != null)
					 {
					 strValues       =       packageParameterRow.strProductParameterValue;
					 iSelected       =       FINAL_ONE;
					 bProductParameter.iEditable             =       FINAL_ZERO;

					 // METHOD FOR ADDING THE BILLABLE PARAMETERS
					 if(FINAL_ONE == bProductParameter.iBillable && FINAL_ONE == iSelected)
					 {
					 Vector vctIntern = new Vector();
					 vctIntern.addElement(lProductParameterID);
					 vctIntern.addElement(strValues);
					 vctAllBillableParameters.addElement(vctIntern);
					 }
					 // METHOD FOR ADDING THE BILLABLE PARAMETERS

					 vctInternal     = new Vector();
					 vctInternal.addElement(strValues);
					 vctInternal.addElement(new Integer(iSelected));
					 vctExternal.addElement(vctInternal);

					 // Here in this case we have to make it non-editable. No multiple values
					 }

					 */

					//                  Deleted Code For fixing DEFECT id 70, Obsolete Masters
					//                  END ADD: V3.10
					//                  BEGIN ADD: V 3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Care of Multiple Values from Packeage Parametere Table
					if (!(iCounterForCount == FINAL_ZERO)) {
						iSelected = FINAL_ZERO;
						packageParameterRow = null; // Initializing the Object Class for the Currency table

						for (int iPackParamCntr = 0; iPackParamCntr < vctObOPPIDjOInternal
								.size(); iPackParamCntr++) {
							packageParameterRow = (PackageParameterRow) vctObOPPIDjOInternal
									.elementAt(iPackParamCntr);

							if (packageParameterRow != null) {
								strValues = packageParameterRow.strProductParameterValue;

								if (FINAL_ONE == vctObOPPIDjOInternal.size()) {
									bProductParameter.iEditable = FINAL_ZERO;
									iSelected = FINAL_ONE;
								} else {
									if (packageParameterRow.iIsDefault == 0) {
										iSelected = FINAL_ZERO;
									} else if (packageParameterRow.iIsDefault == 1) {
										iSelected = FINAL_ONE;
									}
								}

								// METHOD FOR ADDING THE BILLABLE PARAMETERS
								if ((FINAL_ONE == bProductParameter.iBillable)
										&& (FINAL_ONE == iSelected)) {
									Vector vctIntern = new Vector();

									vctIntern.addElement(lProductParameterID);
									vctIntern.addElement(strValues);
									vctAllBillableParameters
											.addElement(vctIntern);
								}

								// METHOD FOR ADDING THE BILLABLE PARAMETERS

								vctInternal = new Vector();
								vctInternal.addElement(strValues);
								vctInternal.addElement(Integer.valueOf(iSelected));
								vctExternal.addElement(vctInternal);
							}
						}

						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						//                      END ADD: V3.10
					} // end of the if clause
					else if (iCounterForCount == FINAL_ZERO) {
						if (null != strProdParamDefaultValue) {
							vctInternal = new Vector();
							bProductParameter.iCombo = FINAL_ZERO;
							strValues = strProdParamDefaultValue;
							iSelected = FINAL_ONE;

							/* METHOD FOR ADDING THE BILLABLE PARAMETERS */
							if ((FINAL_ONE == bProductParameter.iBillable)
									&& (FINAL_ONE == iSelected)) {
								Vector vctIntern = new Vector();

								vctIntern.addElement(lProductParameterID);
								vctIntern.addElement(strValues);
								vctAllBillableParameters.addElement(vctIntern);
							}

							/* METHOD FOR ADDING THE BILLABLE PARAMETERS */

							vctInternal.addElement(strValues);
							vctInternal.addElement(Integer.valueOf(iSelected));
							vctExternal.addElement(vctInternal);
							iMainCounter++;
						} // end of the if Clause

						if (FINAL_ZERO != lDefaultLogicID.longValue()) {
							vctInternal = new Vector();

							DefaultLogicRow defaultLogicRow = null; // Initializing the Object Class for the Currency table

							defaultLogicRow = (DefaultLogicRow) defaultLogicTable
									.astrSearchByDefaultLogicIDandObsolete(
											lDefaultLogicID.longValue(),
											FINAL_ZERO);
							strDefaultLogic = defaultLogicRow.strDefaultLogic;
							strFinalDefaultLogic = strGetDefaultLogic(
									CustomerID, strDefaultLogic,
									strFinalString, iStartFrom);
							strValues = strChangeSpecialChar(
									strFinalDefaultLogic,
									bProductParameter.lParameterID);
							bProductParameter.iCombo = FINAL_ZERO;
							iSelected = FINAL_ONE;

							/* METHOD FOR ADDING THE BILLABLE PARAMETERS */
							if ((FINAL_ONE == bProductParameter.iBillable)
									&& (FINAL_ONE == iSelected)) {
								Vector vctIntern = new Vector();

								vctIntern.addElement(lProductParameterID);
								vctIntern.addElement(strValues);
								vctAllBillableParameters.addElement(vctIntern);
							}

							/* METHOD FOR ADDING THE BILLABLE PARAMETERS */

							vctInternal.addElement(strValues);
							vctInternal.addElement(Integer.valueOf(iSelected));
							vctExternal.addElement(vctInternal);
							iMainCounter++;
						} // end of the if Loop

						// Begin DEL v9.01d
						// ProductParameterValueRow productParameterValueRow = null;             // Initializing the Object Class for the Currency table
						// End DEL v9.01d
						Vector vctObjPPVInternal = new Vector();

						vctObjPPVInternal = productParameterValueTable
								.vctSearchByProductParameterIDandObsolete(
										lProductParameterID.longValue(),
										FINAL_ZERO);

						if (null != vctObjPPVInternal) {
							iNCounter = vctObjPPVInternal.size();
						}

						if (!(FINAL_ZERO == iNCounter)) {
							bProductParameter.iCombo = FINAL_ONE;

							if (null != vctObjPPVInternal) {

								// for each  record in the vector of ProductParameterValue Records
								for (int iPPVISDCounter = FINAL_ZERO; iPPVISDCounter < vctObjPPVInternal
										.size(); iPPVISDCounter++) {
									vctInternal = new Vector();
									strValues = ((ProductParameterValueRow) (vctObjPPVInternal
											.elementAt(iPPVISDCounter))).strProductParameterValue;

									if (1 == ((ProductParameterValueRow) (vctObjPPVInternal
											.elementAt(iPPVISDCounter))).iIsDefault) {
										iSelected = 1;
									} else {
										iSelected = 0;
									}

									/* METHOD FOR ADDING THE BILLABLE PARAMETERS */
									if ((FINAL_ONE == bProductParameter.iBillable)
											&& (FINAL_ONE == iSelected)) {
										Vector vctIntern = new Vector();

										vctIntern
												.addElement(lProductParameterID);
										vctIntern.addElement(strValues);
										vctAllBillableParameters
												.addElement(vctIntern);
									}

									/* METHOD FOR ADDING THE BILLABLE PARAMETERS */

									vctInternal.addElement(strValues);
									vctInternal.addElement(Integer.valueOf(
											iSelected));
									vctExternal.addElement(vctInternal);
								} // end of the for loop
							} // end of the if loop for handling of the null pointer exception

							iMainCounter++;
						}

						//BEGIN : 14.40 : Sun Sat
						GLogger.chkpt("sunsat bProductDetail ->"+ bProductDetail);
						GLogger.chkpt("sunsat bProductParameter ->"+ bProductParameter);
						//GLogger.chkpt("bProductParameter.strExternalDesc ->"+ bProductParameter);
						/*if(bProductDetail.lProductTypeID==GAfeConstants.TABLET_PRODUCTTYPEID){
							if(bProductParameter.strExternalDesc!=null){
							if(bProductParameter.strExternalDesc.equals(GAfeConstants.DESC_DESCRIPTION)){
								GLogger.chkpt("sunsat bProductParameter double click  ->"+ bProductParameter.strExternalDesc);
								List<String> listDescription = fetchDeviceDescriptionForProduct(bProductDetail.lProductID, GAfeConstants.OBSOLETEZERO, bSession.lLanguageId);
								for(String description:listDescription){
									vctInternal = new Vector();
									vctInternal.addElement(description);
									vctInternal.addElement(new Integer(FINAL_ZERO));
									vctExternal.addElement(vctInternal);
								}
							
								Vector vctInt1 = new Vector();
								vctInt1.addElement(GAfeDescription.SELECT);
								vctInt1.addElement(new Integer(FINAL_ONE));
								vctExternal.addElement(vctInt1);
								iMainCounter++;
								
							}
							}
						}*/
						//END : 14.40 : Sun Sat
						if (iMainCounter == FINAL_ZERO) {
							vctInternal = new Vector();
							strValues = "";
							bProductParameter.iCombo = FINAL_ZERO;
							iSelected = FINAL_ONE;
							vctInternal.addElement(strValues);
							vctInternal.addElement(Integer.valueOf(iSelected));
							vctExternal.addElement(vctInternal);
						} // end of the if loop
					} // end of the if else if loop

					if ((FINAL_ONE == bProductParameter.iEditable)
							&& (FINAL_ZERO == vctExternal.size())) {
						vctInternal = new Vector();
						strValues = "";
						iSelected = FINAL_ONE;
						vctInternal.addElement(strValues);
						vctInternal.addElement(Integer.valueOf(iSelected));
						vctExternal.addElement(vctInternal);
					}

					bProductParameter.vctParameterValues = vctExternal;

					if (FINAL_ONE == bProductParameter.vctParameterValues
							.size()) {
						((Vector) bProductParameter.vctParameterValues
								.elementAt(FINAL_ZERO)).setElementAt(
										Integer.valueOf(string_ONE), FINAL_ONE);
					}

					if (FINAL_ONE == bProductParameter.vctParameterValues
							.size()) {
						bProductParameter.strParamDefValue = String
								.valueOf(((Vector) bProductParameter.vctParameterValues
										.elementAt(FINAL_ZERO))
										.elementAt(FINAL_ZERO));
					}

					bProductDetail.vctParameters.addElement(bProductParameter);

					// BEGIN ADD V5.55a
					// if Product is URL then sort parameter in ascending order
					if (GAfeDescription.PRODUCT_URL == bProductDetail.lProductID
							.intValue() ||   GAfeDescription.bCheckInList(bProductDetail.lProductID, GAfeDescription.Pro_id)) {
						System.out.println("calling sort function 2"+bProductDetail.lProductID
								.intValue());
					
						sortProductParameter(bProductDetail);
					}

					// END ADD V5.55a
				} // end of the for Loop

				// BEGIN ADD V5.55a
				// reconciled by bharathy along with version 5.59
				// if Product is URL then sort parameter in ascending order
				if (GAfeDescription.PRODUCT_URL == bProductDetail.lProductID
						.intValue() ||   GAfeDescription.bCheckInList(bProductDetail.lProductID, GAfeDescription.Pro_id))
						 {
					System.out.println("calling sort function 3"+bProductDetail.lProductID
							.intValue());
					sortProductParameter(bProductDetail);
				}

				// END ADD V5.55a
			} // end of the if loop for the handling of null pointer exception

			// Called when and only when the Product is Billable else setting default values
			if (FINAL_ONE == bProductDetail.iBillable) {

				// Begin DEL v9.01d
				// long lStart1 = System.currentTimeMillis();
				// End DEL v9.01d
				//  BEGIN MODIFY : V 3.10
				//  Modified Code for fixing DEFECT id 70, Obsolete Masters
				//  Changed Call fncInternalForPSIDandPrice for calculation of Price
				//                              fncInternalForPSIDandPrice(bProductDetail, vctAllBillableParameters, CurrencyID, ProductID, PaymentMethodRC, PaymentMethodNRC, PaymentMethodUsage);
				int iNoOfOccurences = 0;

				iNoOfOccurences = iNoOfOccurencesOfProduct(vctSelectedProducts,
						bProductDetail.iLevel, bProductDetail.iParentInstance,
						bProductDetail.lProductID.longValue());
				GLogger.debug(CLASS_NAME, "getDetailProductNonSelected",
						"bProductDetail.lProductID = "
								+ bProductDetail.lProductID);
				GLogger.debug(CLASS_NAME, "getDetailProductNonSelected",
						"iNoOfOccurences = " + iNoOfOccurences);
				fncInternalForPSIDandPrice(bProductDetail,
						vctAllBillableParameters, CurrencyID, ProductID,
						PaymentMethodRC, PaymentMethodNRC, PaymentMethodUsage,
						iIsDefault, iNoOfOccurences, FINAL_ZERO);

				//              END MODIFY : V 3.10
				//              Modified Code for fixing DEFECT id 70, Obsolete Masters
			} else {
				bProductDetail.strPeriodicity = "";
				bProductDetail.dPrice = 0;
				bProductDetail.lPriceSettingID = Long.valueOf(0);
			}

			GLogger.debug(CLASS_NAME, "getDetailProductNonSelected",
					"U R OUT TJ");
			GLogger.chkpt("getDetailProductNonSelected -> bProductDetail"
					+ bProductDetail);
			// BEGIN DELETE Ver 5.57a
			// if(GAfePropertyLoader.DEBUG)
			// {
			// System.out.println(" End of call objGetDetailProductNonSelected Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			// lStart  =       System.currentTimeMillis();
			// }
			// END DELETE Ver 5.57a
		} catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		// BEGIN DELETE Ver 5.57a
		// if(GAfePropertyLoader.DEBUG)
		// {
		// System.out.println(" At the end of into objGetDetailProductNonSelected");
		// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
		// lStart  =       System.currentTimeMillis();
		// }
		// END DELETE Ver 5.57a

		return bProductDetail;
	}
	
	//BEGIN : 14.40 : Sun Sat
	public List<String> fetchDeviceDescriptionForProduct(long lProductId, long lObsolete, long lLanguageId){
		GLogger.logEntry(CLASS_NAME, "fetchDeviceDescriptionForProduct");
    	GLogger.logInput("fetchDeviceDescriptionForProduct", "lProductId",lProductId);
    	GLogger.logInput("fetchDeviceDescriptionForProduct", "lObsolete",lObsolete);
    	GLogger.logInput("fetchDeviceDescriptionForProduct", "lLanguageId",lLanguageId);
		List<String> descriptions = new ArrayList<String>();
		//Long orderIntakeDescriptionID = 0L;
		ProductModel2ProductRow productModel2ProductRow =  null;
		ProductModelRow productModelRow = null;
		ObjectDescriptionRow objectDescriptionRow = null;
		ProductModel2Product productModel2Product = null;
		ProductModel productModel = null;
		ObjectDescription objectDescription = null;
		
		try{



			productModel2Product = (ProductModel2Product) teleSessionMgr
			.getMasterTable("PRODUCT_MODEL_2_PRODUCT"); // Getting the Customer table from the session

			if(null!=productModel2Product){
				GLogger.chkpt("Before calling vctSearchByProductIDValidityAndObsolete");
				GLogger.chkpt("Before calling vctSearchByProductIDValidityAndObsolete productModel2Product "+productModel2Product);
				Vector vctResult = productModel2Product.vctSearchByProductIDValidityAndObsolete(lProductId,new Date(),new Date(),lObsolete);
				GLogger.chkpt("Sunsat vctSearchByProductIDValidityAndObsolete"+vctResult.size());
				for(int iCounter=0;iCounter<vctResult.size();iCounter++){                           GLogger.chkpt("inside for loop -- fetchDeviceDescriptionForProduct");

				productModel2ProductRow=(ProductModel2ProductRow)vctResult.elementAt(iCounter);
				productModel  = (ProductModel) teleSessionMgr.getMasterTable("PRODUCT_MODEL");
				GLogger.chkpt("Sunsat vctSearchByProductIDValidityAndObsolete productModel"+productModel);
				if(productModel !=null){
					productModelRow = productModel.pmrSearchByProductModelGUIDandObsolete(productModel2ProductRow.getProductModelGUID(),lObsolete);
					if(productModelRow!=null){
						GLogger.chkpt("Sunsat vctSearchByProductIDValidityAndObsolete productModelRow"+productModelRow.toString());
						objectDescription  = (ObjectDescription) teleSessionMgr.getMasterTable(string_OBJECTDESCRIPTION);
						if(objectDescription!=null){
							objectDescriptionRow = objectDescription.odrSearchByDescriptionIDAndLanguageID(productModelRow.getOrderIntakeDescriptionID(),lLanguageId,(int)lObsolete);
							GLogger.chkpt("Sunsat vctSearchByProductIDValidityAndObsolete objectDescriptionRow"+objectDescriptionRow.toString());
							if(objectDescriptionRow!=null){
								descriptions.add(objectDescriptionRow.strDescription);
							}
						}
					}
				}
				}
			}	
		}	
		catch(Exception e){
			GLogger.debug(CLASS_NAME, "fetchDeviceDescriptionForProduct", "Error : " +e );
			GLogger.chkpt( "fetchDeviceDescriptionForProductError : " +e );
			//e.printStackTrace();
			GLogger.logException(e);
			//throw e;
		}
		GLogger.logOutput("fetchDeviceDescriptionForProduct", "descriptions", descriptions);
        GLogger.logExit(CLASS_NAME, "fetchDeviceDescriptionForProduct");
		return descriptions;
	}
	//END : 14.40 : Sun Sat
	/**
	 *  DESCRIPTION :   The Function will give the Price setting id and the price and periodicity.
	 *                                  In this function as we are using a dynamic querry so we are firing the querry
	 *                                  in the database and not taking from the session.
	 *
	 *  @param          :       BProductDetail bProductDetail, Vector vctAllBillableParameters, Long CurrencyID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 */

	//  BEGIN MODIFY : V3.10
	//  Modified Code for fixing DEFECT id 70, Obsolete Masters
	//  Changed Method Signature to include iDefault, iNoOfOccurences Parameters for calculating PriceSettingId.
	//protected void fncInternalForPSIDandPrice(BProductDetail bProductDetail, Vector vctAllBillableParameters, Long CurrencyID, Long ProductID, Long PaymentMethodRC, Long PaymentMethodNRC, Long PaymentMethodUsage) throws SQLException, Exception
	protected void fncInternalForPSIDandPrice(BProductDetail bProductDetail,
			Vector vctAllBillableParameters, Long CurrencyID, Long ProductID,
			Long PaymentMethodRC, Long PaymentMethodNRC,
			Long PaymentMethodUsage, int iIsDefault, int iNoOfOccurences,
			int iFlagForDate) throws SQLException, Exception

	//  END ADD: V3.10
	//  Modified Code for fixing DEFECT id 70, Obsolete Masters
	{
		double dSum = 0; // Local Varaible Declaration
		double dChargeAmount = 0; // Local Varaible Declaration
		double dAddChargeAmount = 0; // Local Varaible Declaration
		Long lPriceSettingID = Long.valueOf(0); // Local Varaible Declaration
		Long lRecurringTypeID = Long.valueOf(0); // Local Varaible Declaration

		// Begin DEL v9.01d
		// Long lChargeTypeID = Long.valueOf(0);             //Local Varaible Declaration
		// End DEL v9.01d
		String strPeriodicity = ""; // Local Varaible Declaration

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d
		//  BEGIN ADD: V3.10
		//  Added Code for fixing DEFECT id 70, Obsolete Masters
		//  Initialization of Variables needed for getting cretaion date of Product.
		Date dtDateCheck = null;
		Timestamp dtCreationDateOfProduct = null;
		CustomerProductRow custProductRow = null;

		// BEGIN ADD VER 5.94a
		// BEGIN DELETE V 5.96u
		// iGoAhead = 0;
		// iTakeOpProdAsNull = 0;
		// END DELETE V 5.96u
		// END ADD VER 5.94a

		//      END ADD: V3.10
		//      Added Code for fixing DEFECT id 70, Obsolete Masters
		//BE    GIN ADD V 5.96u
		//MO    DIFICATION TO MAKE VARIABLE LOCAL AS PRICESETTING ID IS WRONLY UPDATED FOR SERVICES
		//BE    CAUSE OF CALSS VARIABLES
		int iTakeOpProdAsNull = 0;
		int iGoAhead = 0;

		//      END ADD V 5.96u

		try {
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"bProductDetail.lProductID = " + bProductDetail.lProductID);
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"vctAllBillableParameters = " + vctAllBillableParameters);
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"CurrencyID = " + CurrencyID);
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"PaymentMethodRC = " + PaymentMethodRC);
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"PaymentMethodNRC = " + PaymentMethodNRC);
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"PaymentMethodUsage = " + PaymentMethodUsage);
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"iIsDefault = " + iIsDefault);
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"iNoOfOccurences = " + iNoOfOccurences);
			GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
					"iFlagForDate = " + iFlagForDate);

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d

			//          BEGIN ADD: V3.10
			//          Added Code for fixing DEFECT id 70, Obsolete Masters
			//          Code to calculate Creation Date from CustomerProduct Table based on CustomerProductID present in BProductDetail
			if (iFlagForDate == FINAL_ZERO) {
				dtDateCheck = new java.util.Date();
			} else {
				if (null == customerProductTable) {
					customerProductTable = (CustomerProduct) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
				}

				custProductRow = (CustomerProductRow) customerProductTable
						.cprSearchByCustProductIDandObsolete(
								bProductDetail.lCustomerProductID.longValue(),
								FINAL_ZERO);

				if (null != custProductRow) {
					dtCreationDateOfProduct = custProductRow.dtCreationDate;
					dtDateCheck = java.sql.Date.valueOf(dtCreationDateOfProduct
							.toString().substring(0, 10));
				} else {
					dtDateCheck = new java.util.Date();
				}
			}

			//          END ADD: V3.10
			//          Added Code for fixing DEFECT id 70, Obsolete Masters

			// Begin Add V5.96j
			lRecurringTypeID = Long.valueOf(bProductDetail.lBillFrequencyId);

			// End Add V5.96j
			//  BEGIN MODIFY : V3.10
			//  Modified Code for fixing DEFECT id 70, Obsolete Masters
			//  Code to take extra precaution of size being null
			//              if(FINAL_ZERO != vctAllBillableParameters.size())
			if ((null != vctAllBillableParameters)
					&& (FINAL_ZERO != vctAllBillableParameters.size()))

			//          END MODIFY : V3.10
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters
			{
				if (vctAllBillableParameters.size() > FINAL_ZERO) {

					//                  BEGIN ADD: V3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId, Min, Max Values of Parameter and ProductParameterValues
					bProductDetail = objGetPriceSettingId(bProductDetail,
							vctAllBillableParameters, iNoOfOccurences,
							iIsDefault, iFlagForDate);

					if (null != bProductDetail.lPriceSettingID) {
						lPriceSettingID = bProductDetail.lPriceSettingID;
					} else {
						lPriceSettingID = Long.valueOf(0);
					}

					//                  END ADD: V 3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters

					//                  BEGIN DELETE: V3.10
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId, Min, Max Values of Parameter and ProductParameterValues

					/*
					 if (!bConnect) //If the Connection is made
					 {
					 bConnect        =       makeAFEConnection();
					 }

					 ResultSet rsGetCustDetails      = null; // Making an Object of the ResultSet
					 strSql.setLength(0); //Initialising

					 //                   Making the Querry Statement
					 strSql.append("SELECT A.PRICESETTINGID FROM PARAMETERSETTING A ");

					 //                  for each  record in the vector of vctAllBillableParameters Records
					 for(int iCounter = FINAL_ZERO; iCounter < vctAllBillableParameters.size(); iCounter++)
					 {
					 if(iCounter == FINAL_ZERO)
					 strSql.append(" WHERE ");
					 else
					 strSql.append(" OR ");

					 strSql.append(" ( A.PRODUCTPARAMETERID = ").append(((Vector)vctAllBillableParameters.elementAt(iCounter)).elementAt(FINAL_ZERO));
					 strSql.append(" AND A.PARAMETERSETTINGVALUE = '").append(((Vector)vctAllBillableParameters.elementAt(iCounter)).elementAt(FINAL_ONE)).append("' ");
					 strSql.append(" AND A.OBSOLETE = ").append(FINAL_ZERO).append(" ) ");
					 }

					 strSql.append(" HAVING COUNT(*) = ").append(vctAllBillableParameters.size());
					 strSql.append(" AND COUNT(*) = ").append(" (SELECT COUNT(*) FROM PARAMETERSETTING B WHERE  B.PRICESETTINGID     = A.PRICESETTINGID AND B.OBSOLETE = ").append(FINAL_ZERO).append(" ) ");
					 strSql.append(" GROUP BY PRICESETTINGID ");

					 //                   Firing the Querry and taking the Result as a ResultSet
					 rsGetCustDetails = gConnectAfe.rsQuery(strSql.toString());

					 if (null != rsGetCustDetails)
					 {
					 if (rsGetCustDetails.next())
					 {
					 lPriceSettingID =       Long.valueOf(rsGetCustDetails.getLong("PRICESETTINGID"));
					 }
					 else
					 {
					 lPriceSettingID =       Long.valueOf(0);
					 }
					 }
					 else
					 {
					 lPriceSettingID =       Long.valueOf(0);
					 }

					 //                  END DELETE: V3.10
					 //                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					 */
				} else {
					PriceSettingRow priceSettingRow = null; // Initializing the Object Class for the CustomerProduct table

					if (null == priceSettingTable) {
						priceSettingTable = (PriceSetting) teleSessionMgr
								.getMasterTable("PRICESETTING"); // Getting the CustomerProduct table from the session
					}

					Vector vctpriceSettingRow = null;

					//                  BEGIN MODIFY : V3.10
					//                  Modified Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId

					//                  vctpriceSettingRow      =       priceSettingTable.vctSearchByProductIDandObsolete(ProductID.longValue(), 0);
					Vector vctPSRows = null;

					if (iIsDefault == 1) {
						priceSettingRow = priceSettingTable
								.psrSearchByProductIDObsoleteandIsDefaultandDate(
										bProductDetail.lProductID.longValue(),
										FINAL_ZERO, iIsDefault, dtDateCheck);

						if (null != priceSettingRow) {
							lPriceSettingID = Long.valueOf(
									priceSettingRow.lPriceSettingID);
						} else {
							lPriceSettingID = Long.valueOf(0);
						}
					} else {
						vctpriceSettingRow = priceSettingTable
								.vctSearchByProductIDandOptionProductIDandDate(
										bProductDetail.lProductID.longValue(),
										bProductDetail.lOptionProductID
												.longValue(), FINAL_ZERO,
										dtDateCheck);

						if ((null != vctpriceSettingRow)
								&& (vctpriceSettingRow.size() == FINAL_ONE))

						//                      END MODIFY : V3.10
						//                      Modified Code for fixing DEFECT id 70, Obsolete Masters
						{
							lPriceSettingID = Long.valueOf(
									((PriceSettingRow) vctpriceSettingRow
											.elementAt(FINAL_ZERO)).lPriceSettingID);
						}

						//                      BEGIN ADD: V3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						//                      Taken Price Setting Id depending on OptionProductId
						else if ((null != vctpriceSettingRow)
								&& (vctpriceSettingRow.size() == FINAL_ZERO)) {
							vctpriceSettingRow = priceSettingTable
									.vctSearchByProductIDandOptionProductIDandDate(
											bProductDetail.lProductID
													.longValue(), FINAL_ZERO,
											FINAL_ZERO, dtDateCheck);

							if ((null != vctpriceSettingRow)
									&& (vctpriceSettingRow.size() == FINAL_ONE)) {
								lPriceSettingID = Long.valueOf(
										((PriceSettingRow) vctpriceSettingRow
												.elementAt(FINAL_ZERO)).lPriceSettingID);
							} else {
								iGoAhead = 1;
								iTakeOpProdAsNull = 1;
							}
						}

						//                      END ADD: V3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						else if ((null != vctpriceSettingRow)
								&& (vctpriceSettingRow.size() > FINAL_ONE))

						//                      BEGIN ADD: V3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						//                      Taken Price Setting Id depending on OptionProductId
						{
							iGoAhead = 1;
							iTakeOpProdAsNull = 0;
						} else {
							iGoAhead = 1;
							iTakeOpProdAsNull = 1;
						}

						//                      END ADD: V3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters

						//                      BEGIN DELETE: V 3.10
						//                      Deleted Code for fixing DEFECT id 70, Obsolete Masters
						//                      Deleted to check for PriceSetting with OptionProductId as Null if we don't get any record with OptionProduct
						//                                                    lPriceSettingID =       Long.valueOf(0);
						//                      END DELETE: V 3.10
						//                      Deleted Code for fixing DEFECT id 70, Obsolete Masters
						//                      BEGIN ADD: V3.10
						//                      Deleted Code for fixing DEFECT id 70, Obsolete Masters
						//                      Added Code to check for PriceSetting with OptionProductId as Null if we don't get any record with OptionProduct
						if (iGoAhead == 1) {
							if (iTakeOpProdAsNull == 1) {
								vctPSRows = priceSettingTable
										.vctSearchByProductIDOptionProductIDandMinMaxandDate(
												bProductDetail.lProductID
														.longValue(),
												FINAL_ZERO, FINAL_ZERO,
												iNoOfOccurences, dtDateCheck);
							} else {
								vctPSRows = priceSettingTable
										.vctSearchByProductIDOptionProductIDandMinMaxandDate(
												bProductDetail.lProductID
														.longValue(),
												bProductDetail.lOptionProductID
														.longValue(),
												FINAL_ZERO, iNoOfOccurences,
												dtDateCheck);
							}

							if ((null != vctPSRows) && (1 < vctPSRows.size())) {
								if (iTakeOpProdAsNull == 1) {
									vctPSRows = priceSettingTable
											.vctSearchByProductIDOptionProductIDandMinMaxandIsDefaultandDate(
													bProductDetail.lProductID
															.longValue(),
													FINAL_ZERO, FINAL_ZERO,
													iNoOfOccurences,
													FINAL_ZERO, dtDateCheck);
								} else {
									vctPSRows = priceSettingTable
											.vctSearchByProductIDOptionProductIDandMinMaxandIsDefaultandDate(
													bProductDetail.lProductID
															.longValue(),
													bProductDetail.lOptionProductID
															.longValue(),
													FINAL_ZERO,
													iNoOfOccurences,
													FINAL_ZERO, dtDateCheck);
								}

								if ((null != vctPSRows)
										&& (1 <= vctPSRows.size())) {
									priceSettingRow = (PriceSettingRow) vctPSRows
											.elementAt(FINAL_ZERO);
									lPriceSettingID = Long.valueOf(
											priceSettingRow.lPriceSettingID);
								} else {
									lPriceSettingID = Long.valueOf(0);
								}
							} else if ((null != vctPSRows)
									&& (1 == vctPSRows.size())) {
								priceSettingRow = (PriceSettingRow) vctPSRows
										.elementAt(FINAL_ZERO);
								lPriceSettingID = Long.valueOf(
										priceSettingRow.lPriceSettingID);
							} else {
								lPriceSettingID = Long.valueOf(0);
							}
						}

						//                      END ADD: V3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
					}
				}
			} else {
				PriceSettingRow priceSettingRow = null; // Initializing the Object Class for the CustomerProduct table

				if (null == priceSettingTable) {
					priceSettingTable = (PriceSetting) teleSessionMgr
							.getMasterTable("PRICESETTING"); // Getting the CustomerProduct table from the session
				}

				Vector vctpriceSettingRow = null;

				//              BEGIN DELETE: V3.10
				//              Added Code for fixing DEFECT id 70, Obsolete Masters
				//              Taken Price Setting Id depending on OptionProductId
				//                                            vctpriceSettingRow      =       priceSettingTable.vctSearchByProductIDandObsolete(ProductID.longValue(), 0);
				//              END DELETE: V 3.10
				//              Added Code for fixing DEFECT id 70, Obsolete Masters

				//              BEGIN ADD: V 3.10
				//              Added Code for fixing DEFECT id 70, Obsolete Masters
				//              Taken Price Setting Id depending on OptionProductId
				Vector vctPSRows = null;

				if (iIsDefault == 1) {
					priceSettingRow = priceSettingTable
							.psrSearchByProductIDObsoleteandIsDefaultandDate(
									bProductDetail.lProductID.longValue(),
									FINAL_ZERO, iIsDefault, dtDateCheck);

					if (null != priceSettingRow) {
						lPriceSettingID = Long.valueOf(
								priceSettingRow.lPriceSettingID);
					} else {
						lPriceSettingID = Long.valueOf(0);
					}
				} else {

					//                  BEGIN ADD V5.89A
					iGoAhead = 0;
					iTakeOpProdAsNull = 0;

					//                  END ADD V5.89A
					vctpriceSettingRow = priceSettingTable
							.vctSearchByProductIDandOptionProductIDandDate(
									bProductDetail.lProductID.longValue(),
									bProductDetail.lOptionProductID.longValue(),
									FINAL_ZERO, dtDateCheck);

					if ((null != vctpriceSettingRow)
							&& (vctpriceSettingRow.size() == FINAL_ONE))

					//                  END ADD: V3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					{
						lPriceSettingID = Long.valueOf(
								((PriceSettingRow) vctpriceSettingRow
										.elementAt(FINAL_ZERO)).lPriceSettingID);
					}

					//                  BEGIN ADD: V3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId
					else if ((null != vctpriceSettingRow)
							&& (vctpriceSettingRow.size() == FINAL_ZERO)) {
						vctpriceSettingRow = priceSettingTable
								.vctSearchByProductIDandOptionProductIDandDate(
										bProductDetail.lProductID.longValue(),
										FINAL_ZERO, FINAL_ZERO, dtDateCheck);

						if ((null != vctpriceSettingRow)
								&& (vctpriceSettingRow.size() == FINAL_ONE)) {
							lPriceSettingID = Long.valueOf(
									((PriceSettingRow) vctpriceSettingRow
											.elementAt(FINAL_ZERO)).lPriceSettingID);
						} else {
							iGoAhead = 1;
							iTakeOpProdAsNull = 1;
						}
					}

					//                  END ADD: V3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					else if ((null != vctpriceSettingRow)
							&& (vctpriceSettingRow.size() > FINAL_ONE))

					//                  BEGIN ADD: V3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId
					{
						iGoAhead = 1;
						iTakeOpProdAsNull = 0;
					} else {
						iGoAhead = 1;
						iTakeOpProdAsNull = 1;
					}

					//                  END ADD: V3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters

					//                  BEGIN DELETE: V3.10
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					//                  Deleted to check for PriceSetting with OptionProductId as Null if we don't get any record with OptionProduct
					//                                                lPriceSettingID =       Long.valueOf(0);
					//                  END DELETE: V3.10
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					//                  BEGIN ADD: V3.10
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					//                  Added Code to check for PriceSetting with OptionProductId as Null if we don't get any record with OptionProduct
					if (iGoAhead == 1) {
						if (iTakeOpProdAsNull == 1) {
							vctPSRows = priceSettingTable
									.vctSearchByProductIDOptionProductIDandMinMaxandDate(
											bProductDetail.lProductID
													.longValue(), FINAL_ZERO,
											FINAL_ZERO, iNoOfOccurences,
											dtDateCheck);
						} else {
							vctPSRows = priceSettingTable
									.vctSearchByProductIDOptionProductIDandMinMaxandDate(
											bProductDetail.lProductID
													.longValue(),
											bProductDetail.lOptionProductID
													.longValue(), FINAL_ZERO,
											iNoOfOccurences, dtDateCheck);
						}

						if ((null != vctPSRows) && (1 < vctPSRows.size())) {
							if (iTakeOpProdAsNull == 1) {
								vctPSRows = priceSettingTable
										.vctSearchByProductIDOptionProductIDandMinMaxandIsDefaultandDate(
												bProductDetail.lProductID
														.longValue(),
												FINAL_ZERO, FINAL_ZERO,
												iNoOfOccurences, FINAL_ZERO,
												dtDateCheck);
							} else {
								vctPSRows = priceSettingTable
										.vctSearchByProductIDOptionProductIDandMinMaxandIsDefaultandDate(
												bProductDetail.lProductID
														.longValue(),
												bProductDetail.lOptionProductID
														.longValue(),
												FINAL_ZERO, iNoOfOccurences,
												FINAL_ZERO, dtDateCheck);
							}

							if ((null != vctPSRows) && (1 <= vctPSRows.size())) {
								priceSettingRow = (PriceSettingRow) vctPSRows
										.elementAt(FINAL_ZERO);
								lPriceSettingID = Long.valueOf(
										priceSettingRow.lPriceSettingID);
							} else {
								lPriceSettingID = Long.valueOf(0);
							}
						} else if ((null != vctPSRows)
								&& (1 == vctPSRows.size())) {
							priceSettingRow = (PriceSettingRow) vctPSRows
									.elementAt(FINAL_ZERO);
							lPriceSettingID = Long.valueOf(
									priceSettingRow.lPriceSettingID);
						} else {
							lPriceSettingID = Long.valueOf(0);
						}
					}

					//                  END ADD: V3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
				}
			}

			// Begin DEL v9.01d
			// if (GAfePropertyLoader.DEBUG) {

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println(" In middle of fncInternalForPSIDandPrice Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			// lStart = System.currentTimeMillis();
			// }
			// End DEL v9.01d
			if (FINAL_ZERO != lPriceSettingID.longValue()) {

				// BEGIN ADD Supriya
				// Check if the price setting Id is to be picked for ATV Single Product
				try {
					if (bProductDetail.lProductID.longValue() == GAfeDescription.PRODUCT_SINGLE) {
						GLogger.chkpt("Product is ATV Single");

						// Get the Address Id of the productline from session
						Object obj1 = teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct);

						if (null != obj1) {
							GLogger.chkpt("Role object found in session");

							BProductRole objBProductRole = (BProductRole) obj1;

							GLogger.chkpt("Selected Address Id :"
									+ objBProductRole.lAddressID);
							GLogger.chkpt("objBProductRole:" + objBProductRole);

							Long lngAddressId = null;
							Long lngCustomerId = null;
							BProductRoleDetail objProductRoleDetail = null;

							if (null != objBProductRole) {
								GLogger.chkpt("objBProductRole is not null");
								lngAddressId = objBProductRole.lAddressID;
								GLogger.chkpt("objBProductRole.lAddressID:"
										+ objBProductRole.lAddressID);

								// if(null != lngAddressId)
								// {
								if (null != objBProductRole.vctProductRole) {
									for (int iCounter = 0; iCounter < objBProductRole.vctProductRole
											.size(); iCounter++) {
										objProductRoleDetail = (BProductRoleDetail) objBProductRole.vctProductRole
												.elementAt(iCounter);

										if (null != objProductRoleDetail) {
											if ((null != objProductRoleDetail.lRoleTypeID)
													&& (GAfeDescription.ROLETYPE_USER == objProductRoleDetail.lRoleTypeID
															.longValue())) {
												GLogger
														.chkpt("objProductRoleDetail.lAddressID:"
																+ objProductRoleDetail.lAddressID);
												GLogger
														.chkpt("objProductRoleDetail.lCustomerID:"
																+ objProductRoleDetail.lCustomerID);
												lngAddressId = objProductRoleDetail.lAddressID;
												lngCustomerId = objProductRoleDetail.lCustomerID;
											}
										}
									}
								}

								// }
							}

							// Begin Modify v9.01b get the region instead of Owner

							// Modified for cached implementation of the method (Reason: slow performance of product movement in upper and lower grid)
							// long lRegionId = lProduct_ext.lGetRegionIdentifierForAddressId(lngAddressId.longValue());
							long lRegionId = lGetRegionIdentifierForAddressId(
									lngAddressId.longValue(), true);

							// long lOwnerId = lGetNodeOwnerByAddressId(lngAddressId.longValue(),true);
							GLogger.chkpt("Retrieved Region id:" + lRegionId);

							String strZip = null;
							long lPriceSettingId = -1;
							String[] arrAddressDetails = RProduct
									.arrGetAddressDetail(lngAddressId
											.longValue(),
											(int) bSession.lLanguageId);

							if (null != arrAddressDetails) {
								strZip = arrAddressDetails[5];
							}

							// End Modify v9.01b
							// Begin Modify v9.01b first find whether social is selected or not
							boolean isSocialTarief = isSocialTarief(bProductDetail.vctParameters);
							ArrayList alstCategorieTarief = LProduct_ext
									.getCategorieAndTarief(strZip,
											isSocialTarief, lRegionId);
							String strCategorie = null;

							// String strCategorie = strGetCategorie(strZip,strCountryCode,false,lOwnerId);

							// if("UPC Leuven".equalsIgnoreCase(strCategorie) || "UPC Bxl".equalsIgnoreCase(strCategorie))
							if (GAfeDescription.bCheckInList(lRegionId,
									GAfeConstants.REGION_UPC)
									|| GAfeDescription.bCheckInList(lRegionId,
											GAfeConstants.REGION_INTERKABEL))

							// End Modify v9.01b
							{
								GLogger
										.chkpt("Retrieved strCategorie is for Leuven/bxl or Interkabel");

								// Begin Add v9.01a  put the tarief
								strCategorie = (String) alstCategorieTarief
										.get(GAfeConstants.ONE);

								// End Add v9.01a
								// Price Setting Id to be overwritten with specific value
								// Check if Social Tariff is applicable, if yes change the values.

								// Begin delete v9.01a deleting as code was just to check if the selected tarief is social or not.
								// vctParameters = bProductDetail.vctParameters;

								/*
								 * if(null != vctParameters)
								 * {
								 *   for (int iCountForParam =0 ; iCountForParam < vctParameters.size();iCountForParam++)
								 *   {
								 *       objTempBProductParameter = (BProductParameter)vctParameters.elementAt(iCountForParam);
								 *       if(objTempBProductParameter.lParameterID.longValue() == GAfeDescription.PRODUCTPARAMETER_TARIEF)
								 *       {
								 *           objBProductParameter = objTempBProductParameter;
								 *           break;
								 *       }
								 *   }
								 *   if (null != objBProductParameter)
								 *   {
								 *       if (null != objBProductParameter.vctParameterValues)
								 *       {
								 *           for(int iCount1=0; iCount1 < objBProductParameter.vctParameterValues.size();iCount1++)
								 *           {
								 *               vctTemp = (Vector) objBProductParameter.vctParameterValues.elementAt(iCount1);
								 *               if(null !=vctTemp)
								 *               {
								 *                  if((((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL) ||
								 *                          ((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL_UPC_LEUVEN) ||
								 *                          ((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL_UPC_BXL) ) && ((new Integer(vctTemp.elementAt(1)+""))).intValue() == 1 )
								 *                  {
								 *                      if("UPC Leuven".equalsIgnoreCase(strCategorie))
								 *                      {
								 *                          strCategorie = GAfeDescription.TARIEF_SOCIAL_UPC_LEUVEN;
								 *                      }
								 *                      else if("UPC Bxl".equalsIgnoreCase(strCategorie))
								 *                      {
								 *                          strCategorie = GAfeDescription.TARIEF_SOCIAL_UPC_BXL;
								 *                      }
								 *                  }
								 *               }
								 *           }
								 *       }
								 *   }
								 * }
								 */

								// End delete v9.01a
								// Compute if VAT is applicable
								CustomerLink customerLink = null;
								CustomerLinkRow customerLinkRow = null;
								boolean bVatApplicable = false;

								customerLink = (CustomerLink) GConnectMemoryDB
										.getTable(GAfeConstants.CUSTOMERLINK);

								Vector vctCustomerLink = null;

								vctCustomerLink = customerLink
										.clrSearchByCustIDAddIDandObsolete(
												lngCustomerId.longValue(),
												lngAddressId.longValue(), 0);

								if ((null != vctCustomerLink)
										&& (0 != vctCustomerLink.size())) {
									ArrayList arrActiveDTVLine = null;
									ArrayList arrATVLines = null;

									customerLinkRow = (CustomerLinkRow) vctCustomerLink
											.elementAt(0);
									arrActiveDTVLine = arrGetLineWithActivationDateOnCustomerLinkOfPackage(
											customerLinkRow.lCustomerLinkID,
											GAfeDescription.PRODUCT_IDTV, true,
											GAfeConstants.SingleDTVPackage);
									GLogger.chkpt("arrActiveDTVLine:"
											+ arrActiveDTVLine);

									int iNoOfActiveDTVLines = 0;
									int iNoOfATVLines = 0;

									if (null != arrActiveDTVLine) {
										iNoOfActiveDTVLines = arrActiveDTVLine
												.size();
									}

									GLogger.chkpt("iNoOfActiveDTVLines:"
											+ iNoOfActiveDTVLines);

									// Get all Lines of ATV
									arrATVLines = arrGetLinesOfPackage(
											RProduct
													.arrGetCPLOnCustLinkId(
															customerLinkRow.lCustomerLinkID,
															GAfeDescription.PRODUCT_ANALOGTV,
															0, 1),
											GAfeConstants.SingleATVPackage);
									GLogger.chkpt("arrATVLines:" + arrATVLines);

									if (null != arrATVLines) {
										iNoOfATVLines = arrATVLines.size();
									}

									GLogger.chkpt("iNoOfATVLines:"
											+ iNoOfATVLines);
									bVatApplicable = ((iNoOfATVLines > 0) && (iNoOfActiveDTVLines >= iNoOfATVLines));
									GLogger.chkpt("bVatApplicable:"
											+ bVatApplicable);
								}

								// For Normal Tarief Categorie and Tarief Values are same.
								lPriceSettingId = lGetPriceSettingIdByTariefAndVat(
										strCategorie, bVatApplicable);
							}

							GLogger.chkpt("lPriceSettingId:" + lPriceSettingId);

							if (-1 != lPriceSettingId) {

								// Valid value for Price Setting Id computed
								bProductDetail.lPriceSettingID = Long.valueOf(
										lPriceSettingId);
								lPriceSettingID = Long.valueOf(lPriceSettingId);
							}
						} else {

							// Move Order flow

							/**
							 * In this case, Tarief is computed already and can be picked from session
							 */
							long lPriceSettingIdForOrder = -1;
							Object obj = teleSessionMgr
									.getValue("PriceSetting_Tarief");

							if (null != obj) {
								String strTarief = (String) obj;

								GLogger
										.chkpt("PriceSetting_Tarief picked from session:"
												+ strTarief);

								if (-1 != strTarief.indexOf("UPC")) {
									GLogger.chkpt("UPC Tarief checks......");

									/**
									 * Other than tarief VAT Applicability needs to be computed.
									 * For this total number of ATV lines and total number of DTV lines
									 * at the destination address is required.
									 */

									// Get the Business Object containing the Move Order details from session.
									BOrderMove objBOrderMove = (BOrderMove) teleSessionMgr
											.getValue(GAfeConstants.BORDERMOVE_AFEORDER);
									BMoveOrderLineDetails objBMoveOrderLineDetails = null;

									if (null != objBOrderMove) {
										int iATVLineCount = 0;
										int iDTVLineCount = 0;
										boolean bVatApplicableForOrder = false;

										GLogger
												.chkpt("Checking for Total number of ATV and DTV Lines at destination address:");

										Vector vctLineDetails = objBOrderMove.vctBMoveOrderLineDetails;

										if (null != vctLineDetails) {
											GLogger.chkpt("vctLineDetails:"
													+ vctLineDetails);

											for (int iLineCount = 0; iLineCount < vctLineDetails
													.size(); iLineCount++) {
												objBMoveOrderLineDetails = (BMoveOrderLineDetails) vctLineDetails
														.get(iLineCount);

												if (objBMoveOrderLineDetails
														.lGetProductId() == GAfeDescription.PRODUCT_ANALOGTV) {
													iATVLineCount++;
												}

												if (objBMoveOrderLineDetails
														.lGetProductId() == GAfeDescription.PRODUCT_IDTV) {
													iDTVLineCount++;
												}
											}

											GLogger.chkpt("iATVLineCount :"
													+ iATVLineCount);
											GLogger.chkpt("iDTVLineCount :"
													+ iDTVLineCount);
											bVatApplicableForOrder = ((iATVLineCount > 0) &&(iDTVLineCount > iATVLineCount));
											GLogger
													.chkpt("bVatApplicableForOrder :"
															+ bVatApplicableForOrder);
										}

										/**
										 * Compute Price Setting Id based on VAT Applicable and Tarief
										 */
										lPriceSettingIdForOrder = lGetPriceSettingIdByTariefAndVat(
												strTarief,
												bVatApplicableForOrder);
										GLogger
												.chkpt("lPriceSettingIdForOrder :"
														+ lPriceSettingIdForOrder);

										if (-1 != lPriceSettingIdForOrder) {

											// Valid value for Price Setting Id computed
											bProductDetail.lPriceSettingID = Long.valueOf(
													lPriceSettingIdForOrder);
										}
									}
								}
							}
						}
					}
				} catch (Exception e) {
					GLogger.logException(e);
				}

				// END ADD Supriya
				// Begin DEL v9.01d
				// ChargeRow chargeRow = null;                                                                                   // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				if (null != chargeTable) {
					Vector vctobjCRInternal = new Vector();

					// Begin Delete V5.96j
					// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(lPriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_USAGE"), PaymentMethodUsage.longValue());
					// End Delete V5.96j
					// Begin Add V5.96j
					GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
							"ProductID = " + bProductDetail.lProductID);
					GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
							"lPriceSettingID = " + lPriceSettingID);
					GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
							"CurrencyID = " + CurrencyID);
					GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
							"GAfeDescription.lGetTypeId(CHARGETYPE_USAGE) = "
									+ GAfeDescription
											.lGetTypeId("CHARGETYPE_USAGE"));
					GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
							"PaymentMethodUsage = " + PaymentMethodUsage);
					GLogger.debug(CLASS_NAME, "fncInternalForPSIDandPrice",
							"lRecurringTypeID = " + lRecurringTypeID);
					vctobjCRInternal = chargeTable
							.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
									lPriceSettingID.longValue(), CurrencyID
											.longValue(), FINAL_ZERO,
									GAfeDescription
											.lGetTypeId("CHARGETYPE_USAGE"),
									PaymentMethodUsage.longValue(),
									lRecurringTypeID.longValue());

					// End Add V5.96j
					if (null != vctobjCRInternal) {
						if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).lVatID) {
							VatRow vatRow = null; // Initializing the Object Class for the Vat table

							if (null == vatTable) {
								vatTable = (Vat) teleSessionMgr
										.getMasterTable("VAT"); // Getting the Vat table from the session
							}

							vatRow = (VatRow) vatTable
									.vrSearchByVatIDandObsolete(
											((ChargeRow) (vctobjCRInternal
													.elementAt(FINAL_ZERO))).lVatID,
											FINAL_ZERO);

							if (null != vatRow) {
								dAddChargeAmount = vatRow.dVatAmount;
							}

							dChargeAmount = dChargeAmount
									+ ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount;
							dChargeAmount = ((ChargeRow) (vctobjCRInternal
									.elementAt(FINAL_ZERO))).dChargeAmount
									+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount) / 100);
						} // end of the if loop

						dSum = dSum + dChargeAmount;
					} // end of the if loop
				}

				// Begin DEL v9.01d
				// if (GAfePropertyLoader.DEBUG) {

				/* BEGIN DELETE VER: 5.59a */

				// System.out.println(" In middle 2 fncInternalForPSIDandPrice Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
				// lStart = System.currentTimeMillis();
				// }
				// chargeRow = null;                                                                                     // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				// BEGIN DELETE V6.02d
				// if (null != chargeTable) {
				// END DELETE V6.02d
				// BEGIN MODIFY V6.05a
				// BEGIN ADD V6.02d
				if (null != chargeTable) {

					// END ADD V6.02d
					// END MODIFY V6.05a
					Vector vctobjCRInternal = new Vector();

					// Begin Delete V5.96j
					// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(lPriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_RC"), PaymentMethodRC.longValue());
					// End Delete V5.96j
					// Begin Add V5.96j
					vctobjCRInternal = chargeTable
							.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
									lPriceSettingID.longValue(),
									CurrencyID.longValue(),
									FINAL_ZERO,
									GAfeDescription.lGetTypeId(string_CHARGETYPE_RC),
									PaymentMethodRC.longValue(),
									lRecurringTypeID.longValue());

					// End Add V5.96j
					if (null != vctobjCRInternal) {
						if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).lVatID) {
							VatRow vatRow = null; // Initializing the Object Class for the Vat table

							if (null == vatTable) {
								vatTable = (Vat) teleSessionMgr
										.getMasterTable("VAT"); // Getting the Vat table from the session
							}

							vatRow = (VatRow) vatTable
									.vrSearchByVatIDandObsolete(
											((ChargeRow) (vctobjCRInternal
													.elementAt(FINAL_ZERO))).lVatID,
											FINAL_ZERO);

							if (null != vatRow) {
								dAddChargeAmount = vatRow.dVatAmount;
							}

							dChargeAmount = dChargeAmount
									+ ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount;
							dChargeAmount = ((ChargeRow) (vctobjCRInternal
									.elementAt(FINAL_ZERO))).dChargeAmount
									+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount) / 100);
						} // end of the if loop

						dSum = dSum + dChargeAmount;

						// BEGIN ADD ver 6.05c
						RecurringTypeRow recurringTypeRow = null; // Initializing the Object Class for the Vat table

						if (null == recurringTypeTable) {
							recurringTypeTable = (RecurringType) teleSessionMgr
									.getMasterTable("RECURRINGTYPE"); // Getting the Vat table from the session
						}

						recurringTypeRow = recurringTypeTable
								.rtrSearchByRecurringTypeIDandObsolete(
										lRecurringTypeID.longValue(),
										FINAL_ZERO);

						if (null != recurringTypeRow) {
							strPeriodicity = recurringTypeRow.strRecurringTypeDescription;
						}

						// END ADD ver 6.05c
					} // end of the if loop
				}

				// Begin DEL v9.01d
				// chargeRow = null;                                                                                     // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				// BEGIN DELETE V6.02d
				// if (null != chargeTable) {
				// END DELETE V6.02d
				// BEGIN MODIFY V6.05a
				// BEGIN ADD V6.02d
				if (null != chargeTable) {

					// END ADD V6.02d
					// END MODIFY V6.05a
					Vector vctobjCRInternal = new Vector();

					// Begin Delete V5.96j
					// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(lPriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_NRC"), PaymentMethodNRC.longValue());
					// End Delete V5.96j
					// BEGIN DELETE V6.02d
					// Begin Add V5.96j
					// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(lPriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_NRC"), PaymentMethodNRC.longValue(),lRecurringTypeID.longValue());
					// End Add V5.96j
					// END DELETE V6.02d
					// BEGIN ADD V6.02d
					vctobjCRInternal = chargeTable
							.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
									lPriceSettingID.longValue(), CurrencyID
											.longValue(), FINAL_ZERO,
									GAfeDescription
											.lGetTypeId(string_CHARGETYPE_NRC),
									PaymentMethodNRC.longValue(), 0);

					// END ADD V6.02d
					if (null != vctobjCRInternal) {
						if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).lVatID) {
							VatRow vatRow = null; // Initializing the Object Class for the Vat table

							if (null == vatTable) {
								vatTable = (Vat) teleSessionMgr
										.getMasterTable("VAT"); // Getting the Vat table from the session
							}

							vatRow = (VatRow) vatTable
									.vrSearchByVatIDandObsolete(
											((ChargeRow) (vctobjCRInternal
													.elementAt(FINAL_ZERO))).lVatID,
											FINAL_ZERO);

							if (null != vatRow) {
								dAddChargeAmount = vatRow.dVatAmount;
							}

							dChargeAmount = dChargeAmount
									+ ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount;
							dChargeAmount = ((ChargeRow) (vctobjCRInternal
									.elementAt(FINAL_ZERO))).dChargeAmount
									+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount) / 100);
						} // end of the if loop

						dSum = dSum + dChargeAmount;

						// Begin Delete V5.96j
						// if (FINAL_ZERO != (((ChargeRow) (vctobjCRInternal.elementAt(FINAL_ZERO))).lRecurringTypeID)) {
						// lRecurringTypeID = Long.valueOf(((ChargeRow) (vctobjCRInternal.elementAt(FINAL_ZERO))).lRecurringTypeID);
						// End Delete V5.96j
						// BEGIN DELETE V6.02d

						/*
						 *    RecurringTypeRow recurringTypeRow = null;                                                                   // Initializing the Object Class for the Vat table
						 *
						 *    if (null == recurringTypeTable) {
						 *        recurringTypeTable = (RecurringType) teleSessionMgr.getMasterTable("RECURRINGTYPE");    // Getting the Vat table from the session
						 *    }
						 *
						 *    recurringTypeRow = (RecurringTypeRow) recurringTypeTable.rtrSearchByRecurringTypeIDandObsolete(lRecurringTypeID.longValue(), FINAL_ZERO);
						 *
						 *    if (null != recurringTypeRow) {
						 *        strPeriodicity = recurringTypeRow.strRecurringTypeDescription;
						 *    }
						 */

						// END DELETE V6.02d
						// Begin Delete V5.96j
						// }//end of the if loop
						// End Delete V5.96j
					} // end of the if loop
				}

				// BEGIN ADD V6.02d
				// BEGIN DELETE ver 6.05c

				/*
				 * RecurringTypeRow recurringTypeRow = null;                                                                       // Initializing the Object Class for the Vat table
				 *
				 *               if (null == recurringTypeTable) {
				 *                       recurringTypeTable = (RecurringType) teleSessionMgr.getMasterTable("RECURRINGTYPE");    // Getting the Vat table from the session
				 *               }
				 *
				 *               recurringTypeRow = (RecurringTypeRow) recurringTypeTable.rtrSearchByRecurringTypeIDandObsolete(lRecurringTypeID.longValue(), FINAL_ZERO);
				 *
				 *               if (null != recurringTypeRow) {
				 *                       strPeriodicity = recurringTypeRow.strRecurringTypeDescription;
				 *                       }
				 */

				// END DELETE ver 6.05c
				// END ADD V6.02d
				if (strPeriodicity.length() == FINAL_ZERO) {
					bProductDetail.strPeriodicity = "";
				} else {
					bProductDetail.strPeriodicity = strPeriodicity;
				}

				// Begin v9.01c Modify
				// String strDescForProp = "";
				// strDescForProp = "DECPLACES_CURRENCY_" + String.valueOf(CurrencyID);

				bProductDetail.dPrice = dSum;

				// bProductDetail.dPrice = dbValidateCharge(bProductDetail.dPrice, Integer.parseInt(GAfeDescription.strGetProperty(strDescForProp)));
				// End v9.01c Modify
			} else {
				bProductDetail.strPeriodicity = "";
				bProductDetail.dPrice = 0;
			}

			bProductDetail.lPriceSettingID = lPriceSettingID;

			//          BEGIN ADD : V3.10
			//          Added Print Statements.

			/* BEGIN DELETE VER: 5.59a */

			// if(GAfePropertyLoader.DEBUG)
			// {
			// System.out.println("After fncinternalpsid function for productid = " + bProductDetail.lProductID);
			// System.out.println("Pricesettingid  = " + bProductDetail.lPriceSettingID);
			// System.out.println("Calculated prices = " + bProductDetail.dPrice);
			// }
			/* END DELETE VER: 5.59a */

			//          END ADD : V3.10
		} catch (SQLException sqle) {
			if (GAfePropertyLoader.DEBUG) {
			//	sqle.printStackTrace(System.out);
				GLogger.logException(sqle);
			}

			AfeException afee = new AfeException("ERRCOM_00001", sqle
					.getMessage());

			throw afee;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		finally {
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				/* BEGIN DELETE VER: 5.59a */

				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println(" End of fncInternalForPSIDandPrice Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
				// }
				/* END DELETE VER: 5.59a */
			}
		}
	} // Closing Brace of the function

	/**
	 *  The Function is a highly importanct function it is declared as public as it is being accessed
	 *  by many of the other modules as well the fact of the matter is that it returns the default logic
	 *  string by converting it into a string in which the data is takien dynamically from the database
	 *  and also the original string. and then the final result is a mailid that is generated dynamically
	 *  from the data of the Customer. It is of Utmost importance that this ia a recursive function and
	 *  will call itself in certain conditions based on the Default Logic
	 *
	 *  @param          :       Long CustomerID, String strDefaultLogic, String strFinalString, int iStartFrom
	 *
	 *  @return         :       String  -       It Returns the final String of the Default Logic
	 */
	public String strGetDefaultLogic(Long CustomerID, String strDefaultLogic,
			String strFinalString, int iStartFrom) throws SQLException,
			Exception {
		String strTempDetail; // Local Varaible Declaration
		String strSubString1; // Local Varaible Declaration
		String strSubString2; // Local Varaible Declaration
		String strToReplace; // Local Varaible Declaration
		String strCustomerTable = string_CUSTOMER; // Local Variable Declaration for the Customer Table
		String strCustomerProfileTable = "CUSTOMERPROFILE"; // Local Variable Declaration for the CustomerProfile Table

		// Begin DEL v9.01d
		// String strCustDetail;                         //Local Variable Declaration
		// End DEL v9.01d
		int iPosition = 0; // Local Varaible Declaration
		int iLengthOfString = 0; // Local Varaible Declaration
		int iTempPosition; // Local Varaible Declaration
		int iTempPosition1; // Local Varaible Declaration
		int iStartingIndex = 0; // Local Varaible Declaration
		int iMorePosition = 0; // Local Varaible Declaration

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			strFinalString = strDefaultLogic;
			iLengthOfString = strDefaultLogic.length();
			iPosition = strDefaultLogic.indexOf("<", iStartFrom);

			if (-1 != iPosition) {
				strFinalString = strDefaultLogic.substring(iStartingIndex,
						iPosition);
				iTempPosition = strDefaultLogic.indexOf(".", iPosition);
				strSubString1 = strDefaultLogic.substring((iPosition + 1),
						(iTempPosition));
				iTempPosition1 = strDefaultLogic.indexOf(">", iTempPosition);
				strSubString2 = strDefaultLogic.substring((iTempPosition + 1),
						(iTempPosition1));

				String strReturnValueFC = "";
				String strReturnValueFCP = "";

				if ((strCustomerTable).equalsIgnoreCase(strSubString1)) {
					CustomerRow customerRow = null; // Initializing the Object Class for the Customer table

					customerTable = (Customer) teleSessionMgr
							.getTable(string_CUSTOMER); // Getting the Customer table from the session
					customerRow = (CustomerRow) customerTable
							.crSearchByCustID(CustomerID.longValue());

					if (null != customerRow) {
						strReturnValueFC = strGetConditionLogicStatus(
								strSubString2, customerRow);
					}
				} else if ((strCustomerProfileTable)
						.equalsIgnoreCase(strSubString1)) {
					CustomerProfileRow customerProfileRow = null;

					customerProfileTable = (CustomerProfile) teleSessionMgr
							.getTable("CUSTOMERPROFILE"); // Getting the Customer table from the session
					customerProfileRow = (CustomerProfileRow) customerProfileTable
							.cprSearchByCustID(CustomerID.longValue());

					if (null != customerProfileRow) {
						strReturnValueFCP = strGetConditionLogicStatus(
								strSubString2, customerProfileRow);
					}
				}

				if (null == strReturnValueFC) {
					strReturnValueFC = "";
				} // end of the if loop

				if (null == strReturnValueFCP) {
					strReturnValueFCP = "";
				} // end of the if loop

				strTempDetail = strReturnValueFC + strReturnValueFCP;
				strFinalString = strFinalString + strTempDetail;
				strToReplace = strDefaultLogic.substring((iTempPosition1 + 1),
						(iLengthOfString));
				strFinalString = strFinalString + strToReplace;
				strDefaultLogic = strFinalString;
				iMorePosition = strDefaultLogic.indexOf("<");

				if (-1 != iMorePosition) {
					strFinalString = strGetDefaultLogic(CustomerID,
							strDefaultLogic, strFinalString, iMorePosition);
				}
			} // end of the if Loop
		} catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		return strFinalString;
	}

	/**
	 *  The Function will get the data from database dynamically
	 *  that is dynamically from the table name generated and the
	 *  table field generated.
	 *
	 *  @param          :       String strFieldName, Object objTableName
	 *
	 *  @return         :       String  -       This function will return a string which is helpfull for the default logic
	 */
	protected String strGetConditionLogicStatus(String strFieldName,
			Object objTableName) throws Exception {

		// Begin DEL v9.01d
		// boolean bFlag = false;
		// End DEL v9.01d
		Class cTemp = null;
		String strReturnValue = null;
		Field[] fArray = null;
		int iCounter = 0;

		// Begin DEL v9.01d
		// final int FINAL_ONE = 1;
		// final int FINAL_ZERO = 0;
		// End DEL v9.01d

		try {
			cTemp = objTableName.getClass();
			fArray = cTemp.getDeclaredFields();

			for (iCounter = 0; iCounter < fArray.length; iCounter++) {
				if ((fArray[iCounter].getName().toUpperCase())
						.endsWith(strFieldName.toUpperCase())
						&& (fArray[iCounter].getName().length() - strFieldName
								.length()) <= 3) {

					// Begin DEL v9.01d
					// bFlag = true;
					// End DEL v9.01d
					try {
						try {
							strReturnValue = fArray[iCounter].get(objTableName)
									.toString();

							return strReturnValue;
						} catch (Exception e) {
							GLogger.logException(e);
						}
					} catch (Exception e) {
						GLogger.logException(e);
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return strReturnValue;
	}

	/**
	 *  DESCRIPTION :   The Function will is used to do all the validations that are there for selecting a product from
	 *                                  The upper Grid to the Lower Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetailUpper, BProductDetail bProductDetailLower, Long lProductID
	 *
	 *  @return         :       int     -       This function will return 1 only if the validation are successfull otherwise will either throw exception or return 0.
	 */
	public int iValidateSelect(BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetailUpper,
			BProductDetail bProductDetailLower, Long lProductID)
			throws Exception {

		// Begin DEL v9.01d
		// int iMinMand = 0;     //Local Varaible Declaration
		// End DEL v9.01d
		int iMaxMand = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		int iSecondCheck = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iSum = 0;                 //Local Varaible Declaration
		// End DEL v9.01d
		int iParentInstance = 0; // Local Varaible Declaration
		int iLevel = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d
		try {
			BProductDetail bProductDetail = null;

			iCheckGlobalForbiddenProduct(bProductDetailUpper,
					bProductDetailProperty.lCustomerProductLineID.longValue());

			Vector vctForbiddenProduct = null; // internal local vector

			if (null == forbiddenProductTable) {
				forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
						.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
			}

			if (null != forbiddenProductTable) {
				vctForbiddenProduct = forbiddenProductTable.vctGetAll();
			}

			if ((FINAL_ZERO != bProductDetailProperty.vctProductSelected.size())) {

				//              vctForbiddenProduct = (Vector)forbiddenProductTable.vctSearchByProductIDandObsolete(bProductDetailUpper.lProductID.longValue(),FINAL_ZERO);
				if (null != vctForbiddenProduct) {
					ForbiddenProductRow forbiddenProductRowTemp = null;

					for (int iCounter4 = FINAL_ZERO; iCounter4 < vctForbiddenProduct
							.size(); iCounter4++) {
						forbiddenProductRowTemp = (ForbiddenProductRow) vctForbiddenProduct
								.elementAt(iCounter4);

						if ((forbiddenProductRowTemp.lProductID == bProductDetailUpper.lProductID
								.longValue())
								&& (forbiddenProductRowTemp.iObsolete == FINAL_ZERO)) {
							for (int iCounter5 = FINAL_ZERO; iCounter5 < bProductDetailProperty.vctProductSelected
									.size(); iCounter5++) {
								bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
										.elementAt(iCounter5);

								if ((forbiddenProductRowTemp.lForbProductID == bProductDetail.lProductID
										.longValue())
										&& (FINAL_ONE == forbiddenProductRowTemp.iLevel)) {
									throw new AfeException("ERRAFE_00635");
								}
							}
						}
					}
				}
			}

			if (null != bProductDetailLower) {
				GLogger
				.chkpt("Test iValidateSelect bProductDetailLower.iLevel<" + bProductDetailLower.iLevel + ">bProductDetailUpper.iLevel <"+bProductDetailUpper.iLevel+">- FINAL_ONE<"+FINAL_ONE+">");
				if (!((bProductDetailLower.iLevel) == (bProductDetailUpper.iLevel - FINAL_ONE))) {
					throw new AfeException("ERRAFE_00505"); /* Error " Because of level mismatch you can not select this product" */
				} // end of the if loop
			} // end of the if loop

			// add for reconciliation rel5.2
			if (bProductDetailUpper.lProductID.longValue() == 621) // Modem Battery Pack
			{
				checkModemBatteryPack();
			}

			// add for reconciliation rel5.2
			OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			optionGroupRow = optionGroupTable
					.prSearchByOptionGroupIDandObsolete(
							(bProductDetailUpper.lOptionGroupID).longValue(),
							FINAL_ZERO);

			if (null != bProductDetailLower) {
				GLogger
				.chkpt("bProductDetailLower.lProductID.longValue()<" + bProductDetailLower.lProductID.longValue() + ">optionGroupRow.lProductID <"+optionGroupRow.lProductID+">");
				if (bProductDetailLower.lProductID.longValue() != optionGroupRow.lProductID) {
					throw new AfeException("ERRAFE_00506"); /* Error " You can not move selected product to the selected package" */
				} // end of the if loop
			} // end of the if loop

			if (null != optionGroupRow) {

				// Begin DEL v9.01d
				// iMinMand = optionGroupRow.iMinMandProducts;
				// End DEL v9.01d
				iMaxMand = optionGroupRow.iMaxMandProducts;
			} // end of the if loop

			if (null != bProductDetailLower) {
				iParentInstance = bProductDetailLower.iInstance;
				iLevel = bProductDetailLower.iLevel + FINAL_ONE;
				iCounter = iFindProductInVectorLevelParentInstanceandOptionGroupID(
						bProductDetailProperty.vctProductSelected, iLevel,
						iParentInstance, bProductDetailUpper.lOptionGroupID);

				if (iCounter < iMaxMand) {
					iSecondCheck = FINAL_ONE;
				} // end of the if loop
				else {
					throw new AfeException("ERRAFE_00507"); /* Maximum limit has reached for this OptionGroup */
				} // end of the else part of the if loop
			} // end of the if loop
			else {
				iSecondCheck = FINAL_ONE;
			}
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				/* BEGIN DELETE VER: 5.59a */

				// System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
				/* END DELETE VER: 5.59a */
			//	afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return iSecondCheck;
	}

	/**
	 *  DESCRIPTION :   The Function will find that a given product is there in the Vector of BO
	 *                                  that are passed to it.
	 *
	 *  @param          :       Vector vctFindProductInVector, int iLevel, int iParentInstance
	 *
	 *  @return         :       int     -       Returns a Integer
	 */
	protected int iFindProductInVectorLevelParentInstanceandOptionGroupID(
			Vector vctFindProductInVector, int iLevel, int iParentInstance,
			Long OptionGroupID) throws Exception {
		int iNumberOfTimesPID = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		// BEGIN Add v7.20d
		String strMailAlias = null;
		String strUrl = null;
		String strChelloMail = "@chello.";
		String strChelloUrl = "chello.";
		int iPosition = 0;
		int iPos = 0;
		BProductDetail bProductDetailMailBox = null;
		Long lTemp = Long.valueOf(0);
		boolean bFullgcMailAlias = false;
		boolean bDecrementCount = false;

		// END Add v7.20d
		iSizeOfVector = vctFindProductInVector.size();

		BProductDetail bProductDetail = null;

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			bProductDetail = (BProductDetail) vctFindProductInVector
					.elementAt(iCount);

			if ((iLevel == bProductDetail.iLevel)
					&& (iParentInstance == bProductDetail.iParentInstance)
					&& (OptionGroupID.longValue() == bProductDetail.lOptionGroupID
							.longValue())) {

				// BEGIN Add v7.20d
				if (bProductDetail.lProductID.longValue() == CDMConstants.PRODUCT_MAILALIAS) {
					for (int iReachMailBox = iCount; iReachMailBox > 0; iReachMailBox--) {
						bProductDetailMailBox = (BProductDetail) vctFindProductInVector
								.elementAt(iReachMailBox);

						if (bProductDetailMailBox.lProductID.longValue() == CDMConstants.PRODUCT_MAILBOX) {
							try {
								lTemp = Long
										.valueOf((String) (((Vector) ((Vector) ((BProductParameter) (bProductDetailMailBox.vctParameters
												.elementAt(3))).vctParameterValues)
												.elementAt(0)).get(0)));
								break;
							} catch (Exception nfe) //Sometime there is nothing at elementAt 3 and IndexOutOfBound exception is raised
							{
								lTemp = Long.valueOf(0);

								break;
							}
						}
					}

					if (lTemp.longValue() == 1) {
						strMailAlias = (String) (((Vector) ((Vector) ((BProductParameter) (bProductDetail.vctParameters
								.elementAt(0))).vctParameterValues)
								.elementAt(0)).get(0));

						if (null != strMailAlias) {
							iPos = strMailAlias.indexOf(strChelloMail);

							if (iPos != -1) {
								if (!bFullgcMailAlias
										&& (iNumberOfTimesPID == 0)) {
									bDecrementCount = true;

									// Let the first chello mail alias be counted.
								} else {

									// When there are both fullgc and chello mail aliases present
									// and if the first chello was counted then decrement the count by 1
									// in order to keep a count of only the fullgc mailaliases.
									if (bFullgcMailAlias && bDecrementCount) {
										iNumberOfTimesPID--;
										bDecrementCount = false;
									}

									continue;
								}
							} else {
								bFullgcMailAlias = true;
							}
						}
					}
				} else if (bProductDetail.lProductID.longValue() == CDMConstants.PRODUCT_URL) {
					strUrl = (String) (((Vector) ((Vector) ((BProductParameter) (bProductDetail.vctParameters
							.elementAt(2))).vctParameterValues).elementAt(0))
							.get(0));

					if (null != strUrl) {
						iPosition = strUrl.indexOf(strChelloUrl);

						if (iPosition != -1) {
							continue;
						}
					}
				}

				// END Add 7.20d
				++iNumberOfTimesPID;
			}
		}

		return iNumberOfTimesPID;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will find that a given product is there in the Vector of BO
	 *                                  that are passed to it.
	 *
	 *  @param          :       Vector vctFindProductInVector, int iLevel, int iParentInstance
	 *
	 *  @return         :       int     -       Returns a Integer
	 */
	protected int iFindProductInVectorLevelProductIDandOptionGroupID(
			BProductDetail bProducttemp, Vector vctFindProductInVector)
			throws Exception {
		int iNumberOfTimesPID = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		iSizeOfVector = vctFindProductInVector.size();

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if ((bProducttemp.iLevel == ((BProductDetail) vctFindProductInVector
					.elementAt(iCount)).iLevel)
					&& ((String.valueOf(bProducttemp.lProductID)).equals(String
							.valueOf(((BProductDetail) vctFindProductInVector
									.elementAt(iCount)).lProductID)))
					&& ((String.valueOf(bProducttemp.lOptionGroupID))
							.equals(String
									.valueOf(((BProductDetail) vctFindProductInVector
											.elementAt(iCount)).lOptionGroupID)))) {
				++iNumberOfTimesPID;
			}
		}

		return iNumberOfTimesPID;
	}

	/**
	 *  DESCRIPTION :   The Function will find that a given product is there in the Vector of BO
	 *                                  that are passed to it.
	 *
	 *  @param          :       Vector vctFindProductInVector, int iLevel, int iParentInstance
	 *
	 *  @return         :       int     -       Returns a Integer
	 */
	protected int iFindProductInVectorLevelProductID(
			BProductDetail bProducttemp, Vector vctFindProductInVector)
			throws Exception {
		int iNumberOfTimesPID = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		iSizeOfVector = vctFindProductInVector.size();

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if ((bProducttemp.iLevel == ((BProductDetail) vctFindProductInVector
					.elementAt(iCount)).iLevel)
					&& (bProducttemp.lProductID.longValue() == ((BProductDetail) vctFindProductInVector
							.elementAt(iCount)).lProductID.longValue())) {
				++iNumberOfTimesPID;
			}
		}

		return iNumberOfTimesPID;
	}

	/**
	 *  DESCRIPTION :   The Function will find that a given product is there in the Vector of BO
	 *                                  that are passed to it.
	 *
	 *  @param          :       Vector vctFindProductInVector, int iLevel, int iParentInstance
	 *
	 *  @return         :       int     -       Returns a Integer
	 */
	protected int iFindProductInVectorLevelandOptionGroupIDandProductId(
			Vector vctFindProductInVector, int iLevel, Long OptionGroupID,
			Long lProductID) throws Exception {
		int iNumberOfTimesPID = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		iSizeOfVector = vctFindProductInVector.size();

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if ((iLevel == ((BProductDetail) vctFindProductInVector
					.elementAt(iCount)).iLevel)
					&& ((String.valueOf(OptionGroupID)).equals(String
							.valueOf(((BProductDetail) vctFindProductInVector
									.elementAt(iCount)).lOptionGroupID)))
					&& (lProductID.longValue() == ((BProductDetail) vctFindProductInVector
							.elementAt(iCount)).lProductID.longValue())) {
				++iNumberOfTimesPID;
			}
		}

		return iNumberOfTimesPID;
	}

	/**
	 *  DESCRIPTION :   The Function will find that a given product is there in the Vector of BO
	 *                                  that are passed to it.
	 *
	 *  @param          :       Vector vctFindProductInVector, int iLevel, int iParentInstance
	 *
	 *  @return         :       int     -       Returns a Integer
	 */
	protected int iFindProductInVectorLevelParentInstance(
			Vector vctFindProductInVector, int iLevel, int iParentInstance)
			throws Exception {
		int iNumberOfTimesPID = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		iSizeOfVector = vctFindProductInVector.size();

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if (((String.valueOf(iLevel)).equals(String
					.valueOf(((BProductDetail) vctFindProductInVector
							.elementAt(iCount)).iLevel)))
					&& ((String.valueOf(iParentInstance)).equals(String
							.valueOf(((BProductDetail) vctFindProductInVector
									.elementAt(iCount)).iParentInstance)))) {
				iNumberOfTimesPID++;
			}
		}

		return iNumberOfTimesPID;
	}

	/**
	 *  DESCRIPTION :   The Function will return bProductDetailProperty BO in which if the validations are done the
	 *                                  product is moved from the upper grid to lowere grid in the Case of the New Product is Selected.
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetailUpper, Long lProductID, Long CustomerID
	 *
	 *  @return         :       BProductDetailProperty  -       Does Not Return Anything
	 */
	public BProductDetailProperty objNewSelect(
			BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetailUpper, Long lProductID, Long CustomerID)
			throws Exception { // Starting Braces of the Function
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			bProductDetailProperty.vctProductNonSelected
					.remove(bProductDetailUpper);
			bProductDetailProperty.vctProductSelected.add(bProductDetailUpper);
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bProductDetailProperty;
	}

	/**
	 *  DESCRIPTION :   The Function will return bProductDetailProperty BO in which if the validations are done the
	 *                                  product is moved from the upper grid to lowere grid.
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetailUpper, BProductDetail bProductDetailLower, Long lProductID, Long CustomerID, int iPostionInLowerSelectedVector
	 *
	 *  @return         :       BProductDetailProperty  -       Returns the BProductDetailProperty Bussiness Object
	 */
	public BProductDetailProperty objSelect(
			BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetailUpper,
			BProductDetail bProductDetailLower, Long lProductID,
			Long CustomerID, int iPostionInLowerSelectedVector,
			int iPostionInUpperSelectedVector) throws SQLException, Exception {

		
		GLogger
		.chkpt("bProductDetailProperty.vctProductSelected in LProduct: "
				+ bProductDetailProperty);
		GLogger
		.chkpt("bProductDetailUpper in LProduct: "
				+ bProductDetailUpper);
		GLogger
		.chkpt("bProductDetailLower in LProduct: "
				+ bProductDetailLower);
		GLogger
		.chkpt("lProductID in LProduct: "
				+ lProductID);
		GLogger
		.chkpt("iPostionInLowerSelectedVector in LProduct: "
				+ iPostionInLowerSelectedVector);
		GLogger
		.chkpt("bProductDetailUpper in LProduct: "
				+ iPostionInUpperSelectedVector);
		
		// Begin DEL v9.01d
		// int iReturnCount = 0; //Local Varaible Declaration
		// End DEL v9.01d
		int iParentInstance = 0; // Local Varaible Declaration
		int iLevel = 0; // Local Varaible Declaration
		int iSParentInstance = 0; // Local Varaible Declaration
		int iSLevel = 0; // Local Varaible Declaration
		int iMaxInstance = 0; // Local Varaible Declaration
		int iIncMaxInstance = 0; // Local Varaible Declaration
		int iMaxMand = 0; // Local Varaible Declaration
		int iNumberOfTimes = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d
		try {
			OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			optionGroupRow = optionGroupTable
					.prSearchByOptionGroupID(bProductDetailUpper.lOptionGroupID
							.longValue());

			if ((null != optionGroupRow)
					&& (FINAL_ZERO == optionGroupRow.iObsolete)) {
				iMaxMand = optionGroupRow.iMaxMandProducts;
			} // end of the if loop

			int iNumberOfTimesProducts = FINAL_ZERO;
			BProductDetail bProductDetail = null;

			for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected
					.size(); iCounter++) {
				bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(iCounter);

				if (null != bProductDetailLower) {
					if (bProductDetailLower.lProductID.longValue() == bProductDetail.lProductID
							.longValue()) {
						++iNumberOfTimesProducts;
					}
				} // end of the if loop

				if (bProductDetailUpper.lOptionGroupID.longValue() == bProductDetail.lOptionGroupID
						.longValue()) {
					++iNumberOfTimes;
				}
			}

			if (FINAL_ZERO != iNumberOfTimesProducts) {
				iMaxMand = iMaxMand * iNumberOfTimesProducts;
			}

			if (iNumberOfTimes >= (iMaxMand - FINAL_ONE)) {
				bProductDetailProperty.vctProductNonSelected
						.removeElementAt(iPostionInUpperSelectedVector);
			}

			// Begin DEL v9.01d
			// if (GAfePropertyLoader.DEBUG) {

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect 1");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			// lStart = System.currentTimeMillis();
			// }
			// End DEL v9.01d
			/* MANY CHANGED THAT HAVE TO BE APPLIED OVER HERE */
			if (null != bProductDetailLower) {
				iParentInstance = bProductDetailLower.iInstance;
				iLevel = bProductDetailLower.iLevel + FINAL_ONE;
				iMaxInstance = iGetMaxInstanceInVectorlevelparentinstance(
						bProductDetailProperty.vctProductSelected, iLevel,
						iParentInstance);
				iIncMaxInstance = iMaxInstance + FINAL_ONE;
				bProductDetailUpper.iInstance = iIncMaxInstance;
				bProductDetailUpper.iParentInstance = iParentInstance;
				bProductDetailUpper.iLevel = iLevel;
			} else {
				bProductDetailUpper.iInstance = 1;
				bProductDetailUpper.iParentInstance = 1;
				bProductDetailUpper.iLevel = 2;
			}

			// Begin DEL v9.01d
			// if (GAfePropertyLoader.DEBUG) {

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect 2");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			// lStart = System.currentTimeMillis();
			// }
			// End DEL v9.01d
			// BEGIN ADD: V3.10
			// Change made for fixing DEFECT id 70, Obsolete Masters
			// To recalculate the price when we are adding the product to lower grid
			int iNoOfOccurences = 0;
			Vector vctAllBillableParameters = null;

			iIsDefault = FINAL_ZERO;
			iNoOfOccurences = iNoOfOccurencesOfProduct(
					bProductDetailProperty.vctProductSelected, iLevel,
					iParentInstance, bProductDetailUpper.lProductID.longValue());

			if (GAfePropertyLoader.DEBUG) {

				GLogger.chkpt("Inside if statement ");// System.out.println("iNoOfOccurences : " + iNoOfOccurences);
			}

			vctAllBillableParameters = vctGetAllBillableParameters(bProductDetailUpper);

			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("Size of Vector vctAllBillableParameters : " + vctAllBillableParameters.size());
			}

			if (FINAL_ONE == bProductDetailUpper.iBillable) {
				fncInternalForPSIDandPriceCalAfterChanges(bProductDetailUpper,
						vctAllBillableParameters,
						bProductDetailProperty.lCurrencyID,
						bProductDetailUpper.lProductID,
						bProductDetailProperty.lPaymentMethodRC,
						bProductDetailProperty.lPaymentMethodNRC,
						bProductDetailProperty.lPaymentMethodUsage,
						bProductDetailProperty.iInClExc, iIsDefault,
						iNoOfOccurences, FINAL_ZERO);
			}

			if (GAfePropertyLoader.DEBUG) {

				GLogger.chkpt("Inside if statement ");	// System.out.println("Size of Vector vctAllBillableParameters : " + vctAllBillableParameters.size());
			}

			//          Changes made for fixing DEFECT id 70, Obsolete Masters
			//          END ADD: V3.10
			bProductDetailProperty.vctProductSelected.insertElementAt(
					bProductDetailUpper,
					(iPostionInLowerSelectedVector + FINAL_ONE));

			/* Along with product we also need to move all the mandatory products to the lower grid. */
			iSParentInstance = bProductDetailUpper.iInstance;
			iSLevel = bProductDetailUpper.iLevel;

			if (null == optionProductTable) {
				optionProductTable = (OptionProduct) teleSessionMgr
						.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
			}

			// Begin DEL v9.01d
			// if (GAfePropertyLoader.DEBUG) {

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect before movemandatory productdown");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			// lStart = System.currentTimeMillis();
			// }
			// End DEL v9.01d
			// Begin MOD v9.01d
			
			iMoveMandatoryProductsDown(bProductDetailProperty, lProductID,
					CustomerID, iSLevel, iSParentInstance,
					++iPostionInLowerSelectedVector, optionGroupTable,
					optionProductTable);
			
		//Added for PR 177445 Rel 13.30	 Start
			GLogger.chkpt("New change for pr177445");
			String strLogin = bProductDetailProperty.strLogin;
			GLogger.chkpt("***fetching login here : " + strLogin);
			if (null != teleSessionMgr.getValue(GAfeConstants.HashMap_CustProductLineIdForWarnings)) 
			{
				for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected.size(); iCounter++) 
				{
					bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected.elementAt(iCounter);
					for (int iDCounter = FINAL_ZERO; iDCounter <  bProductDetail.vctParameters.size(); iDCounter++)
					{
						BProductParameter bProductParameter = new BProductParameter();
						bProductParameter = (BProductParameter) bProductDetail.vctParameters.elementAt(iDCounter);
						if(bProductParameter.lParameterID == 2 && bProductParameter.strParameterName.equals("Login")
								&&(bProductParameter.vctParameterValues == null || bProductParameter.vctParameterValues.size() == 0))
						{
							GLogger.chkpt("inside second if");
							int iSelected = FINAL_ONE;
							Vector vctInt = new Vector();
							Vector vctExternal = new Vector();
						     vctInt.addElement(strLogin);
						     vctInt.addElement(Integer.valueOf(iSelected));
						      vctExternal.addElement(vctInt);
						bProductParameter.vctParameterValues = vctExternal;
						GLogger.chkpt("adding login value in vct parameters " + bProductParameter.vctParameterValues);
						}
						//Adding here Sachin rel 14.4 Sunsat
						GLogger.chkpt("Before GAfeConstants.DESC_DESCRIPTION Sunsat for adding select ");
					
					}
				}

			}
			if(teleSessionMgr.getValue(GAfeDescription.TABLET_ALREADY_PRESENT)!=null){
				teleSessionMgr.removeValue(GAfeDescription.TABLET_ALREADY_PRESENT);
			}
			boolean bTabletExist =false;
			boolean bTabExist = false;
			for (int iCount = FINAL_ZERO; iCount < bProductDetailProperty.vctProductSelected.size(); iCount++) 
			{
				
				bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected.elementAt(iCount);
				GLogger.chkpt("bProductDetail.lProductTypeID.intValue()"+bProductDetail.lProductTypeID.intValue());	
				//int pTyepId = ProductUtils.getProductTypeID(bProductDetail.lProductTypeID.intValue());
				if(GAfeConstants.TABLET_PRODUCTTYPEID == bProductDetail.lProductTypeID.intValue()){
				 bTabletExist = isTabletExists(bProductDetailProperty.lCustomerProductLineID,bProductDetail.lProductID);
				 if(bTabletExist){
						teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, true);
						bTabExist =true;
						//strExistVal =getCustProdParamValue(bProductDetailProperty.lCustomerProductLineID,bProductDetail.lProductID,bProductParameter.lParameterID);
					}
					else{
						teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, false);
					}
				 break;
				}
				
				
			}/*
			if(bTabletExist){
				teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, true);
				//strExistVal =getCustProdParamValue(bProductDetailProperty.lCustomerProductLineID,bProductDetail.lProductID,bProductParameter.lParameterID);
			}
			else{
				teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, false);
			}*/
			GLogger.chkpt("bTabletExist : e"+bTabletExist);	
			//int iProductTypeId = ProductUtils.getProductTypeID(Integer.parseInt(lProductID));\
			int iProductTypeId = ProductUtils.getProductTypeID(lProductID.intValue());
			if(iProductTypeId==GAfeConstants.TABLET_PRODUCTTYPEID ){
				for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected.size(); iCounter++) 
				{
					bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected.elementAt(iCounter);
					for (int iDCounter = FINAL_ZERO; iDCounter <  bProductDetail.vctParameters.size(); iDCounter++)
					{
						Vector vctExternal1 = new Vector();
						BProductParameter bProductParameter = null;
						bProductParameter = (BProductParameter) bProductDetail.vctParameters.elementAt(iDCounter);
						
						String strExistVal =null;
						if(bTabExist){
							//teleSessionMgr.putValue(GAfeDescription.TABLET_ALREADY_PRESENT, true);
							strExistVal =getCustProdParamValue(bProductDetailProperty.lCustomerProductLineID,bProductDetail.lProductID,bProductParameter.lParameterID);
						}
						if(bProductDetail.lProductTypeID == GAfeConstants.TABLET_PRODUCTTYPEID){
							String sDesc = null;
							GLogger.chkpt("sDesc"+bProductParameter.strExternalDesc);
							GLogger.chkpt("I am here");
							if(bProductParameter.strExternalDesc.isEmpty()){
								sDesc = getExtDesc(bProductParameter.lParameterID);
								GLogger.chkpt("Inside If");	
							}
							else{
								sDesc = bProductParameter.strExternalDesc;
								GLogger.chkpt("Inside else");	
							}
							if(sDesc.equals(GAfeConstants.DESC_DESCRIPTION)){
									GLogger.chkpt("sunsat bProductParameter double click  ->"+ bProductParameter.strExternalDesc);
									List<String> listDescription = fetchDeviceDescriptionForProduct(bProductDetail.lProductID, GAfeConstants.OBSOLETEZERO, bSession.lLanguageId);
									
									
									//GLogger.chkpt("Sunast internal"+internal);
									
									for(String description:listDescription){
										Vector vctInternal2 = new Vector();
										vctInternal2.addElement(description);
										if(null!= strExistVal && description.equals(strExistVal) ){
											vctInternal2.addElement(Integer.valueOf(FINAL_ONE));
										}
										else{
											vctInternal2.addElement(Integer.valueOf(FINAL_ZERO));
										}
										vctExternal1.addElement(vctInternal2);
									}

									Vector vctInt1 = new Vector();
									vctInt1.addElement(GAfeDescription.SELECT);
									if(null!= strExistVal){
										vctInt1.addElement(Integer.valueOf(FINAL_ZERO));
									}
									else{
									vctInt1.addElement(Integer.valueOf(FINAL_ONE));
									}

									vctExternal1.addElement(vctInt1);
									bProductParameter.vctParameterValues = vctExternal1;					
								}
							
								else{
										
									if(null!=strExistVal){
										Vector vctInt2 = new Vector();
										vctInt2.addElement(strExistVal);
										vctInt2.addElement(Integer.valueOf(FINAL_ONE));
										Vector vctExternal2 = new Vector();
										vctExternal2.addElement(vctInt2);
										GLogger.chkpt("vctExternal in Sunsat:"+vctExternal2);
										bProductParameter.vctParameterValues = vctExternal2;
									}
									else{
										Vector vctInt2 = new Vector();
										vctInt2.addElement(null);
										vctInt2.addElement(Integer.valueOf(FINAL_ONE));
										Vector vctExternal2 = new Vector();
										vctExternal2.addElement(vctInt2);
										GLogger.chkpt("vctExternal in Sunsat:"+vctExternal2);
										bProductParameter.vctParameterValues = vctExternal2;
									}
									
								
								}
						}
					}
				}
			}
			GLogger.chkpt("bProductDetailProperty for adding select as default value  " +bProductDetailProperty);
			GLogger.chkpt("bProductDetailProperty for adding select as default value  bProductDetailProperty.vctProductNonSelected  " + bProductDetailProperty.vctProductNonSelected);
			GLogger.chkpt("bProductDetailProperty for adding select as default value  bProductDetailProperty.vctProductSelected  " + bProductDetailProperty.vctProductSelected);
		
			//Added for PR 177445 Rel 13.30	 End

			// End MOD v9.01d

			// Begin DEL v9.01d
			// if (GAfePropertyLoader.DEBUG) {

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect after movemandatory products down");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			// lStart = System.currentTimeMillis();
			// }
			// End DEL v9.01d
			if (null == forbiddenProductTable) {
				forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
						.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
			}

			// Begin DEL v9.01d
			// if (GAfePropertyLoader.DEBUG) {

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect after movemandatory products down");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			// lStart = System.currentTimeMillis();
			// }
			// End DEL v9.01d
			vdFncForbiddenProductForObjSelect(bProductDetailProperty,
					lProductID.longValue(), forbiddenProductTable);

			// Begin DEL v9.01d
			// if (GAfePropertyLoader.DEBUG) {

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect after movemandatory products down");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			// lStart = System.currentTimeMillis();
			// }
			// End DEL v9.01d
			// BEGIN ADD : V3.10
			// Added Code to fix defect No. 70 Obsolete Masters
			MProduct mProduct = new MProduct(teleSessionMgr, bSession);

			mProduct
					.vdPrintCompleteBProductDetailProperty(bProductDetailProperty);

			//          Added Code to fix defect No. 70 Obsolete Masters
			//          END ADD : V3.10
		} // end of the if loop
		catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		GLogger
		.chkpt("bProductDetailProperty.vctProductSelected in LProduct: "
				+ bProductDetailProperty);
		
		return bProductDetailProperty;
	}

	/**
	 *  DESCRIPTION :   The Function will Move all the Mandatory Products down if one clicks on the product line
	 *                                  on the upper grid of the Product Property Screen.
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long lProductID, Long CustomerID, int iLevel, int iParentInstance, int iPostionInLowerSelectedVector
	 *
	 *  @return         :       Void    -       Returns the Int 1 if successfull otherwise will return 0
	 */
	protected void vdFncForbiddenProductForObjSelect(
			BProductDetailProperty bProductDetailProperty, long lProductID,
			ForbiddenProduct forbiddenProductTable) throws Exception {
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// ForbiddenProductRow forbiddenProductRow = null;                                                                                                                           // Initializing the Object Class for the OptionGroup table
			// End DEL v9.01d
			Vector vctObjGetALLDATAFPInternal = null;

			vctObjGetALLDATAFPInternal = forbiddenProductTable
					.vctSearchByProductIDandObsolete(lProductID, FINAL_ZERO);

			int iSizeOfVector = 0;

			// Loop to remove all the forbidden products from the above grid
			if (null != vctObjGetALLDATAFPInternal) {

				// for each  record in the vector of ForbiddenProduct Records
				for (int iASCounter = FINAL_ZERO; iASCounter < vctObjGetALLDATAFPInternal
						.size(); iASCounter++) {
					iSizeOfVector = bProductDetailProperty.vctProductNonSelected
							.size();

					for (int iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
						if (((ForbiddenProductRow) (vctObjGetALLDATAFPInternal
								.elementAt(iASCounter))).lForbProductID == ((BProductDetail) bProductDetailProperty.vctProductNonSelected
								.elementAt(iCounter)).lProductID.longValue()) {
							bProductDetailProperty.vctProductNonSelected
									.removeElementAt(iCounter);
							iSizeOfVector--;
							iCounter--;
						}
					} // end of the for loop
				} // end of the for loop
			} // end of the if loop
		} // end of the if loop

		//      BEGIN ADD : V3.27

		/*
		 * catch (Exception sqle)
		 * {
		 *   throw sqle;
		 * }
		 */
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
	}

	/**
	 *  DESCRIPTION :   The Function will return in the form of the integer the max instance of the product
	 * for a given level and parentinstance.
	 *
	 *  @param          :       Vector vctProductSelected, int iLevel, int iParentInstance
	 *
	 *  @return         :       Int     -       Returns the integer.
	 */
	protected int iGetMaxInstanceInVectorlevelparentinstance(
			Vector vctProductSelected, int iLevel, int iParentInstance)
			throws Exception {
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration
		int iInstance = 0; // Local Varaible Declaration

		iSizeOfVector = vctProductSelected.size();

		BProductDetail bProductDetail = null;

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			bProductDetail = (BProductDetail) vctProductSelected
					.elementAt(iCount);

			if ((iLevel == bProductDetail.iLevel)
					&& (iParentInstance == bProductDetail.iParentInstance)) {
				if (iInstance < bProductDetail.iInstance) {
					iInstance = bProductDetail.iInstance;
				} // end of the if loop
			} // end of the if loop
		} // end of the for loop

		return iInstance;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Move all the Mandatory Products down if one clicks on the product line
	 *                                  on the upper grid of the Product Property Screen.
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long lProductID, Long CustomerID, int iLevel, int iParentInstance, int iPostionInLowerSelectedVector
	 *
	 *  @return         :       Void    -       Returns the Int 1 if successfull otherwise will return 0
	 * /******************************************************************************************************************************
	 */
	protected int iMoveMandatoryProductsDown(
			BProductDetailProperty bProductDetailProperty, Long lProductID,
			Long CustomerID, int iLevel, int iParentInstance,
			int iPostionInLowerSelectedVector, OptionGroup optionGroupTable,
			OptionProduct optionProductTable) throws SQLException, Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		// Begin DEL v9.01d
		// long lStartMain = System.currentTimeMillis();
		// End DEL v9.01d
		int iReturnCount = 0; // Local Varaible Declaration
		int iInstance = 0; // Local Varaible Declaration
		int iSLevel = 0; // Local Varaible Declaration
		int iSParentInstance = 0; // Local Varaible Declaration
		long lOptionGroup; // Local Varaible Declaration
		long lOptionProductID; // Local Varaible Declaration
		int iMin = 0; // Local Varaible Declaration
		int iMax = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration
		int iFindPositionInVectorlevelProductId = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */

		// Making and Object Of the Bussiness Object
		BProductDetail bProductDetail = null;

		/** **************STARTING*****************TO PRINT THE DATA****************************************** */

		// Begin DEL v9.01d
		// if (GAfePropertyLoader.DEBUG) {
		/* BEGIN DELETE VER: 5.59a */

		// System.out.println("**********************************************");
		// System.out.println(" Just Into function movemandatory productdown : iPostionInLowerSelectedVector - " + iPostionInLowerSelectedVector);
		// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
		// System.out.println("**********************************************");
		/* END DELETE VER: 5.59a */

		// lStart = System.currentTimeMillis();
		// }
		// End DEL v9.01d
		/** **************ENDING*******************TO PRINT THE DATA***************************************** */
		try {
			if (iLevel < 10) {

				/**
				 * **************STARTING*****************TO PRINT QUERRY**********************************************
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("Level = " + iLevel);
				 * System.out.println("iParentInstance = " + iParentInstance);
				 * }
				 * /****************ENDING*******************TO PRINT QUERRY*********************************************
				 */

				//              StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
				/** **************************************MAKING OF NEXT QUERRY************************************** */
				OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

				// Begin DEL v9.01d
				// Vector vctObjGetDataPIDInternal = null;
				// End DEL v9.01d
				List lstObjGetDataPIDInternal = null;

				//              BEGIN MODIFY : V3.10
				//              Modified Code for fixing DEFECT id 70, Obsolete Masters
				//              Taken the valid option group depending on Current Date
				//                                    vctObjGetDataPIDInternal        =   optionGroupTable.vctSearchByProductIDandObsolete(lProductID.longValue(), FINAL_ZERO);
				// BEGIN DELETE v5.80a
				// vctObjGetDataPIDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date());
				// END ADD v5.80a
				// BEGIN DELETE v5.80a
				// vctObjGetDataPIDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date(), bProductDetailProperty.iRateClassIDNew);
				lstObjGetDataPIDInternal = optionGroupTable
						.searchByProductIDValidandObsolete(lProductID
								.longValue(), FINAL_ZERO, new java.util.Date(),
								bProductDetailProperty.iRateClassIDNew);

				// END ADD v5.80a

				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement ");
					// System.out.println("[MOVEMANDATORYPRODUCTSDOWN : ] > All OpGrp's associated with ProductId :" + lProductID.longValue() + " are : " + vctObjGetDataPIDInternal);
				}

				//              END MODIFY: V3.10
				//              Modified Code for fixing DEFECT id 70, Obsolete Masters
				//              BEGIN MODIFY : V3.26
				//              BEGIN DELETE : V3.20
				//                                    vctObjGetDataPIDInternal        =   optionGroupTable.vctSearchByProductIDandObsolete(lProductID.longValue(), FINAL_ZERO);
				//              END DELETE: V3.20
				//              END MODIFY : V3.26

				/**
				 * **************STARTING*****************TO PRINT QUERRY
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * strSql.setLength(0); //Initialising
				 * strSql.append("SELECT OPTIONGROUPID, MINMANDPRODUCTS, MAXMANDPRODUCTS FROM OPTIONGROUP WHERE PRODUCTID = ").append(lProductID);
				 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
				 * System.out.println("The Querry is : " + strSql.toString());
				 * }
				 * /****************ENDING*******************TO PRINT QUERRY*********************************************
				 */
				if (!lstObjGetDataPIDInternal.isEmpty()) {
					OptionGroupRow optionGroupRowTemp = null;

					// for each  record in the vector of OptionGroup Records
					for (int iASCounter = FINAL_ZERO; iASCounter < lstObjGetDataPIDInternal
							.size(); iASCounter++) {
						optionGroupRowTemp = (OptionGroupRow) lstObjGetDataPIDInternal
								.get(iASCounter);
						lOptionGroup = optionGroupRowTemp.lOptionGroupID;
						iMin = optionGroupRowTemp.iMinMandProducts;
						iMax = optionGroupRowTemp.iMaxMandProducts;

						/** **************************************MAKING OF NEXT QUERRY************************************** */

						// Begin DEL v9.01d
						// OptionProductRow optionProductRow = null;                                                                                                                             // Initializing the Object Class for the OptionGroup table
						// End DEL v9.01d
						Vector vctObjOGIDOSInternal = null;

						// BEGIN DELETE v5.80a
						// vctObjOGIDOSInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup, FINAL_ZERO);
						// END DELETE v5.80a
						// BEGIN ADD v5.80a
						vctObjOGIDOSInternal = optionProductTable
								.vctSearchByOptionGroupIDandObsolete(
										lOptionGroup, FINAL_ZERO,
										bProductDetailProperty.iRateClassIDNew);

						// END ADD v5.80a

						/**
						 * **************STARTING*****************TO PRINT QUERRY
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * strSql.setLength(0); //Initialising
						 * strSql.append("SELECT COUNT(*) LCOUNT FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(lOptionGroup);
						 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
						 * System.out.println("The Querry is : " + strSql.toString());
						 * }
						 * /****************ENDING*******************TO PRINT QUERRY*********************************************
						 */

						//                      BEGIN MODIFY : V3.10
						//                      Modified Code for fixing DEFECT id 70, Obsolete Masters
						//                      Added Print Statement to check the added code
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement ");
							/* BEGIN DELETE VER: 5.59a */

							// System.out.println(" iMin: " + iMin);
							// System.out.println("iMax: " + iMax);
							// System.out.println("iInstance: " + iInstance);
							/* END DELETE VER: 5.59a */

							/*
							 * strSql.setLength(0); //Initialising
							 * strSql.append("SELECT COUNT(*) LCOUNT FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(lOptionGroup);
							 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
							 * System.out.println("The Querry is : " + strSql.toString());
							 */
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */

						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						//                      END ADD: V3.10
						if (null != vctObjOGIDOSInternal) {
							iCount = vctObjOGIDOSInternal.size();
						}

						if ((iMin == iCount) && (iCount == iMax)) {

							/*
							 *  It means that under this OptionGroup all the products are mandatory.
							 * We need to move all these products also in the lower grid along with the selected product.
							 */

							/** **************************************MAKING OF NEXT QUERRY************************************** */

							// Begin DEL v9.01d
							// optionProductRow = null;                                                                                                                          // Initializing the Object Class for the OptionGroup table
							// End DEL v9.01d
							if (null == optionProductTable) {
								optionProductTable = (OptionProduct) teleSessionMgr
										.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
							}

							Vector vctObjOGIDOFInternal = vctObjOGIDOSInternal;

							//                          vctObjOGIDOFInternal    =   optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup, FINAL_ZERO);

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * strSql.setLength(0); //Initialising
							 * strSql.append("SELECT OPTIONPRODUCTID, PRODUCTID, PROVISIONABLE, BILLABLE FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(lOptionGroup);
							 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
							 * System.out.println("The Querry is : " + strSql.toString());
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */

							// Begin DEL v9.01d
							// if (GAfePropertyLoader.DEBUG) {
							/* BEGIN DELETE VER: 5.59a */

							// System.out.println("**********************************************");
							// System.out.println(" before loop in case of movemandatory productdown");
							// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
							// System.out.println("**********************************************");
							/* END DELETE VER: 5.59a */

							// lStart = System.currentTimeMillis();
							// }
							// End DEL v9.01d
							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							if (null != vctObjOGIDOFInternal) {
								OptionProductRow optionProductRowTemp = null;

								// for each  record in the vector of OptionProduct Records
								for (int iOGIDOFCounter = FINAL_ZERO; iOGIDOFCounter < vctObjOGIDOFInternal
										.size(); iOGIDOFCounter++) {
									optionProductRowTemp = (OptionProductRow) vctObjOGIDOFInternal
											.elementAt(iOGIDOFCounter);

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("Hurray i am here For mandatory products--------------------->");
									 * System.out.println("Option GroupId" +lOptionGroup);
									 * System.out.println("Option ProductId" +((OptionProductRow)(vctObjOGIDOFInternal.elementAt(iOGIDOFCounter))).lOptionProductID);
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */
									iInstance = iInstance + FINAL_ONE;
									iSLevel = iLevel + FINAL_ONE;

									// iParentInstance   =       iParentInstance;

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("Before Calling of the OBJGETPRODNONSELECTED fnc OPID- "+((OptionProductRow)(vctObjOGIDOFInternal.elementAt(iOGIDOFCounter))).lOptionProductID);
									 * System.out.println("Before Calling of the OBJGETPRODNONSELECTED fnc PID- "+((OptionProductRow)(vctObjOGIDOFInternal.elementAt(iOGIDOFCounter))).lProductID);
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */
									lOptionProductID = optionProductRowTemp.lOptionProductID;

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("Before Callling objGetDetailProductNonSelected function ");
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */

									// Begin DEL v9.01d
									// if (GAfePropertyLoader.DEBUG) {
									/* BEGIN DELETE VER: 5.59a */

									// System.out.println("**********************************************");
									// System.out.println(" Before calling objGetDetailProductNonSelected ...");
									// System.out.println("**********************************************");
									/* END DELETE VER: 5.59a */

									// lStart = System.currentTimeMillis();
									// }
									// End DEL v9.01d
									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									//BEGIN MODIFY : V3.10
									//Modified Code for fixing DEFECT id 70, Obsolete Masters
									//Changed the Call objGetDetailProductNonSelected with additional input parameters
									//                                  bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRowTemp.lProductID), Long.valueOf(lOptionGroup), Long.valueOf(lOptionProductID), optionProductRowTemp.iProvisionable, optionProductRowTemp.iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, iSLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
									iIsDefault = FINAL_ZERO;

									// BEGIN DELETE V6.02d
									// bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRowTemp.lProductID), Long.valueOf(lOptionGroup), Long.valueOf(lOptionProductID), optionProductRowTemp.iProvisionable, optionProductRowTemp.iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, iSLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
									// END DELETE V6.02d
									// BEGIN ADD V6.02d
									bProductDetail = objGetDetailProductNonSelected(
											CustomerID,
											Long.valueOf(
													optionProductRowTemp.lProductID),
											Long.valueOf(lOptionGroup),
											Long.valueOf(lOptionProductID),
											optionProductRowTemp.iProvisionable,
											optionProductRowTemp.iBillable,
											bProductDetailProperty.lCurrencyID,
											FINAL_ZERO,
											iSLevel,
											iInstance,
											iParentInstance,
											bProductDetailProperty.lPaymentMethodRC,
											bProductDetailProperty.lPaymentMethodNRC,
											bProductDetailProperty.lPaymentMethodUsage,
											iIsDefault,
											bProductDetailProperty.vctProductSelected,
											bProductDetailProperty);

									// END ADD V6.02d

									//                                  END ADD: V 3.10
									//                                  Deleted Code for fixing DEFECT id 70, Obsolete Masters

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									// Begin DEL v9.01d
									// if (GAfePropertyLoader.DEBUG) {
									/* BEGIN DELETE VER: 5.59a */

									// System.out.println("**********************************************");
									// System.out.println(" After calling objGetDetailProductNonSelected ...Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
									// System.out.println("**********************************************");
									/* BEGIN DELETE VER: 5.59a */

									// lStart = System.currentTimeMillis();
									// }
									// End DEL v9.01d
									/** **************ENDING*******************TO PRINT THE DATA***************************************** */

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("**********************>");
									 * System.out.println("Level = " + iLevel);
									 * System.out.println("iParentInstance = " + iParentInstance);
									 * System.out.println("After Callling objGetDetailProductNonSelected function ");
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */
									bProductDetailProperty.vctProductSelected
											.insertElementAt(
													bProductDetail,
													(iPostionInLowerSelectedVector + FINAL_ONE));

									if (null == forbiddenProductTable) {
										forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
												.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
									}

									vdFncForbiddenProductForObjSelect(
											bProductDetailProperty,
											bProductDetail.lProductID
													.longValue(),
											forbiddenProductTable);

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("Level = " + iLevel);
									 * System.out.println("iParentInstance = " + iParentInstance);
									 * System.out.println("**********************>");
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("After Adding Vector to vctProductSelected: " +bProductDetailProperty.vctProductSelected);
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */
									iLevel = iSLevel;
									iSParentInstance = bProductDetail.iInstance;

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("In Mandatory products : Before calling iterative function");
									 * System.out.println("In Mandatory products : ProductId"+ bProductDetail.lProductID);
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("**********************************************");
									 * System.out.println(" before recursion movemandatory productdown");
									 * System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
									 * lStart     =       System.currentTimeMillis();
									 * System.out.println("**********************************************");
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */

									// Begin DEL v9.01d
									// if (GAfePropertyLoader.DEBUG) {
									/* BEGIN DELETE VER: 5.59tan */

									// System.out.println("**********************************************");
									// System.out.println(" before recursion movemandatory productdown : Time " + iPostionInLowerSelectedVector);
									// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
									/* BEGIN DELETE VER: 5.59tan */

									// lStart = System.currentTimeMillis();
									/* BEGIN DELETE VER: 5.59tan */

									// System.out.println("**********************************************");
									/* BEGIN DELETE VER: 5.59tan */

									// }
									// End DEL v9.01d
									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									iReturnCount = iMoveMandatoryProductsDown(
											bProductDetailProperty,
											bProductDetail.lProductID,
											CustomerID, iLevel,
											iSParentInstance,
											++iPostionInLowerSelectedVector,
											optionGroupTable,
											optionProductTable);

									// Begin Add: Ver 3.30
									// Added as per Amit's mail 23/03/2002

									// BEGIN DELETE V5.68a
									// deleted as it should decrement only iPostionInLowerSelectedVector
									// iPostionInLowerSelectedVector = bProductDetailProperty.vctProductSelected.size() - FINAL_ONE;
									// END DELETE V5.68a
									// BEGIN ADD V5.68a
									// modified for above
									iPostionInLowerSelectedVector = iPostionInLowerSelectedVector
											- FINAL_ONE;

									// END ADD V5.68a

									// End Add: Ver 3.30

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									// Begin DEL v9.01d
									// if (GAfePropertyLoader.DEBUG) {
									/* BEGIN DELETE VER: 5.59tan */

									// System.out.println("**********************************************");
									// System.out.println(" after recursion movemandatory productdown : Time " + iPostionInLowerSelectedVector);
									// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
									/* BEGIN DELETE VER: 5.59tan */

									// lStart = System.currentTimeMillis();
									/* BEGIN DELETE VER: 5.59tan */

									// System.out.println("**********************************************");
									/* BEGIN DELETE VER: 5.59tan */

									// }
									// End DEL v9.01d
									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									iLevel = iSLevel - FINAL_ONE;

									/**
									 * **************STARTING*****************TO PRINT THE DATA********************************************
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("**********************************************");
									 * System.out.println(" after recursion movemandatory productdown");
									 * System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
									 * lStart     =       System.currentTimeMillis();
									 * System.out.println("**********************************************");
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */
								} // end of the for loop
							} // end of the if loop for the null pointer exception of the vector
						} // end of the if loop
						else {
							if (FINAL_ONE == iCount) {

								/**
								 * **************STARTING*****************TO PRINT QUERRY**********************************************
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * System.out.println("Mandatory product selection logic enhancement : iCount" + iCount );
								 * System.out.println("Mandatory product selection logic enhancement : iMin" + iMin );
								 * System.out.println("Mandatory product selection logic enhancement : iMax" + iMax );
								 * }
								 * /****************ENDING*******************TO PRINT QUERRY*********************************************
								 */

								/*
								 *  It means that under this OptionGroup there is only one product and we are going to move this product
								 * down automatically iMinMand times
								 * /****************************************MAKING OF NEXT QUERRY***************************************
								 */

								// Begin DEL v9.01d
								// optionProductRow = null;                                                                                                                              // Initializing the Object Class for the OptionGroup table
								// End DEL v9.01d
								if (null == optionProductTable) {
									optionProductTable = (OptionProduct) teleSessionMgr
											.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
								}

								Vector vctObjOGIDOFInternal = null;

								// BEGIN DELETE v5.80a
								// vctObjOGIDOFInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup, FINAL_ZERO);
								// END DELETE v5.80a
								// BEGIN ADD v5.80a
								vctObjOGIDOFInternal = optionProductTable
										.vctSearchByOptionGroupIDandObsolete(
												lOptionGroup,
												FINAL_ZERO,
												bProductDetailProperty.iRateClassIDNew);

								// END ADD v5.80a

								/**
								 * **************STARTING*****************TO PRINT QUERRY
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * strSql.setLength(0); //Initialising
								 * strSql.append("SELECT OPTIONPRODUCTID, PRODUCTID, PROVISIONABLE, BILLABLE FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(lOptionGroup);
								 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
								 * System.out.println("The Querry is : " + strSql.toString());
								 * }
								 * /****************ENDING*******************TO PRINT QUERRY*********************************************
								 */

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */

								// Begin DEL v9.01d
								// if (GAfePropertyLoader.DEBUG) {
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								// System.out.println(" before loop in case of movemandatory productdown");
								// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
								/* END DELETE VER: 5.59tan */

								// lStart = System.currentTimeMillis();
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								/* END DELETE VER: 5.59tan */

								// }
								// End DEL v9.01d
								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								if (null != vctObjOGIDOFInternal) {
									OptionProductRow optionProductRowTemp = null;

									// for each  record in the vector of OptionProduct Records
									for (int iOGIDOFCounter = FINAL_ZERO; iOGIDOFCounter < vctObjOGIDOFInternal
											.size(); iOGIDOFCounter++) {
										optionProductRowTemp = (OptionProductRow) vctObjOGIDOFInternal
												.elementAt(iOGIDOFCounter);

										/**
										 * **************STARTING*****************TO PRINT THE DATA********************************************
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("Hurray i am here For New mandatory products--------------------->");
										 * System.out.println("Option GroupId" +lOptionGroup);
										 * System.out.println("Option ProductId" +((OptionProductRow)(vctObjOGIDOFInternal.elementAt(iOGIDOFCounter))).lOptionProductID);
										 * System.out.println(" ProductId" +((OptionProductRow)(vctObjOGIDOFInternal.elementAt(iOGIDOFCounter))).lProductID);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
										iInstance = iInstance + FINAL_ONE;
										iSLevel = iLevel + FINAL_ONE;

										// iParentInstance       =       iParentInstance;
										lOptionProductID = optionProductRowTemp.lOptionProductID;

										/**
										 * **************STARTING*****************TO PRINT THE DATA********************************************
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("Before Callling objGetDetailProductNonSelected function ");
										 *
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */

										// Begin DEL v9.01d
										// if (GAfePropertyLoader.DEBUG) {
										/* BEGIN DELETE VER: 5.59tan */

										// System.out.println("**********************************************");
										// System.out.println(" Before calling objGetDetailProductNonSelected ...");
										/* BEGIN DELETE VER: 5.59tan */

										// lStart = System.currentTimeMillis();
										/* BEGIN DELETE VER: 5.59tan */

										// System.out.println("**********************************************");
										/* BEGIN DELETE VER: 5.59tan */

										// }
										// End DEL v9.01d
										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										//BEGIN MODIFY : V3.10
										//Modified Code for fixing DEFECT id 70, Obsolete Masters
										//Changed the Call objGetDetailProductNonSelected with additional input parameters
										//                                                                              bProductDetail  = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRowTemp.lProductID), Long.valueOf(lOptionGroup), Long.valueOf(lOptionProductID), optionProductRowTemp.iProvisionable, optionProductRowTemp.iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, iSLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
										iIsDefault = FINAL_ZERO;

										// BEGIN DELETE V6.02d
										// bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRowTemp.lProductID), Long.valueOf(lOptionGroup), Long.valueOf(lOptionProductID), optionProductRowTemp.iProvisionable, optionProductRowTemp.iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, iSLevel, iInstance, iParentInstance, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
										// END DELETE V6.02d
										// BEGIN ADD V6.02d
										bProductDetail = objGetDetailProductNonSelected(
												CustomerID,
												Long.valueOf(
														optionProductRowTemp.lProductID),
												Long.valueOf(lOptionGroup),
												Long.valueOf(lOptionProductID),
												optionProductRowTemp.iProvisionable,
												optionProductRowTemp.iBillable,
												bProductDetailProperty.lCurrencyID,
												FINAL_ZERO,
												iSLevel,
												iInstance,
												iParentInstance,
												bProductDetailProperty.lPaymentMethodRC,
												bProductDetailProperty.lPaymentMethodNRC,
												bProductDetailProperty.lPaymentMethodUsage,
												iIsDefault,
												bProductDetailProperty.vctProductSelected,
												bProductDetailProperty);

										// END ADD V6.02d
										BProductDetail bProductDetailTmp1 = null;

										//                                      END ADD: V3.10
										//                                      Modified Code for fixing DEFECT id 70, Obsolete Masters

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */

										// Begin DEL v9.01d
										// if (GAfePropertyLoader.DEBUG) {
										/* BEGIN DELETE VER: 5.59tan */

										// System.out.println("**********************************************");
										// System.out.println(" After calling objGetDetailProductNonSelected ...Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
										/* END DELETE VER: 5.59tan */

										// lStart = System.currentTimeMillis();
										/* BEGIN DELETE VER: 5.59tan */

										// System.out.println("**********************************************");
										/* END DELETE VER: 5.59tan */

										// }
										// End DEL v9.01d
										/** **************ENDING*******************TO PRINT THE DATA***************************************** */

										/**
										 * **************STARTING*****************TO PRINT THE DATA********************************************
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("**********************>");
										 * System.out.println("Level = " + iLevel);
										 * System.out.println("iParentInstance = " + iParentInstance);
										 * System.out.println("After Callling objGetDetailProductNonSelected function ");
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
										for (int iMove = FINAL_ZERO; iMove < iMin; iMove++) {
											if (FINAL_ZERO != iMove) {

												//                                              BEGIN ADD: V3.10
												//                                              Added Code for fixing DEFECT id 70, Obsolete Masters
												//                                              Added Code to Clone the BProduct Detail
												bProductDetailTmp1 = new BProductDetail();
												bProductDetailTmp1 = (BProductDetail) bProductDetail
														.CloneMe();

												//                                              END ADD: V3.10
												//                                              Deleted Code for fixing DEFECT id 70, Obsolete Masters
												iInstance = iInstance
														+ FINAL_ONE;
												bProductDetail.iInstance = iInstance;

												// BEGIN ADD : V3.20
												bProductDetailTmp1.iInstance = iInstance;

												// END ADD : V3.20
											}

											/**
											 * **************STARTING*****************TO PRINT THE DATA********************************************
											 * if(GAfePropertyLoader.DEBUG)
											 * {
											 * System.out.println("Before inserting new mandatory product in the bottom grid*********>");
											 * System.out.println("Level = " + bProductDetail.iLevel);
											 * System.out.println("iParentInstance = " + bProductDetail.iParentInstance);
											 * System.out.println("iInstance = " + bProductDetail.iInstance);
											 * System.out.println("iPostionInLowerSelectedVector = " + iPostionInLowerSelectedVector);
											 * System.out.println("strDescription1 = " + bProductDetail.strDescription1);
											 * }
											 * /****************ENDING*******************TO PRINT THE DATA******************************************
											 */

											//                                          BEGIN MODIFY : V3.10
											//                                          Modified Code for fixing DEFECT id 70, Obsolete Masters
											//                                          Changed the element which is to be inserted in bProductDetailProperty as cloning of Object is necessary
											//                                                                                    bProductDetailProperty.vctProductSelected.insertElementAt(bProductDetail, (iPostionInLowerSelectedVector + FINAL_ONE));
											//                                                                                                                                iLevel  =       iSLevel;
											//                                           BEGIN MODIFY : V3.20
											iSParentInstance = bProductDetail.iInstance;

											//                                          END MODIFY : V3.20

											if (FINAL_ZERO != iMove) {
												bProductDetailProperty.vctProductSelected
														.insertElementAt(
																bProductDetailTmp1,
																(iPostionInLowerSelectedVector + FINAL_ONE));

												//                                              BEGIN DELETE : V3.20
												//                                                                                                                                                   iSParentInstance        =       bProductDetailTmp1.iInstance;
												//                                              END DELETE : V3.20
											} else {
												bProductDetailProperty.vctProductSelected
														.insertElementAt(
																bProductDetail,
																(iPostionInLowerSelectedVector + FINAL_ONE));

												//                                              BEGIN DELETE : V3.20
												//                                                                                                                                                   iSParentInstance        =       bProductDetail.iInstance;
												//                                              END DELETE : V3.20
											}

											iLevel = iSLevel;

											//                                          END MODIFY : V3.10
											//                                          Modified Code for fixing DEFECT id 70, Obsolete Masters

											/**
											 * **************STARTING*****************TO PRINT THE DATA********************************************
											 * if(GAfePropertyLoader.DEBUG)
											 * {
											 * System.out.println("In Mandatory products : Before calling iterative function");
											 * System.out.println("In Mandatory products : ProductId"+ bProductDetail.lProductID);
											 * }
											 * /****************ENDING*******************TO PRINT THE DATA******************************************
											 */

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */
											// Begin DEL v9.01d
											// if (GAfePropertyLoader.DEBUG) {
											/* BEGIN DELETE VER: 5.59tan */

											// System.out.println("**********************************************");
											// System.out.println(" before recursion movemandatory productdown : Time " + iPostionInLowerSelectedVector);
											// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
											/* END DELETE VER: 5.59tan */

											// lStart = System.currentTimeMillis();
											/* BEGIN DELETE VER: 5.59tan */

											// System.out.println("**********************************************");
											/* END DELETE VER: 5.59tan */

											// }
											// End DEL v9.01d
											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
											iReturnCount = iMoveMandatoryProductsDown(
													bProductDetailProperty,
													bProductDetail.lProductID,
													CustomerID,
													iLevel,
													iSParentInstance,
													++iPostionInLowerSelectedVector,
													optionGroupTable,
													optionProductTable);
											--iPostionInLowerSelectedVector;
											iLevel = iSLevel - FINAL_ONE;

											// BEGIN ADD V7.00c
											if (null == forbiddenProductTable) {
												forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
														.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
											}

											vdFncForbiddenProductForObjSelect(
													bProductDetailProperty,
													bProductDetail.lProductID
															.longValue(),
													forbiddenProductTable);

											// END ADD V7.00c

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */

											// Begin DEL v9.01d
											// if (GAfePropertyLoader.DEBUG) {
											/* BEGIN DELETE VER: 5.59tan */

											// System.out.println("**********************************************");
											// System.out.println(" after recursion movemandatory productdown : Time " + iPostionInLowerSelectedVector);
											// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
											/* BEGIN DELETE VER: 5.59tan */

											// lStart = System.currentTimeMillis();
											/* BEGIN DELETE VER: 5.59tan */

											// System.out.println("**********************************************");
											/* BEGIN DELETE VER: 5.59tan */

											// }
											// End DEL v9.01d
											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										}

										// BEGIN DEL V7.00c

										/*
										 * if (null == forbiddenProductTable) {
										 *   forbiddenProductTable = (ForbiddenProduct) teleSessionMgr.getMasterTable("FORBIDDENPRODUCT");               // Getting the OptionGroup table from the session
										 * }
										 * vdFncForbiddenProductForObjSelect(bProductDetailProperty, bProductDetail.lProductID.longValue(), forbiddenProductTable);
										 */

										// END ADD V7.00c
										/**
										 * **************STARTING*****************TO PRINT THE DATA********************************************
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("Level = " + iLevel);
										 * System.out.println("iParentInstance = " + iParentInstance);
										 * System.out.println("**********************>");
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */

										/**
										 * **************STARTING*****************TO PRINT THE DATA********************************************
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("After Adding Vector to vctProductSelected: " +bProductDetailProperty.vctProductSelected);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
									} // end of the for loop
								} // end of the if loop for the null pointer exception of the vector
							}

							if (iCount > FINAL_ZERO) {

								/** **************************************MAKING OF NEXT QUERRY************************************** */

								// Begin DEL v9.01d
								// optionProductRow = null;                                                                                                                              // Initializing the Object Class for the OptionGroup table
								// End DEL v9.01d
								Vector vctObjOGIDOInternal = null;

								// BEGIN ADD v5.80a
								// vctObjOGIDOInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroup, FINAL_ZERO);
								// END ADD v5.80a
								// BEGIN ADD v5.80a
								vctObjOGIDOInternal = optionProductTable
										.vctSearchByOptionGroupIDandObsolete(
												lOptionGroup,
												FINAL_ZERO,
												bProductDetailProperty.iRateClassIDNew);

								// END ADD v5.80a

								/**
								 * **************STARTING*****************TO PRINT QUERRY
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * strSql.setLength(0); //Initialising
								 * strSql.append("SELECT PRODUCTID, OPTIONPRODUCTID, PROVISIONABLE, BILLABLE FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(lOptionGroup);
								 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
								 * System.out.println("The Querry is : " + strSql.toString());
								 * }
								 * /****************ENDING*******************TO PRINT QUERRY*********************************************
								 */
								if (null != vctObjOGIDOInternal) {
									OptionProductRow optionProductRowTemp = null;

									// for each  record in the vector of OptionProduct Records
									for (int iOGIDOCounter = FINAL_ZERO; iOGIDOCounter < vctObjOGIDOInternal
											.size(); iOGIDOCounter++) {
										optionProductRowTemp = (OptionProductRow) vctObjOGIDOInternal
												.elementAt(iOGIDOCounter);

										/**
										 * **************STARTING*****************TO PRINT THE DATA********************************************
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("Hurray i am here For optional products--------------------->");
										 * System.out.println("Option GroupId" +lOptionGroup);
										 * System.out.println("Option ProductId" + ((OptionProductRow)(vctObjOGIDOInternal.elementAt(iOGIDOCounter))).lOptionProductID);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
										iSLevel = iLevel + FINAL_ONE;

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */

										// Begin DEL v9.01d
										// if (GAfePropertyLoader.DEBUG) {
										/* BEGIN DELETE VER: 5.59tan */

										// System.out.println("**********************************************");
										// System.out.println(" Before function objGetDetailProductNonSelected");
										// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
										/* END DELETE VER: 5.59tan */

										// lStart = System.currentTimeMillis();
										/* BEGIN DELETE VER: 5.59tan */

										// System.out.println("**********************************************");
										/* END DELETE VER: 5.59tan */

										// }
										// End DEL v9.01d
										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										//BEGIN MODIFY : V3.10
										//Modified Code for fixing DEFECT id 70, Obsolete Masters
										//Changed the Call objGetDetailProductNonSelected with additional input parameters
										//                                  bProductDetail          =       objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRowTemp.lProductID), Long.valueOf(lOptionGroup), Long.valueOf(optionProductRowTemp.lOptionProductID), optionProductRowTemp.iProvisionable, optionProductRowTemp.iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, iSLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
										//BEGIN DELETE V5.89A
										//                                                                              iIsDefault = FINAL_ONE;
										//END DELETE V5.89A
										//BEGIN ADD V5.89A
										iIsDefault = FINAL_ZERO;

										//                                      END ADD V5.89A

										// BEGIN DELETE V6.02d
										// bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRowTemp.lProductID), Long.valueOf(lOptionGroup), Long.valueOf(optionProductRowTemp.lOptionProductID), optionProductRowTemp.iProvisionable, optionProductRowTemp.iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, iSLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
										// END DELETE V6.02d
										// BEGIN ADD V6.02d
										bProductDetail = objGetDetailProductNonSelected(
												CustomerID,
												Long.valueOf(
														optionProductRowTemp.lProductID),
												Long.valueOf(lOptionGroup),
												Long.valueOf(
														optionProductRowTemp.lOptionProductID),
												optionProductRowTemp.iProvisionable,
												optionProductRowTemp.iBillable,
												bProductDetailProperty.lCurrencyID,
												FINAL_ZERO,
												iSLevel,
												FINAL_ZERO,
												FINAL_ZERO,
												bProductDetailProperty.lPaymentMethodRC,
												bProductDetailProperty.lPaymentMethodNRC,
												bProductDetailProperty.lPaymentMethodUsage,
												iIsDefault,
												bProductDetailProperty.vctProductSelected,
												bProductDetailProperty);

										// END ADD V6.02d
										//END MODIFY: V 3.10
										//Modified Code for fixing DEFECT id 70, Obsolete Masters

										/* Now we need to add this business object in the vctProductNonSelected. Where to add this is */

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */

										// Begin DEL v9.01d
										// if (GAfePropertyLoader.DEBUG) {
										/* BEGIN DELETE VER: 5.59tan */

										// System.out.println("*******j***************************************");
										// System.out.println(" After function objGetDetailProductNonSelected");
										// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
										/* BEGIN DELETE VER: 5.59tan */

										// lStart = System.currentTimeMillis();
										/* BEGIN DELETE VER: 5.59tan */

										// System.out.println("**********************************************");
										/* BEGIN DELETE VER: 5.59tan */

										// }
										// End DEL v9.01d
										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

										if (null == optionGroupTable) {
											optionGroupTable = (OptionGroup) teleSessionMgr
													.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
										}

										optionGroupRow = optionGroupTable
												.prSearchByOptionGroupIDandObsolete(
														lOptionGroup,
														FINAL_ZERO);

										/**
										 * **************STARTING*****************TO PRINT QUERRY
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * strSql.setLength(0); //Initialising
										 * strSql.append("SELECT PRODUCTID FROM OPTIONGROUP WHERE OPTIONGROUPID = ").append(lOptionGroup);
										 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
										 * System.out.println("The Querry is : " + strSql.toString());
										 * }
										 * /****************ENDING*******************TO PRINT QUERRY*********************************************
										 */
										if (null != optionGroupRow) {
											iLevel = bProductDetail.iLevel
													- FINAL_ONE;

											// bProductDetail.iInstance                =       FINAL_ZERO;
											// bProductDetail.iParentInstance  =       FINAL_ZERO;
											iFindPositionInVectorlevelProductId = iFindPositionInVectorlevelProductId(
													bProductDetailProperty.vctProductNonSelected,
													Long.valueOf(
															optionGroupRow.lProductID),
													iLevel);

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement ");
												// System.out.println("********************************************************");
												// System.out.println("bProductDetail.iInstance          : " + bProductDetail.iInstance);
												// System.out.println("bProductDetail.iParentInstance    : " + bProductDetail.iParentInstance);
												// System.out.println("********************************************************");
											}

											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
											int iFoundProductInVector = 0;

											iFoundProductInVector = iFindProductInVectorLevelandOptionGroupIDandProductId(
													bProductDetailProperty.vctProductNonSelected,
													bProductDetail.iLevel,
													bProductDetail.lOptionGroupID,
													bProductDetail.lProductID);

											if (iFoundProductInVector == FINAL_ZERO) {
												bProductDetailProperty.vctProductNonSelected
														.insertElementAt(
																bProductDetail,
																++iFindPositionInVectorlevelProductId);
											}

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */

											/* BEGIN DELETE VER: 5.59tan */

											// if(GAfePropertyLoader.DEBUG)
											// {
											// System.out.println("After Adding Vector  vctProductNonSelected: " +bProductDetailProperty.vctProductSelected);
											// }
											/* END DELETE VER: 5.59tan */

											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										} // end of the if loop
									} // end of the for loop
								} // end of the if loop for null pointer exception of the vector
							} // end of the option product logic else part
						} // end of the else part of the if loop
					} // end of the for loop
				} // end of the if loop for null pointer exception of the vector

				/** **************STARTING*****************TO PRINT QUERRY******************************************** */
				if (GAfePropertyLoader.DEBUG) {

					GLogger.chkpt("Inside if statement ");	// System.out.println("Coming out of the iterative function for productId : " + lProductID);
					// System.out.println("Level: " + iLevel);
				}

				/** **************ENDING*******************TO PRINT QUERRY******************************************** */
			} // End of if loop
		} // end of the if loop
		catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		// Begin DEL v9.01d
		// finally {

		/** **************STARTING*****************TO PRINT THE DATA****************************************** */

		/* BEGIN DELETE VER: 5.59tan */

		// if(GAfePropertyLoader.DEBUG)
		// {
		// System.out.println("*******j***************************************");
		// System.out.println(" End of function iMoveMandatoryProductsDown - iPostionInLowerSelectedVector : " + iPostionInLowerSelectedVector + " - Time taken : " + (System.currentTimeMillis() - lStartMain) + " Milliseconds");
		// System.out.println("**********************************************");
		// }
		/* BEGIN DELETE VER: 5.59tan */

		/** **************ENDING*******************TO PRINT THE DATA***************************************** */

		// }
		// End DEL v9.01d
		// Returning of the String
		return iReturnCount;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function Returns the Integer that gives the position of the productid
	 *                                  for a given productid and level.
	 *
	 *  @param          :       Vector vctProductNonSelected, Long ProductID, int iLevel
	 *
	 *  @return         :       int     -       Returns the Integer that gives the position of the productid for a given productid and level
	 * /******************************************************************************************************************************
	 */
	protected int iFindPositionInVectorlevelProductId(
			Vector vctProductNonSelected, Long ProductID, int iLevel)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		iSizeOfVector = vctProductNonSelected.size();

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if (((String.valueOf(ProductID)).equals(String
					.valueOf(((BProductDetail) vctProductNonSelected
							.elementAt(iCount)).lProductID)))
					&& ((String.valueOf(iLevel)).equals(String
							.valueOf(((BProductDetail) vctProductNonSelected
									.elementAt(iCount)).iLevel)))) {
				break;
			} // end of the if loop
		} // end of the for loop

		// Returning of the String
		return --iCount;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function does all the validations for the Unselecting of the Product from the lower grid to
	 *                                  The upper Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetail, Long lProductID
	 *
	 *  @return         :       int     -       This function will Return 1 in case all the validations for the unselected product is done
	 * /******************************************************************************************************************************
	 */
	public int iValidateUnSelect(BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetail, Long lProductID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iFirstCheck = 0; // Local Varaible Declaration
		int iSecondCheck = 0; // Local Varaible Declaration
		int iMin; // Local Varaible Declaration
		int iMax; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration
		Long lOptionGroupID; // Local Varaible Declaration

		// BEGIN ADD V5.20a
		// Comment: Changes made for Security Service
		// Begin DEL v9.01d
		// Vector vctProduct = null;
		// int iSizeOfVector = 0;
		// long lTempProdId = 0;
		// boolean bCheck = false;
		// boolean bNotProvisioned = false;
		// End DEL v9.01d
		// END ADD V5.20a

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("iHidden --> " +bProductDetail.iHidden);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			// BEGIN DELETE V5.20a
			// Comment: Changes made for Security Service
			/*
			 * if(FINAL_ONE == bProductDetail.iHidden)
			 */

			// END DELETE V5.20a
			// BEGIN ADD V5.20a
			// Comment: Changes made for Security Service
			//BEGIN DELETE V5.60b
			//Comment: deleting this as Security product can be available in both the grid and can be moved.
			/*
			 vctProduct = GAfeDescription.vctGetAllTypeIds(GAfeConstants.PRODUCT_SPECIALTYPE);
			 if (null != vctProduct && 0 != vctProduct.size())
			 {
			 iSizeOfVector = vctProduct.size();
			 for (int iCnt = 0;iCnt < iSizeOfVector;iCnt++ )
			 {
			 lTempProdId = Long.parseLong((String)vctProduct.elementAt(iCnt));
			 if (lTempProdId == bProductDetail.lProductID.longValue())
			 {
			 bCheck = true;
			 if (null == bProductDetail.dtActivationDate)
			 {
			 bNotProvisioned = true;
			 }
			 else
			 {
			 if (null != bProductDetailProperty && null != bProductDetailProperty.lCustomerProductLineID)
			 {
			 bNotProvisioned = bCheckProvisionStatus(bProductDetailProperty.lCustomerProductLineID.longValue());
			 }
			 }
			 break;
			 }
			 }
			 }
			 if (true == bCheck && true == bNotProvisioned)
			 {
			 //BEGIN DELETE V 5.25a
			 //Need to modify error lables mismatch
			 //throw new AfeException(GErrorCodes.ERRAFE_00812); // This product can not be deactivated as they are not provisioned.
			 //END DELETE V 5.25a
			 //BEGIN ADD V 5.25a
			 //Need to modify error lables mismatch
			 throw new AfeException(GErrorCodes.ERRAFE_00830); // This product can not be deactivated as they are not provisioned.
			 //END ADD V 5.25a
			 }



			 else if (FINAL_ONE == bProductDetail.iHidden && !bCheck)
			 //END ADD V5.20a
			 {
			 throw new AfeException("ERRAFE_00508"); //This is a Special Product Based On Your Selection So Cannot be Removed
			 }
			 else
			 {
			 */

			//          END DELETE 5.60b
			iFirstCheck = 1;

			//          BEGIN DELETE 5.60b

			//          }
			//END DELETE5.60b
			if (iFirstCheck == 1) {
				lOptionGroupID = bProductDetail.lOptionGroupID;

				/** **************************************MAKING OF NEXT QUERRY************************************** */
				OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

				if (null == optionGroupTable) {
					optionGroupTable = (OptionGroup) teleSessionMgr
							.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
				}

				optionGroupRow = optionGroupTable
						.prSearchByOptionGroupIDandObsolete(lOptionGroupID
								.longValue(), FINAL_ZERO);

				/**
				 * **************STARTING*****************TO PRINT QUERRY
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * strSql.setLength(0); //Initialising
				 * strSql.append("SELECT MINMANDPRODUCTS, MAXMANDPRODUCTS FROM OPTIONGROUP WHERE OPTIONGROUPID = ").append(lOptionGroupID);
				 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
				 * System.out.println("The Querry is : " + strSql.toString());
				 * }
				 * /****************ENDING*******************TO PRINT QUERRY*********************************************
				 */
				iMin = optionGroupRow.iMinMandProducts;
				iMax = optionGroupRow.iMaxMandProducts;

				/** **************************************MAKING OF NEXT QUERRY************************************** */

				// Begin DEL v9.01d
				// OptionProductRow optionProductRow = null;                                                                                                                             // Initializing the Object Class for the OptionGroup table
				// End DEL v9.01d
				if (null == optionProductTable) {
					optionProductTable = (OptionProduct) teleSessionMgr
							.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
				}

				Vector vctObjOPIDOInternal = null;

				// BEGIN DELETE v5.80a
				// vctObjOPIDOInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroupID.longValue(), FINAL_ZERO);
				// END DELETE v5.80a
				// BEGIN ADD v5.80a
				vctObjOPIDOInternal = optionProductTable
						.vctSearchByOptionGroupIDandObsolete(lOptionGroupID
								.longValue(), FINAL_ZERO,
								bProductDetailProperty.iRateClassIDNew);

				// END ADD v5.80a

				/**
				 * **************STARTING*****************TO PRINT QUERRY
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * strSql.setLength(0); //Initialising
				 * strSql.append("SELECT COUNT(*) LCOUNT FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(lOptionGroupID);
				 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
				 * System.out.println("The Querry is : " + strSql.toString());
				 * }
				 * /****************ENDING*******************TO PRINT QUERRY*********************************************
				 */
				if (null != vctObjOPIDOInternal) {
					iCount = vctObjOPIDOInternal.size();
				}

				// BEGIN ADD : V5.34
				int iSizeOfSelVec = bProductDetailProperty.vctProductSelected
						.size();
				int iNoOfOccurences = 0;

				bProductDetail = null;

				for (int iCountProds = 0; iCountProds < iSizeOfSelVec; iCountProds++) {
					bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
							.elementAt(iCountProds);

					if (lProductID.longValue() == bProductDetail.lProductID
							.longValue()) {
						iNoOfOccurences++;
					}
				}

				// END ADD : V5.34

				if ((iMin == iCount) && (iCount == iMax)) {

					// BEGIN MODIFY : V5.34
					// Added Condition to check for No Of Occurences of the Product Greated than Max Count.
					// BEGIN DELETE V5.69a
					// if (iNoOfOccurences > iMax)
					// END DELETE V5.69a
					// BEGIN ADD V5.69a
					if (iNoOfOccurences <= iMax)

					// END ADD V5.69a
					{
						throw new AfeException("ERRAFE_00509"); /* This Product is a Mandatory Product and Cannot be Unselected */
					} else {
						iSecondCheck = 1;
					}

					// END MODIFY : V5.34

					// BEGIN DELETE V5.35b
					// comment: not required
					// BEGIN ADD V5.34a
					// comment: incorporating changes done by Amit Sharma for LN323
					// throw new AfeException("ERRAFE_00509");   /*This Product is a Mandatory Product and Cannot be Unselected*/
					// END ADD V5.34a
					// END DELETE V5.35b
				} // end of the if loop
				else {
					iSecondCheck = 1;
				} // end of the else part of the if loop
			} // end of the if loop
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				/* BEGIN DELETE VER: 5.59tan */

				// System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
				/* END DELETE VER: 5.59tan */
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return iSecondCheck;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will will return the BProductDetailProperty BO in which the product is moved from
	 *                                  the lower grid to the upper Grid.
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetail, Long lProductID, Long CustomerID
	 *
	 *  @return         :       BProductDetailProperty  -       This function will Return BProductDetailProperty Bussiness Object
	 * /******************************************************************************************************************************
	 */
	public BProductDetailProperty objUnSelect(
			BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetailTargetLower, Long lProductID,
			Long CustomerID, int iPositionInVector) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		GLogger.chkpt("objUnSelect");
		if(bProductDetailProperty!=null){
			GLogger.chkpt("bProductDetailProperty" +bProductDetailProperty.toString());
		}
		if(bProductDetailTargetLower != null){
			GLogger.chkpt("bProductDetailTargetLower"+bProductDetailTargetLower.toString());
		}
		
		// Begin DEL v9.01d
		// int iReturnCount = 0;         //Local Varaible Declaration
		// End DEL v9.01d
		int iLevel = 0; // Local Varaible Declaration
		int isLevel = 0; // Local Varaible Declaration
		int iFindPositionInVectorlevelProductId = 0; // Local Varaible Declaration
		boolean bFlagToInsert = false;
		Long lPackageProductID = Long.valueOf(0);

		// BEGIN ADD V5.20a
		// Comment: Changes made for Security Service
		Vector vctProduct = null;
		int iSizeOfVector = 0;
		long lTempProdId = 0;
		boolean bCheck = false;

		// END ADD V5.20a

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("Position in vector is : " + iPositionInVector);
				// System.out.println("The BO to be Deleted is : " + bProductDetailTargetLower);
				// System.out.println("The BO to be Deleted is iLevel: " + bProductDetailTargetLower.iLevel);
				// System.out.println("The BO to be Deleted is iParentInstance: " + bProductDetailTargetLower.iParentInstance);
				// System.out.println("The BO to be Deleted is iInstance: " + bProductDetailTargetLower.iInstance);
				// System.out.println("The BO to be Deleted is bProductDetailTargetLower.iProductID: " + bProductDetailTargetLower.lProductID);

				/* BEGIN DELETE VER: 5.59tan */

				// System.out.println("The Before Vector : " +bProductDetailProperty.vctProductSelected);
				/* END DELETE VER: 5.59tan */
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */

			/* first***************STARTING*****************TO PRINT THE DATA******************************************* */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				/* BEGIN DELETE VER: 5.59tan */

				// System.out.println("\n");
				/* END DELETE VER: 5.59tan */

				// System.out.println("****************************************************************************************");
				// System.out.println("The Upper Grid Size is : " + bProductDetailProperty.vctProductNonSelected.size());
				// System.out.println("The Lower Grid Size is : " + bProductDetailProperty.vctProductSelected.size());
				// System.out.println("****************************************************************************************");
				/* BEGIN DELETE VER: 5.59tan */

				// System.out.println("\n");
				/* END DELETE VER: 5.59tan */
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * MProduct   mProduct        =       new MProduct(teleSessionMgr, bSession);
			 * mProduct.vdPrintCompleteBProductDetailProperty(bProductDetailProperty);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */

			/* first***************STARTING*****************TO PRINT THE DATA******************************************* */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("\n");
				// System.out.println("****************************************************************************************");
				// System.out.println("The Upper Grid Size is : " + bProductDetailProperty.vctProductNonSelected.size());
				// System.out.println("The Lower Grid Size is : " + bProductDetailProperty.vctProductSelected.size());
				// System.out.println("****************************************************************************************");
				// System.out.println("\n");
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */

			/* BEGIN DELETE VER: 5.59tan */

			// if(GAfePropertyLoader.DEBUG)
			// {
			// System.out.println("The After Vector : " +bProductDetailProperty.vctProductSelected);
			// }
			/* END DELETE VER: 5.59tan */

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			bProductDetailProperty.iHelpActivated = 0;
			bProductDetailProperty.iHelpActivated++;
			bProductDetailProperty = objNewPopulatevctProductDeleted(
					bProductDetailProperty, bProductDetailTargetLower);

			/* Now we need to keep this business object in vctProductNonSelected vector at right position. */
			OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			// BEGIN ADD V5.29a
			// comment: getting the optionproduct table
			if (null == optionProductTable) {
				optionProductTable = (OptionProduct) teleSessionMgr
						.getMasterTable(string_OPTIONPRODUCT);
			}

			// END ADD V5.29a

			//          BEGIN MODIFY V3.10
			//          Modified Code to fix Defect id 70 - Obsolete Masters
			//          Modified Code to take Validity of Option Group into Consideration
			//                        optionGroupRow  =   optionGroupTable.prSearchByOptionGroupIDandObsolete(bProductDetailTargetLower.lOptionGroupID.longValue(), FINAL_ZERO);
			optionGroupRow = optionGroupTable
					.ogSearchByOptionGroupIDValidandObsolete(
							bProductDetailTargetLower.lOptionGroupID
									.longValue(), FINAL_ZERO,
							new java.util.Date());

			//          Modified Code to fix Defect id 70 - Obsolete Masters
			//          END MODIFY V3.10

			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT PRODUCTID FROM OPTIONGROUP WHERE OPTIONGROUPID = ").append(bProductDetailTargetLower.lOptionGroupID);
			 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */
			// Begin DEL v9.01d
			// int iFindProductInVector = 0;
			// End DEL v9.01d
			//                        iFindProductInVector    =       iFindProductInVector(bProductDetailProperty.vctProductNonSelected, bProductDetailTargetLower.lProductID);
			// BEGIN DELETE V5.20a
			// Comment: Changes made for Security Service
			// BEGIN ADD V3.10
			// Added Code to fix Defect id 70 - Obsolete Masters
			// Added Code to take Validity of Option Group into Consideration
			/*              if (null != optionGroupRow)
			 {
			 */

			// Added Code to fix Defect id 70 - Obsolete Masters
			// END ADD V3.10
			// END DELETE V5.20a
			// BEGIN ADD V5.20a
			// Comment: Changes made for Security Service
			vctProduct = GAfeDescription
					.vctGetAllTypeIds(GAfeConstants.PRODUCT_SPECIALTYPE);

			if ((null != vctProduct) && (0 != vctProduct.size())) {
				iSizeOfVector = vctProduct.size();

				for (int iCnt = 0; iCnt < iSizeOfVector; iCnt++) {
					lTempProdId = Long.parseLong((String) vctProduct
							.elementAt(iCnt));

					if (lTempProdId == bProductDetailTargetLower.lProductID
							.longValue()) {
						bCheck = true;

						break;
					}
				}
			}

			GLogger.debug(CLASS_NAME, "objUnSelect",
					"bProductDetailTargetLower = " + bProductDetailTargetLower);

			if ((null != optionGroupRow) && !bCheck) {

				// END ADD V5.20a
				bFlagToInsert = false;

				for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductNonSelected
						.size(); iCounter++) {
					BProductDetail bProductDetail = new BProductDetail();

					bProductDetail = (BProductDetail) bProductDetailProperty.vctProductNonSelected
							.elementAt(iCounter);
					GLogger.debug(CLASS_NAME, "objUnSelect",
							"bProductDetail.lProductID UnSelected = "
									+ bProductDetail.lProductID);

					if ((bProductDetailTargetLower.lProductID.longValue() == bProductDetail.lProductID
							.longValue())
							&& (bProductDetailTargetLower.lOptionGroupID
									.longValue() == bProductDetail.lOptionGroupID
									.longValue())) {
						bFlagToInsert = true;

						break;
					}
				}

				GLogger.debug(CLASS_NAME, "objUnSelect", "bFlagToInsert 1= "
						+ bFlagToInsert);

				if (!bFlagToInsert) {

					// if(FINAL_ZERO   ==      iFindProductInVector)
					{
						BProductDetail bProductDetailTmp = new BProductDetail();

						bProductDetailTmp = (BProductDetail) bProductDetailTargetLower
								.CloneMe();
						iLevel = (bProductDetailTmp.iLevel - FINAL_ONE);
						iFindPositionInVectorlevelProductId = iFindPositionInVectorlevelProductId(
								bProductDetailProperty.vctProductNonSelected,
								Long.valueOf(optionGroupRow.lProductID), iLevel);
						bProductDetailTmp.iInstance = FINAL_ZERO;
						bProductDetailTmp.iParentInstance = FINAL_ZERO;
						bProductDetailTmp.lCustomerProductID = Long.valueOf(0);

						// Incident no : 1132
						// Pending
						int iVctParamSize = 0;

						iVctParamSize = bProductDetailTmp.vctParameters.size();

						for (int iDCounter = FINAL_ZERO; iDCounter < iVctParamSize; iDCounter++) {
							BProductParameter bProductParameter = new BProductParameter();

							bProductParameter = (BProductParameter) bProductDetailTmp.vctParameters
									.elementAt(iDCounter);

							if (FINAL_ONE == bProductParameter.vctParameterValues
									.size()) {

								// Do Not UnComment this Line This Line is for Refernce
								// bProductParameter.strParamDefValue    =       String.valueOf((Vector)((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
								// Putting this Default Value of the Product Parameter if and only if the size of the vctParameterValues
								// is equal to 1 that is the vector is of size 1 and we are overwriting the value of that parameter with
								// the default value of the paramater
								if (FINAL_ZERO != bProductParameter.strParamDefValue
										.length()) {

									GLogger.chkpt("Inside if statement ");	// ((Vector)((Vector)bProductParameter.vctParameterValues).elementAt(FINAL_ZERO)).setElementAt(bProductParameter.strParamDefValue, FINAL_ZERO);
								}
							}

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {

								GLogger.chkpt("Inside if statement ");	// System.out.println("\n\n\t\tbProductParameter.strParamDefValue" + bProductParameter.strParamDefValue);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							bProductParameter.strParamOldValue = "";
						}

						//                      BEGIN ADD: V3.10
						//                      Added function for fixing DEFECT id 70, Obsolete Masters
						//                      Added Code to recalculate priceSetting when we are moving the product Up.
						Vector vctAllBillableParameters = null;
						int iNoOfOccurences;

						//                      BEGIN DELETE V5.89A
						//                                                                                                    iIsDefault = FINAL_ONE;
						//                      END DELETE V5.89A
						//                      BEGIN ADD V5.89A
						iIsDefault = FINAL_ZERO;

						//                      END ADD V5.89A

						// BEGIN DELETE V5.92a
						// iNoOfOccurences = FINAL_ZERO;  // Cant we take this option
						// END DELETE V5.92a
						// BEGIN ADD V5.92a
						iNoOfOccurences = 1;

						// END ADD V5.92a
						GLogger.debug(CLASS_NAME, "objUnSelect",
								"bProductDetailTmp.iBillable = "
										+ bProductDetailTmp.iBillable);
						vctAllBillableParameters = null; // Cant we take this option

						if (FINAL_ONE == bProductDetailTmp.iBillable) {

							// BEGIN ADD V6.02d
							LProduct_ext objLPExt = new LProduct_ext(
									teleSessionMgr, bSession);
							Vector vctFinalParams = objLPExt
									.vctPopulateProductParameter(
											bProductDetailProperty,
											bProductDetailTmp.lProductID
													.longValue(),
											bProductDetailTmp.lOptionProductID
													.longValue(), CustomerID);

							GLogger.debug(CLASS_NAME, "objUnSelect",
									"vctFinalParams = " + vctFinalParams);

							if (null != vctFinalParams) {
								vctAllBillableParameters = (Vector) vctFinalParams
										.elementAt(1);
							}

							// END ADD V6.02d
							fncInternalForPSIDandPriceCalAfterChanges(
									bProductDetailTmp,
									vctAllBillableParameters,
									bProductDetailProperty.lCurrencyID,
									bProductDetailTmp.lProductID,
									bProductDetailProperty.lPaymentMethodRC,
									bProductDetailProperty.lPaymentMethodNRC,
									bProductDetailProperty.lPaymentMethodUsage,
									bProductDetailProperty.iInClExc,
									iIsDefault, iNoOfOccurences, FINAL_ZERO);
						}

						/*
						 if (FINAL_ONE == bProductDetailTmp.iBillable)
						 {
						 bProductDetailTmp = objGetPriceSettingId(bProductDetailTmp, vctAllBillableParameters,iNoOfOccurences,iIsDefault);
						 }
						 */

						//                      Change made for fixing DEFECT id 70, Obsolete Masters
						//                      END ADD: V3.10
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement ");
							// System.out.println("[objUnSelect : ] > Size of vctProductNonSelected before : " + bProductDetailProperty.vctProductNonSelected.size());
							// System.out.println("[objUnSelect : ] > Product which is added : " + bProductDetailTmp.strDescription1);
						}

						bProductDetailProperty.vctProductNonSelected
								.insertElementAt(bProductDetailTmp,
										++iFindPositionInVectorlevelProductId);
					}
				}

				//              BEGIN ADD V 3.10
				//              Added Code to fix Defect id 70 - Obsolete Masters
				//              Added Brace to complete the loop
			}

			//          Added Code to fix Defect id 70 - Obsolete Masters
			//          END ADD V 3.10

			// BEGIN ADD V5.29a
			// comment: added to show other products in option group too
			// Begin Add : VTemp
			// Added Condition to handle null Option Group (Not Valid)
			if (null != optionGroupRow) {

				//              End Add : VTemp
				Vector vctOptionProducts = null;

				// BEGIN DELETE V6.07m

				/*
				 * if (optionGroupRow.iMaxMandProducts == 1) {
				 */

				// END DELETE V6.07m
				// BEGIN ADD V6.07m
				if (optionGroupRow.iMaxMandProducts >= 1) {

					// END ADD V6.07m
					// BEGIN DELETE v5.80a
					// vctOptionProducts = optionProductTable.vctSearchByOptionGroupIDandObsolete(bProductDetailTargetLower.lOptionGroupID.longValue(), 0);
					// END DELETE v5.80a
					// BEGIN ADD v5.80a
					vctOptionProducts = optionProductTable
							.vctSearchByOptionGroupIDandObsolete(
									bProductDetailTargetLower.lOptionGroupID
											.longValue(), 0,
									bProductDetailProperty.iRateClassIDNew);

					// END ADD v5.80a
				}

				GLogger.debug(CLASS_NAME, "objUnSelect", "vctOptionProducts = "
						+ vctOptionProducts);
				GLogger.debug(CLASS_NAME, "objUnSelect", "bCheck = " + bCheck);

				if ((null != vctOptionProducts) && !bCheck) {
					for (int iCounterOnOP = 0; iCounterOnOP < vctOptionProducts
							.size(); iCounterOnOP++) {
						OptionProductRow optionProductRow = (OptionProductRow) vctOptionProducts
								.elementAt(iCounterOnOP);

						if (null == productTable) {
							productTable = (Product) teleSessionMgr
									.getMasterTable(string_PRODUCT);
						}

						ProductRow productRow = productTable
								.prSearchByProductIDandObsolete(
										optionProductRow.lProductID, 0);

						bFlagToInsert = false;

						for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductNonSelected
								.size(); iCounter++) {
							BProductDetail bProductDetail = null;

							bProductDetail = (BProductDetail) bProductDetailProperty.vctProductNonSelected
									.elementAt(iCounter);

							if ((optionProductRow.lProductID == bProductDetail.lProductID
									.longValue())
									&& (optionProductRow.lOptionGroupID == bProductDetail.lOptionGroupID
											.longValue())) {
								bFlagToInsert = true;

								break;
							}
						}

						GLogger.debug(CLASS_NAME, "objUnSelect",
								"bFlagToInsert for product "
										+ optionProductRow.lProductID
										+ " is = " + bFlagToInsert);

						if (!bFlagToInsert) {
							BProductDetail bProductDetailTmp = new BProductDetail();

							//                          BEGIN ADD V5.89A
							iIsDefault = FINAL_ZERO;

							//                          END ADD V5.89A

							//                          BEGIN DELETE V5.89A
							//                                                                                bProductDetailTmp = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRow.lProductID), Long.valueOf(optionProductRow.lOptionGroupID), Long.valueOf(optionProductRow.lOptionGroupID), optionProductRow.iProvisionable, optionProductRow.iBillable, bProductDetailProperty.lCurrencyID, productRow.iHidden, iLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, FINAL_ONE, bProductDetailProperty.vctProductSelected);
							//                          END DELETE V5.89A
							//                          BEGIN ADD V5.89A
							//                          BEGIN DELETE VER 5.94a
							// bProductDetailTmp = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRow.lProductID), Long.valueOf(optionProductRow.lOptionGroupID), Long.valueOf(optionProductRow.lOptionGroupID), optionProductRow.iProvisionable, optionProductRow.iBillable, bProductDetailProperty.lCurrencyID, productRow.iHidden, iLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
							// END DELETE VER 5.94a
							// BEGIN ADD VER 5.94a
							// BEGIN DELETE V6.02d
							// bProductDetailTmp = objGetDetailProductNonSelected(CustomerID, Long.valueOf(optionProductRow.lProductID), Long.valueOf(optionProductRow.lOptionGroupID), Long.valueOf(optionProductRow.lOptionProductID), optionProductRow.iProvisionable, optionProductRow.iBillable, bProductDetailProperty.lCurrencyID, productRow.iHidden, iLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
							// END DELETE V6.02d
							// END ADD VER 5.94a
							// BEGIN DELETE V6.02d
							GLogger.chkpt("Before calla 1111");
							bProductDetailTmp = objGetDetailProductNonSelected(
									CustomerID,
									Long.valueOf(optionProductRow.lProductID),
									Long.valueOf(optionProductRow.lOptionGroupID),
									Long.valueOf(optionProductRow.lOptionProductID),
									optionProductRow.iProvisionable,
									optionProductRow.iBillable,
									bProductDetailProperty.lCurrencyID,
									productRow.iHidden, iLevel, FINAL_ZERO,
									FINAL_ZERO,
									bProductDetailProperty.lPaymentMethodRC,
									bProductDetailProperty.lPaymentMethodNRC,
									bProductDetailProperty.lPaymentMethodUsage,
									iIsDefault,
									bProductDetailProperty.vctProductSelected,
									bProductDetailProperty);

							// END DELETE V6.02d
							//END ADD V5.89A
							bProductDetailTmp.iLevel = bProductDetailTargetLower.iLevel;
							iFindPositionInVectorlevelProductId = iFindPositionInVectorlevelProductId(
									bProductDetailProperty.vctProductNonSelected,
									Long.valueOf(optionProductRow.lProductID),
									iLevel);
							bProductDetailProperty.vctProductNonSelected
									.insertElementAt(
											bProductDetailTmp,
											++iFindPositionInVectorlevelProductId);
						}
					}
				}

				// END ADD V5.29a
				//Begin ADD : VTemp
			}

			//          END ADD : VTemp

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("After Adding Vector : " + bProductDetailProperty.vctProductNonSelected);
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("\n\n\n");
				// System.out.println("****************************************************************************************");
				// System.out.println("*************BEFORE CALLING THE FIRST FUNCTION*************");
				// System.out.println("****************************************************************************************");
				// System.out.println("\n");
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * mProduct.vdPrintCompleteBProductDetailProperty(bProductDetailProperty);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */

			//          objUnSelectRemoveForbiddenProduct(BProductDetailProperty bProductDetailProperty, Long lProductID, Long CustomerID, Long lOptionGroupID, int iLevel)
			//          The Package product ID
			// Begin DEL v9.01d
			// int iLocation = FINAL_ZERO;
		/*	if ((GAfeDescription.lGetTypeId("PRODUCT_DIMOND") != ((BProductDetail) bProductDetailProperty.vctProductSelected
					.elementAt(FINAL_ZERO)).lProductID.longValue())
					&& (GAfeDescription.lGetTypeId("PRODUCT_GOLDEN") != ((BProductDetail) bProductDetailProperty.vctProductSelected
							.elementAt(FINAL_ZERO)).lProductID.longValue())
					&& (GAfeDescription.lGetTypeId("PRODUCT_SILVER") != ((BProductDetail) bProductDetailProperty.vctProductSelected
							.elementAt(FINAL_ZERO)).lProductID.longValue())
					&& (GAfeDescription.lGetTypeId("PRODUCT_NP") != ((BProductDetail) bProductDetailProperty.vctProductSelected
							.elementAt(FINAL_ZERO)).lProductID.longValue())
					&& (GAfeDescription.lGetTypeId("PRODUCT_CPSDETAIL") != ((BProductDetail) bProductDetailProperty.vctProductSelected
							.elementAt(FINAL_ZERO)).lProductID.longValue())) {
				lPackageProductID = ((BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(FINAL_ZERO)).lProductID;

				// iLocation = FINAL_ZERO;
			} else {
				lPackageProductID = ((BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(FINAL_ONE)).lProductID;

				// iLocation = FINAL_ONE;
			}*/

			// End DEL v9.01d
			for(int i=0;  i < bProductDetailProperty.vctProductSelected.size(); i++ ){

				if(((BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(i)).lProductTypeID == 2){

					lPackageProductID = ((BProductDetail) bProductDetailProperty.vctProductSelected
							.elementAt(i)).lProductID;

					break;
				}
			}
			/* first***************STARTING*****************TO PRINT THE DATA******************************************* */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("******Before calling the remove package line  ************************************");
				// System.out.println("The Upper Grid Size is : " + bProductDetailProperty.vctProductNonSelected.size());
				// System.out.println("The Lower Grid Size is : " + bProductDetailProperty.vctProductSelected.size());
				// System.out.println("****************************************************************************************");
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */

			// BProductDetail bProductDetailTemp =       new BProductDetail();
			// bProductDetailTemp        =       ((BProductDetail)bProductDetailProperty.vctProductSelected.elementAt(iLocation));
			if (lPackageProductID.longValue() == lProductID.longValue()) {
				isLevel = FINAL_ONE;
			} else {
				isLevel = 2;
			}

			/* first***************STARTING*****************TO PRINT THE DATA******************************************* */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("*********Before forbidden product function *************************************");
				// System.out.println("The Upper Grid Size is : " + bProductDetailProperty.vctProductNonSelected.size());
				// System.out.println("The Lower Grid Size is : " + bProductDetailProperty.vctProductSelected.size());
				// System.out.println("****************************************************************************************");
			}
			//
			GLogger
					.chkpt("objBProductDetailProperty.iRateClassIDOld before objNewUnSelectAddForbiddenProduct:"
							+ bProductDetailProperty.iRateClassIDOld);
			GLogger
					.chkpt("objBProductDetailProperty.iRateClassIDNew before objNewUnSelectAddForbiddenProduct:"
							+ bProductDetailProperty.iRateClassIDNew);
			//
			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			GLogger.chkpt("lProductID DSO"+lProductID);
			GLogger.chkpt("lPackageProductID DSO"+lPackageProductID);

			isProductUnselect = true;
			objNewUnSelectAddForbiddenProduct(bProductDetailProperty,
					lPackageProductID, lProductID, CustomerID, isLevel);
			GLogger.chkpt("objNewUnSelectAddForbiddenProduct After DSO"+ bProductDetailProperty.toString());
			/* first***************STARTING*****************TO PRINT THE DATA******************************************* */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("**************After calling forbidden function *********************************");
				// System.out.println("The Upper Grid Size is : " + bProductDetailProperty.vctProductNonSelected.size());
				// System.out.println("The Lower Grid Size is : " + bProductDetailProperty.vctProductSelected.size());
				// System.out.println("**************Before calling remove package function ***************************");
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */

			//          objUnSelectRemoveForbiddenProduct(bProductDetailProperty, lProductID, CustomerID, bProductDetailTargetLower.lOptionGroupID, bProductDetailTargetLower.iLevel);
			/*              for(int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected.size() ; iCounter++ )
			 {
			 BProductDetail  bProductDetail = new BProductDetail();
			 bProductDetail  =       (BProductDetail)bProductDetailProperty.vctProductSelected.elementAt(iCounter);

			 if(lProductID.longValue() != bProductDetail.lProductID.longValue())
			 {
			 objUnSelectRemoveForbiddenProduct(bProductDetailProperty, bProductDetail.lProductID, CustomerID, bProductDetail.lOptionGroupID, bProductDetail.iLevel);
			 }
			 }
			 */

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * mProduct.vdPrintCompleteBProductDetailProperty(bProductDetailProperty);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */

			/* THE THIRD CHECK STARTS OVER HERE THAT IS TO REMOVE PACAKGE AND THEN REMOVE ALL ITS CONTENTS FROM THE BOTTOM */
			/* AS WELL AS THE UPPER GRID */
			bProductDetailProperty = objRemovePackage(bProductDetailProperty,
					bProductDetailTargetLower, lProductID, CustomerID);
			bProductDetailProperty.vctProductSelected
					.removeElementAt(iPositionInVector);

			//          BEGIN ADD: V3.10
			//          Added function for fixing DEFECT id 70, Obsolete Masters
			//          Added Code to recalculate priceSetting of similer products when we are moving the product Up. These we are doing for the concept of min/max in the pricesetting table.
			int iSelSize = 0;

			iIsDefault = FINAL_ZERO;

			Vector vctAllBillableParameters = null;
			int iNoOfOccurences = 0;
			BProductDetail bSelProductDetail = null;

			iSelSize = bProductDetailProperty.vctProductSelected.size();

			if (iSelSize != 0) {
				for (int iIntSelCntr = 0; iIntSelCntr < iSelSize; iIntSelCntr++) {
					bSelProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
							.elementAt(iIntSelCntr);

					/* BEGIN DELETE VER: 5.59tan */

					// if (GAfePropertyLoader.DEBUG)
					// {
					// System.out.println("bProductDetailTargetLower.lProductID.longValue() inside Rotation Logic : "+bProductDetailTargetLower.lProductID.longValue());
					// System.out.println("bSelProductDetail.lProductID.longValue() inside Rotation Logic : "+bSelProductDetail.lProductID.longValue());
					// }
					/* END DELETE VER: 5.59tan */
					if ((bSelProductDetail.lProductID.longValue() == bProductDetailTargetLower.lProductID
							.longValue())
							&& (bProductDetailTargetLower.iLevel == bSelProductDetail.iLevel)
							&& (bProductDetailTargetLower.iParentInstance == bSelProductDetail.iParentInstance)) {
						if (FINAL_ONE == bSelProductDetail.iBillable) {
							iNoOfOccurences++;
							vctAllBillableParameters = vctGetAllBillableParameters(bSelProductDetail);

							// Begin 2.02
							fncInternalForPSIDandPriceCalAfterChanges(
									bSelProductDetail,
									vctAllBillableParameters,
									bProductDetailProperty.lCurrencyID,
									bSelProductDetail.lProductID,
									bProductDetailProperty.lPaymentMethodRC,
									bProductDetailProperty.lPaymentMethodNRC,
									bProductDetailProperty.lPaymentMethodUsage,
									bProductDetailProperty.iInClExc,
									iIsDefault, iNoOfOccurences, FINAL_ONE);

							// End 2.02
							bProductDetailProperty.vctProductSelected
									.setElementAt(bSelProductDetail,
											iIntSelCntr);

							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement ");
								// System.out.println("iNoOfOccurences inside Rotation Logic : " + iNoOfOccurences);
								// System.out.println("vctAllBillableParameters : " + vctAllBillableParameters);
								// System.out.println("bSelProductDetail.lPriceSettingId : " + bSelProductDetail.lPriceSettingID);
							}
						}
					}
				}
			}

			//          Change made for fixing DEFECT id 70, Obsolete Masters
			//          END ADD: V3.10

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("****************************************************************************************");
			 * System.out.println("*************AFTER CALLING THE OBJREMOVEPACKAGE FUNCTION*************");
			 * System.out.println("****************************************************************************************");
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			iAfterForbiddenCalculation(bProductDetailProperty);

			//          BEGIN ADD : V3.10
			//          Added Code to print the data
			//                       MProduct        mProduct        =       new MProduct(teleSessionMgr, bSession);
			//                       mProduct.vdPrintCompleteBProductDetailProperty(bProductDetailProperty);

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * mProduct.vdPrintCompleteBProductDetailProperty(bProductDetailProperty);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			//          END ADD : V3.10
			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * mProduct.vdPrintCompleteBProductDetailProperty(bProductDetailProperty);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
		GLogger.logException(ex);	//	ex.printStackTrace(System.out);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return bProductDetailProperty;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function will remove the forbidden products from the ProductNonSelected vector
	 * for the Products in the vctProductSelected in BProductDetailProperty business object
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty
	 *
	 *  @return         :       iStatus - Status
	 */
	int iAfterForbiddenCalculation(BProductDetailProperty bProductDetailProperty) { // Starting Braces of the Function
		final int FINAL_ONE = 1; // Initialization of finalOne("1")
		final int FINAL_ZERO = 0; // Initialization of finalZero("0")
		int iCounter = 0; // Initialization of counter
		int iCounter2 = 0; // Initialization of counter
		int iCounter3 = 0; // Initialization of counter
		int iStatus = 0; // Initialization of Index
		Vector vctForbiddenProduct = null; // internal local vector

		// Begin DEL v9.01d
		// ForbiddenProductRow forbProdRow = null;                                               // Initialization of ForbiddenProduct Row
		// End DEL v9.01d
		ForbiddenProduct forbProdTable = null; // Initializing the Container Class for the ForbiddenProduct table

		forbProdTable = (ForbiddenProduct) teleSessionMgr
				.getMasterTable(string_FORBIDDENPRODUCT); // Getting the FORBIDDENPROMOTION table from the session
		vctForbiddenProduct = (Vector) forbProdTable.vctGetAllExisting(); // Retrieving the ForbiddenProducts

		if ((null == bProductDetailProperty)
				|| (null == bProductDetailProperty.vctProductSelected)
				|| (null == bProductDetailProperty.vctProductNonSelected)
				|| (null == vctForbiddenProduct)) {
			return iStatus;
		}

		/**
		 * REMOVING  THE FORBIDDEN PRODUCTS
		 */

		// for each element in the Vector of Selected Products
		for (iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected
				.size(); iCounter++) {

			// for each element in the vector of Forbidden Products
			for (iCounter3 = FINAL_ZERO; iCounter3 < vctForbiddenProduct.size(); iCounter3++) {

				// for the products having the entry as the productid in the forbidden product table
				if (((ForbiddenProductRow) (vctForbiddenProduct
						.elementAt(iCounter3))).lProductID == (((BProductDetail) (bProductDetailProperty.vctProductSelected
						.elementAt(iCounter))).lProductID).longValue()) {

					// Removing the Products forbidden to this productsID
					for (iCounter2 = FINAL_ZERO; iCounter2 < bProductDetailProperty.vctProductNonSelected
							.size(); iCounter2++) {
						if (((ForbiddenProductRow) (vctForbiddenProduct
								.elementAt(iCounter3))).lForbProductID == ((BProductDetail) (bProductDetailProperty.vctProductNonSelected
								.elementAt(iCounter2))).lProductID.longValue()) {
							bProductDetailProperty.vctProductNonSelected
									.removeElementAt(iCounter2);
							iCounter2--;
						}
					}
				}
			}
		}

		iStatus = FINAL_ONE;

		// returning the status Vector after removing the forbidden products
		return iStatus;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will will return the BProductDetailProperty BO in which the product is moved from
	 *                                  the lower grid to the upper Grid.
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetail, Long lProductID, Long CustomerID
	 *
	 *  @return         :       BProductDetailProperty  -       This function will Return BProductDetailProperty Bussiness Object
	 * /******************************************************************************************************************************
	 */
	public BProductDetailProperty objUnSelectRemoveForbiddenProduct(
			BProductDetailProperty bProductDetailProperty, Long lProductID,
			Long CustomerID, Long lOptionGroupID, int iLevel) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		// Begin DEL v9.01d
		// int iReturnCount = 0;                                                         //Local Varaible Declaration
		// End DEL v9.01d
		int iFindPositionInVectorlevelProductId = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry

			/* STARTING THE SECOND CHECK OVER HERE THAT IS TO ADD FORBIDDEN PRODUCT TO THE UPPER GRID */

			// ForbiddenProductRow forbiddenProductRow = null;                                                                                                                           // Initializing the Object Class for the OptionGroup table
			// End DEL v9.01d
			if (null == forbiddenProductTable) {
				forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
						.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
			}

			Vector vctObjGetALLDATAFPInternal = null;

			vctObjGetALLDATAFPInternal = forbiddenProductTable
					.vctSearchByProductID(lProductID.longValue());

			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT FORBPRODUCTID FROM FORBIDDENPRODUCT WHERE PRODUCTID = ").append(lProductID);
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */
			if (null != vctObjGetALLDATAFPInternal) {

				// for each  record in the vector of ForbiddenProduct Records
				for (int iASCounter = FINAL_ZERO; iASCounter < vctObjGetALLDATAFPInternal
						.size(); iASCounter++) {

					// Begin DEL v9.01d
					// OptionProductRow optionProductRow = null;                                                                                                                         // Initializing the Object Class for the OptionGroup table
					// End DEL v9.01d
					if (null == optionProductTable) {
						optionProductTable = (OptionProduct) teleSessionMgr
								.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
					}

					Vector vctObjOPIDOSInternal = null;

					// BEGIN DELETE v5.80a
					// vctObjOPIDOSInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroupID.longValue(), FINAL_ZERO);
					// END DELETE v5.80a

					// BEGIN ADD v5.80a
					vctObjOPIDOSInternal = optionProductTable
							.vctSearchByOptionGroupIDandObsolete(lOptionGroupID
									.longValue(), FINAL_ZERO,
									bProductDetailProperty.iRateClassIDNew);

					// END ADD v5.80a

					/**
					 * **************STARTING*****************TO PRINT QUERRY
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * strSql.setLength(0); //Initialising
					 * strSql.append("SELECT OptionProductId, ProductId, provisionable , billable FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(lOptionGroupID);
					 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
					 * System.out.println("The Querry is : " + strSql.toString());
					 * }
					 * /****************ENDING*******************TO PRINT QUERRY*********************************************
					 */
					if (null != vctObjOPIDOSInternal) {

						// for each  record in the vector of OptionProduct Records
						for (int iOPCounter = FINAL_ZERO; iOPCounter < vctObjOPIDOSInternal
								.size(); iOPCounter++) {
							if (((ForbiddenProductRow) (vctObjGetALLDATAFPInternal
									.elementAt(iASCounter))).lForbProductID == ((OptionProductRow) (vctObjOPIDOSInternal
									.elementAt(iOPCounter))).lProductID) {
								BProductDetail bProductDetail = null;

								//                              BEGIN MODIFY : V3.10
								//                              Modified Code for fixing DEFECT id 70, Obsolete Masters
								//                              Changed the Call objGetDetailProductNonSelected with additional input parameters

								//                              bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(((OptionProductRow)(vctObjOPIDOSInternal.elementAt(iOPCounter))).lProductID), lOptionGroupID, Long.valueOf(((OptionProductRow)(vctObjOPIDOSInternal.elementAt(iOPCounter))).lOptionProductID), ((OptionProductRow)(vctObjOPIDOSInternal.elementAt(iOPCounter))).iProvisionable, ((OptionProductRow)(vctObjOPIDOSInternal.elementAt(iOPCounter))).iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, iLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
								//BEGIN DELETE V5.89A
								//                                                      iIsDefault = FINAL_ONE;
								//END DELETE V5.89A
								//BEGIN ADD V5.89A
								iIsDefault = FINAL_ZERO;

								//                              END ADD V5.89A

								// BEGIN DELETE V6.02d
								// bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iOPCounter))).lProductID), lOptionGroupID, Long.valueOf(((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iOPCounter))).lOptionProductID), ((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iOPCounter))).iProvisionable, ((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iOPCounter))).iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, iLevel, FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
								// END DELETE V6.02d
								// BEGIN ADD V6.02d
								bProductDetail = objGetDetailProductNonSelected(
										CustomerID,
										Long.valueOf(
												((OptionProductRow) (vctObjOPIDOSInternal
														.elementAt(iOPCounter))).lProductID),
										lOptionGroupID,
										Long.valueOf(
												((OptionProductRow) (vctObjOPIDOSInternal
														.elementAt(iOPCounter))).lOptionProductID),
										((OptionProductRow) (vctObjOPIDOSInternal
												.elementAt(iOPCounter))).iProvisionable,
										((OptionProductRow) (vctObjOPIDOSInternal
												.elementAt(iOPCounter))).iBillable,
										bProductDetailProperty.lCurrencyID,
										FINAL_ZERO,
										iLevel,
										FINAL_ZERO,
										FINAL_ZERO,
										bProductDetailProperty.lPaymentMethodRC,
										bProductDetailProperty.lPaymentMethodNRC,
										bProductDetailProperty.lPaymentMethodUsage,
										iIsDefault,
										bProductDetailProperty.vctProductSelected,
										bProductDetailProperty);

								// END ADD V6.02d

								//                              END MODIFY : V3.10
								//                              Modified Code for fixing DEFECT id 70, Obsolete Masters
								iLevel = (bProductDetail.iLevel - FINAL_ONE);
								iFindPositionInVectorlevelProductId = iFindPositionInVectorlevelProductId(
										bProductDetailProperty.vctProductNonSelected,
										Long.valueOf(
												((OptionProductRow) (vctObjOPIDOSInternal
														.elementAt(iOPCounter))).lProductID),
										iLevel);
								bProductDetailProperty.vctProductNonSelected
										.insertElementAt(
												bProductDetail,
												++iFindPositionInVectorlevelProductId);

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */

								/* BEGIN DELETE VER: 5.59tan */

								// if(GAfePropertyLoader.DEBUG)
								// {
								// System.out.println("After Adding Vector : " +bProductDetailProperty.vctProductNonSelected);
								// }
								/* END DELETE VER: 5.59tan */

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop for handling the null pointer exception
				} // end of the for loop
			} // end of the if loop
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return bProductDetailProperty;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will will return the BProductDetailProperty BO in which the product is moved from
	 *                                  the lower grid to the upper Grid.
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetail, Long lProductID, Long CustomerID
	 *
	 *  @return         :       BProductDetailProperty  -       This function will Return BProductDetailProperty Bussiness Object
	 * /******************************************************************************************************************************
	 */
	public BProductDetailProperty objNewUnSelectAddForbiddenProduct(
			BProductDetailProperty bProductDetailProperty,
			Long lPackageProductID, Long lProductID, Long CustomerID, int iLevel)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
GLogger.chkpt("Inside objNewUnSelectAddForbiddenProduct DSO ="+iLevel);
		// Begin DEL v9.01d
		// int iReturnCount = 0;                                                         //Local Varaible Declaration
		// End DEL v9.01d
		int iFindPositionInVectorlevelProductId = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// Vector vctTempProducts = new Vector();
		// End DEL v9.01d
		boolean bFlagToInsert = false;
		boolean insertAlacarte = false;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d

			/*              vctTempProducts =       GAfeDescription.vctGetAllTypeIds("PRODUCT_PACKAGELVL2");

			 if(null != vctTempProducts)
			 {
			 if((-1 != vctTempProducts.indexOf(lProductID.toString())))
			 lPackageProductID       =       Long.valueOf(GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE"));
			 }
			 */

			/** **************STARTING*****************TO PRINT QUERRY******************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");
				// System.out.println("The lPackageProductID is : " + lProductID);

				/* BEGIN DELETE VER: 5.59tan */

				// System.out.println("The lPackageProductID is : " +vctTempProducts);
				/* END DELETE VER: 5.59tan */

				// System.out.println("The lPackageProductID is : " + lPackageProductID);
			}

			/** **************ENDING*******************TO PRINT QUERRY******************************************** */
			if (lProductID.longValue() == lPackageProductID.longValue()) {
				lPackageProductID = bProductDetailProperty.lProductID;
			}

			// Begin DEL v9.01d
			// OptionGroupRow optionGroupRow = null;                                                                                             // Initializing the Object Class for the OptionGroup table
			// End DEL v9.01d
			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			// Begin DEL v9.01d
			// Vector vctoptionGroup = null;
			// End DEL v9.01d
			List lstoptionGroup = null;

			//          BEGIN MODIFY : V3.10
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters
			//          Taken the valid option group depending on Current Date.
			//                        vctoptionGroup  =   optionGroupTable.vctSearchByProductIDandObsolete(lPackageProductID.longValue(), FINAL_ZERO);
			// BEGIN DELETE v5.80a
			// vctoptionGroup = optionGroupTable.vctSearchByProductIDValidandObsolete(lPackageProductID.longValue(), FINAL_ZERO, new java.util.Date());
			// END DELETE v5.80a
			// BEGIN ADD v5.80a
			// vctoptionGroup = optionGroupTable.vctSearchByProductIDValidandObsolete(lPackageProductID.longValue(), FINAL_ZERO, new java.util.Date(), bProductDetailProperty.iRateClassIDNew);
			lstoptionGroup = optionGroupTable
					.searchByProductIDValidandObsolete(lPackageProductID
							.longValue(), FINAL_ZERO, new java.util.Date(),
							bProductDetailProperty.iRateClassIDNew);

			// END ADD v5.80a

			//          END MODIFY : V3.10
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters
			if (GAfeConstants.FULLMOBILEINTERNET_PRODUCTID == lProductID
					.longValue()
					|| GAfeConstants.FULLMOBILETELEFONIE_PRODUCTID == lProductID
							.longValue()) {
				GLogger
						.chkpt("objBProductDetailProperty.iRateClassIDOld inside objNewUnSelectAddForbiddenProduct before setting:"
								+ bProductDetailProperty.iRateClassIDOld);
				GLogger
						.chkpt("objBProductDetailProperty.iRateClassIDNew inside objNewUnSelectAddForbiddenProduct before setting:"
								+ bProductDetailProperty.iRateClassIDNew);
				bProductDetailProperty.iRateClassIDOld = bProductDetailProperty.iRateClassIDNew;
				bProductDetailProperty.iRateClassIDNew = GAfeConstants.DUMMYRC_FULLMOBILE;
				GLogger
						.chkpt("objBProductDetailProperty.iRateClassIDOld inside objNewUnSelectAddForbiddenProduct after setting:"
								+ bProductDetailProperty.iRateClassIDOld);
				GLogger
						.chkpt("objBProductDetailProperty.iRateClassIDNew inside objNewUnSelectAddForbiddenProduct after setting:"
								+ bProductDetailProperty.iRateClassIDNew);

			}
			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT PRODUCTID FROM OPTIONGROUP WHERE PRODUCTID = ").append(lPackageProductID);
			 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */
			if (!lstoptionGroup.isEmpty()) {
				for (int iCounter = FINAL_ZERO; iCounter < lstoptionGroup
						.size(); iCounter++) {

					// Begin DEL v9.01d
					// OptionProductRow optionProductRow = null;                                                                                                                         // Initializing the Object Class for the OptionGroup table
					// End DEL v9.01d
					if (null == optionProductTable) {
						optionProductTable = (OptionProduct) teleSessionMgr
								.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
					}

					Vector vctObjOPIDOSInternal = null;

					// BEGIN DELETE v5.80a
					// vctObjOPIDOSInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(((OptionGroupRow) vctoptionGroup.elementAt(iCounter)).lOptionGroupID, FINAL_ZERO);
					// END DELETE v5.80a
					// BEGIN ADD v5.80a
					vctObjOPIDOSInternal = optionProductTable
							.vctSearchByOptionGroupIDandObsolete(
									((OptionGroupRow) lstoptionGroup
											.get(iCounter)).lOptionGroupID,
									FINAL_ZERO,
									bProductDetailProperty.iRateClassIDNew);

					// END ADD v5.80a
					// 14.4 Play/Play+ Changes start OptionProductRow
					/*
                    if(lProductID.longValue()== GAfeDescription.REX_RIO_ZONE && isProductUnselect){
                    	GLogger.chkpt("14.4 Play/Play+ GAfeDescription.REX_RIO_ZONE : " +lProductID.longValue());
                    	//OptionGroupRow = optionProductTable.optSearchByProductID( GAfeDescription.A_LA_CARTE_ZONE)
                    	Vector optionProductRow = optionProductTable.optSearchByProductID( GAfeDescription.A_LA_CARTE_ZONE);
                    	GLogger.chkpt("14.4 Play/Play+ optionProductRow : " +optionProductRow);
                    	if (null != vctObjOPIDOSInternal) {
                    		for (int iCounter1 = FINAL_ZERO; iCounter1 < vctObjOPIDOSInternal
    								.size(); iCounter1++) {
                    			if(GAfeDescription.A_LA_CARTE_ZONE == ((OptionProductRow) (vctObjOPIDOSInternal
										.elementAt(iCounter1))).lProductID){
                    				for (Object optionProduct : optionProductRow) {
	                               		 vctObjOPIDOSInternal.addElement((OptionProductRow)optionProduct);
	                               		 isProductUnselect = false;
	                               		 GLogger.chkpt("14.4 Play/Play+ optionProduct : " +optionProduct);
	                               		 break;
                    				}
                    				insertAlacarte = true;
                    			}
                    		}
                    	}
                    	
                    	GLogger.chkpt("14.4 Play/Play+ vctObjOPIDOSInternal : " +vctObjOPIDOSInternal);
                    }
					*/
                    //Play/Play+ Changes end   
					

					/**
					 * **************STARTING*****************TO PRINT QUERRY
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * strSql.setLength(0); //Initialising
					 * strSql.append("SELECT OptionProductId, ProductId, provisionable , billable FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(((OptionGroupRow)vctoptionGroup.elementAt(iCounter)).lOptionGroupID);
					 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
					 * System.out.println("The Querry is : " + strSql.toString());
					 * }
					 * /****************ENDING*******************TO PRINT QUERRY*********************************************
					 */
					if (null != vctObjOPIDOSInternal) {
						for (int iCounter1 = FINAL_ZERO; iCounter1 < vctObjOPIDOSInternal
								.size(); iCounter1++) {

							// Begin DEL v9.01d
							// ForbiddenProductRow forbiddenProductRow = null;                                                                                                                           // Initializing the Object Class for the OptionGroup table
							// End DEL v9.01d
							if (null == forbiddenProductTable) {
								forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
										.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
							}

							Vector vctObjGetALLDATAFPInternal = null;

							vctObjGetALLDATAFPInternal = forbiddenProductTable
									.vctSearchByProductIDandObsolete(lProductID
											.longValue(), FINAL_ZERO);

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * strSql.setLength(0); //Initialising
							 * strSql.append("SELECT FORBPRODUCTID FROM FORBIDDENPRODUCT WHERE PRODUCTID = ").append(lProductID.longValue());
							 * System.out.println("The Querry is : " + strSql.toString());
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
							if (null != vctObjGetALLDATAFPInternal) {

								// for each  record in the vector of ForbiddenProduct Records
								for (int iASCounter = FINAL_ZERO; iASCounter < vctObjGetALLDATAFPInternal
										.size(); iASCounter++) {
									if (((ForbiddenProductRow) (vctObjGetALLDATAFPInternal
											.elementAt(iASCounter))).lForbProductID == ((OptionProductRow) (vctObjOPIDOSInternal
											.elementAt(iCounter1))).lProductID) {
										bFlagToInsert = false;

										for (int iVctCounter = FINAL_ZERO; iVctCounter < bProductDetailProperty.vctProductNonSelected
												.size(); iVctCounter++) {
											BProductDetail bProductDetail = new BProductDetail();

											bProductDetail = (BProductDetail) bProductDetailProperty.vctProductNonSelected
													.elementAt(iVctCounter);

											if ((((OptionProductRow) (vctObjOPIDOSInternal
													.elementAt(iCounter1))).lProductID == bProductDetail.lProductID
													.longValue())
													&& (((OptionGroupRow) lstoptionGroup
															.get(iCounter)).lOptionGroupID == bProductDetail.lOptionGroupID
															.longValue())) {
												bFlagToInsert = true;

												break;
											}
										}

										// add code here
										ProductRow productRow = null; // Initializing the Object Class for the Vat table

										if (null == productTable) {
											productTable = (Product) teleSessionMgr
													.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
										}

										productRow = (ProductRow) productTable
												.prSearchByProductIDandObsolete(
														((OptionProductRow) (vctObjOPIDOSInternal
																.elementAt(iCounter1))).lProductID,
														FINAL_ZERO);

										if ((lProductID.longValue() != ((OptionProductRow) (vctObjOPIDOSInternal
												.elementAt(iCounter1))).lProductID)
												&& (!bFlagToInsert)
												&& ((string_ONE)
														.equalsIgnoreCase(String
																.valueOf(productRow.lLevelID)))) {

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */
											if (GAfePropertyLoader.DEBUG) {

												GLogger.chkpt("Inside if statement ");	// System.out.println("Adding for the Foll Product ID : " + ((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iCounter1))).lProductID);
											}

											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
											BProductDetail bProductDetail = new BProductDetail();

											//                                          BEGIN MODIFY : V3.10
											//                                          Modified Code for fixing DEFECT id 70, Obsolete Masters
											//                                          Changed the Call objGetDetailProductNonSelected with an additional input parameter as iIsDefault
											//                                                                                                                        bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(((OptionProductRow)(vctObjOPIDOSInternal.elementAt(iCounter1))).lProductID), Long.valueOf(((OptionGroupRow)vctoptionGroup.elementAt(iCounter)).lOptionGroupID), Long.valueOf(((OptionProductRow)(vctObjOPIDOSInternal.elementAt(iCounter1))).lOptionProductID), ((OptionProductRow)(vctObjOPIDOSInternal.elementAt(iCounter1))).iProvisionable, ((OptionProductRow)(vctObjOPIDOSInternal.elementAt(iCounter1))).iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, (iLevel + 1), FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
											//                                          BEGIN DELETE V5.89A
											//                                                                                                                        iIsDefault = FINAL_ONE;
											//                                          END DELETE V5.89A
											//                                          BEGIN ADD V5.89A
											iIsDefault = FINAL_ZERO;

											//                                          END ADD V5.89A

											// BEGIN DELETE V6.02d
											// bProductDetail = objGetDetailProductNonSelected(CustomerID, Long.valueOf(((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iCounter1))).lProductID), Long.valueOf(((OptionGroupRow) vctoptionGroup.elementAt(iCounter)).lOptionGroupID), Long.valueOf(((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iCounter1))).lOptionProductID), ((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iCounter1))).iProvisionable, ((OptionProductRow) (vctObjOPIDOSInternal.elementAt(iCounter1))).iBillable, bProductDetailProperty.lCurrencyID, FINAL_ZERO, (iLevel + 1), FINAL_ZERO, FINAL_ZERO, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
											// END DELETE V6.02d
											// BEGIN ADD V6.02d
											//
											long lOptionGroupID = Long.valueOf(((OptionGroupRow) lstoptionGroup
															.get(iCounter)).lOptionGroupID);
											/*
											if(lProductID.longValue()== GAfeDescription.REX_RIO_ZONE && (((OptionProductRow) (vctObjOPIDOSInternal
													.elementAt(iCounter1))).lProductID ==  GAfeDescription.A_LA_CARTE_ZONE) && insertAlacarte){
												iLevel++;
												lOptionGroupID = GAfeDescription.A_LA_CARTE_OPTION_GROUP_ID;
												insertAlacarte = false;
												GLogger.chkpt("GAfeDescription.REX_RIO_ZONE iLevel "+iLevel );
											}
											*/
											GLogger.chkpt("Insisde objNewUnSelectAddForbiddenProduct calling objGetDetailProductNonSelected" );
											bProductDetail = objGetDetailProductNonSelected(
													CustomerID,
													Long.valueOf(
															((OptionProductRow) (vctObjOPIDOSInternal
																	.elementAt(iCounter1))).lProductID),
																	lOptionGroupID,
													Long.valueOf(
															((OptionProductRow) (vctObjOPIDOSInternal
																	.elementAt(iCounter1))).lOptionProductID),
													((OptionProductRow) (vctObjOPIDOSInternal
															.elementAt(iCounter1))).iProvisionable,
													((OptionProductRow) (vctObjOPIDOSInternal
															.elementAt(iCounter1))).iBillable,
													bProductDetailProperty.lCurrencyID,
													FINAL_ZERO,
													(iLevel + 1),
													FINAL_ZERO,
													FINAL_ZERO,
													bProductDetailProperty.lPaymentMethodRC,
													bProductDetailProperty.lPaymentMethodNRC,
													bProductDetailProperty.lPaymentMethodUsage,
													iIsDefault,
													bProductDetailProperty.vctProductSelected,
													bProductDetailProperty);

											// END ADD V6.02d
											GLogger.chkpt("bProductDetail afetr objGetDetailProductNonSelected"+ bProductDetail.toString());
											//                                          END MODIFY : V3.10
											//                                          Modified Code for fixing DEFECT id 70, Obsolete Masters
											iFindPositionInVectorlevelProductId = iFindPositionInVectorlevelProductId(
													bProductDetailProperty.vctProductNonSelected,
													lPackageProductID, iLevel);
											bProductDetailProperty.vctProductNonSelected
													.insertElementAt(
															bProductDetail,
															++iFindPositionInVectorlevelProductId);
											objNewUnSelectAddForbiddenProduct(
													bProductDetailProperty,
													Long.valueOf(
															((OptionProductRow) (vctObjOPIDOSInternal
																	.elementAt(iCounter1))).lProductID),
													lProductID, CustomerID,
													(iLevel + FINAL_ONE));

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */

											/* BEGIN DELETE VER: 5.59tan */

											// if(GAfePropertyLoader.DEBUG)
											// {
											// System.out.println("After Adding Vector : " +bProductDetailProperty.vctProductNonSelected);
											// }
											/* END DELETE VER: 5.59tan */

											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										}
									}
								}
							}
						}
					}
				}
			}
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
		//14.4 Play/Play+ Changes Starts
		GLogger.chkpt("14.4 Play/Play+ lProductID.longValue() : "+lProductID.longValue() + ":isProductUnselect:"+isProductUnselect);
		if(lProductID.longValue()== GAfeDescription.REX_RIO_ZONE && isProductUnselect){
			GLogger.chkpt("14.4 Play/Play+ lProductID.longValue() inside : "+lProductID.longValue() + ":isProductUnselect:"+isProductUnselect);
			bProductDetailProperty = checkAlacarteProductInserted(bProductDetailProperty,
					lPackageProductID, lProductID, CustomerID);
			GLogger.chkpt("14.4 Play/Play+ GAfeDescription.REX_RIO_ZONE exiting if condition: ");
		}
		//14.4 Play/Play+ Changes Ends
		// Returning of the String
		return bProductDetailProperty;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This Function Saves all the Data of the Products that the User have Deleted
	 *                                  onto the Screen.
	 *
	 *  @param          :       TeleSessionMgr teleSessionMgr, HttpServletRequest request, BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetail
	 *
	 *  @return         :       BProductDetailProperty - This function will Return the BProductDetailProperty Bussiness Object
	 * /******************************************************************************************************************************
	 */
	protected BProductDetailProperty objNewPopulatevctProductDeleted(
			BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetail) {

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		// Begin DEL v9.01d
		// int iFlag = 0;                        //Local Varaible Declaration
		// End DEL v9.01d
		int iCounter = 0; // Integer that is used as a counter in the for loop in the various parts of the program
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iNCounter = 0; // Integer that is used as a counter in the for loop in the various parts of the program
		int iNSizeOfVector = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iSizeVector = 0;                  //Local Varaible Declaration
		// Vector vctProductSelected = new Vector();             // internal local vector
		// End DEL v9.01d

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */

		/* Making Objects of the Bussiness Objects */
		BProductDeleted bProductDeleted =null;
		BProductParameter bProductParameter = null;

		iSizeOfVector = bProductDetail.vctParameters.size();

		if (FINAL_ZERO == iSizeOfVector) {
			bProductDeleted = new BProductDeleted();
			bProductDeleted.lCustomerProductID = bProductDetail.lCustomerProductID;
			bProductDeleted.lProductID = bProductDetail.lProductID;
			bProductDeleted.strProductDescription = bProductDetail.strDescription1;
			bProductDeleted.iLevel = bProductDetail.iLevel;
			bProductDeleted.iInstance = bProductDetail.iInstance;
			bProductDeleted.iParentInstance = bProductDetail.iParentInstance;
			bProductDeleted.lParameterID = Long.valueOf(0);
			bProductDeleted.strParameterName = "";
			bProductDeleted.iProvisionable = bProductDetail.iProvisionable;

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");	
				// System.out.println("bProductDeleted.lCustomerProductID                =       " + bProductDeleted.lCustomerProductID);
				// System.out.println("bProductDeleted.lProductID                                =       " + bProductDeleted.lProductID);
				// System.out.println("bProductDeleted.strProductDescription     =       " + bProductDeleted.strProductDescription);
				// System.out.println("bProductDeleted.iLevel                                    =       " + bProductDeleted.iLevel);
				// System.out.println("bProductDeleted.iInstance                         =       " + bProductDeleted.iInstance);
				// System.out.println("bProductDeleted.iParentInstance                   =       " + bProductDeleted.iParentInstance);
				// System.out.println("bProductDeleted.lParameterID                      =       " + bProductDeleted.lParameterID);
				// System.out.println("bProductDeleted.strParameterName          =       " + bProductDeleted.strParameterName);
				// System.out.println("bProductDeleted.iProvisionable                    =       " + bProductDeleted.iProvisionable);
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			bProductDetailProperty.vctProductDeleted
					.addElement(bProductDeleted);
		} else {
			for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
				bProductDeleted = new BProductDeleted();
				bProductDeleted.lCustomerProductID = bProductDetail.lCustomerProductID;
				bProductDeleted.lProductID = bProductDetail.lProductID;
				bProductDeleted.strProductDescription = bProductDetail.strDescription1;
				bProductDeleted.iLevel = bProductDetail.iLevel;
				bProductDeleted.iInstance = bProductDetail.iInstance;
				bProductDeleted.iParentInstance = bProductDetail.iParentInstance;
				bProductDeleted.iProvisionable = bProductDetail.iProvisionable;
				//bProductParameter = new BProductParameter();
				bProductParameter = (BProductParameter) bProductDetail.vctParameters
						.elementAt(iCounter);
				bProductDeleted.lParameterID = bProductParameter.lParameterID;
				bProductDeleted.strParameterName = bProductParameter.strParameterName;

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if ((GAfePropertyLoader.DEBUG) && (FINAL_ZERO == iCounter)) {
					GLogger.chkpt("Inside if statement ");	
					// System.out.println("bProductDeleted.lCustomerProductID            =       " + bProductDeleted.lCustomerProductID);
					// System.out.println("bProductDeleted.lProductID                            =       " + bProductDeleted.lProductID);
					// System.out.println("bProductDeleted.strProductDescription =       " + bProductDeleted.strProductDescription);
					// System.out.println("bProductDeleted.iLevel                                        =       " + bProductDeleted.iLevel);
					// System.out.println("bProductDeleted.iInstance                             =       " + bProductDeleted.iInstance);
					// System.out.println("bProductDeleted.iParentInstance                       =       " + bProductDeleted.iParentInstance);
					// System.out.println("bProductDeleted.lParameterID                  =       " + bProductDeleted.lParameterID);
					// System.out.println("bProductDeleted.strParameterName              =       " + bProductDeleted.strParameterName);
					// System.out.println("bProductDeleted.iProvisionable                        =       " + bProductDeleted.iProvisionable);
				}

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				iNSizeOfVector = bProductParameter.vctParameterValues.size();

				for (iNCounter = FINAL_ZERO; iNCounter < iNSizeOfVector; iNCounter++) {
					if ((string_ONE)
							.equals(String
									.valueOf(((Vector) ((Vector) bProductParameter.vctParameterValues)
											.elementAt(iNCounter))
											.elementAt(FINAL_ONE)))) {
						bProductDeleted.strParameterValues = (String) ((Vector) ((Vector) bProductParameter.vctParameterValues)
								.elementAt(iNCounter)).elementAt(FINAL_ZERO);

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {

							GLogger.chkpt("Inside if statement ");	// System.out.println("bProductDeleted.strParameterValues    =       " + bProductDeleted.strParameterValues);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					} // end of the if loop
				} // end of the for loop

				bProductDetailProperty.vctProductDeleted
						.addElement(bProductDeleted);
			} // end of the for loop
		} // end of the else part of the if else if loop

		return bProductDetailProperty;
	}

	/**
	 *  DESCRIPTION :   The Function will Remove all the Packages from the
	 *                                  The Lower Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetail, Long lProductID, Long CustomerID
	 *
	 *  @return         :       BProductDetailProperty  -       This function will Return the BProductDetailProperty Bussiness Object
	 * /******************************************************************************************************************************
	 */
	protected BProductDetailProperty objRemovePackage(
			BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetailTargetLower, Long lProductID,
			Long CustomerID) throws SQLException, Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		Long ProductID; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration
		Vector vctTempBProductDetail = new Vector(); // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");	
				// System.out.println("Inside iterative function");
				// System.out.println("bProductDetailTargetLower.iLevel : " + bProductDetailTargetLower.iLevel);
				// System.out.println("bProductDetailTargetLower.lProductID : " + bProductDetailTargetLower.lProductID);
				// System.out.println("bProductDetailTargetLower.OptionGroupID : " + bProductDetailTargetLower.lOptionGroupID);
				// System.out.println("bProductDetailTargetLower.iInstance : " + bProductDetailTargetLower.iInstance);
				// System.out.println("The Upper Grid Size is : " + bProductDetailProperty.vctProductNonSelected.size());
				// System.out.println("The Lower Grid Size is : " + bProductDetailProperty.vctProductSelected.size());
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */

			// Brgin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			/** **************************************MAKING OF NEXT QUERRY************************************** */
			// Begin DEL v9.01d
			// OptionGroupRow optionGroupRow = null;                                                                                             // Initializing the Object Class for the OptionGroup table
			// End DEL v9.01d
			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			//          BEGIN MODIFY : V3.10
			//          Updated Code for fixing DEFECT id 70, Obsolete Masters
			//          Modified for Taking Validity of Option Group
			//                        Vector  vctObjPIDInternal       = new Vector();
			// Begin DEL v9.01d
			// Vector vctObjPIDInternal = null;
			// End DEL v9.01d
			List lstObjPIDInternal = null;
			CustomerProduct custProductTable = null;
			CustomerProductRow custProdRow = null;

			custProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT);
			custProdRow = (CustomerProductRow) custProductTable
					.cprSearchByCustProductIDandObsolete(
							bProductDetailTargetLower.lCustomerProductID
									.longValue(), FINAL_ZERO);

			//          vctObjPIDInternal       =   optionGroupTable.vctSearchByProductIDandObsolete(lProductID.longValue(), FINAL_ZERO);
			// BEGIN DELETE V5.80a
			// vctObjPIDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date());
			// END DELETE V5.80a
			// BEGIN ADD V5.80a
			// vctObjPIDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date(), bProductDetailProperty.iRateClassIDNew);
			lstObjPIDInternal = (ArrayList) optionGroupTable
					.searchByProductIDValidandObsolete(lProductID.longValue(),
							FINAL_ZERO, new java.util.Date(),
							bProductDetailProperty.iRateClassIDNew);

			// END ADD V5.80a

			if (lstObjPIDInternal.isEmpty()) {
				if (null != custProdRow) {

					// BEGIN DELETE V5.80a
					// vctObjPIDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, custProdRow.dtCreationDate);
					// END DELETE V5.80a
					// BEGIN ADD V5.80a
					// vctObjPIDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, custProdRow.dtCreationDate, bProductDetailProperty.iRateClassIDNew);
					lstObjPIDInternal = optionGroupTable
							.searchByProductIDValidandObsolete(lProductID
									.longValue(), FINAL_ZERO,
									new java.util.Date(),
									bProductDetailProperty.iRateClassIDNew);

					// END ADD V5.80a
				} else {

					// BEGIN DELETE V5.80a
					// vctObjPIDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date());
					// END DELETE V5.80a
					// BEGIN ADD V5.80a
					// vctObjPIDInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date(), bProductDetailProperty.iRateClassIDNew);
					lstObjPIDInternal = optionGroupTable
							.searchByProductIDValidandObsolete(lProductID
									.longValue(), FINAL_ZERO,
									new java.util.Date(),
									bProductDetailProperty.iRateClassIDNew);

					// END ADD V5.80a
				}
			}

			//          END MODIFY : V3.10
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters

			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT OPTIONGROUPID FROM OPTIONGROUP WHERE PRODUCTID = ").append(lProductID);
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */
			if (!lstObjPIDInternal.isEmpty()) {

				// for each  record in the vector of OptionGroup Records
				for (int iASCounter = FINAL_ZERO; iASCounter < lstObjPIDInternal
						.size(); iASCounter++) {

					/** **************************************MAKING OF NEXT QUERRY************************************** */

					// Begin DEL v9.01d
					// OptionProductRow optionProductRow = null;                                                                                                                         // Initializing the Object Class for the OptionGroup table
					// End DEL v9.01d
					if (null == optionProductTable) {
						optionProductTable = (OptionProduct) teleSessionMgr
								.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
					}

					/**
					 * **************STARTING*****************TO PRINT THE DATA
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * System.out.println("lOptionGroupID ----> " +Long.valueOf(((OptionGroupRow)(vctObjPIDInternal.elementAt(iASCounter))).lOptionGroupID).longValue());
					 * }
					 * /****************ENDING*******************TO PRINT THE DATA******************************************
					 */
					Vector vctObjOGIDInternal = new Vector();

					// BEGIN DELETE V5.80a
					// vctObjOGIDInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(Long.valueOf(((OptionGroupRow) (vctObjPIDInternal.elementAt(iASCounter))).lOptionGroupID).longValue(), FINAL_ZERO);
					// END DELETE V5.80a
					// BEGIN ADD V5.80a
					vctObjOGIDInternal = optionProductTable
							.vctSearchByOptionGroupIDandObsolete(Long.valueOf(
									((OptionGroupRow) (lstObjPIDInternal
											.get(iASCounter))).lOptionGroupID)
									.longValue(), FINAL_ZERO,
									bProductDetailProperty.iRateClassIDNew);

					// END ADD V5.80a

					/**
					 * **************STARTING*****************TO PRINT QUERRY
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * strSql.setLength(0); //Initialising
					 * strSql.append("SELECT OPTIONPRODUCTID, PRODUCTID FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(Long.valueOf(((OptionGroupRow)(vctObjPIDInternal.elementAt(iASCounter))).lOptionGroupID));
					 * System.out.println("The Querry is : " + strSql.toString());
					 * }
					 * /****************ENDING*******************TO PRINT QUERRY*********************************************
					 */
					if (null != vctObjOGIDInternal) {

						// for each  record in the vector of OptionProduct Records
						for (int iOPIDPIDCounter = FINAL_ZERO; iOPIDPIDCounter < vctObjOGIDInternal
								.size(); iOPIDPIDCounter++) {
							ProductID = Long.valueOf(
									((OptionProductRow) (vctObjOGIDInternal
											.elementAt(iOPIDPIDCounter))).lProductID);

							/**
							 * **************STARTING*****************TO PRINT THE DATA
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("ProductID ----------123---------------> " +ProductID);
							 * }
							 * /****************ENDING*******************TO PRINT THE DATA******************************************
							 */

							// Begin DEL v9.01d
							// int iCounttemp = 0;
							// iCounttemp = iFindProductInVectorLevelProductIDandOptionGroupID(bProductDetailTargetLower, bProductDetailProperty.vctProductSelected);
							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							// if (GAfePropertyLoader.DEBUG) {
							// System.out.println("iCount in vctProductSelected " + iCounttemp);
							// }
							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							// End DEL v9.01d
							//                                                      if(iCounttemp == FINAL_ONE)
							{

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement ");
									// System.out.println("iCount in vctProductSelected " + iCount);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								iSizeOfVector = bProductDetailProperty.vctProductNonSelected
										.size();

								for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
									if (((String.valueOf(ProductID))
											.equalsIgnoreCase(String
													.valueOf(((BProductDetail) bProductDetailProperty.vctProductNonSelected
															.elementAt(iCount)).lProductID)))) {

										// BProductDetail        bProductDetail  =       new BProductDetail();
										// bProductDetail        =       (BProductDetail)bProductDetailProperty.vctProductNonSelected.elementAt(iCount);
										// Begin Modify 3.32
										// Change made to fix incident id 63,101 (MailAlias shown in Top Grid after deleting MailBox)
										// bProductDetailProperty.vctProductNonSelected.removeElementAt(iCount);
										// Check for max no occurences.
										int iNoOfOccurences = 0;

										iNoOfOccurences = iNoOfOccurencesOfProduct(
												bProductDetailProperty.vctProductSelected,
												bProductDetailTargetLower.iLevel,
												bProductDetailTargetLower.iParentInstance,
												bProductDetailTargetLower.lProductID
														.longValue());

										if ((iNoOfOccurences - 2) <= 0) {
											bProductDetailProperty.vctProductNonSelected
													.removeElementAt(iCount);
											iSizeOfVector--;
											iCount--;
										}

										// Change made to fix incident id 63,101 (MailAlias shown in Top Grid after deleting MailBox)
										// End Modify : V3.32
									}
								}
							}

							// Giving error in cases
							int iSizeVector = 0;

							iSizeVector = bProductDetailProperty.vctProductSelected
									.size();

							// Begin DEL v9.01d
							// boolean blnFlagToInit = true;
							// End DEL v9.01d

							for (int iSCount = FINAL_ZERO; iSCount < iSizeVector; iSCount++) {
								BProductDetail bProductTemp = null;

								//bProductTemp = new BProductDetail();
								bProductTemp = ((BProductDetail) bProductDetailProperty.vctProductSelected
										.elementAt(iSCount));

								if ((((String.valueOf(ProductID))
										.equalsIgnoreCase(String
												.valueOf(bProductTemp.lProductID))))
										&& (bProductDetailTargetLower.iInstance == bProductTemp.iParentInstance)
										&& ((bProductDetailTargetLower.iLevel + FINAL_ONE) == bProductTemp.iLevel)) {

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement ");
										// System.out.println("REMOVING IT FROM THE VCTPRODUCTSELECTED");
										// System.out.println("bProductTemp.lProductID" + bProductTemp.lProductID);
										// System.out.println("bProductTemp.iParentInstance" + bProductTemp.iParentInstance);
										// System.out.println("bProductTemp.iLevel" + bProductTemp.iLevel);
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									BProductDetail bProductDetail =null;

									bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
											.elementAt(iSCount);
									vctTempBProductDetail
											.addElement(bProductDetail);
									bProductDetailProperty.vctProductSelected
											.remove(iSCount);
									bProductDetailProperty = objNewPopulatevctProductDeleted(
											bProductDetailProperty,
											bProductDetail);
									iSizeVector--;
									iSCount--;
								}
							}
						} // end of the for loop
					} // end of the if loop for handling the null pointer exception
				} // end of the for loop
			} // end of the if loop for handling the null pointer exception

			if ((null != vctTempBProductDetail)
					&& (FINAL_ZERO != vctTempBProductDetail.size())) {

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement ");
					// System.out.println("The Size of the Vector is : - " + vctTempBProductDetail.size());
				}

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				for (int iFCounter = 0; iFCounter < vctTempBProductDetail
						.size(); iFCounter++) {
					BProductDetail bProductDetailTmp = null;

					bProductDetailTmp = new BProductDetail();
					bProductDetailTmp = (BProductDetail) vctTempBProductDetail
							.elementAt(iFCounter);

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */

					/* BEGIN DELETE VER: 5.59tan */

					// if(GAfePropertyLoader.DEBUG)
					// {
					// System.out.println("CAlling iterative function " );
					// System.out.println("bProductDetailTmp.lProductID" + bProductDetailTmp.lProductID);
					// System.out.println("bProductDetailTmp.iParentInstance" + bProductDetailTmp.iParentInstance);
					// System.out.println("bProductDetailTmp.iLevel" + bProductDetailTmp.iLevel);
					// }
					/* END DELETE VER: 5.59tan */

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					bProductDetailProperty = objRemovePackage(
							bProductDetailProperty, bProductDetailTmp,
							bProductDetailTmp.lProductID, CustomerID);
				}
			}
		} // end of the if loop
		catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		// Returning of the String
		return bProductDetailProperty;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will will give the number of times the product id is there
	 *                                  in the passed vector of BO.
	 *
	 *  @param          :       Vector vctFindProductInVector, Long lProductID
	 *
	 *  @return         :       int     -       It returns the number of productid are there in the passed vector
	 * /******************************************************************************************************************************
	 */
	protected int iFindProductInVector(Vector vctFindProductInVector,
			Long lProductID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iNumberOfTimesPID = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		iSizeOfVector = vctFindProductInVector.size();

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if ((String.valueOf(lProductID)).equals(String
					.valueOf(((BProductDetail) vctFindProductInVector
							.elementAt(iCount)).lProductID))) {
				iNumberOfTimesPID++;
			}
		}

		// Returning of the String
		return iNumberOfTimesPID;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Validate the Product Line for the final ok
	 *
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, int iMLevel, int iMParentInstance, Long lProductID
	 *
	 *  @return         :       String  -       It retuns the String of Description
	 * /******************************************************************************************************************************
	 */
	public String strValidateProductLineMinMax(
			BProductDetailProperty bProductDetailProperty, int iMLevel,
			int iMParentInstance, Long lProductID, int iRateClassId)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iCount = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// long lSum;                                                    //Local Varaible Declaration
		// End DEL v9.01d
		boolean bFlagAccountLevel = false; // Local Varaible Declaration
		String strObjectDesc = ""; // Local Varaible Declaration
		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			// Begin DEL v9.01d
			// OptionGroupRow optionGroupRow = null;                                                                                             // Initializing the Object Class for the OptionGroup table
			// End DEL v9.01d
			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			// BEGIN MODIFY : V3.20
			// Updated Code for fixing DEFECT id 70, Obsolete Masters
			// Modified for Taking Validity of Option Group
			// Vector  vctObjOGIDMMPMMPInternal        = new Vector();
			// vctObjOGIDMMPMMPInternal        =   optionGroupTable.vctSearchByProductIDandObsolete(lProductID.longValue(), FINAL_ZERO);

			/*
			 * V 9.01e: moved this call out of this recursive method
			 *           psSelect = GConnectAfe.psPrepareStatement(GAfeSql.S_RATECLASSID);
			 *           psSelect.setLong(1, (bProductDetailProperty.lCustomerProductLineID).longValue());
			 *
			 *           rsSelect = psSelect.executeQuery();
			 *
			 *           if(rsSelect.next())
			 *           {
			 *                   iRateClassId = rsSelect.getInt("RATECLASSID");
			 *                   //GLogger.chkpt("iRateClassId value returned : "+iRateClassId);
			 *           }
			 *
			 *           GConnectAfe.close(rsSelect);
			 *           GConnectAfe.close(psSelect);
			 */

			// Begin DEL v9.01d
			// Vector vctObjOGIDMMPMMPInternal = null;
			// End DEL v9.01d
			List lstObjOGIDMMPMMPInternal = null;

			// BEGIN DELETE V5.80a
			// vctObjOGIDMMPMMPInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date());
			// END DELETE V5.80a
			// BEGIN ADD V5.80a
			// vctObjOGIDMMPMMPInternal = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date(), bProductDetailProperty.iRateClassIDNew);
			lstObjOGIDMMPMMPInternal = optionGroupTable
					.searchByProductIDValidandObsolete(lProductID.longValue(),
							FINAL_ZERO, new java.util.Date(),
							bProductDetailProperty.iRateClassIDNew);

			// END ADD V5.80a
			// Vector vctObjOGIDMMPMMPInternalNew = optionGroupTable.vctSearchByProductIDValidandObsolete(lProductID.longValue(), FINAL_ZERO, new java.util.Date(), iRateClassId);
			List lstObjOGIDMMPMMPInternalNew = optionGroupTable
					.searchByProductIDValidandObsolete(lProductID.longValue(),
							FINAL_ZERO, new java.util.Date(), iRateClassId);
			Vector vctOptionGroups = new OasisMasterData(1);

			// if (null != lstObjOGIDMMPMMPInternalNew && alstObjOGIDMMPMMPInternalNew.size() > 0)
			if (!lstObjOGIDMMPMMPInternalNew.isEmpty()) {
				for (int i = 0; i < lstObjOGIDMMPMMPInternalNew.size(); i++) {
					vctOptionGroups.addElement(Long.valueOf(
							((OptionGroupRow) (lstObjOGIDMMPMMPInternalNew
									.get(i))).lOptionGroupID));
				}
			}

			// if (null == lstObjOGIDMMPMMPInternal) {
			if (lstObjOGIDMMPMMPInternal.isEmpty()) {

				// BEGIN DELETE V5.80a
				// vctObjOGIDMMPMMPInternal = optionGroupTable.vctSearchByProductIDandObsolete(lProductID.longValue(), FINAL_ZERO);
				// END DELETE V5.80a
				// BEGIN ADD V5.80a
				lstObjOGIDMMPMMPInternal = optionGroupTable
						.searchByProductIDandObsolete(lProductID.longValue(),
								FINAL_ZERO,
								bProductDetailProperty.iRateClassIDNew);

				// END ADD V5.80a
			}

			//          END MODIFY : V3.20
			//          Modified Code for fixing DEFECT id 70, Obsolete Masters

			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT OPTIONGROUPID, MINMANDPRODUCTS, MAXMANDPRODUCTS FROM OPTIONGROUP WHERE PRODUCTID = ").append(lProductID);
			 * strSql.append(" AND OBSOLETE = 0");
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */
			if (!lstObjOGIDMMPMMPInternal.isEmpty()) {

				// for each  record in the vector of OptionGroup Records
				for (int iOGCounter = FINAL_ZERO; iOGCounter < lstObjOGIDMMPMMPInternal
						.size(); iOGCounter++) {

					/**
					 * **************STARTING*****************TO PRINT THE DATA
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * System.out.println("Option GroupID ------> " +Long.valueOf(((OptionGroupRow)(vctObjOGIDMMPMMPInternal.elementAt(iOGCounter))).lOptionGroupID).longValue());
					 * }
					 * /****************ENDING*******************TO PRINT THE DATA******************************************
					 */

					// BEGIN DELETE v5.80a
					// bFlagAccountLevel = bCheckAccountLevelFeatureOrNot(((OptionGroupRow) (vctObjOGIDMMPMMPInternal.elementAt(iOGCounter))).lOptionGroupID);
					// END DELETE v5.80a
					// BEGIN ADD v5.80a
					bFlagAccountLevel = bCheckAccountLevelFeatureOrNot(
							((OptionGroupRow) (lstObjOGIDMMPMMPInternal
									.get(iOGCounter))).lOptionGroupID,
							bProductDetailProperty.iRateClassIDNew);

					// END ADD v5.80a

					if (!bFlagAccountLevel) {
						continue;
					}

					if (lProductID.longValue() == GAfeDescription.PRODUCTLINE_INTRO) {
						iCount = iFindProductInVectorLevelParentInstanceandOptionGroupID(
								bProductDetailProperty.vctProductSelected,
								iMLevel,
								iMParentInstance,
								Long.valueOf(
										((OptionGroupRow) (lstObjOGIDMMPMMPInternal
												.get(iOGCounter))).lOptionGroupID),
								vctOptionGroups);
					} else {
						iCount = iFindProductInVectorLevelParentInstanceandOptionGroupID(
								bProductDetailProperty.vctProductSelected,
								iMLevel,
								iMParentInstance,
								Long.valueOf(
										((OptionGroupRow) (lstObjOGIDMMPMMPInternal
												.get(iOGCounter))).lOptionGroupID));
					}

					/**
					 * **************STARTING*****************TO PRINT THE DATA
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * System.out.println("The oppid is counter : " +iCount);
					 * System.out.println("The oppid is min : " +((OptionGroupRow)(vctObjOGIDMMPMMPInternal.elementAt(iOGCounter))).iMinMandProducts);
					 * System.out.println("The oppid is max : " +((OptionGroupRow)(vctObjOGIDMMPMMPInternal.elementAt(iOGCounter))).iMaxMandProducts);
					 * }
					 * /****************ENDING*******************TO PRINT THE DATA******************************************
					 */
					if (((iCount) < (((OptionGroupRow) (lstObjOGIDMMPMMPInternal
							.get(iOGCounter))).iMinMandProducts))) {
						ProductRow productRow = null; // Initializing the Object Class for the Vat table

						if (null == productTable) {
							productTable = (Product) teleSessionMgr
									.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
						}

						productRow = (ProductRow) productTable
								.prSearchByProductIDandObsolete(lProductID
										.longValue(), FINAL_ZERO);
						strObjectDesc = strFindDescription(productRow.lDescription1ID);

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement ");
							// System.out.println("strObjectDesc ----OK---> Error Message : " + strObjectDesc);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						throw new AfeException("ERRAFE_00510", strObjectDesc); /* Error " Please Select More Products Under this Product - ProductID" */
					} // end of the if loop
					else if (((iCount) > (((OptionGroupRow) (lstObjOGIDMMPMMPInternal
							.get(iOGCounter))).iMaxMandProducts))) {
						strObjectDesc = "";
						//BEGIN CHANGE MICROSIM 12.1
						if(!((GAfeDescription.PRODUCT_FULLMOBILE == lProductID.longValue()) 
								&& (null != teleSessionMgr.getValue(GAfeConstants.UGDG_with_Belco) 
								&& (GAfeConstants.True_Value.equalsIgnoreCase((String)(teleSessionMgr.getValue(GAfeConstants.UGDG_with_Belco))))))){
							throw new AfeException("ERRAFE_00511"); /* Error " Please Remove some Products from this Product as you have selected more Products. " */
						}
						teleSessionMgr.removeValue(GAfeConstants.UGDG_with_Belco);
						//END CHANGE MICROSIM 12.1
					} else {
						iSizeOfVector = bProductDetailProperty.vctProductSelected
								.size();

						for (int iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {

							/**
							 * **************STARTING*****************TO PRINT THE DATA
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("The iMLevel is : " +iMLevel);
							 * System.out.println("The IMLevel to Compare is : " +((BProductDetail)bProductDetailProperty.vctProductSelected.elementAt(iCounter)).iLevel);
							 * }
							 * /****************ENDING*******************TO PRINT THE DATA******************************************
							 */
							if (((String.valueOf(iMLevel))
									.equalsIgnoreCase(String
											.valueOf(((BProductDetail) bProductDetailProperty.vctProductSelected
													.elementAt(iCounter)).iLevel)))
									&& ((String.valueOf(iMParentInstance))
											.equals(String
													.valueOf(((BProductDetail) bProductDetailProperty.vctProductSelected
															.elementAt(iCounter)).iParentInstance)))) {

								/**
								 * **************STARTING*****************TO PRINT THE DATA
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * System.out.println("Calling the Function Again with Level: " +(iMLevel + FINAL_ONE));
								 * System.out.println("Calling the Function Again with ParentInstance: " +((BProductDetail)bProductDetailProperty.vctProductSelected.elementAt(iCounter)).iInstance);
								 * }
								 * /****************ENDING*******************TO PRINT THE DATA******************************************
								 */
								strObjectDesc = strValidateProductLineMinMax(
										bProductDetailProperty,
										(iMLevel + FINAL_ONE),
										((BProductDetail) bProductDetailProperty.vctProductSelected
												.elementAt(iCounter)).iInstance,
										((BProductDetail) bProductDetailProperty.vctProductSelected
												.elementAt(iCounter)).lProductID,
										iRateClassId);
							} // end of the if loop
						} // end of the for loop
					} // final else part of the if else if loop
				} // end of the for loop
			} // end of the if loop for handling the null pointer exception
		} // end of the if loop
		catch (AfeException afee) // catch block starts to catch exceptions
		{
			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return strObjectDesc;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will validate the product line for the final        and save
	 *
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty
	 *
	 *  @return         :       int     -       This function will return 1 in case the validation is done or else otherwise 0
	 * /******************************************************************************************************************************
	 */

	// BEGIN DELETE V5.80a
	// public boolean bCheckAccountLevelFeatureOrNot (long lOptionGroupID) throws Exception
	// END DELETE V5.80a
	// BEGIN ADD v5.80a
	public boolean bCheckAccountLevelFeatureOrNot(long lOptionGroupID,
			int iRateClassID) throws Exception

	// END ADD v5.80a
	{ // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		boolean bFlagAccountLevel = false; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			// Begin DEL v9.01d
			// OptionProductRow optionProductRow = null;                                                                                                                         // Initializing the Object Class for the OptionGroup table
			// End DEL v9.01d
			if (null == optionProductTable) {
				optionProductTable = (OptionProduct) teleSessionMgr
						.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
			}

			Vector vctObjOGIDOFInternal = null;

			// BEGIN DELETE v5.80a
			// vctObjOGIDOFInternal = optionProductTable.vctSearchByOptionGroupIDandObsolete(lOptionGroupID, FINAL_ZERO);
			// END DELETE v5.80a

			// BEGIN ADD v5.80a
			vctObjOGIDOFInternal = optionProductTable
					.vctSearchByOptionGroupIDandObsolete(lOptionGroupID,
							FINAL_ZERO, iRateClassID);

			// END ADD v5.80a

			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT OPTIONPRODUCTID, PRODUCTID, PROVISIONABLE, BILLABLE FROM OPTIONPRODUCT WHERE OPTIONGROUPID = ").append(lOptionGroupID);
			 * strSql.append(" AND OBSOLETE = ").append(FINAL_ZERO);
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */
			if (null != vctObjOGIDOFInternal) {

				// for each  record in the vector of OptionProduct Records
				for (int iOGIDOFCounter = FINAL_ZERO; iOGIDOFCounter < vctObjOGIDOFInternal
						.size(); iOGIDOFCounter++) {
					ProductRow productRow = null; // Initializing the Object Class for the Vat table

					if (null == productTable) {
						productTable = (Product) teleSessionMgr
								.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
					}

					productRow = (ProductRow) productTable
							.prSearchByProductIDandObsolete(
									Long.valueOf(
											((OptionProductRow) (vctObjOGIDOFInternal
													.elementAt(iOGIDOFCounter))).lProductID)
											.longValue(), FINAL_ZERO);

					if (null != productRow) {
						if (((string_ONE).equalsIgnoreCase(String
								.valueOf(productRow.lLevelID)))) {
							bFlagAccountLevel = true;
						}
					}
				}
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return bFlagAccountLevel;
	}

	/**
	 *  DESCRIPTION :   The Function will validate the product line for the final        and save
	 *
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty
	 *
	 *  @return         :       int     -       This function will return 1 in case the validation is done or else otherwise 0
	 * /******************************************************************************************************************************
	 */
	public int iValidateProductLine(
			BProductDetailProperty bProductDetailProperty) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iCounterForReturn = 0; // Local Varaible Declaration
		HashMap hmHouseHold = null;
		String strCplIdenValue = null;
		BHouseholdDetails bHouseholdDetails = null;

		// Begin DEL v9.01d
		// String strMobileNumber = null;
		// End DEL v9.01d

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			BNumber bNumber = null;
			BInternet bInternet = null;
			BIntro bIntro = null;

			// Begin Mod v8.00b
			// Added OR conditon for mobile product
			//Begin Mod v9.02a  -- Added condition for FULL Mobile
			if ((GAfeDescription.lGetTypeId(string_PRODUCT_TELEPHONE) == bProductDetailProperty.lProductID
					.longValue())
					|| (GAfeDescription.lGetTypeId(string_PRODUCT_VON) == bProductDetailProperty.lProductID
							.longValue())
					|| (GAfeDescription.lGetTypeId(string_PRODUCT_MOBILE) == bProductDetailProperty.lProductID
							.longValue())
					|| (GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
							.longValue()))

			// End Mod v8.00b
			// End Mod v9.02a
			{
				if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
					bNumber = new BNumber();
					bNumber = (BNumber) teleSessionMgr
							.getValue("BNumber_aCTel");

					if ((string_ZERO).equalsIgnoreCase(String
							.valueOf(bNumber.strNumber))
							|| (null == bNumber.strNumber)) {
						throw new AfeException("ERRAFE_00513"); /* Please Select Telephone Number */
					} // end of the if loop

					if (("NP").equalsIgnoreCase(bNumber.strKindOfNumber)) {

						// BEGIN DELETE V 5.43a
						// Comment:Changes for the NP Related Code
						// if ((null == bNumber.strDonor) || (null == bNumber.strRoutingNo))
						// END DELETE V 5.43a
						// BEGIN ADD V 5.43a
						// Comment:Changes for the NP Related Code
						if ((null == bNumber.strOriginalOwner)
								|| (null == bNumber.strCurrentOwner)
								|| (null == bNumber.strRoutingNo))

						// END ADD V 5.43a
						{
							throw new AfeException("ERRAFE_00677"); /* Please Select the NP Number First. */
						}
					}
				} // end of the if loop
			} // end of the if loop

			// else if (GAfeDescription.lGetTypeId("PRODUCT_INTERNET") == bProductDetailProperty.lProductID.longValue()) {
			if ((GAfeDescription.lGetTypeId(string_PRODUCT_INTERNET) == bProductDetailProperty.lProductID
					.longValue())
					|| (GAfeDescription.lGetTypeId(string_PRODUCT_VON) == bProductDetailProperty.lProductID
							.longValue())) {

				// For Internet
				if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) {
					bInternet = new BInternet();
					bInternet = (BInternet) teleSessionMgr
							.getValue(string_BInternet_aCProduct);

					if ((GAfeDescription.lGetTypeId(string_PRODUCT_VON) == bProductDetailProperty.lProductID
							.longValue())
							&& (!bInternet.bLoginValidatedForVON)) {
						throw new AfeException("ERRAFE_01194");
					}

					if ((null == bInternet.strNewMasterLogin)
							|| (("")
									.equalsIgnoreCase(bInternet.strNewMasterLogin))) {

						// BEGIN ADD V.6.07n
						if (GAfeDescription.lGetTypeId(string_PRODUCT_VON) == bProductDetailProperty.lProductID
								.longValue()) {
							throw new AfeException("ERRAFE_01194");
						} else {

							// END ADD V.6.07n
							throw new AfeException("ERRAFE_00514"); /* Please Select Telephone Number */
						}
					} // end of the if loop
				}
			} else if (GAfeDescription.lGetTypeId(string_PRODUCT_CPS) == bProductDetailProperty.lProductID
					.longValue()) {

				// For Intro or CPS
				if (null != teleSessionMgr.getValue("BIntro_aCProduct")) {
					bIntro = null;
					bIntro = (BIntro) teleSessionMgr
							.getValue("BIntro_aCProduct");

					if ((null == bIntro.strNumber)
							|| (("").equalsIgnoreCase(bIntro.strNumber))) {
						throw new AfeException("ERRAFE_00536"); /* Please Select Telephone Number */
					} // end of the if loop
				}
			}

			// BEGIN ADD V6.10f
			if (GAfeDescription.lGetTypeId(string_PRODUCT_VON) == bProductDetailProperty.lProductID
					.longValue()) {
				if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) {
					bInternet = new BInternet();
					bInternet = (BInternet) teleSessionMgr
							.getValue(string_BInternet_aCProduct);

					if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
						bNumber = new BNumber();
						bNumber = (BNumber) teleSessionMgr
								.getValue("BNumber_aCTel");

						if ((bInternet.strNewMasterLogin)
								.equalsIgnoreCase(String
										.valueOf(bNumber.strNumber))) {
							throw new AfeException("ERRAFE_10509"); /* Login  cannot be the same as Telephone Number */
						}
					}
				}
			}

			// END ADD V6.10f//todo
			// BEGIN ADD V6.20a
			//Code below commented for issue in UAt inc 3137 in Rel 11.2 The below check is not required
			// as the Househole tab has been removed and the household data is saved at the backend.			
//			if (GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
//					.longValue()) {
//				GLogger.debug(CLASS_NAME, "iValidateProductLine",
//						"Validate HouseHold for DigitalTV");
//
//				// if interactive Part is present in DigitalTV package - Validate if Household Details are entered
//				if (bCheckIDTVFromBProductDetailProperty(bProductDetailProperty)) {
//					bHouseholdDetails = (BHouseholdDetails) teleSessionMgr
//							.getValue(GAfeConstants.HouseHoldDetails);
//
//					// BEGIN ADD v 7.02a
//					if (null != bHouseholdDetails) {
//						GLogger.chkpt("bHouseholdDetails :"
//								+ bHouseholdDetails.toString());
//					}
//
//					// END ADD v 7.02a
//					// for first time product OK value is in session not in hashmap
//					if (null == bHouseholdDetails) {
//
//						// BEGIN ADD v 7.02a
//						GLogger.chkpt("bHouseholdDetails is null");
//
//						// END ADD v 7.02a
//						hmHouseHold = (HashMap) teleSessionMgr
//								.getValue(GAfeConstants.HouseHold_HashMap);
//
//						if (null != hmHouseHold) {
//							GLogger.debug(CLASS_NAME, "iValidateProductLine",
//									"hmHouseHold - > Size "
//											+ hmHouseHold.size());
//							strCplIdenValue = strGetMainCPLIdenValueFromCPLId(bProductDetailProperty.lCustomerProductLineID
//									.longValue());
//							GLogger.debug(CLASS_NAME, "iValidateProductLine",
//									"strCplIdenValue " + strCplIdenValue);
//							bHouseholdDetails = (BHouseholdDetails) hmHouseHold
//									.get(strCplIdenValue);
//						}
//					}
//
//					// BEGIN ADD v 7.02a
//					if (null != bHouseholdDetails) {
//						GLogger.chkpt("bHouseholdDetails :"
//								+ bHouseholdDetails.toString());
//					}
//
//					// END ADD v 7.02a
//					if ((null == bHouseholdDetails)
//							|| (0 == bHouseholdDetails.getArrBHouseholdMember().length)) {
//
//						// GLogger.chkpt("THrowing Error For HouseHold Info");
//						// Enter HouseHold Information
//						throw new AfeException("ERRAFE_10832");
//					}
//				}
//			}

			// END ADD V6.20a
			// Begin Add V7.06b
			// Begin Del v8.00b

			/*
			 * if((GAfeDescription.lGetTypeId("PRODUCT_MOBILE") == bProductDetailProperty.lProductID.longValue()))
			 * {
			 *   strMobileNumber = (String)teleSessionMgr.getValue(GAfeConstants.MOBILENUMBER);
			 *   if(null == strMobileNumber || ("0").equalsIgnoreCase(strMobileNumber))
			 *   {
			 *       throw new AfeException("ERRAFE_10682");
			 *   }
			 *
			 * }
			 */

			// End Del v8.00b
			// End Add V7.06b
			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				//              System.out.println(afee.strGetErrCode() + " ----------   " + afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return ++iCounterForReturn;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will do all the validations when we go from  the Telephony, Internet or CPS
	 *                                  Screen to the Product Property Screen and will do the changes in the BProductProperty
	 *                                  main bussiness object for what has been done on the screens (that is the changes).
	 *
	 *  @param          :       Long lCustomerID
	 *
	 *  @return         :       int     -       This function will return 1 in case the fnc is successfull otherwise 0
	 * /******************************************************************************************************************************
	 */
	public void objChangeInPaymentMethods() throws SQLException, Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		// Begin DEL v9.01d
		// int iSelected = 0;            //Local Varaible Declaration
		// int iEndRecord = 0;           //Local Varaible Declaration
		// End DEL v9.01d
		//BEGIN ADD: V 3.10
		//Added Code for fixing DEFECT id 70, Obsolete Masters
		//Taken iIsDefault AS a variable
		int iIsDefault = 0;
		int iNoOfOccurences = 0;

		//      END ADD: V 3.10
		//      Added Code for fixing DEFECT id 70, Obsolete Masters
		int iFlagToCome = 0;

		// Begin DEL v9.01d
		// String strPeriodicity = "";           //Local Varaible Declaration
		// End DEL v9.01d
		Vector vctAllBillableParameters = null;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {
			if (GAfePropertyLoader.DEBUG) {

			GLogger.chkpt("Inside if statement");	// System.out.println("IN LOADER Change in payment method");
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			BProductDetailProperty bProductDetailProperty = null;

			// Begin Add v7.04g
			if (null != teleSessionMgr.getValue("ProductDetailsFrom")) {
				if ((null != teleSessionMgr
						.getValue("BProductDetailProperty_aCProductOrders"))
						&& !("Product")
								.equalsIgnoreCase((String) teleSessionMgr
										.getValue("ProductDetailsFrom"))) {

					// BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
					bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
							.getValue("BProductDetailProperty_aCProductOrders");
					iFlagToCome = 1;
				} else if (null != teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

					// BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
					bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
							.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
					iFlagToCome = 2;
				}
			} else {
				if (null != teleSessionMgr
						.getValue("BProductDetailProperty_aCProductOrders")) {

					// BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
					bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
							.getValue("BProductDetailProperty_aCProductOrders");
					iFlagToCome = 1;
				} else if (null != teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

					// BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
					bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
							.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
					iFlagToCome = 2;
				}
			}

			/**
			 * if (null != teleSessionMgr.getValue("BProductDetailProperty_aCProduct")) {
			 *   //BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
			 *   bProductDetailProperty = (BProductDetailProperty) teleSessionMgr.getValue("BProductDetailProperty_aCProduct");
			 *   iFlagToCome = 2;
			 * } else if (null != teleSessionMgr.getValue("BProductDetailProperty_aCProductOrders")) {
			 *   //BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
			 *   bProductDetailProperty = (BProductDetailProperty) teleSessionMgr.getValue("BProductDetailProperty_aCProductOrders");
			 *   iFlagToCome = 1;
			 * }
			 */

			// End Add v7.04g
			if (null != bProductDetailProperty) {
				BProductDetail bProductDetail = null;
				BProductParameter bProductParameter = null;

				for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected
						.size(); iCounter++) {
					vctAllBillableParameters = new Vector();
					bProductDetail = null;
					bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
							.elementAt(iCounter);
					GLogger.debug(CLASS_NAME, "objChangeInPaymentMethods",
							"bProductDetail.lProductID = "
									+ bProductDetail.lProductID);
					GLogger.debug(CLASS_NAME, "objChangeInPaymentMethods",
							"bProductDetail.iBillable = "
									+ bProductDetail.iBillable);
					GLogger.debug(CLASS_NAME, "objChangeInPaymentMethods",
							"bProductDetail.lPriceSettingID = "
									+ bProductDetail.lPriceSettingID);

					if (FINAL_ONE == bProductDetail.iBillable) {
						for (int iCounter1 = FINAL_ZERO; iCounter1 < bProductDetail.vctParameters
								.size(); iCounter1++) {
							bProductParameter = null;
							bProductParameter = (BProductParameter) bProductDetail.vctParameters
									.elementAt(iCounter1);

							for (int iCounter2 = FINAL_ZERO; iCounter2 < bProductParameter.vctParameterValues
									.size(); iCounter2++) {
								Vector vctIntForParam = null;

								vctIntForParam = (Vector) bProductParameter.vctParameterValues
										.elementAt(iCounter2);

								/* METHOD FOR ADDING THE BILLABLE PARAMETERS */
								if ((FINAL_ONE == bProductParameter.iBillable)
										&& (null != vctIntForParam)
										&& ((string_ONE).equalsIgnoreCase(String
												.valueOf(vctIntForParam
														.elementAt(FINAL_ONE))))) {
									Vector vctIntern = new Vector();

									vctIntern
											.addElement(bProductParameter.lParameterID);
									vctIntern.addElement(String
											.valueOf(vctIntForParam
													.elementAt(FINAL_ZERO)));
									vctAllBillableParameters
											.addElement(vctIntern);

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {

										GLogger.chkpt("Inside if statement");// System.out.println("Adding to the Billable Parameters Method -- > " + bProductParameter.lParameterID + "and value is " + String.valueOf(vctIntForParam.elementAt(FINAL_ZERO)));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								} // emd of the if loop
							} // end of the for loop
						} // end of the for loop

						// When and only when the Product Is billable
						//BEGIN MODIFY : V 3.10
						//Modified Code for fixing DEFECT id 70, Obsolete Masters
						//Taken Price Setting Id depending on OptionProductId, Min, Max Values of Parameter and ProductParameterValues
						//                  fncInternalForPSIDandPriceCalAfterChanges(bProductDetail, vctAllBillableParameters, bProductDetailProperty.lCurrencyID, bProductDetail.lProductID, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, bProductDetailProperty.iInClExc);
						iIsDefault = FINAL_ZERO;

						PriceSettingRow priceSettingRow = null; // Initializing the Object Class for the OptionGroup table

						if (null == priceSettingTable) {
							priceSettingTable = (PriceSetting) teleSessionMgr
									.getMasterTable("PRICESETTING"); // Getting the OptionGroup table from the session
						}

						if (null != priceSettingTable) {
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("Price Setting Id in Change In Payment Methods ----->>>" + bProductDetail.lPriceSettingID.longValue());
							}

							priceSettingRow = priceSettingTable
									.psrSearchByPriceSettingID(bProductDetail.lPriceSettingID
											.longValue());
							GLogger.debug(CLASS_NAME,
									"objChangeInPaymentMethods",
									"priceSettingRow = " + priceSettingRow);

							// No Of Occurence has been taken as the MinSelectable Value against the PriceSettingId of that Product in PriceSetting Table.
							if (null != priceSettingRow) {
								iNoOfOccurences = priceSettingRow.iMinSelectable;
							} else {
								iNoOfOccurences = 1;
							}

							GLogger.debug(CLASS_NAME,
									"objChangeInPaymentMethods",
									"iNoOfOccurences = " + iNoOfOccurences);
							GLogger.debug(CLASS_NAME,
									"objChangeInPaymentMethods",
									"iFlagToCome = " + iFlagToCome);

							// BEGIN ADD V5.35b
							// comment: adding check if the call has come from Orders or Product and make the call accordingly
							if (iFlagToCome == 1) {
								fncInternalForPSIDandPriceCalAfterChanges(
										bProductDetail,
										vctAllBillableParameters,
										bProductDetailProperty.lCurrencyID,
										bProductDetail.lProductID,
										bProductDetailProperty.lPaymentMethodRC,
										bProductDetailProperty.lPaymentMethodNRC,
										bProductDetailProperty.lPaymentMethodUsage,
										bProductDetailProperty.iInClExc,
										iIsDefault, iNoOfOccurences, FINAL_ZERO);
							} else if (iFlagToCome == 2) {
								fncInternalForPSIDandPriceCalAfterChanges(
										bProductDetail,
										vctAllBillableParameters,
										bProductDetailProperty.lCurrencyID,
										bProductDetail.lProductID,
										bProductDetailProperty.lPaymentMethodRC,
										bProductDetailProperty.lPaymentMethodNRC,
										bProductDetailProperty.lPaymentMethodUsage,
										bProductDetailProperty.iInClExc,
										iIsDefault, iNoOfOccurences, FINAL_ONE);
							}

							// END ADD V5.35b
							// BEGIN DELETE V5.35b
							// comment: modified call is written above
							// fncInternalForPSIDandPriceCalAfterChanges(bProductDetail, vctAllBillableParameters, bProductDetailProperty.lCurrencyID, bProductDetail.lProductID, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, bProductDetailProperty.iInClExc,iIsDefault,iNoOfOccurences, FINAL_ONE);
							// END DELETE V5.35b
						}

						//                      END DELETE: V3.10
						//                      Modified Code for fixing DEFECT id 70, Obsolete Masters
					} // end of the if loop
				} // end of the for loop

				for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductNonSelected
						.size(); iCounter++) {
					vctAllBillableParameters = new Vector();
					bProductDetail = null;
					bProductDetail = (BProductDetail) bProductDetailProperty.vctProductNonSelected
							.elementAt(iCounter);
					GLogger.debug(CLASS_NAME, "objChangeInPaymentMethods",
							"NonSelected bProductDetail.lProductID = "
									+ bProductDetail.lProductID);
					GLogger.debug(CLASS_NAME, "objChangeInPaymentMethods",
							"NonSelected bProductDetail.iBillable = "
									+ bProductDetail.iBillable);
					GLogger.debug(CLASS_NAME, "objChangeInPaymentMethods",
							"NonSelected bProductDetail.lPriceSettingID = "
									+ bProductDetail.lPriceSettingID);

					if (FINAL_ONE == bProductDetail.iBillable) {
						for (int iCounter1 = FINAL_ZERO; iCounter1 < bProductDetail.vctParameters
								.size(); iCounter1++) {
							bProductParameter = null;
							bProductParameter = (BProductParameter) bProductDetail.vctParameters
									.elementAt(iCounter1);

							for (int iCounter2 = FINAL_ZERO; iCounter2 < bProductParameter.vctParameterValues
									.size(); iCounter2++) {
								Vector vctIntForParam = null;

								vctIntForParam = (Vector) bProductParameter.vctParameterValues
										.elementAt(iCounter2);

								/* METHOD FOR ADDING THE BILLABLE PARAMETERS */
								if ((FINAL_ONE == bProductParameter.iBillable)
										&& (null != vctIntForParam)
										&& ((string_ONE).equalsIgnoreCase(String
												.valueOf(vctIntForParam
														.elementAt(FINAL_ONE))))) {
									Vector vctIntern = new Vector();

									vctIntern
											.addElement(bProductParameter.lParameterID);
									vctIntern.addElement(String
											.valueOf(vctIntForParam
													.elementAt(FINAL_ZERO)));
									vctAllBillableParameters
											.addElement(vctIntern);

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("In ITabProperty Adding to the Billable Parameters Method -- > " + bProductParameter.lParameterID + " and value is " + String.valueOf(vctIntForParam.elementAt(FINAL_ZERO)));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								} // emd of the if loop
							} // end of the for loop
						} // end of the for loop

						// When and only when the Product Is billable
						//BEGIN MODIFY : V3.10
						//Modified Code for fixing DEFECT id 70, Obsolete Masters
						//Taken Price Setting Id depending on OptionProductId, Min, Max Values of Parameter and ProductParameterValues
						//                  fncInternalForPSIDandPriceCalAfterChanges(bProductDetail, vctAllBillableParameters, bProductDetailProperty.lCurrencyID, bProductDetail.lProductID, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, bProductDetailProperty.iInClExc);
						//BEGIN DELETE V5.89A
						//                                                                              iIsDefault = FINAL_ONE;
						//END DELETE V5.89A
						//BEGIN ADD V5.89A
						iIsDefault = FINAL_ZERO;

						//                      END ADD V5.89A
						// BEGIN DELETE V5.92a
						// iNoOfOccurences = FINAL_ZERO;
						// END DELETE V5.92a
						// BEGIN ADD V5.92a
						iNoOfOccurences = 1;

						// END ADD V5.92a
						fncInternalForPSIDandPriceCalAfterChanges(
								bProductDetail, vctAllBillableParameters,
								bProductDetailProperty.lCurrencyID,
								bProductDetail.lProductID,
								bProductDetailProperty.lPaymentMethodRC,
								bProductDetailProperty.lPaymentMethodNRC,
								bProductDetailProperty.lPaymentMethodUsage,
								bProductDetailProperty.iInClExc, iIsDefault,
								iNoOfOccurences, FINAL_ZERO);

						//                      END MODIFY : V 3.10
						//                      Modified Code for fixing DEFECT id 70, Obsolete Masters
					} // end of the if loop
				}

				if (FINAL_ONE == iFlagToCome) {
					teleSessionMgr.putValue(
							"BProductDetailProperty_aCProductOrders",
							bProductDetailProperty);
				} else if (2 == iFlagToCome) {
					teleSessionMgr.putValue(BPRODUCTDETAILPROPERTY_ACPRODUCT,
							bProductDetailProperty);
				}
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (SQLException sqle) {
			AfeException afee = new AfeException("ERRCOM_00001", sqle
					.getMessage());

			throw afee;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will give the Price setting id and the price and periodicity.
	 *                                  In this function as we are using a dynamic querry so we are firing the querry
	 *                                  in the database and not taking from the session.
	 *
	 *  @param          :       BProductDetail bProductDetail, Vector vctAllBillableParameters, Long CurrencyID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */

	//  BEGIN MODIFY : V3.10
	//  Modified Code for fixing DEFECT id 70, Obsolete Masters
	//  Taken Price Setting Id depending on OptionProductId, Min, Max Values of Parameter and ProductParameterValues
	//  protected void fncInternalForPSIDandPriceCalAfterChanges(BProductDetail bProductDetail, Vector vctAllBillableParameters, Long CurrencyID, Long ProductID, Long PaymentMethodRC, Long PaymentMethodNRC, Long PaymentMethodUsage, int iInClExc) throws SQLException, Exception
	// Begin Delete V5.96j
	// protected void fncInternalForPSIDandPriceCalAfterChanges(BProductDetail bProductDetail, Vector vctAllBillableParameters, Long CurrencyID, Long ProductID, Long PaymentMethodRC, Long PaymentMethodNRC, Long PaymentMethodUsage, int iInClExc, int iIsDefault, int iNoOfOccurences, int iFlagForDate) throws SQLException, Exception
	// End Delete V5.96j
	// Begin Add V5.96j
	protected void fncInternalForPSIDandPriceCalAfterChanges(
			BProductDetail bProductDetail, Vector vctAllBillableParameters,
			Long CurrencyID, Long ProductID, Long PaymentMethodRC,
			Long PaymentMethodNRC, Long PaymentMethodUsage, int iInClExc,
			int iIsDefault, int iNoOfOccurences, int iFlagForDate)
			throws SQLException, Exception

	// End Add V5.96j
	//END MODIFY : V3.10
	//Modified Code for fixing DEFECT id 70, Obsolete Masters
	{ // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		/*
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "bProductDetail = " + bProductDetail);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "vctAllBillableParameters = " + vctAllBillableParameters);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "CurrencyID = " + CurrencyID);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "ProductID = " + ProductID);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "PaymentMethodRC = " + PaymentMethodRC);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "PaymentMethodNRC = " + PaymentMethodNRC);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "PaymentMethodUsage = " + PaymentMethodUsage);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "iInClExc = " + iInClExc);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "iIsDefault = " + iIsDefault);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "iNoOfOccurences = " + iNoOfOccurences);
		 * GLogger.logInput("LProduct", "fncInternalForPSIDandPriceCalAfterChanges", "iFlagForDate = " + iFlagForDate);
		 */
		double dSum = 0; // Local Varaible Declaration
		double dChargeAmount = 0; // Local Varaible Declaration
		double dAddChargeAmount = 0; // Local Varaible Declaration
		Long lPriceSettingID = Long.valueOf(0); // Local Varaible Declaration
		Long lRecurringTypeID = Long.valueOf(0); // Local Varaible Declaration

		// Begin DEL v9.01d
		// Long lChargeTypeID = Long.valueOf(0);             //Local Varaible Declaration
		// End DEL v9.01d
		String strPeriodicity = ""; // Local Varaible Declaration

		//      BEGIN ADD: V3.10
		//      Added Code for fixing DEFECT id 70, Obsolete Masters
		//      Added Variables
		Date dtDateCheck = null;
		Timestamp dtCreationDateOfProduct = null;
		CustomerProductRow custProductRow = null;

		// BEGIN ADD VER 5.94a
		// BEGIN DELETE V 5.96u
		// iGoAhead = 0;
		// iTakeOpProdAsNull = 0;
		// END DELETE V 5.96u
		// END ADD VER 5.94a

		//      END ADD: V3.10
		//      Added Code for fixing DEFECT id 70, Obsolete Masters
		//      BEGIN ADD V 5.96u
		//      MODIFICATION TO MAKE VARIABLE LOCAL AS PRICESETTING ID IS WRONLY UPDATED FOR SERVICES
		//      BECAUSE OF CALSS VARIABLES
		int iTakeOpProdAsNull = 0;
		int iGoAhead = 0;

		//      END ADD V 5.96u

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		if (!bConnect) // If the Connection is made
		{
			bConnect = makeAFEConnection();
		}

		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			//BEGIN ADD: V3.10
			//Added Code for fixing DEFECT id 70, Obsolete Masters
			//To Calculate the Creation Date of Product
			if (iFlagForDate == FINAL_ZERO) {
				dtDateCheck = new java.util.Date();
			} else {
				if (null == customerProductTable) {
					customerProductTable = (CustomerProduct) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
				}

				custProductRow = (CustomerProductRow) customerProductTable
						.cprSearchByCustProductIDandObsolete(
								bProductDetail.lCustomerProductID.longValue(),
								FINAL_ZERO);

				//              Begin Modify : V3.34
				if ((null != custProductRow)
						&& (null != custProductRow.dtCreationDate)) {
					dtCreationDateOfProduct = custProductRow.dtCreationDate;

					if (null != dtCreationDateOfProduct) {
						dtDateCheck = java.sql.Date
								.valueOf(dtCreationDateOfProduct.toString()
										.substring(0, 10));
					} else {
						dtDateCheck = new java.util.Date();
					}
				} else {
					dtDateCheck = new java.util.Date();
				}

				//              End Modify : V3.34
			}

			// Begin Add V5.96j

			lRecurringTypeID = Long.valueOf(bProductDetail.lBillFrequencyId);
			GLogger.logInput(CLASS_NAME,
					"fncInternalForPSIDandPriceCalAfterChanges",
					"lRecurringTypeID = " + lRecurringTypeID);

			// End Add V5.96j
			//END ADD: V3.10
			//Added Code for fixing DEFECT id 70, Obsolete Masters
			//BEGIN MODIFY : V3.10
			//Added Code for fixing DEFECT id 70, Obsolete Masters
			//Taken Price Setting Id depending on OptionProductId, Min, Max Values of Parameter and ProductParameterValues
			//              if(FINAL_ZERO != vctAllBillableParameters.size())
			if ((null != vctAllBillableParameters)
					&& (FINAL_ZERO != vctAllBillableParameters.size()))

			//          END MODIFY : V3.10
			//          Moified Code for fixing DEFECT id 70, Obsolete Masters
			{
				GLogger.chkpt("PR 122758: Inside Main IF");
				if (vctAllBillableParameters.size() > FINAL_ZERO) {

					//                  BEGIN ADD: V 3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId, Min, Max Values of Parameter and ProductParameterValues
					GLogger.chkpt("PR 122758: Inside Inner IF");
					bProductDetail = objGetPriceSettingId(bProductDetail,
							vctAllBillableParameters, iNoOfOccurences,
							iIsDefault, iFlagForDate);
					GLogger.logInput(CLASS_NAME,
							"fncInternalForPSIDandPriceCalAfterChanges",
							"bProductDetail.lPriceSettingID = "
									+ bProductDetail.lPriceSettingID);

					if (null != bProductDetail.lPriceSettingID) {
						lPriceSettingID = bProductDetail.lPriceSettingID;
					} else {
						lPriceSettingID = Long.valueOf(0);
					}

					//                  END ADD : V 3.10
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters

					//                  BEGIN DELETE: V 2.01
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId, Min, Max Values of Parameter and ProductParameterValues

					/*
					 ResultSet rsGetCustDetails      = null; // Making an Object of the ResultSet
					 strSql.setLength(0); //Initialising

					 // Making the Querry Statement
					 strSql.append("SELECT A.PRICESETTINGID FROM PARAMETERSETTING A ");

					 //for each  record in the vector of vctAllBillableParameters Records
					 for(int iCounter = FINAL_ZERO; iCounter < vctAllBillableParameters.size(); iCounter++)
					 {
					 if(iCounter == FINAL_ZERO)
					 strSql.append(" WHERE ");
					 else
					 strSql.append(" OR ");

					 /****************STARTING*****************TO PRINT THE DATA********************************************
					 if(GAfePropertyLoader.DEBUG)
					 {
					 System.out.println("Hi there the values are ---> " +vctAllBillableParameters.elementAt(iCounter));
					 System.out.println("Hi there the values are ---> " +((Vector)vctAllBillableParameters.elementAt(iCounter)).elementAt(FINAL_ZERO));
					 System.out.println("Hi there the values are ---> " +((Vector)vctAllBillableParameters.elementAt(iCounter)).elementAt(FINAL_ONE));
					 }
					 /****************ENDING*******************TO PRINT THE DATA*******************************************

					 strSql.append(" ( A.PRODUCTPARAMETERID = ").append(((Vector)vctAllBillableParameters.elementAt(iCounter)).elementAt(FINAL_ZERO));
					 strSql.append(" AND A.PARAMETERSETTINGVALUE = '").append(((Vector)vctAllBillableParameters.elementAt(iCounter)).elementAt(FINAL_ONE)).append("' ");
					 strSql.append(" AND A.OBSOLETE = ").append(FINAL_ZERO).append(" ) ");
					 }

					 strSql.append(" HAVING COUNT(*) = ").append(vctAllBillableParameters.size());
					 strSql.append(" AND COUNT(*) = ").append(" (SELECT COUNT(*) FROM PARAMETERSETTING B WHERE  B.PRICESETTINGID     = A.PRICESETTINGID AND B.OBSOLETE = ").append(FINAL_ZERO).append(" ) ");
					 strSql.append(" GROUP BY PRICESETTINGID ");

					 /****************STARTING*****************TO PRINT THE DATA********************************************
					 //if(GAfePropertyLoader.DEBUG)
					 {
					 // Printing out the Querry made prior to its firing
					 System.out.println("The Querry is : " + strSql.toString());
					 }
					 /****************ENDING*******************TO PRINT THE DATA*******************************************

					 // Firing the Querry and taking the Result as a ResultSet
					 rsGetCustDetails = gConnectAfe.rsQuery(strSql.toString());

					 if (null != rsGetCustDetails)
					 {
					 if (rsGetCustDetails.next())
					 {
					 lPriceSettingID =       Long.valueOf(rsGetCustDetails.getLong("PRICESETTINGID"));
					 }
					 else
					 {
					 lPriceSettingID =       Long.valueOf(0);
					 }
					 }
					 else
					 {
					 lPriceSettingID =       Long.valueOf(0);
					 }
					 */

					//                  END DELETE: V 3.10
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
				} else {
					GLogger.chkpt("PR 122758: Inside Inner Else");
					PriceSettingRow priceSettingRow = null; // Initializing the Object Class for the CustomerProduct table

					if (null == priceSettingTable) {
						priceSettingTable = (PriceSetting) teleSessionMgr
								.getMasterTable("PRICESETTING"); // Getting the CustomerProduct table from the session
					}

					Vector vctpriceSettingRow = null;

					//                  BEGIN DELETE: V 3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId
					//                                vctpriceSettingRow      =       priceSettingTable.vctSearchByProductIDandObsolete(ProductID.longValue(), 0);
					//                  END DELETE: V 3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  BEGIN ADD: V 3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId
					Vector vctPSRows = null;

					if (iIsDefault == 1) {
						priceSettingRow = priceSettingTable
								.psrSearchByProductIDObsoleteandIsDefaultandDate(
										bProductDetail.lProductID.longValue(),
										FINAL_ZERO, iIsDefault, dtDateCheck);

						if (null != priceSettingRow) {
							lPriceSettingID = Long.valueOf(
									priceSettingRow.lPriceSettingID);
						} else {
							lPriceSettingID = Long.valueOf(0);
						}
					} else {
						GLogger.chkpt("PR 122758: iIsDefault is 0");
						vctpriceSettingRow = priceSettingTable
								.vctSearchByProductIDandOptionProductIDandDate(
										bProductDetail.lProductID.longValue(),
										bProductDetail.lOptionProductID
												.longValue(), FINAL_ZERO,
										dtDateCheck);

						if ((null != vctpriceSettingRow)
								&& (vctpriceSettingRow.size() == FINAL_ONE))

						//                      END ADD: V 3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						{
							lPriceSettingID = Long.valueOf(
									((PriceSettingRow) vctpriceSettingRow
											.elementAt(FINAL_ZERO)).lPriceSettingID);
						}

						//                      BEGIN ADD: V 3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						//                      Taken Price Setting Id depending on OptionProductId
						else if ((null != vctpriceSettingRow)
								&& (vctpriceSettingRow.size() == FINAL_ZERO)) {
							vctpriceSettingRow = priceSettingTable
									.vctSearchByProductIDandOptionProductIDandDate(
											bProductDetail.lProductID
													.longValue(), FINAL_ZERO,
											FINAL_ZERO, dtDateCheck);

							if ((null != vctpriceSettingRow)
									&& (vctpriceSettingRow.size() == FINAL_ONE)) {
								lPriceSettingID = Long.valueOf(
										((PriceSettingRow) vctpriceSettingRow
												.elementAt(FINAL_ZERO)).lPriceSettingID);
							} else {
								iGoAhead = 1;
								iTakeOpProdAsNull = 1;
							}
						}

						//                      END ADD: V 3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						else if ((null != vctpriceSettingRow)
								&& (vctpriceSettingRow.size() > FINAL_ONE))

						//                      BEGIN ADD: V 3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
						//                      Taken Price Setting Id depending on OptionProductId
						{
							iGoAhead = 1;
							iTakeOpProdAsNull = 0;
						} else {
							// Begin : PR 122758: Add code to check for active line
							GLogger.chkpt("PR 122758: Inside call to check for active line");
							if (null != custProductRow)
							{
								long lActiveCPLID = custProductRow.lCustomerProductLineID;
								GLogger.chkpt("PR 122758:CPLID "+ lActiveCPLID);
								boolean bLineActive = ProductUtils.bCheckIsLineActive(lActiveCPLID);
								GLogger.chkpt("PR 122758:bLineActive "+ bLineActive);
								if(bLineActive)	
								{
									GLogger.chkpt("PR 122758:Inside Active line flow. Setting PriceSetting ID from CustomerProduct Table");
									lPriceSettingID = custProductRow.lPriceSettingID;
									GLogger.chkpt("PR 122758:lPriceSettingID "+ lPriceSettingID);
								}
								else
								{
									GLogger.chkpt("PR 122758: Not an Active line. Continue with the AS-IS flow");
									// End : PR 122758: Add code to check for active line
									iGoAhead = 1;
									iTakeOpProdAsNull = 1;
								}
							}
							else
							{
								GLogger.chkpt("PR 122758: No CustomerProductRow Found. Continue with the AS-IS flow");
								// End : PR 122758: Add code to check for active line
								iGoAhead = 1;
								iTakeOpProdAsNull = 1;
							}
						}

						//                      END ADD: V 3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters

						//                      BEGIN DELETE: V 3.10
						//                      Deleted Code for fixing DEFECT id 70, Obsolete Masters
						//                      Deleted to check for PriceSetting with OptionProductId as Null if we don't get any record with OptionProduct
						//                                            lPriceSettingID =       Long.valueOf(0);
						//                      END DELETE: V 3.10
						//                      Deleted Code for fixing DEFECT id 70, Obsolete Masters
						//                      BEGIN ADD: V 3.10
						//                      Deleted Code for fixing DEFECT id 70, Obsolete Masters
						//                      Added Code to check for PriceSetting with OptionProductId as Null if we don't get any record with OptionProduct
						if (iGoAhead == 1) {
							if (iTakeOpProdAsNull == 1) {
								vctPSRows = priceSettingTable
										.vctSearchByProductIDOptionProductIDandMinMaxandDate(
												bProductDetail.lProductID
														.longValue(),
												FINAL_ZERO, FINAL_ZERO,
												iNoOfOccurences, dtDateCheck);
							} else {
								vctPSRows = priceSettingTable
										.vctSearchByProductIDOptionProductIDandMinMaxandDate(
												bProductDetail.lProductID
														.longValue(),
												bProductDetail.lOptionProductID
														.longValue(),
												FINAL_ZERO, iNoOfOccurences,
												dtDateCheck);
							}

							if ((null != vctPSRows) && (1 < vctPSRows.size())) {
								if (iTakeOpProdAsNull == 1) {
									vctPSRows = priceSettingTable
											.vctSearchByProductIDOptionProductIDandMinMaxandIsDefaultandDate(
													bProductDetail.lProductID
															.longValue(),
													FINAL_ZERO, FINAL_ZERO,
													iNoOfOccurences,
													FINAL_ZERO, dtDateCheck);
								} else {
									vctPSRows = priceSettingTable
											.vctSearchByProductIDOptionProductIDandMinMaxandIsDefaultandDate(
													bProductDetail.lProductID
															.longValue(),
													bProductDetail.lOptionProductID
															.longValue(),
													FINAL_ZERO,
													iNoOfOccurences,
													FINAL_ZERO, dtDateCheck);
								}

								if ((null != vctPSRows)
										&& (1 <= vctPSRows.size())) {
									priceSettingRow = (PriceSettingRow) vctPSRows
											.elementAt(FINAL_ZERO);
									lPriceSettingID = Long.valueOf(
											priceSettingRow.lPriceSettingID);
								} else {
									lPriceSettingID = Long.valueOf(0);
								}
							} else if ((null != vctPSRows)
									&& (1 == vctPSRows.size())) {
								priceSettingRow = (PriceSettingRow) vctPSRows
										.elementAt(FINAL_ZERO);
								lPriceSettingID = Long.valueOf(
										priceSettingRow.lPriceSettingID);
							} else {
								lPriceSettingID = Long.valueOf(0);
							}
						}

						//                      END ADD: V 3.10
						//                      Added Code for fixing DEFECT id 70, Obsolete Masters
					}
				}
			} else {
				GLogger.chkpt("PR 122758: Inside Main Else");
				PriceSettingRow priceSettingRow = null; // Initializing the Object Class for the CustomerProduct table

				if (null == priceSettingTable) {
					priceSettingTable = (PriceSetting) teleSessionMgr
							.getMasterTable("PRICESETTING"); // Getting the CustomerProduct table from the session
				}

				Vector vctpriceSettingRow = null;

				//              BEGIN DELETE: V 3.10
				//              Added Code for fixing DEFECT id 70, Obsolete Masters
				//              Taken Price Setting Id depending on OptionProductId
				//                                            vctpriceSettingRow      =       priceSettingTable.vctSearchByProductIDandObsolete(ProductID.longValue(), 0);
				//              END DELETE: V 3.10
				//              Added Code for fixing DEFECT id 70, Obsolete Masters

				//              BEGIN ADD: V 3.10
				//              Added Code for fixing DEFECT id 70, Obsolete Masters
				//              Taken Price Setting Id depending on OptionProductId
				Vector vctPSRows = null;

				if (iIsDefault == 1) {
					priceSettingRow = priceSettingTable
							.psrSearchByProductIDObsoleteandIsDefaultandDate(
									bProductDetail.lProductID.longValue(),
									FINAL_ZERO, iIsDefault, dtDateCheck);

					if (null != priceSettingRow) {
						lPriceSettingID = Long.valueOf(
								priceSettingRow.lPriceSettingID);
					} else {
						lPriceSettingID = Long.valueOf(0);
					}
				} else {
					GLogger.chkpt("....2....PR 122758: iIsDefault is zero");
					vctpriceSettingRow = priceSettingTable
							.vctSearchByProductIDandOptionProductIDandDate(
									bProductDetail.lProductID.longValue(),
									bProductDetail.lOptionProductID.longValue(),
									FINAL_ZERO, dtDateCheck);

					if ((null != vctpriceSettingRow)
							&& (vctpriceSettingRow.size() == FINAL_ONE))

					//                  END ADD: V 2.01
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					{
						lPriceSettingID = Long.valueOf(
								((PriceSettingRow) vctpriceSettingRow
										.elementAt(FINAL_ZERO)).lPriceSettingID);
					}

					//                  BEGIN ADD: V 2.01
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId
					else if ((null != vctpriceSettingRow)
							&& (vctpriceSettingRow.size() == FINAL_ZERO)) {
						vctpriceSettingRow = priceSettingTable
								.vctSearchByProductIDandOptionProductIDandDate(
										bProductDetail.lProductID.longValue(),
										FINAL_ZERO, FINAL_ZERO, dtDateCheck);

						if ((null != vctpriceSettingRow)
								&& (vctpriceSettingRow.size() == FINAL_ONE)) {
							lPriceSettingID = Long.valueOf(
									((PriceSettingRow) vctpriceSettingRow
											.elementAt(FINAL_ZERO)).lPriceSettingID);
						} else {
							iGoAhead = 1;
							iTakeOpProdAsNull = 1;
						}
					}

					//                  END ADD: V 2.01
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					else if ((null != vctpriceSettingRow)
							&& (vctpriceSettingRow.size() > FINAL_ONE))

					//                  BEGIN ADD: V 2.01
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
					//                  Taken Price Setting Id depending on OptionProductId
					{
						iGoAhead = 1;
						iTakeOpProdAsNull = 0;
					} else {
						// Begin : PR 122758: Add code to check for active line
						GLogger.chkpt("....2.....PR 122758: 2 Inside call to check for active line");
						if (null != custProductRow)
						{
							long lActiveCPLID = custProductRow.lCustomerProductLineID;
							GLogger.chkpt("PR 122758:CPLID "+ lActiveCPLID);
							boolean bLineActive = ProductUtils.bCheckIsLineActive(lActiveCPLID);
							GLogger.chkpt("PR 122758:bLineActive "+ bLineActive);
							if(bLineActive)	
							{
								GLogger.chkpt("PR 122758:Inside Active line flow. Setting PriceSetting ID from CustomerProduct Table");
								lPriceSettingID = custProductRow.lPriceSettingID;
								GLogger.chkpt("PR 122758:lPriceSettingID "+ lPriceSettingID);
							}
							else
							{
								GLogger.chkpt("PR 122758: Not an Active line. Continue with the AS-IS flow");
								// End : PR 122758: Add code to check for active line
								iGoAhead = 1;
								iTakeOpProdAsNull = 1;
							}
						}
						else
						{
							GLogger.chkpt("PR 122758: No CustomerProductRow Found. Continue with the AS-IS flow");
							// End : PR 122758: Add code to check for active line
							iGoAhead = 1;
							iTakeOpProdAsNull = 1;
						}
					}

					//                  END ADD: V 2.01
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters

					//                  BEGIN DELETE: V 2.01
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					//                  Deleted to check for PriceSetting with OptionProductId as Null if we don't get any record with OptionProduct
					//                                                lPriceSettingID =       Long.valueOf(0);
					//                  END DELETE: V 2.01
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					//                  BEGIN ADD: V 2.01
					//                  Deleted Code for fixing DEFECT id 70, Obsolete Masters
					//                  Added Code to check for PriceSetting with OptionProductId as Null if we don't get any record with OptionProduct
					if (iGoAhead == 1) {
						if (iTakeOpProdAsNull == 1) {
							vctPSRows = priceSettingTable
									.vctSearchByProductIDOptionProductIDandMinMaxandDate(
											bProductDetail.lProductID
													.longValue(), FINAL_ZERO,
											FINAL_ZERO, iNoOfOccurences,
											dtDateCheck);
						} else {
							vctPSRows = priceSettingTable
									.vctSearchByProductIDOptionProductIDandMinMaxandDate(
											bProductDetail.lProductID
													.longValue(),
											bProductDetail.lOptionProductID
													.longValue(), FINAL_ZERO,
											iNoOfOccurences, dtDateCheck);
						}

						if ((null != vctPSRows) && (1 < vctPSRows.size())) {
							if (iTakeOpProdAsNull == 1) {
								vctPSRows = priceSettingTable
										.vctSearchByProductIDOptionProductIDandMinMaxandIsDefaultandDate(
												bProductDetail.lProductID
														.longValue(),
												FINAL_ZERO, FINAL_ZERO,
												iNoOfOccurences, FINAL_ZERO,
												dtDateCheck);
							} else {
								vctPSRows = priceSettingTable
										.vctSearchByProductIDOptionProductIDandMinMaxandIsDefaultandDate(
												bProductDetail.lProductID
														.longValue(),
												bProductDetail.lOptionProductID
														.longValue(),
												FINAL_ZERO, iNoOfOccurences,
												FINAL_ZERO, dtDateCheck);
							}

							if ((null != vctPSRows) && (1 <= vctPSRows.size())) {
								priceSettingRow = (PriceSettingRow) vctPSRows
										.elementAt(FINAL_ZERO);
								lPriceSettingID = Long.valueOf(
										priceSettingRow.lPriceSettingID);
							} else {
								lPriceSettingID = Long.valueOf(0);
							}
						} else if ((null != vctPSRows)
								&& (1 == vctPSRows.size())) {
							priceSettingRow = (PriceSettingRow) vctPSRows
									.elementAt(FINAL_ZERO);
							lPriceSettingID = Long.valueOf(
									priceSettingRow.lPriceSettingID);
						} else {
							lPriceSettingID = Long.valueOf(0);
						}
					}

					//                  END ADD: V 3.10
					//                  Added Code for fixing DEFECT id 70, Obsolete Masters
				}
			}

			/** **************STARTING*****************TO PRINT QUERRY******************************************** */

			// BEGIN DELETE Ver 5.57a
			// if(GAfePropertyLoader.DEBUG)
			// {
			// System.out.println("The PriceSetting ID is : " +lPriceSettingID);
			// }
			// END DELETE Ver 5.57a
			/** **************ENDING*******************TO PRINT QUERRY******************************************** */
			GLogger.debug(CLASS_NAME,
					"fncInternalForPSIDandPriceCalAfterChanges", "ProductID = "
							+ bProductDetail.lProductID);
			GLogger.debug(CLASS_NAME,
					"fncInternalForPSIDandPriceCalAfterChanges",
					"lPriceSettingID = " + lPriceSettingID);

			if (!((string_ZERO).equals(String.valueOf(lPriceSettingID)))) {

				// BEGIN ADD SUPRIYA
				// Check if the price setting Id is to be picked for ATV Single Product
				try {
					if (bProductDetail.lProductID.longValue() == GAfeDescription.PRODUCT_SINGLE) {
						GLogger.chkpt("Product is ATV Single");

						// Get the Address Id of the productline from session
						Object obj1 = teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct);

						if (null != obj1) {
							GLogger.chkpt("Role object found in session");

							BProductRole objBProductRole = (BProductRole) obj1;

							GLogger.chkpt("Selected Address Id :"
									+ objBProductRole.lAddressID);
							GLogger.chkpt("objBProductRole:" + objBProductRole);

							Long lngAddressId = null;
							Long lngCustomerId = null;
							BProductRoleDetail objProductRoleDetail = null;

							if (null != objBProductRole) {
								GLogger.chkpt("objBProductRole is not null");
								lngAddressId = objBProductRole.lAddressID;
								GLogger.chkpt("objBProductRole.lAddressID:"
										+ objBProductRole.lAddressID);

								// if(null != lngAddressId)
								// {
								if (null != objBProductRole.vctProductRole) {
									for (int iCounter = 0; iCounter < objBProductRole.vctProductRole
											.size(); iCounter++) {
										objProductRoleDetail = (BProductRoleDetail) objBProductRole.vctProductRole
												.elementAt(iCounter);

										if (null != objProductRoleDetail) {
											if ((null != objProductRoleDetail.lRoleTypeID)
													&& (GAfeDescription.ROLETYPE_USER == objProductRoleDetail.lRoleTypeID
															.longValue())) {
												GLogger
														.chkpt("objProductRoleDetail.lAddressID:"
																+ objProductRoleDetail.lAddressID);
												GLogger
														.chkpt("objProductRoleDetail.lCustomerID:"
																+ objProductRoleDetail.lCustomerID);
												lngAddressId = objProductRoleDetail.lAddressID;
												lngCustomerId = objProductRoleDetail.lCustomerID;
											}
										}
									}
								}

								// }
							}

							// Begin Modify v9.01b get the region instead of Owner

							// Modified for cached implementation of the method (Reason: slow performance of product movement in upper and lower grid)
							// long lRegionId = lProduct_ext.lGetRegionIdentifierForAddressId(lngAddressId.longValue());
							long lRegionId = lGetRegionIdentifierForAddressId(
									lngAddressId.longValue(), true);

							// long lOwnerId = lGetNodeOwnerByAddressId(lngAddressId.longValue(),true);
							GLogger.chkpt("Retrieved Region id:" + lRegionId);

							String strZip = null;
							long lPriceSettingId = -1;
							String[] arrAddressDetails = RProduct
									.arrGetAddressDetail(lngAddressId
											.longValue(),
											(int) bSession.lLanguageId);

							if (null != arrAddressDetails) {
								strZip = arrAddressDetails[5];
							}

							// End Modify v9.01b
							// Begin Modify v9.01b first find whether social is selected or not
							boolean isSocialTarief = isSocialTarief(bProductDetail.vctParameters);
							ArrayList alstCategorieTarief = LProduct_ext
									.getCategorieAndTarief(strZip,
											isSocialTarief, lRegionId);
							String strCategorie = null;

							// String strCategorie = strGetCategorie(strZip,strCountryCode,false,lOwnerId);

							// if("UPC Leuven".equalsIgnoreCase(strCategorie) || "UPC Bxl".equalsIgnoreCase(strCategorie))
							if (GAfeDescription.bCheckInList(lRegionId,
									GAfeConstants.REGION_UPC)
									|| GAfeDescription.bCheckInList(lRegionId,
											GAfeConstants.REGION_INTERKABEL))

							// End Modify v9.01b
							{
								GLogger
										.chkpt("Retrieved strCategorie is for Leuven/bxl or Interkabel");

								// Begin Add v9.01a  put the tarief
								strCategorie = (String) alstCategorieTarief
										.get(GAfeConstants.ONE);

								// End Add v9.01a
								// Price Setting Id to be overwritten with specific value
								// Check if Social Tariff is applicable, if yes change the values.

								// Begin delete v9.01a deleting as code was just to check if the selected tarief is social or not.

								/*
								 * vctParameters = bProductDetail.vctParameters;
								 * if(null != vctParameters)
								 * {
								 *   for (int iCountForParam =0 ; iCountForParam < vctParameters.size();iCountForParam++)
								 *   {
								 *       objTempBProductParameter = (BProductParameter)vctParameters.elementAt(iCountForParam);
								 *       if(objTempBProductParameter.lParameterID.longValue() == GAfeDescription.PRODUCTPARAMETER_TARIEF)
								 *       {
								 *           objBProductParameter = objTempBProductParameter;
								 *           break;
								 *       }
								 *   }
								 *   if (null != objBProductParameter)
								 *   {
								 *       if (null != objBProductParameter.vctParameterValues)
								 *       {
								 *           for(int iCount1=0; iCount1 < objBProductParameter.vctParameterValues.size();iCount1++)
								 *           {
								 *               vctTemp = (Vector) objBProductParameter.vctParameterValues.elementAt(iCount1);
								 *               if(null !=vctTemp)
								 *               {
								 *                  if((((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL) ||
								 *                          ((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL_UPC_LEUVEN) ||
								 *                          ((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL_UPC_BXL) ) && ((new Integer(vctTemp.elementAt(1)+""))).intValue() == 1 )
								 *                  {
								 *                      if("UPC Leuven".equalsIgnoreCase(strCategorie))
								 *                      {
								 *                          strCategorie = GAfeDescription.TARIEF_SOCIAL_UPC_LEUVEN;
								 *                      }
								 *                      else if("UPC Bxl".equalsIgnoreCase(strCategorie))
								 *                      {
								 *                          strCategorie = GAfeDescription.TARIEF_SOCIAL_UPC_BXL;
								 *                      }
								 *                  }
								 *               }
								 *           }
								 *       }
								 *   }
								 *
								 * }
								 */

								// End delete v9.01a
								// Compute if VAT is applicable
								CustomerLink customerLink = null;
								CustomerLinkRow customerLinkRow = null;
								boolean bVatApplicable = false;

								customerLink = (CustomerLink) GConnectMemoryDB
										.getTable(GAfeConstants.CUSTOMERLINK);

								Vector vctCustomerLink = null;

								vctCustomerLink = customerLink
										.clrSearchByCustIDAddIDandObsolete(
												lngCustomerId.longValue(),
												lngAddressId.longValue(), 0);

								if ((null != vctCustomerLink)
										&& (0 != vctCustomerLink.size())) {
									ArrayList arrActiveDTVLine = null;
									ArrayList arrATVLines = null;

									customerLinkRow = (CustomerLinkRow) vctCustomerLink
											.elementAt(0);
									arrActiveDTVLine = arrGetLineWithActivationDateOnCustomerLinkOfPackage(
											customerLinkRow.lCustomerLinkID,
											GAfeDescription.PRODUCT_IDTV, true,
											GAfeConstants.SingleDTVPackage);
									GLogger.chkpt("arrActiveDTVLine:"
											+ arrActiveDTVLine);

									int iNoOfActiveDTVLines = 0;
									int iNoOfATVLines = 0;

									if (null != arrActiveDTVLine) {
										iNoOfActiveDTVLines = arrActiveDTVLine
												.size();
									}

									GLogger.chkpt("iNoOfActiveDTVLines:"
											+ iNoOfActiveDTVLines);

									// Get all Lines of ATV
									arrATVLines = arrGetLinesOfPackage(
											RProduct
													.arrGetCPLOnCustLinkId(
															customerLinkRow.lCustomerLinkID,
															GAfeDescription.PRODUCT_ANALOGTV,
															0, 1),
											GAfeConstants.SingleATVPackage);
									GLogger.chkpt("arrATVLines:" + arrATVLines);

									if (null != arrATVLines) {
										iNoOfATVLines = arrATVLines.size();
									}

									GLogger.chkpt("iNoOfATVLines:"
											+ iNoOfATVLines);
									bVatApplicable = ((iNoOfATVLines > 0) && (iNoOfActiveDTVLines >= iNoOfATVLines));
									GLogger.chkpt("bVatApplicable:"
											+ bVatApplicable);
								}

								// For Normal Tarief Categorie and Tarief Values are same.
								lPriceSettingId = lGetPriceSettingIdByTariefAndVat(
										strCategorie, bVatApplicable);
							}

							GLogger.chkpt("lPriceSettingId:" + lPriceSettingId);

							if (-1 != lPriceSettingId) {

								// Valid value for Price Setting Id computed
								bProductDetail.lPriceSettingID = Long.valueOf(
										lPriceSettingId);
								lPriceSettingID = Long.valueOf(lPriceSettingId);
							}
						} else {

							// Move Order Flow

							/**
							 * In this case, Tarief is computed already and can be picked from session
							 */
							long lPriceSettingIdForOrder = -1;
							Object obj = teleSessionMgr
									.getValue("PriceSetting_Tarief");

							if (null != obj) {
								String strTarief = (String) obj;

								GLogger
										.chkpt("PriceSetting_Tarief picked from session:"
												+ strTarief);

								if (-1 != strTarief.indexOf("UPC")) {

									/**
									 * Other than tarief VAT Applicability needs to be computed.
									 * For this total number of ATV lines and total number of DTV lines
									 * at the destination address is required.
									 */

									// Get the Business Object containing the Move Order details from session.
									BOrderMove objBOrderMove = (BOrderMove) teleSessionMgr
											.getValue(GAfeConstants.BORDERMOVE_AFEORDER);
									BMoveOrderLineDetails objBMoveOrderLineDetails = null;

									if (null != objBOrderMove) {
										int iATVLineCount = 0;
										int iDTVLineCount = 0;
										boolean bVatApplicableForOrder = false;

										GLogger
												.chkpt("Checking for Total number of ATV and DTV Lines at destination address:");

										Vector vctLineDetails = objBOrderMove.vctBMoveOrderLineDetails;

										if (null != vctLineDetails) {
											GLogger.chkpt("vctLineDetails:"
													+ vctLineDetails);

											for (int iLineCount = 0; iLineCount < vctLineDetails
													.size(); iLineCount++) {
												objBMoveOrderLineDetails = (BMoveOrderLineDetails) vctLineDetails
														.get(iLineCount);

												if (objBMoveOrderLineDetails
														.lGetProductId() == GAfeDescription.PRODUCT_ANALOGTV) {
													iATVLineCount++;
												}

												if (objBMoveOrderLineDetails
														.lGetProductId() == GAfeDescription.PRODUCT_IDTV) {
													iDTVLineCount++;
												}

												GLogger
														.chkpt("iATVLineCount at :"
																+ iLineCount
																+ ":"
																+ iATVLineCount);
												GLogger
														.chkpt("iDTVLineCount at :"
																+ iLineCount
																+ ":"
																+ iDTVLineCount);
											}

											bVatApplicableForOrder = (iDTVLineCount > iATVLineCount);
											GLogger
													.chkpt("bVatApplicableForOrder :"
															+ bVatApplicableForOrder);
										}

										/**
										 * Compute Price Setting Id based on VAT Applicable and Tarief
										 */
										lPriceSettingIdForOrder = lGetPriceSettingIdByTariefAndVat(
												strTarief,
												bVatApplicableForOrder);
										GLogger
												.chkpt("lPriceSettingIdForOrder :"
														+ lPriceSettingIdForOrder);

										if (-1 != lPriceSettingIdForOrder) {

											// Valid value for Price Setting Id computed
											bProductDetail.lPriceSettingID = Long.valueOf(
													lPriceSettingIdForOrder);
										}
									}
								}
							}
						}
					}
				} catch (Exception e) {
					GLogger.logException(e);
				}

				// END ADD SUPRIYA
				// Begin DEL v9.01d
				// ChargeRow chargeRow = null;                                                                                   // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				if (null != chargeTable) {

					/**
					 * **************STARTING*****************TO PRINT QUERRY
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * strSql.setLength(0); //Initialising
					 * strSql.append("SELECT VATID, CHARGEAMOUNT, RECURRINGTYPEID, RECURRINGTYPEID RTYPEID FROM CHARGE WHERE PRICESETTINGID = ");
					 * strSql.append(lPriceSettingID).append(" AND CURRENCYID = 1 AND OBSOLETE = ").append(FINAL_ZERO);
					 * strSql.append(" AND CHARGETYPEID = 3 AND  PAYMENTMETHODID = ").append(PaymentMethodUsage);
					 * System.out.println("The Querry is : " + strSql.toString());
					 * }
					 * /****************ENDING*******************TO PRINT QUERRY*********************************************
					 */
					Vector vctobjCRInternal = new Vector();

					// Begin Delete V5.96j
					// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(lPriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_USAGE"), PaymentMethodUsage.longValue());
					// End Delete V5.96j
					// Begin Add V5.96j

					GLogger.debug(CLASS_NAME,
							"fncInternalForPSIDandPriceCalAfterChanges",
							"CurrencyID = " + CurrencyID);
					GLogger.debug(CLASS_NAME,
							"fncInternalForPSIDandPriceCalAfterChanges",
							"GAfeDescription.lGetTypeId(CHARGETYPE_USAGE) = "
									+ GAfeDescription
											.lGetTypeId("CHARGETYPE_USAGE"));
					GLogger.debug(CLASS_NAME,
							"fncInternalForPSIDandPriceCalAfterChanges",
							"PaymentMethodUsage = " + PaymentMethodUsage);
					GLogger.debug(CLASS_NAME,
							"fncInternalForPSIDandPriceCalAfterChanges",
							"lRecurringTypeID = " + lRecurringTypeID);
					GLogger.debug(CLASS_NAME,
							"fncInternalForPSIDandPriceCalAfterChanges",
							"iInClExc = " + iInClExc);
					vctobjCRInternal = chargeTable
							.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
									lPriceSettingID.longValue(), CurrencyID
											.longValue(), FINAL_ZERO,
									GAfeDescription
											.lGetTypeId("CHARGETYPE_USAGE"),
									PaymentMethodUsage.longValue(),
									lRecurringTypeID.longValue());

					// End Add V5.96j
					if (null != vctobjCRInternal) {
						if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).lVatID) {
							VatRow vatRow = null; // Initializing the Object Class for the Vat table

							if (null == vatTable) {
								vatTable = (Vat) teleSessionMgr
										.getMasterTable("VAT"); // Getting the Vat table from the session
							}

							vatRow = (VatRow) vatTable
									.vrSearchByVatIDandObsolete(
											((ChargeRow) (vctobjCRInternal
													.elementAt(FINAL_ZERO))).lVatID,
											FINAL_ZERO);

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * strSql.setLength(0); //Initialising
							 * strSql.append("SELECT VATAMOUNT FROM VAT WHERE VATID = ");
							 * strSql.append(((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).lVatID).append(" AND OBSOLETE = ").append(FINAL_ZERO);
							 * System.out.println("The Querry is : " + strSql.toString());
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
							if ((null != vatRow) && (FINAL_ZERO == iInClExc)) {
								dAddChargeAmount = vatRow.dVatAmount;
							} else {
								dAddChargeAmount = 0;
							}

							dChargeAmount = dChargeAmount
									+ ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount;

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("*******************************************");
							 * System.out.println("dChargeAmount : " +((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).dChargeAmount);
							 * System.out.println("dChargeAmount : " +dAddChargeAmount);
							 * System.out.println("dChargeAmount : " +((dAddChargeAmount) * ((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).dChargeAmount)/100);
							 * System.out.println("*******************************************");
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
							dChargeAmount = ((ChargeRow) (vctobjCRInternal
									.elementAt(FINAL_ZERO))).dChargeAmount
									+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount) / 100);

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("dAddChargeAmount : " +dChargeAmount);
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
						} // end of the if loop

						dSum = dSum + dChargeAmount;
					} // end of the if loop
				}

				GLogger.debug(CLASS_NAME,
						"fncInternalForPSIDandPriceCalAfterChanges", "dSum = "
								+ dSum);

				/**
				 * **************STARTING*****************TO PRINT QUERRY
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("In Detail Case LSUM after Usage is : " +dSum);
				 * }
				 * /****************ENDING*******************TO PRINT QUERRY*********************************************
				 */

				// Begin DEL v9.01d
				// chargeRow = null;                                                                                     // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				// BEGIN DELETE V6.02d
				// if (null != chargeTable) {
				// END DELETE V6.02d
				// BEGIN ADD V6.02d
				// BEGIN DELETE ver 6.07f
				// if (null != chargeTable && dSum == 0)
				// END DELETE ver 6.07f
				// BEGIN ADD ver 6.07f
				if (null != chargeTable)

				// END ADD ver 6.07f
				{

					// END ADD V6.02d
					Vector vctobjCRInternal = new Vector();

					// Begin Delete V5.96j
					// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(lPriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_RC"), PaymentMethodRC.longValue());
					// End Delete V5.96j
					// Begin Add V5.96j
					vctobjCRInternal = chargeTable
							.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
									lPriceSettingID.longValue(),
									CurrencyID.longValue(),
									FINAL_ZERO,
									GAfeDescription.lGetTypeId(string_CHARGETYPE_RC),
									PaymentMethodRC.longValue(),
									lRecurringTypeID.longValue());

					// End Add V5.96j

					/**
					 * **************STARTING*****************TO PRINT QUERRY
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * strSql.setLength(0); //Initialising
					 * strSql.append("SELECT VATID, CHARGEAMOUNT, RECURRINGTYPEID, RECURRINGTYPEID RTYPEID FROM CHARGE WHERE PRICESETTINGID = ");
					 * strSql.append(lPriceSettingID).append(" AND CURRENCYID = 1 AND OBSOLETE = ").append(FINAL_ZERO);
					 * strSql.append(" AND CHARGETYPEID = 2 AND  PAYMENTMETHODID = ").append(PaymentMethodRC);
					 * System.out.println("The Querry is : " + strSql.toString());
					 * }
					 * /****************ENDING*******************TO PRINT QUERRY*********************************************
					 */
					if (null != vctobjCRInternal) {
						if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).lVatID) {
							VatRow vatRow = null; // Initializing the Object Class for the Vat table

							if (null == vatTable) {
								vatTable = (Vat) teleSessionMgr
										.getMasterTable("VAT"); // Getting the Vat table from the session
							}

							vatRow = (VatRow) vatTable
									.vrSearchByVatIDandObsolete(
											((ChargeRow) (vctobjCRInternal
													.elementAt(FINAL_ZERO))).lVatID,
											FINAL_ZERO);

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * strSql.setLength(0); //Initialising
							 * strSql.append("SELECT VATAMOUNT FROM VAT WHERE VATID = ");
							 * strSql.append(((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).lVatID).append(" AND OBSOLETE = ").append(FINAL_ZERO);
							 * System.out.println("The Querry is : " + strSql.toString());
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
							if ((null != vatRow) && (FINAL_ZERO == iInClExc)) {
								dAddChargeAmount = vatRow.dVatAmount;
							} else {
								dAddChargeAmount = 0;
							}

							dChargeAmount = dChargeAmount
									+ ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount;

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("*******************************************");
							 * System.out.println("dChargeAmount : " +((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).dChargeAmount);
							 * System.out.println("dChargeAmount : " +dAddChargeAmount);
							 * System.out.println("dChargeAmount : " +((dAddChargeAmount) * ((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).dChargeAmount)/100);
							 * System.out.println("*******************************************");
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
							dChargeAmount = ((ChargeRow) (vctobjCRInternal
									.elementAt(FINAL_ZERO))).dChargeAmount
									+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount) / 100);

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("dAddChargeAmount : " +dChargeAmount);
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
						} // end of the if loop

						dSum = dSum + dChargeAmount;

						// BEGIN ADD ver 6.05c
						RecurringTypeRow recurringTypeRow = null;

						if (null == recurringTypeTable) {
							recurringTypeTable = (RecurringType) teleSessionMgr
									.getMasterTable("RECURRINGTYPE"); // Getting the Vat table from the session
						}

						recurringTypeRow = (RecurringTypeRow) recurringTypeTable
								.rtrSearchByRecurringTypeIDandObsolete(
										lRecurringTypeID.longValue(),
										FINAL_ZERO);

						if (null != recurringTypeRow) {
							strPeriodicity = recurringTypeRow.strRecurringTypeDescription;
						}

						// END ADD ver 6.05c
					} // end of the if loop
				}

				GLogger.debug(CLASS_NAME,
						"fncInternalForPSIDandPriceCalAfterChanges",
						"After RC dSum = " + dSum);

				/** **************STARTING*****************TO PRINT QUERRY******************************************** */

				// BEGIN DELETE Ver 5.57a
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println("In Detail Case LSUM after NRC is : " +dSum);
				// }
				// END DELETE Ver 5.57a
				/** **************ENDING*******************TO PRINT QUERRY******************************************** */
				// BEgin DEL v9.01d
				// chargeRow = null;                                                                                     // Initializing the Object Class for the CHARGE table
				// End DEL v9.01d
				if (null == chargeTable) {
					chargeTable = (Charge) teleSessionMgr
							.getMasterTable("CHARGE"); // Getting the CHARGE table from the session
				}

				// BEGIN DELETE V6.02d
				// if (null != chargeTable) {
				// END DELETE V6.02d
				// BEGIN DELETE ver 6.07f
				// BEGIN ADD V6.02d
				// if (null != chargeTable && dSum == 0)
				// END DELETE ver 6.07f
				// BEGIN ADD ver 6.07f
				if (null != chargeTable)

				// END ADD ver 6.07f
				{

					// END ADD V6.02d
					Vector vctobjCRInternal = new Vector();

					// Begin Delete V5.96j
					// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(lPriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_NRC"), PaymentMethodNRC.longValue());
					// End Delete V5.96j
					// BEGIN DELETE V6.02d
					// Begin Add V5.96j
					// vctobjCRInternal = chargeTable.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(lPriceSettingID.longValue(), CurrencyID.longValue(), FINAL_ZERO, GAfeDescription.lGetTypeId("CHARGETYPE_NRC"), PaymentMethodNRC.longValue(),lRecurringTypeID.longValue());
					// End Add V5.96j
					// END DELETE V6.02d
					// BEGIN ADD V6.02d
					vctobjCRInternal = chargeTable
							.vctSearchByPriceSettingIDandCurrencyIDandObsoleteandChargeTypeIDandPaymentMethodID(
									lPriceSettingID.longValue(), CurrencyID
											.longValue(), FINAL_ZERO,
									GAfeDescription
											.lGetTypeId(string_CHARGETYPE_NRC),
									PaymentMethodNRC.longValue(), 0);

					// END ADD V6.02d

					/**
					 * **************STARTING*****************TO PRINT QUERRY
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * strSql.setLength(0); //Initialising
					 * strSql.append("SELECT VATID, CHARGEAMOUNT, RECURRINGTYPEID, RECURRINGTYPEID RTYPEID FROM CHARGE WHERE PRICESETTINGID = ");
					 * strSql.append(lPriceSettingID).append(" AND CURRENCYID = 1 AND OBSOLETE = ").append(FINAL_ZERO);
					 * strSql.append(" AND CHARGETYPEID = 1 AND  PAYMENTMETHODID = ").append(PaymentMethodNRC);
					 * System.out.println("The Querry is : " + strSql.toString());
					 * }
					 * /****************ENDING*******************TO PRINT QUERRY*********************************************
					 */
					if (null != vctobjCRInternal) {
						if (FINAL_ZERO != ((ChargeRow) (vctobjCRInternal
								.elementAt(FINAL_ZERO))).lVatID) {
							VatRow vatRow = null; // Initializing the Object Class for the Vat table

							if (null == vatTable) {
								vatTable = (Vat) teleSessionMgr
										.getMasterTable("VAT"); // Getting the Vat table from the session
							}

							vatRow = (VatRow) vatTable
									.vrSearchByVatIDandObsolete(
											((ChargeRow) (vctobjCRInternal
													.elementAt(FINAL_ZERO))).lVatID,
											FINAL_ZERO);

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * strSql.setLength(0); //Initialising
							 * strSql.append("SELECT VATAMOUNT FROM VAT WHERE VATID = ");
							 * strSql.append(((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).lVatID).append(" AND OBSOLETE = ").append(FINAL_ZERO);
							 * System.out.println("The Querry is : " + strSql.toString());
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
							if ((null != vatRow) && (FINAL_ZERO == iInClExc)) {
								dAddChargeAmount = vatRow.dVatAmount;
							} else {
								dAddChargeAmount = 0;
							}

							dChargeAmount = dChargeAmount
									+ ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount;

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("*******************************************");
							 * System.out.println("dChargeAmount : " +((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).dChargeAmount);
							 * System.out.println("dChargeAmount : " +dAddChargeAmount);
							 * System.out.println("dChargeAmount : " +((dAddChargeAmount) * ((ChargeRow)(vctobjCRInternal.elementAt(FINAL_ZERO))).dChargeAmount)/100);
							 * System.out.println("*******************************************");
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
							dChargeAmount = ((ChargeRow) (vctobjCRInternal
									.elementAt(FINAL_ZERO))).dChargeAmount
									+ (((dAddChargeAmount) * ((ChargeRow) (vctobjCRInternal
											.elementAt(FINAL_ZERO))).dChargeAmount) / 100);

							/**
							 * **************STARTING*****************TO PRINT QUERRY
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("dAddChargeAmount : " +dChargeAmount);
							 * }
							 * /****************ENDING*******************TO PRINT QUERRY*********************************************
							 */
						} // end of the if loop

						dSum = dSum + dChargeAmount;

						// Begin Delete V5.96j

						// if (FINAL_ZERO != (((ChargeRow) (vctobjCRInternal.elementAt(FINAL_ZERO))).lRecurringTypeID)) {
						// lRecurringTypeID = Long.valueOf(((ChargeRow) (vctobjCRInternal.elementAt(FINAL_ZERO))).lRecurringTypeID);
						// End Delete V5.96j

						/** **************************************MAKING OF NEXT QUERRY************************************** */
						// BEGIN DELETE V6.02d
						/*
						 * RecurringTypeRow recurringTypeRow = null;                                                                   // Initializing the Object Class for the Vat table
						 *
						 * if (null == recurringTypeTable) {
						 * recurringTypeTable = (RecurringType) teleSessionMgr.getMasterTable("RECURRINGTYPE");    // Getting the Vat table from the session
						 * }
						 *
						 * recurringTypeRow = (RecurringTypeRow) recurringTypeTable.rtrSearchByRecurringTypeIDandObsolete(lRecurringTypeID.longValue(), FINAL_ZERO);
						 *
						 * if (null != recurringTypeRow) {
						 * strPeriodicity = recurringTypeRow.strRecurringTypeDescription;
						 * }
						 */

						// END DELETE V6.02d
						/**
						 * **************STARTING*****************TO PRINT QUERRY
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * strSql.setLength(0); //Initialising
						 * strSql.append("SELECT RECURRINGTYPEDESCRIPTION FROM RECURRINGTYPE WHERE RECURRINGTYPEID = ");
						 * strSql.append(lRecurringTypeID).append(" AND OBSOLETE = ").append(FINAL_ZERO);
						 * System.out.println("The Querry is : " + strSql.toString());
						 * }
						 * /****************ENDING*******************TO PRINT QUERRY*********************************************
						 */
						// Begin Delete V5.96j
						// }//end of the if loop
						// End Delete V5.96j
					} // end of the if loop
				}

				// BEGIN ADD V6.02d
				// BEGIN DELETE ver 6.05c

				/*
				 * RecurringTypeRow recurringTypeRow = null;
				 *
				 *               if (null == recurringTypeTable) {
				 *                       recurringTypeTable = (RecurringType) teleSessionMgr.getMasterTable("RECURRINGTYPE");    // Getting the Vat table from the session
				 *               }
				 *
				 *               recurringTypeRow = (RecurringTypeRow) recurringTypeTable.rtrSearchByRecurringTypeIDandObsolete(lRecurringTypeID.longValue(), FINAL_ZERO);
				 *
				 *               if (null != recurringTypeRow) {
				 *                       strPeriodicity = recurringTypeRow.strRecurringTypeDescription;
				 *                       }
				 */

				// END DELETE ver 6.05c
				// END ADD V6.02d
				GLogger.debug(CLASS_NAME,
						"fncInternalForPSIDandPriceCalAfterChanges",
						"After NRC dSum = " + dSum);

				/**
				 * **************STARTING*****************TO PRINT QUERRY
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("In Detail Case LSUM after RC is : " +dSum);
				 * }
				 * /****************ENDING*******************TO PRINT QUERRY*********************************************
				 */
				if (strPeriodicity.length() == FINAL_ZERO) {
					bProductDetail.strPeriodicity = "";
				} else {
					bProductDetail.strPeriodicity = strPeriodicity;
				}

				// Begin v9.01c Modify
				// String strDescForProp = "";
				// strDescForProp = "DECPLACES_CURRENCY_" + String.valueOf(CurrencyID);

				/** **************STARTING*****************TO PRINT QUERRY******************************************* */

				// BEGIN DELETE Ver 5.57a
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println("The strDescForProp is : " +strDescForProp);
				// System.out.println("dSum for Product is : " +dSum);
				// }
				// END DELETE Ver 5.57a
				/** **************ENDING*******************TO PRINT QUERRY******************************************** */
				bProductDetail.dPrice = dSum;

				// bProductDetail.dPrice = dbValidateCharge(bProductDetail.dPrice, Integer.parseInt(GAfeDescription.strGetProperty(strDescForProp)));
				// End v9.01c Modify
				// BEGIN DELETE Ver 5.57a
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println("bProductDetail.dPrice : " +bProductDetail.dPrice);
				// }
				// END DELETE Ver 5.57a
			} else {
				bProductDetail.strPeriodicity = "";
				bProductDetail.dPrice = 0;
			}

			bProductDetail.lPriceSettingID = lPriceSettingID;
		} catch (SQLException sqle) {
			if (GAfePropertyLoader.DEBUG) {
			//	sqle.printStackTrace(System.out);
				GLogger.logException(sqle);
			}

			AfeException afee = new AfeException("ERRCOM_00001", sqle
					.getMessage());

			throw afee;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		finally {
			GLogger.debug(CLASS_NAME,
					"fncInternalForPSIDandPriceCalAfterChanges",
					"lPriceSettingID = " + lPriceSettingID);
		}
	}

	/*
	 *       DESCRIPTION     :       The Function will do all the validations when we go from  the Telephony, Internet or CPS
	 *                                                               Screen to the Product Property Screen and will do the changes in the BProductProperty
	 *                                                               main bussiness object for what has been done on the screens (that is the changes).
	 *       @param                  :       Long lCustomerID
	 *       @return                         :       int      -  This function will return 1 in case the fnc is successfull otherwise 0
	 *       @Modification Author : Lalit
	 **/

	//  3.33    Begin Update
	//  public int iTabProperty(Long lCustomerID) throws SQLException, Exception
	public final int iTabProperty(Long lCustomerID) throws AfeException

	//  3.33    End Update
	{

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d
		int iCounterForReturn = 0; // Local Varaible Declaration
		int iGetMaxInstanceInVector = 0; // Local Varaible Declaration
		int iLevel = 0; // Local Varaible Declaration
		int iParentInstance = 0; // Local Varaible Declaration
		int iFindProductInVector = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		int iSizeOfVct = 0; // Local Varaible Declaration
		int iSelected = 0; // Local Varaible Declaration
		int iEndRecord = 0; // Local Varaible Declaration
		int iFlagToCome = 0; // Local Varaible Declaration
		String strValues = null; // Local Varaible Declaration
		String StrValuesForCompare = ""; // Local Varaible Declaration

		// 3.33    Begin Insert
		BProductDetailProperty bProductDetailProperty = null;

		// Begin DEL v9.01d
		// BProductRole bProductRole = null;
		// End DEL v9.01d
		BProductDetail bProductDetail = null;
		BProductParameter bProductParameter = null;
		BNumber bNumber = null;
		BInternet bInternet = null;
		BIntro bIntro = null;

		// Begin DEL v9.01d
		// SimpleDateFormat sdf = null;
		// End DEL v9.01d
		// 3.33    End Insert
		try {

			// 3.33    Begin Update

			/*
			 * BProductDetailProperty      bProductDetailProperty  =       new BProductDetailProperty();
			 * BProductRole                                bProductRole                                    =       new BProductRole();
			 * BProductDetail                              bProductDetail                          =       new BProductDetail();
			 * BProductParameter           bProductParameter               =       new BProductParameter();
			 * SimpleDateFormat                    sdf                                                             =       new SimpleDateFormat ("dd-MM-yyyy");    //Making the Object of the Date Formatter Class
			 * BNumber                                             bNumber                                         =       null;
			 * BInternet                                           bInternet                                               =       null;
			 * BIntro                                                      bIntro                                                  =       null;
			 */

			// Begin DEL v9.01d
			// bProductRole = new BProductRole();
			// End DEL v9.01d
			bProductDetail = new BProductDetail();
			bProductParameter = new BProductParameter();

			// Begin DEL v9.01d
			// sdf = new SimpleDateFormat("dd-MM-yyyy"); //Making the Object of the Date Formatter Class
			// End DEL v9.01d
			// 3.33    End Update
			// 3.33    Begin Update
			bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
					.getValue("BProductDetailProperty_aCProductOrders");

			if (null != bProductDetailProperty)

			// if (null != teleSessionMgr.getValue("BProductDetailProperty_aCProductOrders"))
			{

				// BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
				// bProductDetailProperty = (BProductDetailProperty)teleSessionMgr.getValue("BProductDetailProperty_aCProductOrders");
				// 3.33    End Update
				iFlagToCome = 1;
			}

			// 3.33    Begin Update
			else

			// else if(null != teleSessionMgr.getValue("BProductDetailProperty_aCProduct"))
			{
				bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

				if (null != bProductDetailProperty) {

					// BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
					// bProductDetailProperty = (BProductDetailProperty)teleSessionMgr.getValue("BProductDetailProperty_aCProduct");
					// 3.33    End Update
					iFlagToCome = 2;
				}
			}

			// Begin DEL v9.01d
			// if (null != teleSessionMgr.getValue("BProductDetailRole_aCProduct")) {
			// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
			// bProductRole = (BProductRole) teleSessionMgr.getValue("BProductDetailRole_aCProduct");
			// }
			// End DEL v9.01d
			if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
				bNumber = new BNumber();
				bNumber = (BNumber) teleSessionMgr.getValue("BNumber_aCTel");
			}

			if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) {
				bInternet = new BInternet();
				bInternet = (BInternet) teleSessionMgr
						.getValue(string_BInternet_aCProduct);
			}

			// 3.33    Begin Update
			// If Selected Product Line is Telephony Product Line
			// BEGIN DELETE V.6.07h
			// if (GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE") == bProductDetailProperty.lProductID.longValue() ) {
			// END DELETE V. 6.07h

			// BEGIN ADD V.6.07h
			// Begin Mod v8.00a
			// if ((GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE") == bProductDetailProperty.lProductID.longValue()) || (GAfeDescription.lGetTypeId("PRODUCT_VON") == bProductDetailProperty.lProductID.longValue())) {
			if ((GAfeDescription.lGetTypeId(string_PRODUCT_TELEPHONE) == bProductDetailProperty.lProductID
					.longValue())
					|| (GAfeDescription.lGetTypeId(string_PRODUCT_VON) == bProductDetailProperty.lProductID
							.longValue())
					|| (GAfeDescription.lGetTypeId(string_PRODUCT_MOBILE) == bProductDetailProperty.lProductID
							.longValue())
					//Begin Add V 9.02j
					|| (GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
							.longValue())
			//End Add V 9.02j
			)

			// End Mod v8.00a
			{

				// END ADD V. 6.07h
				// 3.33    Begin Insert
				if (GAfePropertyLoader.DEBUG) {
					GGeneric
							.println(
									"In LProduct.java ... method iTabProperty()- in Telephony case - with parameters lCustomerID : "
											+ lCustomerID,
									GGeneric.iDebugLevelSeven, this);
				}

				// 3.33    End Insert
				bNumber = (BNumber) teleSessionMgr.getValue("BNumber_aCTel");

				if (null != bNumber)

				// if (null != teleSessionMgr.getValue("BNumber_aCTel"))
				{

					/*
					 * bNumber     =       new BNumber();
					 * bNumber     =       (BNumber)teleSessionMgr.getValue("BNumber_aCTel");
					 * Long                lComplexityCode ;
					 * Long                lDueDate                                ;
					 * Long                lRoutingNo                              ;
					 * Long                lDonorId                                        ;
					 */

					// BEGIN DELETE V5.43b
					// Comment : Chages for NP after review
					/*
					 * Long                lComplexityCode =       null;
					 * Long                lDueDate                                =       null;
					 * Long                lRoutingNo                              =       null;
					 * Long                lDonorId                                        =       null;
					 * //  Retrieving ProductParameterIDfor Complexity Code from Property Files
					 * lComplexityCode     =       Long.valueOf(GAfeDescription.strGetProperty("PRODUCTPARAMETER_COMPLEXITYCODE"));
					 * //  Retrieving ProductParameterIDfor Due Date from Property Files
					 * lDueDate                            =       Long.valueOf(GAfeDescription.strGetProperty("PRODUCTPARAMETER_DUEDATE"));
					 * //  Retrieving ProductParameterIDfor Routing No from Property Files
					 * lRoutingNo                          =       Long.valueOf(GAfeDescription.strGetProperty("PRODUCTPARAMETER_ROUTINGNO"));
					 * //  Retrieving ProductParameterIDfor Donor ID from Property Files
					 * lDonorId                                    =       Long.valueOf(GAfeDescription.strGetProperty("PRODUCTPARAMETER_DONORID"));
					 * //  3.33    End Update
					 * //  3.33    Begin Insert
					 *
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 *   GGeneric.println("In LProduct.java ... method iTabProperty()    -       Value from Property file lComplexityCode : "+lComplexityCode,GGeneric.iDebugLevelSeven,this);
					 *   GGeneric.println("In LProduct.java ... method iTabProperty()    -       Value from Property file lDueDate : "+lDueDate,GGeneric.iDebugLevelSeven,this);
					 *   GGeneric.println("In LProduct.java ... method iTabProperty()    -       Value from Property file lRoutingNo : "+lRoutingNo,GGeneric.iDebugLevelSeven,this);
					 *   GGeneric.println("In LProduct.java ... method iTabProperty()    -       Value from Property file lDonorId : "+lDonorId,GGeneric.iDebugLevelSeven,this);
					 *   GGeneric.println("In LProduct.java ... method iTabProperty()    -       Value from BNumber Object bNumber.lVanityID : "+bNumber.lVanityID,GGeneric.iDebugLevelSeven,this);
					 * }
					 */

					// END DELETE V 5.43b
					// 3.33    End Insert
					if (("TN").equalsIgnoreCase(bNumber.strKindOfNumber)) {

						// 3.33    Begin Insert
						if (GAfePropertyLoader.DEBUG) {
							GGeneric
									.println(
											"In LProduct.java ... method iTabProperty()- in TN-Telephony case - with parameters lCustomerID : "
													+ lCustomerID,
											GGeneric.iDebugLevelSeven, this);
						}

						// 3.33    End Insert
						// If the Selected Number is Diamond Number then---
						if ((GAfeDescription
								.strGetProperty("VANITYTYPE_DIAMOND"))
								.equalsIgnoreCase(String
										.valueOf(bNumber.lVanityID))) {

							// 3.33    Begin Insert
							if (GAfePropertyLoader.DEBUG) {
								GGeneric
										.println(
												"In LProduct.java ... method iTabProperty()- in TN-Telephony case -If  VANITYTYPE_DIAMOND with parameters lCustomerID : "
														+ lCustomerID,
												GGeneric.iDebugLevelSeven, this);
							}

							// 3.33    End Insert

							// BEGIN ADD V5.22a
							// comment: remove any special products from the selected products vector
							vdRemoveSpecialProducts(bProductDetailProperty,
									"DIAMOND");

							// END ADD V5.22a
							iGetMaxInstanceInVector = 0;
							iLevel = 2;
							iParentInstance = FINAL_ONE;
							iGetMaxInstanceInVector = iGetMaxInstanceInVectorlevelparentinstance(
									bProductDetailProperty.vctProductSelected,
									iLevel, iParentInstance);
							iFindProductInVector = iFindProductInVector(
									bProductDetailProperty.vctProductSelected,
									Long.valueOf(GAfeDescription
											.strGetProperty("PRODUCT_DIMOND"))); // If the Product is not in the Vector earlier

							if (FINAL_ZERO == iFindProductInVector) {
								bProductDetail = null;

								// BEGIN MODIFY : V 3.10
								// Modified Code for fixing DEFECT id 70, Obsolete Masters
								// Changed the Call objGetDetailProductNonSelected with additional input parameters
								// bProductDetail  =       objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_DIMOND")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
								iIsDefault = FINAL_ZERO;

								// BEGIN DELETE V6.02d
								// bProductDetail = objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_DIMOND")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
								// END DELETE V6.02d
								// BEGIN ADD V6.02d
								bProductDetail = objGetDetailProductNonSelected(
										lCustomerID,
										Long
												.valueOf(GAfeDescription
														.strGetProperty("PRODUCT_DIMOND")),
										Long.valueOf(string_ZERO),
										Long.valueOf(string_ZERO),
										0,
										0,
										bProductDetailProperty.lCurrencyID,
										FINAL_ONE,
										2,
										++iGetMaxInstanceInVector,
										FINAL_ONE,
										bProductDetailProperty.lPaymentMethodRC,
										bProductDetailProperty.lPaymentMethodNRC,
										bProductDetailProperty.lPaymentMethodUsage,
										iIsDefault,
										bProductDetailProperty.vctProductSelected,
										bProductDetailProperty);

								// END ADD V6.02d
								// END MODIFY: V 3.10
								// Modified Code for fixing DEFECT id 70, Obsolete Masters
								if (null != bProductDetail) {
									for (int iFCounter = FINAL_ZERO; iFCounter < bProductDetail.vctParameters
											.size(); iFCounter++) {
										bProductParameter = new BProductParameter();
										bProductParameter = (BProductParameter) bProductDetail.vctParameters
												.elementAt(iFCounter);

										// Begin DEL v9.01d
										// Vector vctInternal = null;
										// End DEL v9.01d
										// BEGIN DELETE V5.43b
										// Comment : Chages for NP after review

										/*
										 * if((String.valueOf(lComplexityCode)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strUseType, FINAL_ZERO);
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 * }
										 * if((String.valueOf(lDueDate)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)) && (null != bNumber.dtDueDate))
										 * {
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(String.valueOf(sdf.format(bNumber.dtDueDate)), FINAL_ZERO);
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 * }
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 *   System.out.println("lRoutingNo " +lRoutingNo);
										 *   System.out.println("bProductParameter.lParameterID " +bProductParameter.lParameterID);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA
										 * if((String.valueOf(lRoutingNo)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("The BIntro Remarks are " +bIntro.strRemarks);
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strRoutingNo, FINAL_ZERO);
										 *
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 * if((String.valueOf(lDonorId)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("The bNumber.strDonor are " +bNumber.strDonor);
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strDonor, FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 */

										// END DELETE V 5.43b
										// BEGIN ADD V5.43b
										// Comment : Chages for NP after review
										bProductParameter.iEditable = FINAL_ZERO;

										if (GAfeDescription.PRODUCTPARAMETER_COMPLEXTYCODE == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strType,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_ROUTINGNUMBER == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strRoutingNo,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_GROUPINGNUMBER == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strGroupingNumber,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_PORTINGID == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strPortingId,
															FINAL_ZERO);
										}

										// END ADD V 5.43b
									} // end of the for loop
								} // end of the if loop

								bProductDetailProperty.vctProductSelected
										.addElement(bProductDetail);
							}
						}

						// If the Vanity Type is Golden
						else if ((GAfeDescription
								.strGetProperty("VANITYTYPE_GOLDEN"))
								.equalsIgnoreCase(String
										.valueOf(bNumber.lVanityID))) {

							// 3.33    Begin Insert
							if (GAfePropertyLoader.DEBUG) {
								GGeneric
										.println(
												"In LProduct.java ... method iTabProperty()- in TN-Telephony case -If  VANITYTYPE_GOLDEN with parameters lCustomerID : "
														+ lCustomerID,
												GGeneric.iDebugLevelSeven, this);
							}

							// 3.33    End Insert

							// BEGIN ADD V5.22a
							// comment: remove any special products from the selected products vector
							vdRemoveSpecialProducts(bProductDetailProperty,
									"GOLDEN");

							// END ADD V5.22a
							iGetMaxInstanceInVector = 0;
							iLevel = 2;
							iParentInstance = FINAL_ONE;
							iGetMaxInstanceInVector = iGetMaxInstanceInVectorlevelparentinstance(
									bProductDetailProperty.vctProductSelected,
									iLevel, iParentInstance);
							iFindProductInVector = iFindProductInVector(
									bProductDetailProperty.vctProductSelected,
									Long.valueOf(GAfeDescription
											.strGetProperty("PRODUCT_GOLDEN"))); // If the Product is not in the Vector earlier

							if (FINAL_ZERO == iFindProductInVector) {
								bProductDetail = null;

								// BEGIN MODIFY : V 3.10
								// Modified Code for fixing DEFECT id 70, Obsolete Masters
								// Changed the Call objGetDetailProductNonSelected with an additional input parameter as iIsDefault
								// bProductDetail  =       objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_GOLDEN")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
								iIsDefault = FINAL_ZERO;

								// BEGIN DELETE V6.02d
								// bProductDetail = objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_GOLDEN")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
								// END DELETE V6.02d
								// BEGIN ADD V6.02d
								bProductDetail = objGetDetailProductNonSelected(
										lCustomerID,
										Long
												.valueOf(GAfeDescription
														.strGetProperty("PRODUCT_GOLDEN")),
										Long.valueOf(string_ZERO),
										Long.valueOf(string_ZERO),
										0,
										0,
										bProductDetailProperty.lCurrencyID,
										FINAL_ONE,
										2,
										++iGetMaxInstanceInVector,
										FINAL_ONE,
										bProductDetailProperty.lPaymentMethodRC,
										bProductDetailProperty.lPaymentMethodNRC,
										bProductDetailProperty.lPaymentMethodUsage,
										iIsDefault,
										bProductDetailProperty.vctProductSelected,
										bProductDetailProperty);

								// END ADD V6.02d
								// END MODIFY : V3.10
								// Modified Code for fixing DEFECT id 70, Obsolete Masters
								if (null != bProductDetail) {
									for (int iFCounter = FINAL_ZERO; iFCounter < bProductDetail.vctParameters
											.size(); iFCounter++) {
										bProductParameter = new BProductParameter();
										bProductParameter = (BProductParameter) bProductDetail.vctParameters
												.elementAt(iFCounter);

										// Begin DEL v9.01d
										// Vector vctInternal = null;
										// End DEL v9.01d
										// BEGIN DELETE V5.43b
										// Comment : Chages for NP after review

										/*
										 * if((String.valueOf(lComplexityCode)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strUseType, FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 * if((String.valueOf(lDueDate)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)) && (null != bNumber.dtDueDate))
										 * {
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(String.valueOf(sdf.format(bNumber.dtDueDate)), FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 * /****************STARTING*****************TO PRINT THE DATA
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 *   System.out.println("lRoutingNo " +lRoutingNo);
										 *   System.out.println("bProductParameter.lParameterID " +bProductParameter.lParameterID);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA
										 * if((String.valueOf(lRoutingNo)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("The bNumber.strRoutingNo are " +bNumber.strRoutingNo);
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strRoutingNo, FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 * if((String.valueOf(lDonorId)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("The bNumber.strDonor are " +bNumber.strDonor);
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strDonor, FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 */

										// END DELETE V 5.43b
										// BEGIN ADD V5.43b
										// Comment : Chages for NP after review
										bProductParameter.iEditable = FINAL_ZERO;

										if (GAfeDescription.PRODUCTPARAMETER_COMPLEXTYCODE == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strType,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_ROUTINGNUMBER == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strRoutingNo,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_GROUPINGNUMBER == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strGroupingNumber,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_PORTINGID == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strPortingId,
															FINAL_ZERO);
										}

										// END ADD V5.43b
									}
								}

								bProductDetailProperty.vctProductSelected
										.addElement(bProductDetail);
							}
						}

						// If Vanity Type is Silver
						else if ((GAfeDescription
								.strGetProperty("VANITYTYPE_SILVER"))
								.equalsIgnoreCase(String
										.valueOf(bNumber.lVanityID))) {

							// 3.33    Begin Insert
							if (GAfePropertyLoader.DEBUG) {
								GGeneric
										.println(
												"In LProduct.java ... method iTabProperty()- in TN-Telephony case -If  VANITYTYPE_SILVER with parameters lCustomerID : "
														+ lCustomerID,
												GGeneric.iDebugLevelSeven, this);
							}

							// 3.33    End Insert

							// BEGIN ADD V5.22a
							// comment: remove any special products from the selected products vector
							vdRemoveSpecialProducts(bProductDetailProperty,
									"SILVER");

							// END ADD V5.22a
							iGetMaxInstanceInVector = 0;
							iLevel = 2;
							iParentInstance = FINAL_ONE;
							iGetMaxInstanceInVector = iGetMaxInstanceInVectorlevelparentinstance(
									bProductDetailProperty.vctProductSelected,
									iLevel, iParentInstance);
							iFindProductInVector = iFindProductInVector(
									bProductDetailProperty.vctProductSelected,
									Long.valueOf(GAfeDescription
											.strGetProperty("PRODUCT_SILVER"))); // If the Product is not in the Vector earlier

							if (FINAL_ZERO == iFindProductInVector) {
								bProductDetail = null;

								// BEGIN MODIFY : V3.10
								// Modified Code for fixing DEFECT id 70, Obsolete Masters
								// Changed the Call objGetDetailProductNonSelected with an additional input parameter as iIsDefault
								// bProductDetail  =       objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_SILVER")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
								iIsDefault = FINAL_ZERO;

								// BEGIN DELETE V6.02d
								// bProductDetail = objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_SILVER")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
								// END DELETE V6.02d
								// BEGIN ADD V6.02d
								bProductDetail = objGetDetailProductNonSelected(
										lCustomerID,
										Long
												.valueOf(GAfeDescription
														.strGetProperty("PRODUCT_SILVER")),
										Long.valueOf(string_ZERO),
										Long.valueOf(string_ZERO),
										0,
										0,
										bProductDetailProperty.lCurrencyID,
										FINAL_ONE,
										2,
										++iGetMaxInstanceInVector,
										FINAL_ONE,
										bProductDetailProperty.lPaymentMethodRC,
										bProductDetailProperty.lPaymentMethodNRC,
										bProductDetailProperty.lPaymentMethodUsage,
										iIsDefault,
										bProductDetailProperty.vctProductSelected,
										bProductDetailProperty);

								// END ADD V6.02d
								// END MODIFY: V 3.10
								// Modified Code for fixing DEFECT id 70, Obsolete Masters
								if (null != bProductDetail) {
									for (int iFCounter = FINAL_ZERO; iFCounter < bProductDetail.vctParameters
											.size(); iFCounter++) {
										bProductParameter = new BProductParameter();
										bProductParameter = (BProductParameter) bProductDetail.vctParameters
												.elementAt(iFCounter);

										// Begin DEL v9.01d
										// Vector vctInternal = null;
										// End DEL v9.01d
										// BEGIN DELETE V5.43b
										// Comment : Chages for NP after review

										/*
										 * if((String.valueOf(lComplexityCode)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strUseType, FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 * if((String.valueOf(lDueDate)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)) && (null != bNumber.dtDueDate))
										 * {
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(String.valueOf(sdf.format(bNumber.dtDueDate)), FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 * /****************STARTING*****************TO PRINT THE DATA
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 *   System.out.println("lRoutingNo " +lRoutingNo);
										 *   System.out.println("bProductParameter.lParameterID " +bProductParameter.lParameterID);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA
										 * if((String.valueOf(lRoutingNo)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("The bNumber.strRoutingNo are " +bNumber.strRoutingNo);
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strRoutingNo, FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 * if((String.valueOf(lDonorId)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
										 * {
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("The bNumber.strDonor are " +bNumber.strDonor);
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 *   bProductParameter.iEditable =       FINAL_ZERO;
										 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strDonor, FINAL_ZERO);
										 *   /****************STARTING*****************TO PRINT THE DATA
										 *   if(GAfePropertyLoader.DEBUG)
										 *   {
										 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
										 *   }
										 *   /****************ENDING*******************TO PRINT THE DATA
										 * }
										 */

										// END DELETE V 5.43b
										// BEGIN ADD V5.43b
										// Comment : Chages for NP after review
										bProductParameter.iEditable = FINAL_ZERO;

										if (GAfeDescription.PRODUCTPARAMETER_COMPLEXTYCODE == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strType,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_ROUTINGNUMBER == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strRoutingNo,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_GROUPINGNUMBER == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strGroupingNumber,
															FINAL_ZERO);
										} else if (GAfeDescription.PRODUCTPARAMETER_PORTINGID == bProductParameter.lParameterID
												.intValue()) {
											((Vector) bProductParameter.vctParameterValues
													.elementAt(FINAL_ZERO))
													.setElementAt(
															bNumber.strPortingId,
															FINAL_ZERO);
										}
									} // end of the for loop
								} // end of the if loop

								bProductDetailProperty.vctProductSelected
										.addElement(bProductDetail);
							}
						} else if ((GAfeDescription
								.strGetProperty("VANITYTYPE_GOLDENMOBILE"))
								.equalsIgnoreCase(String
										.valueOf(bNumber.lVanityID))) {

							if (GLogger.isDebugEnabled()) {
								GLogger
										.debug(
												CLASS_NAME,
												"iTabProperty",
												"in TN-Mob Telephony case -If  VANITYTYPE_GOLDENMOBILE with parameters lCustomerID : ",
												lCustomerID);
							}
							vdRemoveSpecialProducts(bProductDetailProperty,
									"GOLDEN MOBILE");
							iGetMaxInstanceInVector = 0;
							iLevel = 3;
							iParentInstance = FINAL_ONE;
							iGetMaxInstanceInVector = iGetMaxInstanceInVectorlevelparentinstance(
									bProductDetailProperty.vctProductSelected,
									iLevel, iParentInstance);
							iFindProductInVector = iFindProductInVector(
									bProductDetailProperty.vctProductSelected,
									Long
											.valueOf(GAfeDescription
													.strGetProperty("PRODUCT_GOLDENMOBILE"))); // If the Product is not in the Vector earlier

							if (FINAL_ZERO == iFindProductInVector) {
								bProductDetail = null;

								iIsDefault = FINAL_ZERO;
								bProductDetail = objGetDetailProductNonSelected(
										lCustomerID,
										Long
												.valueOf(GAfeDescription
														.strGetProperty("PRODUCT_GOLDENMOBILE")),
										Long.valueOf(string_ZERO),
										Long.valueOf(string_ZERO),
										0,
										0,
										bProductDetailProperty.lCurrencyID,
										FINAL_ONE,
										3,
										++iGetMaxInstanceInVector,
										FINAL_ONE,
										bProductDetailProperty.lPaymentMethodRC,
										bProductDetailProperty.lPaymentMethodNRC,
										bProductDetailProperty.lPaymentMethodUsage,
										iIsDefault,
										bProductDetailProperty.vctProductSelected,
										bProductDetailProperty);

								bProductDetailProperty.vctProductSelected
										.addElement(bProductDetail);
							}
						} else if ((GAfeDescription
								.strGetProperty("VANITYTYPE_DIAMONDMOBILE"))
								.equalsIgnoreCase(String
										.valueOf(bNumber.lVanityID))) {

							if (GLogger.isDebugEnabled()) {
								GLogger.chkpt("Inside if statement");
							}
							vdRemoveSpecialProducts(bProductDetailProperty,
									"DIAMOND MOBILE");
							iGetMaxInstanceInVector = 0;
							iLevel = 2;
							iParentInstance = FINAL_ONE;
							iGetMaxInstanceInVector = iGetMaxInstanceInVectorlevelparentinstance(
									bProductDetailProperty.vctProductSelected,
									iLevel, iParentInstance);
							iFindProductInVector = iFindProductInVector(
									bProductDetailProperty.vctProductSelected,
									Long
											.valueOf(GAfeDescription
													.strGetProperty("PRODUCT_DIAMONDMOBILE"))); // If the Product is not in the Vector earlier

							if (FINAL_ZERO == iFindProductInVector) {
								bProductDetail = null;

								iIsDefault = FINAL_ZERO;
								bProductDetail = objGetDetailProductNonSelected(
										lCustomerID,
										Long
												.valueOf(GAfeDescription
														.strGetProperty("PRODUCT_DIAMONDMOBILE")),
										Long.valueOf(string_ZERO),
										Long.valueOf(string_ZERO),
										0,
										0,
										bProductDetailProperty.lCurrencyID,
										FINAL_ONE,
										2,
										++iGetMaxInstanceInVector,
										FINAL_ONE,
										bProductDetailProperty.lPaymentMethodRC,
										bProductDetailProperty.lPaymentMethodNRC,
										bProductDetailProperty.lPaymentMethodUsage,
										iIsDefault,
										bProductDetailProperty.vctProductSelected,
										bProductDetailProperty);

								bProductDetailProperty.vctProductSelected
										.addElement(bProductDetail);
							}
						} else if ((GAfeDescription
								.strGetProperty("VANITYTYPE_NORMALMOBILE"))
								.equalsIgnoreCase(String
										.valueOf(bNumber.lVanityID))) {

							if (GLogger.isDebugEnabled()) {
								GLogger
										.debug(
												CLASS_NAME,
												"iTabProperty",
												"in TN-Mob Telephony case -If  VANITYTYPE_NORMALMOBILE  with parameters lCustomerID : ",
												lCustomerID);
							}
							vdRemoveSpecialProducts(bProductDetailProperty,
									"NORMAL MOBILE");
						}
						// If the Number is Neither Silver nor Golden as well as Diamond
						else {

							// 3.33    Begin Insert
							if (GAfePropertyLoader.DEBUG) {
								GGeneric
										.println(
												"In LProduct.java ... method iTabProperty()- in TN-Telephony case -If  Normal Number- with parameters lCustomerID : "
														+ lCustomerID,
												GGeneric.iDebugLevelSeven, this);
							}

							// 3.33    End Insert

							// BEGIN DELETE V5.22a
							// comment: this functionality has been written in to other function
							// int               ivctProductSelected     =       0;
							// ivctProductSelected       =       bProductDetailProperty.vctProductSelected.size();
							// for(int iVctCounter = FINAL_ZERO; iVctCounter < ivctProductSelected; iVctCounter++)
							// {
							// bProductDetail = new BProductDetail();
							// bProductDetail    =       (BProductDetail)bProductDetailProperty.vctProductSelected.elementAt(iVctCounter);

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							// if(GAfePropertyLoader.DEBUG)
							// {
							// System.out.println("The PID is golder , silver , or diamond - " +bProductDetail.lProductID);
							// }
							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							// if((bProductDetail.lProductID.longValue() == GAfeDescription.lGetTypeId("PRODUCT_SILVER")) || (bProductDetail.lProductID.longValue()      ==      GAfeDescription.lGetTypeId("PRODUCT_GOLDEN")) || (bProductDetail.lProductID.longValue() ==      GAfeDescription.lGetTypeId("PRODUCT_DIMOND")))
							// {
							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							// if(GAfePropertyLoader.DEBUG)
							// {
							// System.out.println("Going to remove the special product: of type golder , silver , or diamond" );
							// }
							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							// bProductDetailProperty.vctProductSelected.removeElementAt(iVctCounter);
							// --ivctProductSelected;
							// --iVctCounter;
							// }
							// }
							// END DELETE V5.22a
							// BEGIN ADD V5.22a
							// comment: remove any special products from the selected products vector
							vdRemoveSpecialProducts(bProductDetailProperty,
									"NORMAL");

							// END ADD V5.22a
						}
					}

					// In Case of NP Product
					//BEGIN DELETE V 5.43a
					//Comment:Changes for the NP Related Code
					// if (("NP").equalsIgnoreCase(bNumber.strKindOfNumber))
					//END DELETE V 5.43a
					//BEGIN ADD V 5.43a
					//Comment:Changes for the NP Related Code
					// BEGIN DELETE V 5.46a

					/*
					 * if (GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber)
					 *   && (!(GAfeConstants.TELE.equalsIgnoreCase(bNumber.strCurrentOwner))))
					 */

					// END DELETE V 5.46a
					// BEGIN ADD V 5.46a
					if (GAfeConstants.NP
							.equalsIgnoreCase(bNumber.strKindOfNumber)
							&& (null != bNumber.strCurrentOwner)
							&& (!(GAfeConstants.TELE
									.equalsIgnoreCase(bNumber.strCurrentOwner)))
							&& GAfeDescription.PRODUCT_FULLMOBILE != bProductDetailProperty.lProductID
									.longValue())

					// END ADD V 5.46a
					//END ADD V 5.43a
					{

						// 3.33    Begin Insert
						if (GAfePropertyLoader.DEBUG) {
							GGeneric
									.println(
											"In LProduct.java ... method iTabProperty()- in NP-Telephony case - with parameters lCustomerID : "
													+ lCustomerID,
											GGeneric.iDebugLevelSeven, this);
						}

						// 3.33    End Insert
						// BEGIN ADD V5.22a
						// comment: remove any special products from the selected products vector
						vdRemoveSpecialProducts(bProductDetailProperty, "NP");

						// END ADD V5.22a
						iGetMaxInstanceInVector = 0;
						iLevel = 2;
						iParentInstance = FINAL_ONE;
						iGetMaxInstanceInVector = iGetMaxInstanceInVectorlevelparentinstance(
								bProductDetailProperty.vctProductSelected,
								iLevel, iParentInstance);
						iFindProductInVector = iFindProductInVector(
								bProductDetailProperty.vctProductSelected, Long
										.valueOf(GAfeDescription
												.strGetProperty("PRODUCT_NP"))); // If the Product is not in the Vector earlier

						if (FINAL_ZERO == iFindProductInVector) {
							bProductDetail = null;

							// BEGIN MODIFY: V 3.10
							// Modified Code for fixing DEFECT id 70, Obsolete Masters
							// Changed the Call objGetDetailProductNonSelected with an additional input parameter as iIsDefault
							// bProductDetail  =       objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_SILVER")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
							iIsDefault = FINAL_ZERO;

							// BEGIN DELETE V 5.43a
							// Comment:Changes for the NP Related Code
							// bProductDetail    =       objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_NP")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage,iIsDefault,bProductDetailProperty.vctProductSelected);
							// END DELETE V 5.43a
							// BEGIN ADD V 5.43a
							// Comment:Changes for the NP Related Code
							// BEGIN DELETE V6.02d
							// bProductDetail = objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.PRODUCT_KOSTNUMMREBEHOUD), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
							// END DELETE V6.02d
							// BEGIN ADD V6.02d
							bProductDetail = objGetDetailProductNonSelected(
									lCustomerID,
									Long.valueOf(
											GAfeDescription.PRODUCT_KOSTNUMMREBEHOUD),
									Long.valueOf(string_ZERO), Long.valueOf(string_ZERO), 0, 0,
									bProductDetailProperty.lCurrencyID,
									FINAL_ONE, 2, ++iGetMaxInstanceInVector,
									FINAL_ONE,
									bProductDetailProperty.lPaymentMethodRC,
									bProductDetailProperty.lPaymentMethodNRC,
									bProductDetailProperty.lPaymentMethodUsage,
									iIsDefault,
									bProductDetailProperty.vctProductSelected,
									bProductDetailProperty);

							// END ADD V6.02d
							// END ADD V 5.43a
							// END MODIFY : V 3.10
							// Modified Code for fixing DEFECT id 70, Obsolete Masters
							if (null != bProductDetail) {
								for (int iFCounter = FINAL_ZERO; iFCounter < bProductDetail.vctParameters
										.size(); iFCounter++) {
									bProductParameter = new BProductParameter();
									bProductParameter = (BProductParameter) bProductDetail.vctParameters
											.elementAt(iFCounter);

									// Begin DEL v9.01d
									// Vector vctInternal = null;
									// End DEL v9.01d
									// BEGIN DELETE V 5.43a
									// Comment:Changes for the NP Related Code

									/*
									 * if((String.valueOf(lComplexityCode)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
									 * {
									 *   bProductParameter.iEditable     =       FINAL_ZERO;
									 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strType, FINAL_ZERO);
									 *
									 * }
									 * if((String.valueOf(lDueDate)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)) && (null != bNumber.dtDueDate))
									 * {
									 *   bProductParameter.iEditable     =       FINAL_ZERO;
									 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(String.valueOf(sdf.format(bNumber.dtDueDate)), FINAL_ZERO);
									 * }
									 * if((String.valueOf(lRoutingNo)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
									 * {
									 *   bProductParameter.iEditable     =       FINAL_ZERO;
									 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strRoutingNo, FINAL_ZERO);
									 * }
									 * if((String.valueOf(lDonorId)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
									 * {
									 *   bProductParameter.iEditable     =       FINAL_ZERO;
									 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strDonor, FINAL_ZERO);
									 * }
									 */

									// END DELETE V 5.43a
									// BEGIN ADD V 5.43a
									// Comment:Changes for the NP Related Code
									bProductParameter.iEditable = FINAL_ZERO;

									if (GAfeDescription.PRODUCTPARAMETER_COMPLEXTYCODE == bProductParameter.lParameterID
											.intValue()) {
										((Vector) bProductParameter.vctParameterValues
												.elementAt(FINAL_ZERO))
												.setElementAt(bNumber.strType,
														FINAL_ZERO);
									} else if (GAfeDescription.PRODUCTPARAMETER_ROUTINGNUMBER == bProductParameter.lParameterID
											.intValue()) {
										((Vector) bProductParameter.vctParameterValues
												.elementAt(FINAL_ZERO))
												.setElementAt(
														bNumber.strRoutingNo,
														FINAL_ZERO);
									} else if (GAfeDescription.PRODUCTPARAMETER_GROUPINGNUMBER == bProductParameter.lParameterID
											.intValue()) {
										((Vector) bProductParameter.vctParameterValues
												.elementAt(FINAL_ZERO))
												.setElementAt(
														bNumber.strGroupingNumber,
														FINAL_ZERO);
									} else if (GAfeDescription.PRODUCTPARAMETER_PORTINGID == bProductParameter.lParameterID
											.intValue()) {
										((Vector) bProductParameter.vctParameterValues
												.elementAt(FINAL_ZERO))
												.setElementAt(
														bNumber.strPortingId,
														FINAL_ZERO);
									}

									// END ADD V 5.43a
								}
							}

							bProductDetailProperty.vctProductSelected
									.addElement(bProductDetail);
						} else {
							for (int iCount = FINAL_ZERO; iCount < bProductDetailProperty.vctProductSelected
									.size(); iCount++) {
								if ((GAfeDescription
										.strGetProperty("PRODUCT_NP"))
										.equals(String
												.valueOf(((BProductDetail) bProductDetailProperty.vctProductSelected
														.elementAt(iCount)).lProductID))) {
									bProductDetail = new BProductDetail();
									bProductDetail = ((BProductDetail) bProductDetailProperty.vctProductSelected
											.elementAt(iCount));

									if (null != bProductDetail) {
										for (int iFCounter = FINAL_ZERO; iFCounter < bProductDetail.vctParameters
												.size(); iFCounter++) {
											bProductParameter = new BProductParameter();
											bProductParameter = (BProductParameter) bProductDetail.vctParameters
													.elementAt(iFCounter);

											// Begin DEL v9.01d
											// Vector vctInternal = null;
											// End DEL v9.01d
											// BEGIN DELETE V5.43b
											// Comment : Chages for NP after review

											/*
											 * if((String.valueOf(lComplexityCode)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
											 * {
											 *   bProductParameter.iEditable     =       FINAL_ZERO;
											 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strType, FINAL_ZERO);
											 *   /****************STARTING*****************TO PRINT THE DATA
											 *   if(GAfePropertyLoader.DEBUG)
											 *   {
											 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
											 *   }
											 *   /****************ENDING*******************TO PRINT THE DATA
											 * }
											 * if((String.valueOf(lDueDate)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)) && (null != bNumber.dtDueDate))
											 * {
											 *   bProductParameter.iEditable     =       FINAL_ZERO;
											 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(String.valueOf(sdf.format(bNumber.dtDueDate)), FINAL_ZERO);
											 *   /****************STARTING*****************TO PRINT THE DATA
											 *   if(GAfePropertyLoader.DEBUG)
											 *   {
											 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
											 *   }
											 *   /****************ENDING*******************TO PRINT THE DATA
											 * }
											 * /****************STARTING*****************TO PRINT THE DATA
											 * if(GAfePropertyLoader.DEBUG)
											 * {
											 *   System.out.println("lRoutingNo " +lRoutingNo);
											 *   System.out.println("bProductParameter.lParameterID " +bProductParameter.lParameterID);
											 * }
											 * /****************ENDING*******************TO PRINT THE DATA
											 * if((String.valueOf(lRoutingNo)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
											 * {
											 *   /****************STARTING*****************TO PRINT THE DATA
											 *   if(GAfePropertyLoader.DEBUG)
											 *   {
											 *       System.out.println("The bNumber.strRoutingNo Remarks are " +bNumber.strRoutingNo);
											 *   }
											 *   /****************ENDING*******************TO PRINT THE DATA
											 *   bProductParameter.iEditable     =       FINAL_ZERO;
											 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strRoutingNo, FINAL_ZERO);
											 *   /****************STARTING*****************TO PRINT THE DATA
											 *   if(GAfePropertyLoader.DEBUG)
											 *   {
											 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
											 *   }
											 *   /****************ENDING*******************TO PRINT THE DATA
											 * }
											 * if((String.valueOf(lDonorId)).equalsIgnoreCase(String.valueOf(bProductParameter.lParameterID)))
											 * {
											 *   /****************STARTING*****************TO PRINT THE DATA
											 *   if(GAfePropertyLoader.DEBUG)
											 *   {
											 *       System.out.println("The bNumber.strDonor are " +bNumber.strDonor);
											 *   }
											 *   /****************ENDING*******************TO PRINT THE DATA
											 *
											 *   bProductParameter.iEditable     =       FINAL_ZERO;
											 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strDonor, FINAL_ZERO);
											 *
											 *   /****************STARTING*****************TO PRINT THE DATA
											 *   if(GAfePropertyLoader.DEBUG)
											 *   {
											 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
											 *   }
											 *   /****************ENDING*******************TO PRINT THE DATA
											 * }
											 */

											// END DELETE V 5.43b
											// BEGIN ADD V5.43b
											// Comment : Chages for NP after review
											bProductParameter.iEditable = FINAL_ZERO;

											if (GAfeDescription.PRODUCTPARAMETER_COMPLEXTYCODE == bProductParameter.lParameterID
													.intValue()) {
												((Vector) bProductParameter.vctParameterValues
														.elementAt(FINAL_ZERO))
														.setElementAt(
																bNumber.strType,
																FINAL_ZERO);
											} else if (GAfeDescription.PRODUCTPARAMETER_ROUTINGNUMBER == bProductParameter.lParameterID
													.intValue()) {
												((Vector) bProductParameter.vctParameterValues
														.elementAt(FINAL_ZERO))
														.setElementAt(
																bNumber.strRoutingNo,
																FINAL_ZERO);
											} else if (GAfeDescription.PRODUCTPARAMETER_GROUPINGNUMBER == bProductParameter.lParameterID
													.intValue()) {
												((Vector) bProductParameter.vctParameterValues
														.elementAt(FINAL_ZERO))
														.setElementAt(
																bNumber.strGroupingNumber,
																FINAL_ZERO);
											} else if (GAfeDescription.PRODUCTPARAMETER_PORTINGID == bProductParameter.lParameterID
													.intValue()) {
												((Vector) bProductParameter.vctParameterValues
														.elementAt(FINAL_ZERO))
														.setElementAt(
																bNumber.strPortingId,
																FINAL_ZERO);
											}

											// END ADD V 5.43b
										}
									}
								}
							}
						}
					}
				}
			}

			// If Selected Product Line is Internet Product Line
			// BEGIN DELETE VER. 6.07h
			// else if (GAfeDescription.lGetTypeId("PRODUCT_INTERNET") == bProductDetailProperty.lProductID.longValue()) {
			// END ADD 6.07h
			// BEGIN ADD VER. 6.07h
			if ((GAfeDescription.lGetTypeId(string_PRODUCT_INTERNET) == bProductDetailProperty.lProductID
					.longValue())
					|| (GAfeDescription.lGetTypeId(string_PRODUCT_VON) == bProductDetailProperty.lProductID
							.longValue())) {

				// END ADD 6.07h
				// 3.33    Begin Insert
				if (GAfePropertyLoader.DEBUG) {
					GGeneric
							.println(
									"In LProduct.java ... method iTabProperty()- in Inernet case - with parameters lCustomerID : "
											+ lCustomerID,
									GGeneric.iDebugLevelSeven, this);
				}

				// 3.33    End Insert
				// 3.33    Begin Update
				// Vector  vctProductSelected= new Vector();               // internal local vector
				Vector vctProductSelected = null; // Object of Internal Vector

				// 3.33    End Update
				// Putting the VctProductSelected that is a vector of bussiness Vector into this local vector
				vctProductSelected = bProductDetailProperty.vctProductSelected;
				iEndRecord = vctProductSelected.size();

				for (int iVCTCounter = FINAL_ZERO; iVCTCounter < iEndRecord; iVCTCounter++) {
					bProductDetail = new BProductDetail();
					bProductDetail = (BProductDetail) vctProductSelected
							.elementAt(iVCTCounter);

					for (int iBPDCounter = FINAL_ZERO; iBPDCounter < bProductDetail.vctParameters
							.size(); iBPDCounter++) {
						bProductParameter = new BProductParameter();
						bProductParameter = (BProductParameter) bProductDetail.vctParameters
								.elementAt(iBPDCounter);

						Vector vctIntExt = new Vector();

						// In Internet Case
						if (((GAfeDescription
								.strGetProperty("PRODUCTLINEIDENTIFIERTYPE_LOGIN"))
								.equals(String
										.valueOf(bProductParameter.lParameterID)))) {

							// Begin DEL v9.01d
							// Vector vctBPPInternal = new Vector();
							// End DEL v9.01d
							Vector vctIntSelected = new Vector();

							// In Internet Case
							if (((String.valueOf(string_ZERO)).equalsIgnoreCase(String
									.valueOf(bProductParameter.iParameter)))) {
								for (int iBPPSCounter = FINAL_ZERO; iBPPSCounter < bProductParameter.vctParameterValues
										.size(); iBPPSCounter++) {
									Vector vctBPPSInternal = new Vector();

									vctIntSelected = new Vector();
									vctBPPSInternal = (Vector) bProductParameter.vctParameterValues
											.elementAt(iBPPSCounter);

									/* BEGIN DELETE VER: 5.59tan */

									// System.out.println("The Original Vector is : " +vctBPPSInternal);
									/* BEGIN DELETE VER: 5.59tan */
									if ((string_ZERO).equalsIgnoreCase(String
											.valueOf(vctBPPSInternal
													.elementAt(FINAL_ONE)))) {
										iSelected = FINAL_ZERO;
									} else {
										strValues = (String) vctBPPSInternal
												.elementAt(FINAL_ZERO);
										StrValuesForCompare = (String) vctBPPSInternal
												.elementAt(FINAL_ZERO);
										iSelected = FINAL_ONE;
										bProductParameter.iEditable = 0;
										vctIntSelected.addElement(strValues);
										vctIntSelected.addElement(Integer.valueOf(
												iSelected));
										vctIntExt.addElement(vctIntSelected);
									} // end of the else part of the if loop
								} // end of the if loop

								if (null != teleSessionMgr
										.getValue(string_BInternet_aCProduct)) {
									bInternet = new BInternet();
									bInternet = (BInternet) teleSessionMgr
											.getValue(string_BInternet_aCProduct);

									Vector vctInternalInternet;

									iSizeOfVct = bInternet.vctInternetDetail
											.size();

									for (iCounter = FINAL_ZERO; iCounter < iSizeOfVct; iCounter++) {
										vctInternalInternet = new Vector();

										Vector vctInt = new Vector();

										vctInternalInternet = (Vector) bInternet.vctInternetDetail
												.elementAt(iCounter);

										//                                      if(!((bInternet.strNewMasterLogin).equalsIgnoreCase(String.valueOf(vctInternalInternet.elementAt(FINAL_ZERO)))) && (("0").equalsIgnoreCase(String.valueOf(vctInternalInternet.elementAt(FINAL_ONE)))))
										{
											if (!((StrValuesForCompare)
													.equalsIgnoreCase(String
															.valueOf(vctInternalInternet
																	.elementAt(FINAL_ZERO))))) {
												strValues = String
														.valueOf(vctInternalInternet
																.elementAt(FINAL_ZERO));

												// Begin Ver 2.5
												// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
												// Begin Ver 2.94
												// Changes Made for Fixing Upgrade Downgrade Logins problem
												if (!(bCheckForLogin(vctIntExt,
														strValues))) {

													// End Ver 2.94
													// Changes Made for Fixing Upgrade Downgrade Logins problem
													iSelected = FINAL_ZERO;
													bProductParameter.iEditable = 0;

													Vector vctTempLogin = null;
													int iSizeOfvctLogin = 0;

													if ((blnGetForProperty(
															"PRODUCT_URL",
															bProductDetail.lProductID))) {

														/** **************STARTING*****************TO PRINT THE DATA****************************************** */
														if (GAfePropertyLoader.DEBUG) {
															GLogger.chkpt("Inside if statement");
															// System.out.println("In Case when the ProductID is URL " + bProductDetail.lProductID);
														}

														/** **************ENDING*******************TO PRINT THE DATA***************************************** */
														if (GAfePropertyLoader.DEBUG) {
															GLogger.chkpt("Inside if statement");
															// System.out.println("Adding for in strValues - " + strValues);
														}

														vctTempLogin = null;
														vctTempLogin = bProductDetailProperty.vctGetLoginfromILMMAIL;
														iSizeOfvctLogin = 0;
														iSizeOfvctLogin = vctTempLogin
																.size();

														if (FINAL_ZERO != iSizeOfvctLogin) {
															for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++) {
																if (null == ((BChangeILogin) vctTempLogin
																		.elementAt(iCounterLog))) {
																	continue;
																}

																/** **************STARTING*****************TO PRINT THE DATA****************************************** */
																if (GAfePropertyLoader.DEBUG) {
																	GLogger.chkpt("Inside if statement");
																	// System.out.println("bProductDetailProperty.vctGetLoginfromILMMAIL " + bProductDetailProperty.vctGetLoginfromILMMAIL);
																	// System.out.println("bProductDetailProperty.vctGetLoginfromILMURL " + bProductDetailProperty.vctGetLoginfromILMURL);
																	// System.out.println("ITAB Getting the aged login from ILM strLogin - " + String.valueOf(((BChangeILogin) vctTempLogin.elementAt(iCounterLog)).strLogin));
																	// System.out.println("ITAB strValues To Compare                                             - " + strValues);
																}

																/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																if ((strValues)
																		.equalsIgnoreCase(String
																				.valueOf(((BChangeILogin) vctTempLogin
																						.elementAt(iCounterLog)).strLogin))) {

																	// Begin Ver 2.80
																	// Changes Made for Fixing Upgrade Downgrade Logins problem
																	// Check whether the login is there in url then add it else dont add
																	// Call Another function
																	if (bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
																			bProductDetailProperty.vctGetLoginfromILMURL,
																			strValues)) {

																		/** **************STARTING*****************TO PRINT THE DATA****************************************** */
																		if (GAfePropertyLoader.DEBUG) {
																			GLogger.chkpt("Inside if statement");
																			// System.out.println("Add it to the vctExternal Vector 31 - " + strValues);
																		}

																		/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																		if (!(bCheckForLogin(
																				vctIntExt,
																				strValues)))

																		// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
																		{

																			// Intentionally allocated memory
																			vctInt = new Vector();
																			vctInt
																					.addElement(strValues);
																			vctInt
																					.addElement(Integer.valueOf(
																							iSelected));
																			vctIntExt
																					.addElement(vctInt);
																		} // end of the if loop
																	} else {
																		GLogger.chkpt("Inside else statement");

																		/** **************STARTING*****************TO PRINT THE DATA****************************************** */

																		/* BEGIN DELETE VER: 5.59tan */

																		// if(GAfePropertyLoader.DEBUG)
																		// {
																		// System.out.println("Do Nothing 51");
																		// }
																		/* END DELETE VER: 5.59tan */

																		/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																	}

																	// End Ver 2.80
																	// Changes Made for Fixing Upgrade Downgrade Logins problem
																} else {
																	if (!bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
																			bProductDetailProperty.vctGetLoginfromILMMAIL,
																			strValues)) {
																		if (!(bCheckForLogin(
																				vctIntExt,
																				strValues)))

																		// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
																		{

																			// Intentionally allocated memory
																			vctInt = new Vector();
																			vctInt
																					.addElement(strValues);
																			vctInt
																					.addElement(Integer.valueOf(
																							iSelected));
																			vctIntExt
																					.addElement(vctInt);
																		} // end of the if loop
																	} // end of the if loop
																	else {
																		GLogger.chkpt("Inside else statement");

																		/** **************STARTING*****************TO PRINT THE DATA****************************************** */

																		/* BEGIN DELETE VER: 5.59tan */

																		// if(GAfePropertyLoader.DEBUG)
																		// {
																		// System.out.println("Do Nothing 52");
																		// }
																		/* END DELETE VER: 5.59tan */

																		/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																	} // end of the if else if loop

																	/** **************STARTING*****************TO PRINT THE DATA****************************************** */

																	/* BEGIN DELETE VER: 5.59tan */

																	// if(GAfePropertyLoader.DEBUG)
																	// {
																	// System.out.println("To Add in the Else Case vctInt - "+vctInt);
																	// }
																	/* END DELETE VER: 5.59tan */

																	/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																}
															}
														} else {
															if (!(bCheckForLogin(
																	vctIntExt,
																	strValues)))

															// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
															{

																// Intentionally allocated memory
																vctInt = new Vector();
																vctInt
																		.addElement(strValues);
																vctInt
																		.addElement(Integer.valueOf(
																				iSelected));
																vctIntExt
																		.addElement(vctInt);
															} // end of the if loop

															/** **************STARTING*****************TO PRINT THE DATA****************************************** */

															/* BEGIN DELETE VER: 5.59tan */

															// if(GAfePropertyLoader.DEBUG)
															// {
															// System.out.println("To Add in the Else Case vctInt - "+vctInt);
															// }
															/* END DELETE VER: 5.59tan */

															/** **************ENDING*******************TO PRINT THE DATA***************************************** */
														} // end of the if else if loop
													} // end of the if loop
													else if ((blnGetForProperty(
															"PRODUCT_MAILBOX",
															bProductDetail.lProductID))
															|| (blnGetForProperty(
																	"PRODUCT_DOMAINMAILSERVER",
																	bProductDetail.lProductID))) {

														/** **************STARTING*****************TO PRINT THE DATA****************************************** */
														if (GAfePropertyLoader.DEBUG) {
															GLogger.chkpt("Inside if statement");
															// System.out.println("In Case when the ProductID is Mailbox " + bProductDetail.lProductID);
														}

														/** **************ENDING*******************TO PRINT THE DATA***************************************** */
														if (GAfePropertyLoader.DEBUG) {
															GLogger.chkpt("Inside if statement");
															// System.out.println("Adding for in strValues - " + strValues);
														}

														vctTempLogin = null;
														vctTempLogin = bProductDetailProperty.vctGetLoginfromILMURL;
														iSizeOfvctLogin = 0;
														iSizeOfvctLogin = vctTempLogin
																.size();

														if (FINAL_ZERO != iSizeOfvctLogin) {
															for (int iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++) {
																if (null == ((BChangeILogin) vctTempLogin
																		.elementAt(iCounterLog))) {
																	continue;
																}

																/** **************STARTING*****************TO PRINT THE DATA****************************************** */
																if (GAfePropertyLoader.DEBUG) {
																	GLogger.chkpt("Inside if statement");
																	// System.out.println("ITAB Getting the aged login from ILM strLogin - " + String.valueOf(((BChangeILogin) vctTempLogin.elementAt(iCounterLog)).strLogin));
																	// System.out.println("ITAB strValues To Compare                                             - " + strValues);
																}

																/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																if ((strValues)
																		.equalsIgnoreCase(String
																				.valueOf(((BChangeILogin) vctTempLogin
																						.elementAt(iCounterLog)).strLogin))) {

																	// Begin Ver 2.80
																	// Changes Made for Fixing Upgrade Downgrade Logins problem
																	// Check whether the login is there in url then add it else dont add
																	// Call Another function
																	if (bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
																			bProductDetailProperty.vctGetLoginfromILMMAIL,
																			strValues)) {

																		/** **************STARTING*****************TO PRINT THE DATA****************************************** */
																		if (GAfePropertyLoader.DEBUG) {
																			GLogger.chkpt("Inside if statement");
																			// System.out.println("Add it to the vctExternal Vector 31 - " + strValues);
																		}

																		/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																		if (!(bCheckForLogin(
																				vctIntExt,
																				strValues)))

																		// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
																		{

																			// Intentionally allocated memory
																			vctInt = new Vector();
																			vctInt
																					.addElement(strValues);
																			vctInt
																					.addElement(Integer.valueOf(
																							iSelected));
																			vctIntExt
																					.addElement(vctInt);
																		} // end of the if loop
																	} else {
																		GLogger.chkpt("Inside else statement");

																		/** **************STARTING*****************TO PRINT THE DATA****************************************** */

																		/* BEGIN DELETE VER: 5.59tan */

																		// if(GAfePropertyLoader.DEBUG)
																		// {
																		// System.out.println("Do Nothing 61");
																		// }
																		/* END DELETE VER: 5.59tan */

																		/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																	}

																	// End Ver 2.80
																	// Changes Made for Fixing Upgrade Downgrade Logins problem
																} else {
																	if (!bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
																			bProductDetailProperty.vctGetLoginfromILMURL,
																			strValues)) {
																		if (!(bCheckForLogin(
																				vctIntExt,
																				strValues)))

																		// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
																		{

																			// Intentionally allocated memory
																			vctInt = new Vector();
																			vctInt
																					.addElement(strValues);
																			vctInt
																					.addElement(Integer.valueOf(
																							iSelected));
																			vctIntExt
																					.addElement(vctInt);
																		} // end of the if loop
																	} // end of the if loop
																	else {

																		GLogger.chkpt("Inside else statement");
																		/** **************STARTING*****************TO PRINT THE DATA****************************************** */

																		/* BEGIN DELETE VER: 5.59tan */

																		// if(GAfePropertyLoader.DEBUG)
																		// {
																		// System.out.println("Do Nothing 62");
																		// }
																		/* END DELETE VER: 5.59tan */

																		/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																	} // end of the if else if loop

																	/* BEGIN DELETE VER: 5.59tan */

																	// if(GAfePropertyLoader.DEBUG)
																	// {
																	// System.out.println("To Add in the Else Case vctInt - "+vctInt);
																	// }
																	/* END DELETE VER: 5.59tan */

																	/** **************ENDING*******************TO PRINT THE DATA***************************************** */
																}
															}
														} else {
															if (!(bCheckForLogin(
																	vctIntExt,
																	strValues)))

															// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
															{

																// Intentionally allocated memory
																vctInt = new Vector();
																vctInt
																		.addElement(strValues);
																vctInt
																		.addElement(Integer.valueOf(
																				iSelected));
																vctIntExt
																		.addElement(vctInt);
															} // end of the if loop

															/** **************STARTING*****************TO PRINT THE DATA****************************************** */

															/* BEGIN DELETE VER: 5.59tan */

															// if(GAfePropertyLoader.DEBUG)
															// {
															// System.out.println("To Add in the Else Case vctInt - "+vctInt);
															// }
															/* END DELETE VER: 5.59tan */

															/** **************ENDING*******************TO PRINT THE DATA***************************************** */
														} // end of the if else if loop
													} else {
														if (!(bCheckForLogin(
																vctIntExt,
																strValues)))

														// if(bValidateLogin_ToExistingVector(vctIntExt, strValues))
														{

															// Intentionally allocated memory
															vctInt = new Vector();
															vctInt
																	.addElement(strValues);
															vctInt
																	.addElement(Integer.valueOf(
																			iSelected));
															vctIntExt
																	.addElement(vctInt);
														} // end of the if loop
													} // end of else if loop

													// Begin Ver 2.94
													// Changes Made for Fixing Upgrade Downgrade Logins problem
												} // end of the if loop

												// End Ver 2.94
												// Changes Made for Fixing Upgrade Downgrade Logins problem
												// End Ver 2.5
												// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
											} // end of the if loop
										} // end of the not used if loop
									} // end of the for loop
								} // end of the if loop

								// Begin Ver 2.5
								// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */

								/* BEGIN DELETE VER: 5.59tan */

								// if(GAfePropertyLoader.DEBUG)
								// {
								// System.out.println("The Final Vector for Showing is vctIntExt - " +vctIntExt);
								// }
								/* END DELETE VER: 5.59tan */

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */

								// End Ver 2.5
								// Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								// Begin DEL v9.01d
								// if (GAfePropertyLoader.DEBUG) {
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								// System.out.println("In the the function - Upper iTabProperty 1");
								// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
								/* END DELETE VER: 5.59a */

								// lStart = System.currentTimeMillis();
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								/* END DELETE VER: 5.59tan */

								// }
								// End DEL v9.01d
								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								// Begin Ver 2.93
								// Changes Made for Fixing Upgrade Downgrade Logins problem
								/*
								 * if((blnGetForProperty("PRODUCT_MAILBOX", bProductDetail.lProductID)) || (blnGetForProperty("PRODUCT_DOMAINMAILSERVER", bProductDetail.lProductID)))
								 * {
								 *   Vector vctLogin     =       new Vector();
								 *
								 * //                                                          IAFEOUT iAFEOUT         =       new IAFEOUT();
								 * //                                                          vctLogin        =       iAFEOUT.vctGetLogin(bProductDetailProperty.lCustomerID, "M");
								 *
								 *   vctLogin    =       bProductDetailProperty.vctGetLoginfromILMMAIL;
								 *
								 *   if((null != vctLogin) && (FINAL_ZERO != vctLogin.size()))
								 *   {
								 *       for (int iCounterLog = FINAL_ZERO; iCounterLog < vctLogin.size(); iCounterLog++)
								 *       {
								 *           String strLogin     =       "";
								 *           Vector      vctInt  =       null;
								 *
								 *           if(null == ((BChangeILogin)vctLogin.elementAt(iCounterLog)))
								 *               continue;
								 *
								 *           strLogin    =       String.valueOf(((BChangeILogin)vctLogin.elementAt(iCounterLog)).strLogin);
								 *
								 *           //Begin Ver 2.5
								 *           //Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								 *
								 *           if(GAfePropertyLoader.DEBUG)
								 *           {
								 *               System.out.println("Adding strLogin MailBox- " +strLogin);
								 *           }
								 *
								 *           //Begin Ver 2.5
								 *           //Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								 *
								 *           if(!(bCheckForLogin(vctIntExt, strLogin)))
								 *           {
								 *               vctInt  =       new Vector();
								 *
								 *               iSelected       =       FINAL_ZERO;
								 *
								 *               bProductParameter.iEditable             =       0;
								 *
								 *               if(GAfePropertyLoader.DEBUG)
								 *               {
								 *                   System.out.println("Adding for in strURL - " +strLogin);
								 *               }
								 *
								 *               Vector vctTempLogin     =       null;
								 *               vctTempLogin    =       bProductDetailProperty.vctGetLoginfromILMURL;
								 *
								 *               int iSizeOfvctLogin     =       0;
								 *               iSizeOfvctLogin =       vctTempLogin.size();
								 *
								 *               if(FINAL_ZERO != iSizeOfvctLogin)
								 *               {
								 *                   for (iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++)
								 *                   {
								 *                       if(null == ((BChangeILogin)vctTempLogin.elementAt(iCounterLog)))
								 *                           continue;
								 *
								 *                       /****************STARTING*****************TO PRINT THE DATA
								 *                       if(GAfePropertyLoader.DEBUG)
								 *                       {
								 *                           System.out.println("ITAB Getting the aged login from ILM strLogin   - "     + String.valueOf(((BChangeILogin)vctTempLogin.elementAt(iCounterLog)).strLogin));
								 *                           System.out.println("ITAB strValues To Compare                                               - "     + strValues);
								 *                       }
								 *                       /****************ENDING*******************TO PRINT THE DATA
								 *
								 *                       if ((strLogin).equalsIgnoreCase(String.valueOf(((BChangeILogin)vctTempLogin.elementAt(iCounterLog)).strLogin)))
								 *                       {
								 *                           //Do Nothing
								 *                           /****************STARTING*****************TO PRINT THE DATA
								 *                           if(GAfePropertyLoader.DEBUG)
								 *                           {
								 *                               System.out.println("Do Nothing");
								 *                           }
								 *                           /****************ENDING*******************TO PRINT THE DATA
								 *
								 *                       }//end of the if loop
								 *                       else
								 *                       {
								 *                           vctInt.addElement(strLogin);
								 *                           vctInt.addElement(new Integer(iSelected));
								 *                           vctIntExt.addElement(vctInt);
								 *                       }//end of the if else if loop
								 *                   }//end of the for loop
								 *               }
								 *               else
								 *               {
								 *                   vctInt.addElement(strLogin);
								 *                   vctInt.addElement(new Integer(iSelected));
								 *                   vctIntExt.addElement(vctInt);
								 *               }//end of the if else if loop
								 *           }//end of the if loop
								 *           //End Ver 2.5
								 *           //Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								 *       }
								 *   }
								 * }
								 */

								// End Ver 2.93
								// Changes Made for Fixing Upgrade Downgrade Logins problem
								// Begin DEL v9.01d
								// if (GAfePropertyLoader.DEBUG) {
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								// System.out.println("In the the function - Upper iTabProperty 2");
								// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
								/* END DELETE VER: 5.59tan */

								// lStart = System.currentTimeMillis();
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								/* END DELETE VER: 5.59tan */

								// }
								// if (GAfePropertyLoader.DEBUG) {
								// System.out.println("The bProductDetail.lProductID in itabproperty  : " + bProductDetail.lProductID);
								// }
								// Begin DEL v9.01d
								// Begin Ver 2.93
								// Changes Made for Fixing Upgrade Downgrade Logins problem
								/*
								 * if ((blnGetForProperty("PRODUCT_URL", bProductDetail.lProductID)))
								 * {
								 *   Vector vctURL       =       new Vector();
								 *   //  IAFEOUT iAFEOUT         =       new IAFEOUT();
								 *   //  vctURL  =       iAFEOUT.vctGetLogin(bProductDetailProperty.lCustomerID, "U");
								 *   vctURL      =       bProductDetailProperty.vctGetLoginfromILMURL;
								 *   if((null != vctURL) && (FINAL_ZERO != vctURL.size()))
								 *   {
								 *       for (int iCounterLog = FINAL_ZERO; iCounterLog < vctURL.size(); iCounterLog++)
								 *       {
								 *           String strURL       =       "";
								 *           Vector      vctInt  =       null;
								 *           if(null == ((BChangeILogin)vctURL.elementAt(iCounterLog)))
								 *               continue;
								 *           strURL      =       String.valueOf(((BChangeILogin)vctURL.elementAt(iCounterLog)).strLogin);
								 *           if(GAfePropertyLoader.DEBUG)
								 *           {
								 *               System.out.println("Adding strURL- " +strURL);
								 *           }
								 *           //Begin Ver 2.5
								 *           //Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								 *           if(!(bCheckForLogin(vctIntExt, strURL)))
								 *           {
								 *               vctInt  =       new Vector();
								 *               iSelected       =       FINAL_ZERO;
								 *               bProductParameter.iEditable             =       0;
								 *               //Begin Ver 2.5
								 *               //Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								 *               if(GAfePropertyLoader.DEBUG)
								 *               {
								 *                   System.out.println("Adding for in strURL - " +strURL);
								 *               }
								 *               Vector vctTempLogin     =       null;
								 *               vctTempLogin    =       bProductDetailProperty.vctGetLoginfromILMMAIL;
								 *               int iSizeOfvctLogin     =       0;
								 *               iSizeOfvctLogin =       vctTempLogin.size();
								 *               if(FINAL_ZERO != iSizeOfvctLogin)
								 *               {
								 *                   for (iCounterLog = FINAL_ZERO; iCounterLog < iSizeOfvctLogin; iCounterLog++)
								 *                   {
								 *                       if(null == ((BChangeILogin)vctTempLogin.elementAt(iCounterLog)))
								 *                           continue;
								 *                       /****************STARTING*****************TO PRINT THE DATA
								 *                       if(GAfePropertyLoader.DEBUG)
								 *                       {
								 *                           System.out.println("ITAB Getting the aged login from ILM strLogin   - "     + String.valueOf(((BChangeILogin)vctTempLogin.elementAt(iCounterLog)).strLogin));
								 *                           System.out.println("ITAB strValues To Compare                                               - "     + strValues);
								 *                       }
								 *                       /****************ENDING*******************TO PRINT THE DATA
								 *                       if ((strURL).equalsIgnoreCase(String.valueOf(((BChangeILogin)vctTempLogin.elementAt(iCounterLog)).strLogin)))
								 *                       {
								 *                           //  Do Nothing ???
								 *                       }
								 *                       else
								 *                       {
								 *                           vctInt.addElement(strURL);
								 *                           vctInt.addElement(new Integer(iSelected));
								 *                           vctIntExt.addElement(vctInt);
								 *                       }
								 *                       //End Ver 2.5
								 *                       //Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								 *                   }
								 *               }
								 *               else
								 *               {
								 *                   vctInt.addElement(strURL);
								 *                   vctInt.addElement(new Integer(iSelected));
								 *                   vctIntExt.addElement(vctInt);
								 *                   /****************STARTING*****************TO PRINT THE DATA
								 *                   if(GAfePropertyLoader.DEBUG)
								 *                   {
								 *                       System.out.println("To Add in the Else Case vctInt - "+vctInt);
								 *                   }
								 *                   /****************ENDING*******************TO PRINT THE DATA
								 *               }
								 *           }
								 *           //End Ver 2.5
								 *           //Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
								 *       }
								 *   }
								 * }
								 */

								// End Ver 2.93
								// Changes Made for Fixing Upgrade Downgrade Logins problem
								if (FINAL_ONE == vctIntExt.size()) {
									((Vector) vctIntExt.elementAt(FINAL_ZERO))
											.setElementAt(Integer.valueOf(string_ONE),
													FINAL_ONE);

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */

									/* BEGIN DELETE VER: 5.59tan */

									// if(GAfePropertyLoader.DEBUG)
									// {
									// System.out.println("******************************************************************************");
									// System.out.println("The bProductParameter.vctParameterValues : " +bProductParameter.vctParameterValues);
									// System.out.println("******************************************************************************");
									// }
									/* END DELETE VER: 5.59tan */

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}

								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("The Final Vector To be Replaced is     : " + vctIntExt);
								}

								if ((null != vctIntExt)
										&& (FINAL_ZERO != vctIntExt.size())) {
									bProductParameter.vctParameterValues = vctIntExt;
								}
							}

							// BEGIN ADD V6.07d
							if (bIsVASProduct(bProductDetail.lProductID
									.longValue())) {
								GLogger
										.chkpt(CLASS_NAME
												+ "iTABPROPERTY"
												+ "bProductParameter.vctParameterValues"
												+ bProductParameter.vctParameterValues);
								fillVASParameters(bProductParameter, bInternet);
							}

							// END ADD V6.07d
						}
					}
				}

				for (int iVCTCounter = FINAL_ZERO; iVCTCounter < bProductDetailProperty.vctProductNonSelected
						.size(); iVCTCounter++) {
					bProductDetail = new BProductDetail();
					bProductDetail = (BProductDetail) bProductDetailProperty.vctProductNonSelected
							.elementAt(iVCTCounter);

					for (int iBPDCounter = FINAL_ZERO; iBPDCounter < bProductDetail.vctParameters
							.size(); iBPDCounter++) {
						bProductParameter = new BProductParameter();
						bProductParameter = (BProductParameter) bProductDetail.vctParameters
								.elementAt(iBPDCounter);

						Vector vctIntExt = new Vector();

						// In Internet Case
						if (((GAfeDescription
								.strGetProperty("PRODUCTLINEIDENTIFIERTYPE_LOGIN"))
								.equals(String
										.valueOf(bProductParameter.lParameterID)))) {

							// Begin DEL v9.01d
							// Vector vctBPPInternal = new Vector();
							// End DEL v9.01d
							Vector vctIntSelected = new Vector();

							// In Internet Case
							if (((String.valueOf(string_ZERO)).equalsIgnoreCase(String
									.valueOf(bProductParameter.iParameter)))) {
								for (int iBPPSCounter = FINAL_ZERO; iBPPSCounter < bProductParameter.vctParameterValues
										.size(); iBPPSCounter++) {
									Vector vctBPPSInternal = new Vector();

									vctIntSelected = new Vector();
									vctBPPSInternal = (Vector) bProductParameter.vctParameterValues
											.elementAt(iBPPSCounter);

									/* BEGIN DELETE VER: 5.59tan */

									// System.out.println("The Original Vector is : " +vctBPPSInternal);
									/* END DELETE VER: 5.59tan */
									if ((string_ZERO).equals(String
											.valueOf(vctBPPSInternal
													.elementAt(FINAL_ONE)))) {
										iSelected = FINAL_ZERO;
									} else {
										strValues = (String) vctBPPSInternal
												.elementAt(FINAL_ZERO);
										StrValuesForCompare = (String) vctBPPSInternal
												.elementAt(FINAL_ZERO);
										iSelected = FINAL_ONE;
										vctIntSelected.addElement(strValues);
										vctIntSelected.addElement(Integer.valueOf(
												iSelected));

										/* BEGIN DELETE VER: 5.59tan */

										// if(GAfePropertyLoader.DEBUG)
										// {
										// System.out.println("The o vectr is : " +vctIntSelected);
										// }
										/* END DELETE VER: 5.59tan */
										vctIntExt.addElement(vctIntSelected);
									} // end of the else part of the if loop
								} // end of the if loop

								// Begin DEL v9.01d

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								// if (GAfePropertyLoader.DEBUG) {
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								// System.out.println("In the the function - Lower iTabProperty 1");
								// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
								/* END DELETE VER: 5.59tan */

								// lStart = System.currentTimeMillis();
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								/* END DELETE VER: 5.59tan */

								// }
								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								// End DEL v9.01d
								if ((blnGetForProperty("PRODUCT_MAILBOX",
										bProductDetail.lProductID))
										|| (blnGetForProperty(
												"PRODUCT_DOMAINMAILSERVER",
												bProductDetail.lProductID))) {
									Vector vctLogin = new Vector();

									//                                  IAFEOUT iAFEOUT         =       new IAFEOUT();
									//                                  vctLogin        =       iAFEOUT.vctGetLogin(bProductDetailProperty.lCustomerID, "M");
									vctLogin = bProductDetailProperty.vctGetLoginfromILMMAIL;

									if ((null != vctLogin)
											&& (FINAL_ZERO != vctLogin.size())) {
										for (int iCounterLog = FINAL_ZERO; iCounterLog < vctLogin
												.size(); iCounterLog++) {
											String strLogin = "";
											Vector vctInt = null;

											if (null == ((BChangeILogin) vctLogin
													.elementAt(iCounterLog))) {
												continue;
											}

											strLogin = String
													.valueOf(((BChangeILogin) vctLogin
															.elementAt(iCounterLog)).strLogin);

											if (!(bCheckForLogin(vctIntExt,
													strLogin))) {
												vctInt = new Vector();
												iSelected = FINAL_ZERO;
												vctInt.addElement(strLogin);
												vctInt.addElement(Integer.valueOf(
														iSelected));
												vctIntExt.addElement(vctInt);
											}
										}
									}
								}

								// Begin DEL v9.01d
								// if (GAfePropertyLoader.DEBUG) {
								// System.out.println("The Product id is in itabproperty- " + bProductDetail.lProductID);
								// }

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */

								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								// System.out.println("In the the function - Lower  iTabProperty 1");
								// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
								/* END DELETE VER: 5.59tan */

								// lStart = System.currentTimeMillis();
								/* BEGIN DELETE VER: 5.59tan */

								// System.out.println("**********************************************");
								/* END DELETE VER: 5.59tan */

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */

								// End DEL v9.01d
								if ((blnGetForProperty("PRODUCT_URL",
										bProductDetail.lProductID))) {
									Vector vctURL = new Vector();

									//                                  IAFEOUT iAFEOUT         =       new IAFEOUT();
									//                                  vctURL  =       iAFEOUT.vctGetLogin(bProductDetailProperty.lCustomerID, "U");
									vctURL = bProductDetailProperty.vctGetLoginfromILMURL;

									/* BEGIN DELETE VER: 5.59tan */

									// if(GAfePropertyLoader.DEBUG)
									// {
									// System.out.println("vctURL- " +vctURL);
									// }
									/* END DELETE VER: 5.59tan */
									if ((null != vctURL)
											&& (FINAL_ZERO != vctURL.size())) {
										if (GAfePropertyLoader.DEBUG) {

											GLogger.chkpt("Inside if statement ");	// System.out.println("Came in for the url - " + bProductDetail.lProductID);
										}

										/** **************************************MAKING OF NEXT QUERRY************************************** */
										for (int iCounterLog = FINAL_ZERO; iCounterLog < vctURL
												.size(); iCounterLog++) {
											String strURL = "";
											Vector vctInt = null;

											if (null == ((BChangeILogin) vctURL
													.elementAt(iCounterLog))) {
												continue;
											}

											strURL = String
													.valueOf(((BChangeILogin) vctURL
															.elementAt(iCounterLog)).strLogin);

											if (!(bCheckForLogin(vctIntExt,
													strURL))) {
												vctInt = new Vector();
												iSelected = FINAL_ZERO;

												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if statement");
													// System.out.println("Adding strURL- " + strURL);
												}

												vctInt.addElement(strURL);
												vctInt.addElement(Integer.valueOf(
														iSelected));
												vctIntExt.addElement(vctInt);
											}
										}
									}
								}

								if (FINAL_ONE == vctIntExt.size()) {
									((Vector) vctIntExt.elementAt(FINAL_ZERO))
											.setElementAt(Integer.valueOf(string_ONE),
													FINAL_ONE);

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */

									/* BEGIN DELETE VER: 5.59tan */

									// if(GAfePropertyLoader.DEBUG)
									// {
									// System.out.println("******************************************************************************");
									// System.out.println("The bProductParameter.vctParameterValues : " +bProductParameter.vctParameterValues);
									// System.out.println("******************************************************************************");
									// }
									/* END DELETE VER: 5.59tan */

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}

								/* BEGIN DELETE VER: 5.59tan */

								// if(GAfePropertyLoader.DEBUG)
								// {
								// System.out.println("The Final Vector To be Replaced is   : " +vctIntExt);
								// }
								/* END DELETE VER: 5.59tan */
								if ((null != vctIntExt)
										&& (FINAL_ZERO != vctIntExt.size())) {
									bProductParameter.vctParameterValues = vctIntExt;
								}
							} // end of the if loop

							// In Internet Case
						} // end of the for loop
					} // end of the for loop
				}
			}

			// If Selected Product Line is CPS Product Line
			else if ((GAfeDescription.strGetProperty(string_PRODUCT_CPS))
					.equals(String.valueOf(bProductDetailProperty.lProductID))) {

				// 3.33    Begin Insert
				if (GAfePropertyLoader.DEBUG) {
					GGeneric
							.println(
									"In LProduct.java ... method iTabProperty()- in CPS case - with parameters lCustomerID : "
											+ lCustomerID,
									GGeneric.iDebugLevelSeven, this);
				}

				// 3.33    End Insert
				// 3.33    Begin Update
				bIntro = (BIntro) teleSessionMgr.getValue("BIntro_aCProduct");

				if (null != bIntro)

				// if (null != teleSessionMgr.getValue("BIntro_aCProduct"))
				{

					// bIntro          =       new BIntro();
					// bIntro  =       (BIntro)teleSessionMgr.getValue("BIntro_aCProduct");
					Long lDonorName;
					Long lDonorKlantNo;
					Long lCPSRemark;

					// 3.33    End  Update
					iGetMaxInstanceInVector = 0;
					iLevel = 2;
					iParentInstance = FINAL_ONE;
					iGetMaxInstanceInVector = iGetMaxInstanceInVectorlevelparentinstance(
							bProductDetailProperty.vctProductSelected, iLevel,
							iParentInstance);
					iFindProductInVector = iFindProductInVector(
							bProductDetailProperty.vctProductSelected,
							Long.valueOf(GAfeDescription
									.strGetProperty("PRODUCT_CPSDETAIL"))); // If the Product is not in the Vector earlier

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("In iTabProperty CPS Case iFindProductInVector : " + iFindProductInVector);
					}

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					if (FINAL_ZERO == iFindProductInVector) {
						bProductDetail = null;

						// BEGIN MODIFY : V3.10
						// Modified Code for fixing DEFECT id 70, Obsolete Masters
						// Changed the Call objGetDetailProductNonSelected with an additional input parameter as iIsDefault
						// bProductDetail  =       objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_SILVER")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
						iIsDefault = FINAL_ZERO;

						// 3.35    Begin Update
						// bProductDetail  =       objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_SILVER")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage,iIsDefault,bProductDetailProperty.vctProductSelected);
						// BEGIN DELETE V6.02d
						// bProductDetail = objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_CPSDETAIL")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
						// END DELETE V6.02d
						// BEGIN ADD V6.02d
						bProductDetail = objGetDetailProductNonSelected(
								lCustomerID, Long.valueOf(GAfeDescription
										.strGetProperty("PRODUCT_CPSDETAIL")),
								Long.valueOf(string_ZERO), Long.valueOf(string_ZERO), 0, 0,
								bProductDetailProperty.lCurrencyID, FINAL_ONE,
								2, ++iGetMaxInstanceInVector, FINAL_ONE,
								bProductDetailProperty.lPaymentMethodRC,
								bProductDetailProperty.lPaymentMethodNRC,
								bProductDetailProperty.lPaymentMethodUsage,
								iIsDefault,
								bProductDetailProperty.vctProductSelected,
								bProductDetailProperty);

						// END ADD V6.02d
						// 3.35    End Update
						// END MODIFY : V3.10
						// Modified Code for fixing DEFECT id 70, Obsolete Masters
						lDonorName = Long.valueOf(GAfeDescription
								.strGetProperty("PRODUCTPARAMETER_CPSDONOR"));
						lDonorKlantNo = Long
								.valueOf(GAfeDescription
										.strGetProperty("PRODUCTPARAMETER_DONORKLANTNO"));
						lCPSRemark = Long.valueOf(GAfeDescription
								.strGetProperty("PRODUCTPARAMETER_CPSREMARKS"));

						// Search in our business object bProductDetail for this parameterid and set the values accordinglly and set iSelected value as 1.
						// Pending
						if (null != bProductDetail) {
							for (int iFCounter = FINAL_ZERO; iFCounter < bProductDetail.vctParameters
									.size(); iFCounter++) {
								bProductParameter = new BProductParameter();
								bProductParameter = (BProductParameter) bProductDetail.vctParameters
										.elementAt(iFCounter);

								// Begin DEL v9.01d
								// Vector vctInternal = null;
								// End DEL v9.01d
								if ((String.valueOf(lDonorName))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(bIntro.strDonor,
													FINAL_ZERO);
									bProductParameter.iEditable = FINAL_ZERO;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */

									/* BEGIN DELETE VER: 5.59tan */

									// if(GAfePropertyLoader.DEBUG)
									// {
									// System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									// }
									/* END DELETE VER: 5.59tan */

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}

								if ((String.valueOf(lDonorKlantNo))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(
													bIntro.strDonorCustomerID,
													FINAL_ZERO);
									bProductParameter.iEditable = FINAL_ZERO;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */

									/* BEGIN DELETE VER: 5.59tan */

									// if(GAfePropertyLoader.DEBUG)
									// {
									// System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									// }
									/* END DELETE VER: 5.59tan */

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("lCPSRemark " + lCPSRemark);
									// System.out.println("lCPSRemark " + bProductParameter.lParameterID);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								if ((String.valueOf(lCPSRemark))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("The BIntro Remarks are " + bIntro.strRemarks);
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(bIntro.strRemarks,
													FINAL_ZERO);
									bProductParameter.iEditable = FINAL_ZERO;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("After Setting the Value : " + ((Vector) bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}
							} // end of the for loop
						} // end of the if loop

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("In iTabProperty CPS Case bProductDetail : " + bProductDetail);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						bProductDetailProperty.vctProductSelected
								.addElement(bProductDetail);
					} else {
						bProductDetail = new BProductDetail();
						bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
								.elementAt(FINAL_ZERO);
						lDonorName = Long.valueOf(GAfeDescription
								.strGetProperty("PRODUCTPARAMETER_CPSDONOR"));
						lDonorKlantNo = Long
								.valueOf(GAfeDescription
										.strGetProperty("PRODUCTPARAMETER_DONORKLANTNO"));
						lCPSRemark = Long.valueOf(GAfeDescription
								.strGetProperty("PRODUCTPARAMETER_CPSREMARKS"));

						// Search in our business object bProductDetail for this parameterid and set the values accordinglly and set iSelected value as 1.
						// Pending
						if (null != bProductDetail) {
							for (int iFCounter = FINAL_ZERO; iFCounter < bProductDetail.vctParameters
									.size(); iFCounter++) {
								bProductParameter = new BProductParameter();
								bProductParameter = (BProductParameter) bProductDetail.vctParameters
										.elementAt(iFCounter);

								// Begin DEL v9.01d
								// Vector vctInternal = null;
								// End DEL v9.01d
								if ((String.valueOf(lDonorName))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(bIntro.strDonor,
													FINAL_ZERO);
									bProductParameter.iEditable = FINAL_ZERO;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("After Setting the Value : " + ((Vector) bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}

								if ((String.valueOf(lDonorKlantNo))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(
													bIntro.strDonorCustomerID,
													FINAL_ZERO);
									bProductParameter.iEditable = FINAL_ZERO;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("After Setting the Value : " + ((Vector) bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("lCPSRemark " + lCPSRemark);
									// System.out.println("lCPSRemark " + bProductParameter.lParameterID);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								if ((String.valueOf(lCPSRemark))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("The BIntro Remarks are " + bIntro.strRemarks);
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(bIntro.strRemarks,
													FINAL_ZERO);
									bProductParameter.iEditable = FINAL_ZERO;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("After Setting the Value : " + ((Vector) bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}
							} // end of the for loop
						} // end of the if loop

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("In iTabProperty CPS Case bProductDetail : " + bProductDetail);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					} // end of the if else eif loop
				}
			}

			if (FINAL_ONE == iFlagToCome) {
				teleSessionMgr.putValue(
						"BProductDetailProperty_aCProductOrders",
						bProductDetailProperty);

				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement");
					// System.out.println("Putting Order BO Into Session ");
				}

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			} else if (2 == iFlagToCome) {
				teleSessionMgr.putValue(BPRODUCTDETAILPROPERTY_ACPRODUCT,
						bProductDetailProperty);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {

				// 3.33    Begin Update
				// ex.printStackTrace(System.out);
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			// AfeException afe = new AfeException("ERRCOM_00002",ex.getMessage());//unknown exception occurred
			// throw afe;
			throw new AfeException(string_ERRCOM_00002, ex.getMessage());

			// 3.33    End Update
		}

		// 3.33    End Delete

		/*
		 * finally
		 * {
		 *   if(GAfePropertyLoader.DEBUG)
		 *   {
		 *       System.out.println("**********************************************");
		 *       System.out.println("After calling the function - iTabProperty");
		 *       System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
		 *       lStart  =       System.currentTimeMillis();
		 *       System.out.println("**********************************************");
		 *   }
		 * }
		 */

		// 3.33    End Delete
		return ++iCounterForReturn;
	}

	protected boolean bCheckForLogin(Vector vctInternal, String strLogin)
			throws Exception {
		boolean bFound = false;

		try {
			for (int iCounter = FINAL_ZERO; iCounter < vctInternal.size(); iCounter++) {
				Vector vctInt = null;

				vctInt = (Vector) vctInternal.elementAt(iCounter);

				if ((strLogin).equalsIgnoreCase(String.valueOf(vctInt
						.elementAt(FINAL_ZERO)))) {
					bFound = true;

					break;
				}
			}
		} catch (Exception ex) {
			AfeException afee = new AfeException("ERRCOM_00001", ex
					.getMessage()); // Database error occured

			throw afee;
		}

		return bFound;
	}

	/**
	 *  DESCRIPTION :   This Function Saves all the Values that have been Edited Onto the Property Screen
	 *                                  back into the Bussiness Object for further Processing.
	 *
	 *  @param          :       TeleSessionMgr teleSessionMgr, HttpServletRequest request, BProductDetailProperty bProductDetailProperty, BProductDetail bProductDetail
	 *
	 *  @return         :       int - This function will 1 if the Saving is Successfull otherwise will return 0.
	 * /******************************************************************************************************************************
	 */
	public int iUpdateForCPSOnOk(Long lCustomerID) throws SQLException,
			Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iFlag = 0; // Local Varaible Declaration
		int iGetMaxInstanceInVector = 0; // Local Varaible Declaration
		int iLevel = 0; // Local Varaible Declaration
		int iParentInstance = 0; // Local Varaible Declaration
		int iFindProductInVector = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/* Making Objects of the Bussiness Objects */
			BProductDetailProperty bProductDetailProperty = new BProductDetailProperty();
			BProductDetail bProductDetail = new BProductDetail();
			BIntro bIntro = null;
			BProductParameter bProductParameter = null;

			if (null != teleSessionMgr
					.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

				// BProductDetailProperty Bussiness Object for Storing the Older Version of the Bussiness Object
				bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

				if (null != teleSessionMgr.getValue("BIntro_aCProduct")) {
					bIntro = null;
					bIntro = (BIntro) teleSessionMgr
							.getValue("BIntro_aCProduct");

					Long lDonorName;
					Long lDonorKlantNo;
					Long lCPSRemark;

					iGetMaxInstanceInVector = 0;
					iLevel = 2;
					iParentInstance = FINAL_ONE;
					iGetMaxInstanceInVector = iGetMaxInstanceInVectorlevelparentinstance(
							bProductDetailProperty.vctProductSelected, iLevel,
							iParentInstance);
					iFindProductInVector = iFindProductInVector(
							bProductDetailProperty.vctProductSelected,
							Long.valueOf(GAfeDescription
									.strGetProperty("PRODUCT_CPSDETAIL"))); // If the Product is not in the Vector earlier

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("In CPS OK Press Case iFindProductInVector : " + iFindProductInVector);
					}

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					if (FINAL_ZERO == iFindProductInVector) {
						bProductDetail = null;

						//                      BEGIN MODIFY : V3.10
						//                      Modified Code for fixing DEFECT id 70, Obsolete Masters
						//                      Changed the Call objGetDetailProductNonSelected with an additional input parameter as iIsDefault
						//                                                            bProductDetail  =       objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_SILVER")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage);
						iIsDefault = FINAL_ZERO;

						// BEGIN DELETE V6.02d
						// bProductDetail = objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_SILVER")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected);
						// END DELETE V6.02d
						// BEGIN ADD V6.02d
						// BEGIN DELETE V6.05h
						// bProductDetail = objGetDetailProductNonSelected(lCustomerID, Long.valueOf(GAfeDescription.strGetProperty("PRODUCT_SILVER")), Long.valueOf("0"), Long.valueOf("0"), 0, 0, bProductDetailProperty.lCurrencyID, FINAL_ONE, 2, ++iGetMaxInstanceInVector, FINAL_ONE, bProductDetailProperty.lPaymentMethodRC, bProductDetailProperty.lPaymentMethodNRC, bProductDetailProperty.lPaymentMethodUsage, iIsDefault, bProductDetailProperty.vctProductSelected, bProductDetailProperty);
						// END DELETE V6.05h
						// END ADD V6.02d
						// BEGIN ADD V6.05h
						bProductDetail = objGetDetailProductNonSelected(
								lCustomerID, Long.valueOf(GAfeDescription
										.strGetProperty("PRODUCT_CPSDETAIL")),
								Long.valueOf(string_ZERO), Long.valueOf(string_ZERO), 0, 0,
								bProductDetailProperty.lCurrencyID, FINAL_ONE,
								2, ++iGetMaxInstanceInVector, FINAL_ONE,
								bProductDetailProperty.lPaymentMethodRC,
								bProductDetailProperty.lPaymentMethodNRC,
								bProductDetailProperty.lPaymentMethodUsage,
								iIsDefault,
								bProductDetailProperty.vctProductSelected,
								bProductDetailProperty);

						// END ADD V6.05h

						//                      END MODIFY : V3.10
						//                      Modified Code for fixing DEFECT id 70, Obsolete Masters
						lDonorName = Long.valueOf(GAfeDescription
								.strGetProperty("PRODUCTPARAMETER_CPSDONOR"));
						lDonorKlantNo = Long
								.valueOf(GAfeDescription
										.strGetProperty("PRODUCTPARAMETER_DONORKLANTNO"));
						lCPSRemark = Long.valueOf(GAfeDescription
								.strGetProperty("PRODUCTPARAMETER_CPSREMARKS"));

						// Search in our business object bProductDetail for this parameterid and set the values accordinglly and set iSelected value as 1.
						// Pending
						if (null != bProductDetail) {
							for (int iFCounter = FINAL_ZERO; iFCounter < bProductDetail.vctParameters
									.size(); iFCounter++) {
								//bProductParameter = new BProductParameter();
								bProductParameter = (BProductParameter) bProductDetail.vctParameters
										.elementAt(iFCounter);

								// Begin DEL v9.01d
								// Vector vctInternal = null;
								// End DEL v9.01d
								if ((String.valueOf(lDonorName))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(bIntro.strDonor,
													FINAL_ZERO);

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("After Setting the Value : " + ((Vector) bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}

								if ((String.valueOf(lDonorKlantNo))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(
													bIntro.strDonorCustomerID,
													FINAL_ZERO);

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("After Setting the Value : " + ((Vector) bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}

								if ((String.valueOf(lCPSRemark))
										.equalsIgnoreCase(String
												.valueOf(bProductParameter.lParameterID))) {
									((Vector) bProductParameter.vctParameterValues
											.elementAt(FINAL_ZERO))
											.setElementAt(bIntro.strRemarks,
													FINAL_ZERO);

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("After Setting the Value : " + ((Vector) bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}
							} // end of the for loop
						} // end of the if loop

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("In CPS OK Press Case bProductDetail : " + bProductDetail);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						bProductDetailProperty.vctProductSelected
								.addElement(bProductDetail);
					}
				}
			}

			teleSessionMgr.putValue(BPRODUCTDETAILPROPERTY_ACPRODUCT,
					bProductDetailProperty);
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return ++iFlag;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Remove all the Forbidden Products from
	 *                                  The upper Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Vector vctProductSelected, Vector vctProductNonSelected
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	public int iValidateProductLineAccount(
			BProductDetailProperty bProductDetailProperty,
			BProductRole bProductRole) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iResult = 0; // Local Varaible Declaration
		CustomerLinkRow customerLinkRow = null;

		// Begin DEL v9.01d
		// CustomerAccountRow customerAccountRow = null;
		// CustomerChargeTypeRow customerChargeTypeRow = null;
		// long lCustomerAccountId_Current = 0;
		// long lCustomerAccountId_Previous = 0;
		// End DEL v9.01d
		Vector vctInternal_1 = null;
		Vector vctInternal_2 = new Vector(1);
		Vector vctInternal_3 = new Vector(1);

		// Begin DEL v9.01d
		// Vector vctInternal_4 = new Vector(1);
		// Vector vctInternal_5 = new Vector(1);
		// Vector vctInternal_6 = new Vector(1);
		// Vector vctInternal_7 = new Vector(1);
		// Vector vctInternal_8 = new Vector(1);
		// End DEL v9.01d
		Vector vctInternal_9 = null;

		// BEgin DEL v9.01d
		// Vector vctInternal_10 = new Vector(1);
		// End DEL v9.01d
		Vector vctCustomerLinkId = new Vector(1);
		Vector vctCustomerAccount = null;

		// BEGIN DELETE Ver 5.59a
		// StringBuffer sbfSql   = new StringBuffer("");         //Defining a String Buffer to make the Sql querry
		// END DELETE Ver 5.59a
		// BEGIN ADD Ver 5.59a
		String strQuery = null;
		PreparedStatement preparedStatement = null;

		// END ADD Ver 5.59a
		long lCustomerId = 0;
		long lAddressId = 0;
		long lUsageTypeId = 0;
		ResultSet rsGetData = null; // Making an Object of the ResultSet

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			if (makeAFEConnection()) // if connection is made
			{

				// getting the CustomerChargeType, CustomerLink and CustomerAccount tables
				if (null == customerChargeTypeTable) {
					customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
							.getMasterTable(string_CUSTOMERCHARGETYPE);
				}

				customerLinkTable = (CustomerLink) teleSessionMgr
						.getTable(string_CUSTOMERLINK);
				customerAccountTable = (CustomerAccount) teleSessionMgr
						.getTable("CUSTOMERACCOUNT");

				// getting the charge type id
				lUsageTypeId = GAfeDescription.lGetTypeId("CHARGETYPE_USAGE");

				// checking the customeraccounts
				if (null != customerChargeType) {
					vctInternal_1 = (Vector) customerChargeType
							.vctSearchByCustomerProductLineIDAndChargeTypeID(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(), lUsageTypeId,
									FINAL_ZERO);

					// if CustomerAccountId are in the session for this CustomerProductLineID
					if ((null != vctInternal_1)
							&& (vctInternal_1.size() != FINAL_ZERO)) {
						vctCustomerAccount = vctGetCustomerAccount(
								vctInternal_1, bProductDetailProperty);

						if (null != vctCustomerAccount) {

							// BEGIN DELETE V5.31a
							// comment: only one customer payer account can be there for a line
							// if (vctCustomerAccount.size() > 2)
							// END DELETE V5.31a
							// BEGIN ADD V5.31a
							// comment: checking if max one customer account payer role is linked with a line
							if (vctCustomerAccount.size() > 1)

							// END ADD V5.31a
							{
								throw new AfeException("ERRAFE_00478"); // throws AfeException is case number of account attached to productline are more than 2
							} else {
								iResult = FINAL_ONE;
							}
						}
					}

					// if CustomerAccountId are not in the session for this CustomerProductLineID
					else {

						// -------------------------------
						// checking the customeraccountid in the CDM for this CustomerProductLineID
						// BEGIN DELETE Ver 5.59a
						// sbfSql.setLength(0);                                                  //Initialising
						// Find the CustomerAccountId
						// sbfSql.append("SELECT CUSTOMERACCOUNTID FROM CUSTOMERCHARGETYPE WHERE OBSOLETE = 0 AND CUSTOMERPRODUCTLINEID = ");
						// sbfSql.append(bProductDetailProperty.lCustomerProductLineID.longValue()).append(" AND CHARGETYPEID = ").append(lUsageTypeId);
						// rsGetData     = gConnectAfe.rsQuery(sbfSql.toString());
						// END DELETE Ver 5.59a
						// BEGIN ADD Ver 5.59a
						strQuery = "SELECT CUSTOMERACCOUNTID FROM CUSTOMERCHARGETYPE WHERE OBSOLETE = 0 AND CUSTOMERPRODUCTLINEID=? AND CHARGETYPEID=?";
						preparedStatement = gConnectAfe
								.psPrepareStatement(strQuery);
						preparedStatement.setLong(1,
								bProductDetailProperty.lCustomerProductLineID
										.longValue());
						preparedStatement.setLong(2, lUsageTypeId);
						rsGetData = preparedStatement.executeQuery();

						// END ADD Ver 5.59a

						// -----------------------------
						if (null != rsGetData) {
							while (rsGetData.next()) {
								vctInternal_2.addElement(Long.valueOf(rsGetData
										.getLong("CUSTOMERACCOUNTID")));
							}
						}

						// BEGIN ADD V5.10a
						// comment:for open cursor check closing resultset and statement
						rsGetData.close();
						rsGetData.getStatement().close();
						rsGetData = null;

						// END ADD V5.10a

						if ((null != vctInternal_2)
								&& (vctInternal_2.size() != FINAL_ZERO)) {
							vctCustomerAccount = vctGetCustomerAccount(
									vctInternal_2, bProductDetailProperty);

							if (null != vctCustomerAccount) {

								// BEGIN DELETE V5.31a
								// comment: only one customer payer account can be there for a line
								// if (vctCustomerAccount.size() > 2)
								// END DELETE V5.31a
								// BEGIN ADD V5.31a
								// comment: checking if max one customer account payer role is linked with a line
								if (vctCustomerAccount.size() > 1)

								// END ADD V5.31a
								{
									throw new AfeException("ERRAFE_00478"); // throws AfeException is case number of account attached to productline are more than 2
								} else {
									iResult = FINAL_ONE;
								}
							}
						}

						// customeraccounts are not in the CDM
						else {
							if (null != customerLinkTable) {
								vctInternal_9 = bProductRole.vctProductRole;

								if ((null != vctInternal_9)
										&& (vctInternal_9.size() != FINAL_ZERO)) {
									for (int iCounter_10 = FINAL_ZERO; iCounter_10 < vctInternal_9
											.size(); iCounter_10++) {
										if (((BProductRoleDetail) vctInternal_9
												.elementAt(iCounter_10)).lRoleTypeID
												.longValue() == GAfeDescription
												.lGetTypeId(string_ROLETYPE_USAGE)) {
											lCustomerId = (((BProductRoleDetail) vctInternal_9
													.elementAt(iCounter_10)).lCustomerID)
													.longValue();
											lAddressId = (((BProductRoleDetail) vctInternal_9
													.elementAt(iCounter_10)).lAddressID)
													.longValue();
											vctInternal_3 = (Vector) customerLinkTable
													.clrSearchByCustIDAddIDandObsolete(
															lCustomerId,
															lAddressId,
															FINAL_ZERO);

											if ((null != vctInternal_3)
													&& (vctInternal_3.size() != FINAL_ZERO)) {
												for (int iCounter = FINAL_ZERO; iCounter < vctInternal_3
														.size(); iCounter++) {
													customerLinkRow = (CustomerLinkRow) vctInternal_3
															.elementAt(iCounter);

													if (null != customerLinkRow) {
														vctCustomerLinkId
																.addElement(Long.valueOf(
																		customerLinkRow.lCustomerLinkID));
													}
												}
											}
										}

										if (((BProductRoleDetail) vctInternal_9
												.elementAt(iCounter_10)).lRoleTypeID
												.longValue() == GAfeDescription
												.lGetTypeId(string_ROLETYPE_RC)) {
											lCustomerId = (((BProductRoleDetail) vctInternal_9
													.elementAt(iCounter_10)).lCustomerID)
													.longValue();
											lAddressId = (((BProductRoleDetail) vctInternal_9
													.elementAt(iCounter_10)).lAddressID)
													.longValue();
											vctInternal_3 = (Vector) customerLinkTable
													.clrSearchByCustIDAddIDandObsolete(
															lCustomerId,
															lAddressId,
															FINAL_ZERO);

											if ((null != vctInternal_3)
													&& (vctInternal_3.size() != FINAL_ZERO)) {
												for (int iCounter = FINAL_ZERO; iCounter < vctInternal_3
														.size(); iCounter++) {
													customerLinkRow = (CustomerLinkRow) vctInternal_3
															.elementAt(iCounter);

													if (null != customerLinkRow) {
														vctCustomerLinkId
																.addElement(Long.valueOf(
																		customerLinkRow.lCustomerLinkID));
													}
												}
											}
										}

										if (((BProductRoleDetail) vctInternal_9
												.elementAt(iCounter_10)).lRoleTypeID
												.longValue() == GAfeDescription
												.lGetTypeId(string_ROLETYPE_NRC)) {
											lCustomerId = (((BProductRoleDetail) vctInternal_9
													.elementAt(iCounter_10)).lCustomerID)
													.longValue();
											lAddressId = (((BProductRoleDetail) vctInternal_9
													.elementAt(iCounter_10)).lAddressID)
													.longValue();
											vctInternal_3 = (Vector) customerLinkTable
													.clrSearchByCustIDAddIDandObsolete(
															lCustomerId,
															lAddressId,
															FINAL_ZERO);

											if ((null != vctInternal_3)
													&& (vctInternal_3.size() != FINAL_ZERO)) {
												for (int iCounter = FINAL_ZERO; iCounter < vctInternal_3
														.size(); iCounter++) {
													customerLinkRow = (CustomerLinkRow) vctInternal_3
															.elementAt(iCounter);

													if (null != customerLinkRow) {
														vctCustomerLinkId
																.addElement(Long.valueOf(
																		customerLinkRow.lCustomerLinkID));
													}
												}
											}
										}
									}
								}
							}

							if ((null != vctCustomerLinkId)
									&& (vctCustomerLinkId.size() != FINAL_ZERO)
									&& (vctCustomerLinkId.size() == 3)) {

								// BEGIN DELETE V5.31a
								// comment: modified the condition as below

								/**
								 * if (((Long)vctCustomerLinkId.elementAt(0)).longValue()!=((Long)vctCustomerLinkId.elementAt(1)).longValue() || (((Long)vctCustomerLinkId.elementAt(0)).longValue()!=((Long)vctCustomerLinkId.elementAt(2)).longValue()) || (((Long)vctCustomerLinkId.elementAt(1)).longValue()!=((Long)vctCustomerLinkId.elementAt(2)).longValue()))
								 * {
								 * if (((Long)vctCustomerLinkId.elementAt(0)).longValue()==((Long)vctCustomerLinkId.elementAt(1)).longValue())
								 * {
								 * if ((Long)bProductDetailProperty.lPaymentMethodUsage == (Long)bProductDetailProperty.lPaymentMethodRC)
								 * {
								 * iResult = FINAL_ONE;
								 * }
								 * else
								 * {
								 * throw new AfeException("ERRAFE_00478");//throws AfeException is case number of account attached to productline are more than 2
								 * }
								 * }
								 * else if (((Long)vctCustomerLinkId.elementAt(0)).longValue()==((Long)vctCustomerLinkId.elementAt(2)).longValue())
								 * {
								 * if ((Long)bProductDetailProperty.lPaymentMethodUsage == (Long)bProductDetailProperty.lPaymentMethodNRC)
								 * {
								 * iResult = FINAL_ONE;
								 * }
								 * else
								 * {
								 * throw new AfeException("ERRAFE_00478");//throws AfeException is case number of account attached to productline are more than 2
								 * }
								 *
								 * }
								 * else if (((Long)vctCustomerLinkId.elementAt(2)).longValue()==((Long)vctCustomerLinkId.elementAt(1)).longValue())
								 * {
								 * if ((Long)bProductDetailProperty.lPaymentMethodNRC == (Long)bProductDetailProperty.lPaymentMethodRC)
								 * {
								 * iResult = FINAL_ONE;
								 * }
								 * else
								 * {
								 * throw new AfeException("ERRAFE_00478");//throws AfeException is case number of account attached to productline are more than 2
								 * }
								 *
								 * }
								 * else
								 * {
								 * throw new AfeException("ERRAFE_00478");//throws AfeException is case number of account attached to productline are more than 2
								 * }
								 * }
								 * else if (((Long)vctCustomerLinkId.elementAt(0)).longValue()==((Long)vctCustomerLinkId.elementAt(1)).longValue() && (((Long)vctCustomerLinkId.elementAt(0)).longValue()==((Long)vctCustomerLinkId.elementAt(2)).longValue()) && (((Long)vctCustomerLinkId.elementAt(1)).longValue()==((Long)vctCustomerLinkId.elementAt(2)).longValue()))
								 * {
								 * if ((Long)bProductDetailProperty.lPaymentMethodUsage == (Long)bProductDetailProperty.lPaymentMethodRC || (Long)bProductDetailProperty.lPaymentMethodNRC == (Long)bProductDetailProperty.lPaymentMethodUsage || (Long)bProductDetailProperty.lPaymentMethodNRC == (Long)bProductDetailProperty.lPaymentMethodRC)
								 * {
								 * iResult = FINAL_ONE;
								 * }
								 * else
								 * {
								 * throw new AfeException("ERRAFE_00478");//throws AfeException is case number of account attached to productline are more than 2
								 * }
								 * }
								 */
								// END DELETE V5.31a
								// BEGIN ADD V5.31a
								// comment: checking that only one customer payer account is linked to the line
								if (!(((((Long) vctCustomerLinkId.elementAt(0))
										.longValue() == ((Long) vctCustomerLinkId
										.elementAt(1)).longValue()) && (((Long) bProductDetailProperty.lPaymentMethodUsage)
										.longValue() == ((Long) bProductDetailProperty.lPaymentMethodRC)
										.longValue()))
										&& ((((Long) vctCustomerLinkId
												.elementAt(0)).longValue() == ((Long) vctCustomerLinkId
												.elementAt(2)).longValue()) && (((Long) bProductDetailProperty.lPaymentMethodUsage)
												.longValue() == ((Long) bProductDetailProperty.lPaymentMethodNRC)
												.longValue())) && ((((Long) vctCustomerLinkId
										.elementAt(1)).longValue() == ((Long) vctCustomerLinkId
										.elementAt(2)).longValue()) && (((Long) bProductDetailProperty.lPaymentMethodRC)
										.longValue() == ((Long) bProductDetailProperty.lPaymentMethodNRC)
										.longValue())))) {
									throw new AfeException("ERRAFE_00478"); // throws AfeException is case number of account attached to productline are more than 1
								} else {
									iResult = FINAL_ONE;
								}

								// END ADD V5.31a
							}
						}
					}
				}
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the try
		catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				//              System.out.println(afee.strGetErrCode() + " ----------   " + afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (SQLException sqle) {
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement");
				// System.out.println("sqle.getMessage() : " + sqle.getMessage());
			}

			AfeException afee = new AfeException("ERRCOM_00008", sqle
					.getMessage()); // Unable to translate query Database access unsuccessful

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		} finally {
			try {

				// BEGIN ADD V5.10a
				// comment: closing the open resultset
				if (null != rsGetData) {
					rsGetData.close();
					rsGetData.getStatement().close();
					rsGetData = null;
				}

				// END ADD V5.10a
				// BEGIN ADD Ver 5.59a
				if (null != preparedStatement) {
					preparedStatement.close();
					preparedStatement = null;
				}

				// END ADD Ver 5.59a

				closeAFEConnection(); // closing the connection
			} catch (Exception ex) {
				AfeException afee = new AfeException("ERRCOM_00001", ex
						.getMessage()); // Database error occured

				throw afee;
			}
		}

		// Returning of the result
		return iResult;
	} // Closing Brace of the function

	public Vector vctGetCustomerAccount(Vector vctInternal_1,
			BProductDetailProperty bProductDetailProperty) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		// Begin DEL v9.01d
		// CustomerLinkRow customerLinkRow = null;
		// CustomerAccountRow customerAccountRow = null;
		// CustomerChargeTypeRow customerChargeTypeRow = null;
		// End DEL v9.01d
		long lCustomerAccountId_Current = 0;

		// Begin DEL v9.01d
		// Vector vctInternal_4 = new Vector(1);
		// End DEL v9.01d
		Vector vctInternal_5 = null;
		Vector vctInternal_6 = null;
		Vector vctInternal_7 = new Vector(1);
		Vector vctInternal_8 = new Vector(1);

		// Begin DEL v9.01d
		// Vector vctInternal_9 = new Vector(1);
		// Vector vctInternal_10 = new Vector(1);
		// End DEL v9.01d
		Vector vctCustomerAccount = new Vector(1);

		// BEGIN DELETE Ver 5.59a
		// StringBuffer sbfSql     = new StringBuffer("");         //Defining a String Buffer to make the Sql querry
		// END DELETE Ver 5.59a
		// BEGIN ADD Ver 5.59a
		String strQuery01 = null;
		String strQuery02 = null;
		PreparedStatement preparedStatement01 = null;
		PreparedStatement preparedStatement02 = null;

		// END ADD Ver 5.59a
		// Begin DEL v9.01d
		// long lUsageTypeId = 0;
		// End DEL v9.01d
		ResultSet rsGetData = null; // Making an Object of the ResultSet

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			if (makeAFEConnection()) // if connection is made
			{

				// --------------------------
				// BEGIN ADD Ver 5.59a
				strQuery01 = "SELECT CUSTOMERACCOUNTID FROM CUSTOMERCHARGETYPE WHERE OBSOLETE = 0 AND CUSTOMERPRODUCTLINEID=?";
				preparedStatement01 = gConnectAfe
						.psPrepareStatement(strQuery01);
				preparedStatement01.setLong(1,
						bProductDetailProperty.lCustomerProductLineID
								.longValue());
				strQuery02 = "SELECT CUSTOMERPRODUCTLINEID FROM CUSTOMERCHARGETYPE WHERE OBSOLETE = 0 AND CUSTOMERACCOUNTID=?";
				preparedStatement02 = gConnectAfe
						.psPrepareStatement(strQuery02);

				// END ADD Ver 5.59a
				// -----------------------------
				// getting the CustomerChargeType, CustomerLink and CustomerAccount tables

				if (null == customerChargeTypeTable) {
					customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
							.getMasterTable(string_CUSTOMERCHARGETYPE);
				}

				customerLinkTable = (CustomerLink) teleSessionMgr
						.getTable(string_CUSTOMERLINK);
				customerAccountTable = (CustomerAccount) teleSessionMgr
						.getTable("CUSTOMERACCOUNT");

				// getting the charge type id
				// Begin DEL v9.01d
				// lUsageTypeId = GAfeDescription.lGetTypeId("CHARGETYPE_USAGE");
				// End DEL v9.01d
				for (int iCounter_1 = FINAL_ZERO; iCounter_1 < vctInternal_1
						.size(); iCounter_1++) {
					lCustomerAccountId_Current = ((CustomerChargeTypeRow) vctInternal_1
							.elementAt(iCounter_1)).lCustomerAccountID;

					if (iCounter_1 == FINAL_ZERO) {

						// adding to vctCustomerAccount vector
						vctCustomerAccount
								.addElement(Long.valueOf(
										((CustomerChargeTypeRow) vctInternal_1
												.elementAt(iCounter_1)).lCustomerAccountID));
					} else {
						for (int iCounter_5 = FINAL_ZERO; iCounter_1 < vctCustomerAccount
								.size(); iCounter_5++) {
							if (((Long) vctCustomerAccount
									.elementAt(iCounter_5)).longValue() != lCustomerAccountId_Current) {
								vctCustomerAccount
										.addElement(Long.valueOf(
												((CustomerChargeTypeRow) vctInternal_1
														.elementAt(iCounter_1)).lCustomerAccountID));
							}
						}
					}

					// getting the customerproductlines attached to this customeraccount
					vctInternal_5 = (Vector) customerChargeType
							.vctSearchByCustomerAccountID(
									lCustomerAccountId_Current, FINAL_ZERO);

					// customerproductlines are available in the session
					if ((null != vctInternal_5)
							&& (vctInternal_5.size() != FINAL_ZERO)) {
						for (int iCounter_2 = FINAL_ZERO; iCounter_2 < vctInternal_5
								.size(); iCounter_2++) {

							// getting the customeraccounts attached to this customerproductlines
							vctInternal_6 = (Vector) customerChargeType
									.vctSearchByCustomerProductLineIDandObsolete(
											((CustomerChargeTypeRow) vctInternal_5
													.elementAt(iCounter_2)).lCustomerProductLineID,
											FINAL_ZERO);

							// customeraccounts are available in the session
							if ((null != vctInternal_6)
									&& (vctInternal_6.size() != FINAL_ZERO)) {
								for (int iCounter_3 = FINAL_ZERO; iCounter_3 < vctInternal_6
										.size(); iCounter_3++) {

									// checking the customeraccountids with customeraccountids in the vctCustomerAccount
									for (int iCounter_4 = FINAL_ZERO; iCounter_4 < vctCustomerAccount
											.size(); iCounter_4++) {
										if (((CustomerChargeTypeRow) vctInternal_6
												.elementAt(iCounter_3)).lCustomerAccountID != ((Long) vctCustomerAccount
												.elementAt(iCounter_4))
												.longValue()) {

											// if customeraccountid is not in the vctCustomerAccount then add it in the vctCustomerAccount
											vctCustomerAccount
													.addElement(Long.valueOf(
															((CustomerChargeTypeRow) vctInternal_5
																	.elementAt(iCounter_3)).lCustomerAccountID));
										}
									}
								}
							}

							// customeraccounts are not available in the session
							else {

								// -------------------
								// BEGIN DELETE Ver 5.59a

								/*                                                      sbfSql.setLength(0);                                                    //Initialising

								 //Find the CustomerAccountId
								 sbfSql.append("SELECT CUSTOMERACCOUNTID FROM CUSTOMERCHARGETYPE WHERE OBSOLETE = 0 AND CUSTOMERPRODUCTLINEID = ");
								 sbfSql.append(bProductDetailProperty.lCustomerProductLineID.longValue());

								 rsGetData       = gConnectAfe.rsQuery(sbfSql.toString());
								 */

								// END DELETE Ver 5.59a
								// BEGIN ADD Ver 5.59a
								rsGetData = preparedStatement01.executeQuery();

								// END ADD Ver 5.59a
								// -------------------

								if (null != rsGetData) {
									while (rsGetData.next()) {
										vctInternal_7
												.addElement(Long.valueOf(
														rsGetData
																.getLong("CUSTOMERACCOUNTID")));
									}

									// BEGIN ADD V5.10a
									// comment: to close the resultset and statement
									rsGetData.close();
									rsGetData.getStatement().close();
									rsGetData = null;

									// END ADD V5.10a
								}

								if (null != vctInternal_7) {
									for (int iCounter_3 = FINAL_ZERO; iCounter_3 < vctInternal_7
											.size(); iCounter_3++) {

										// checking the customeraccountids with customeraccountids in the vctCustomerAccount
										for (int iCounter_4 = FINAL_ZERO; iCounter_4 < vctCustomerAccount
												.size(); iCounter_4++) {
											if (((Long) vctInternal_7
													.elementAt(iCounter_3))
													.longValue() != ((Long) vctCustomerAccount
													.elementAt(iCounter_4))
													.longValue()) {

												// if customeraccountid is not in the vctCustomerAccount then add it in the vctCustomerAccount
												vctCustomerAccount
														.addElement(Long.valueOf(
																((CustomerChargeTypeRow) vctInternal_5
																		.elementAt(iCounter_3)).lCustomerAccountID));
											}
										}
									}
								}
							}
						}
					}

					// customerproductlines are not available in the session
					else {

						// ---------------------------
						// BEGIN DELETE Ver 5.59a

						/*
						 *       sbfSql.setLength(0);                                                    //Initialising
						 * //Find the CustomerAccountId
						 * sbfSql.append("SELECT CUSTOMERPRODUCTLINEID FROM CUSTOMERCHARGETYPE WHERE OBSOLETE = 0 AND CUSTOMERACCOUNTID = ");
						 * sbfSql.append(lCustomerAccountId_Current);
						 * rsGetData       = gConnectAfe.rsQuery(sbfSql.toString());
						 */

						// END DELETE Ver 5.59a
						// BEGIN ADD Ver 5.59a
						preparedStatement02.setLong(1,
								lCustomerAccountId_Current);
						rsGetData = preparedStatement02.executeQuery();

						// END ADD Ver 5.59a
						// ---------------------------
						if (null != rsGetData) {
							while (rsGetData.next()) {
								vctInternal_8.addElement(Long.valueOf(rsGetData
										.getLong("CUSTOMERPRODUCTLINEID")));
							}

							// BEGIN ADD V5.10a
							// comment: to close the resultset and statement
							rsGetData.close();
							rsGetData.getStatement().close();
							rsGetData = null;

							// END ADD V5.10a
						}

						if ((null != vctInternal_8)
								&& (vctInternal_8.size() != FINAL_ZERO)) {
							for (int iCounter_2 = FINAL_ZERO; iCounter_2 < vctInternal_8
									.size(); iCounter_2++) {

								// getting the customeraccounts attached to this customerproductlines
								vctInternal_6 = (Vector) customerChargeType
										.vctSearchByCustomerProductLineIDandObsolete(
												((CustomerChargeTypeRow) vctInternal_5
														.elementAt(iCounter_2)).lCustomerProductLineID,
												FINAL_ZERO);

								// customeraccounts are available in the session
								if ((null != vctInternal_6)
										&& (vctInternal_6.size() != FINAL_ZERO)) {
									for (int iCounter_3 = FINAL_ZERO; iCounter_3 < vctInternal_6
											.size(); iCounter_3++) {

										// checking the customeraccountids with customeraccountids in the vctCustomerAccount
										for (int iCounter_4 = FINAL_ZERO; iCounter_4 < vctCustomerAccount
												.size(); iCounter_4++) {
											if (((CustomerChargeTypeRow) vctInternal_6
													.elementAt(iCounter_3)).lCustomerAccountID != ((Long) vctCustomerAccount
													.elementAt(iCounter_4))
													.longValue()) {

												// if customeraccountid is not in the vctCustomerAccount then add it in the vctCustomerAccount
												vctCustomerAccount
														.addElement(Long.valueOf(
																((CustomerChargeTypeRow) vctInternal_5
																		.elementAt(iCounter_3)).lCustomerAccountID));
											}
										}
									}
								}

								// customeraccounts are not available in the session
								else {

									// ----------------------
									// BEGIN DELETE Ver 5.59a

									/*                                                              sbfSql.setLength(0);                                                    //Initialising

									 //Find the CustomerAccountId
									 sbfSql.append("SELECT CUSTOMERACCOUNTID FROM CUSTOMERCHARGETYPE WHERE OBSOLETE = 0 AND CUSTOMERPRODUCTLINEID = ");
									 sbfSql.append(bProductDetailProperty.lCustomerProductLineID.longValue());
									 rsGetData       = gConnectAfe.rsQuery(sbfSql.toString());
									 */

									// END DELETE Ver 5.59a
									// BEGIN ADD Ver 5.59a
									rsGetData = preparedStatement01
											.executeQuery();

									// END ADD Ver 5.59a
									// ----------------------

									if (null != rsGetData) {
										while (rsGetData.next()) {
											vctInternal_7
													.addElement(Long.valueOf(
															rsGetData
																	.getLong("CUSTOMERACCOUNTID")));
										}

										// BEGIN ADD V5.10a
										// comment: to close the resultset and statement
										rsGetData.close();
										rsGetData.getStatement().close();
										rsGetData = null;

										// END ADD V5.10a
									}

									if (null != vctInternal_7) {
										for (int iCounter_3 = FINAL_ZERO; iCounter_3 < vctInternal_7
												.size(); iCounter_3++) {

											// checking the customeraccountids with customeraccountids in the vctCustomerAccount
											for (int iCounter_4 = FINAL_ZERO; iCounter_4 < vctCustomerAccount
													.size(); iCounter_4++) {
												if (((Long) vctInternal_7
														.elementAt(iCounter_3))
														.longValue() != ((Long) vctCustomerAccount
														.elementAt(iCounter_4))
														.longValue()) {

													// if customeraccountid is not in the vctCustomerAccount then add it in the vctCustomerAccount
													vctCustomerAccount
															.addElement(Long.valueOf(
																	((CustomerChargeTypeRow) vctInternal_5
																			.elementAt(iCounter_3)).lCustomerAccountID));
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {
				GLogger.logException(afee);
				// System.out.println(afee.strGetErrCode() + " ----------   " + afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
			}

			throw afee;
		} catch (SQLException sqle) {
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement");
				// System.out.println("sqle.getMessage() : " + sqle.getMessage());
			}

			AfeException afee = new AfeException("ERRCOM_00008", sqle
					.getMessage()); // Unable to translate query Database access unsuccessful

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		} finally {

			// BEGIN ADD V5.10a
			// comment: closing open resultset
			if (null != rsGetData) {
				rsGetData.close();
				rsGetData.getStatement().close();
				rsGetData = null;
			}

			// END ADD V5.10a
			// BEGIN ADD Ver 5.59a
			if (null != preparedStatement01) {
				preparedStatement01.close();
				preparedStatement01 = null;
			}

			if (null != preparedStatement02) {
				preparedStatement02.close();
				preparedStatement02 = null;
			}

			// END ADD Ver 5.59a
			closeAFEConnection(); // closing the connection
		}

		// Returning of the String
		return vctCustomerAccount;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Save all the Product Line Related Information To the Session
	 *                                  when the customer says save all at that time in the New Mode of Operation
	 *
	 *  @param          :       Long lCustomerID
	 *
	 *  @return         :       int     -       This function will return 1 in case the fnc is successfull otherwise 0
	 * /******************************************************************************************************************************
	 */

	//  BEGIN ADD V3.40
	public long iSaveNewProductLine(Long lCustomerID) throws SQLException,
			Exception

	//  END ADD V3.40
	//  BEGIN DELETE V3.40
	//  public int iSaveNewProductLine(Long lCustomerID) throws SQLException, Exception
	//  END DELETE V3.40
	{ // Starting Braces of the Function
		GLogger.logEntry(CLASS_NAME, striSaveNewProductLine);

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		// Begin DEL v9.01d
		// int iCounterForReturn = 0;            //Local Varaible Declaration
		// End DEL v9.01d
		int iEncossStatus = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		Long lMasterCPLID = Long.valueOf(0); // Local Varaible Declaration
		Long lMasterCustomerProductID = Long.valueOf(0); // Local Varaible Declaration
		Long lNRCAccountID = Long.valueOf(0); // Local Varaible Declaration
		Long lCustomerProductIDMaster = null; // Local Varaible Declaration
		Long lCustomerProductLineIDMaster = null; // Local Varaible Declaration
		Long CustomerID = null; // Local Varaible Declaration
		Long AddressID = null; // Local Varaible Declaration
		long lProcessService = 0; // Local Varaible Declaration
		long lProcessAccess = 0; // Local Varaible Declaration

		// BEGIN ADD V7.06f
		long lProcessExtBilling = 0; // Local Varaible Declaration

		// END ADD V7.06f
		long lngCustomerProductLineID = 0; // Local Varaible Declaration
		Vector vctProductSelected = new Vector(); // Vector of BproductDetail  business objects for all selected products/packages. This is to populate lower grid on the product property screen.

		// BEGIN ADD V5.10a
		// comment: removed from within and added here
		ResultSet rsGetActionDetails = null; // Making an Object of the ResultSet

		// END ADD V5.10a
		// BEGIN ADD Ver 5.59a
		// Begin DEL v9.01d
		// String strQuery = null;
		// PreparedStatement preparedStatement = null;
		// String strActionValue = null;
		// End DEL v9.01d
		// END ADD Ver 5.59a

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b
		// BEGIN ADD ver 5.96e
		String strIdentifierNumber = null;

		// END ADD ver 5.96e
		// BEGIN ADD V 7.04e
		HashMap hmapPayerDetail = null;

		// END ADD V 7.04e

		//Begin DELETE v9.02h
		//Commented changes for VOD -FLEX Rating - Rel 10.1
		//Begin ADD v9.02g
		//Local Variable for RTP process creation - VoD Changes
		// long lProcessRTP = 0;

		//End   ADD v9.02g
		//End DELETE v9.02h

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		if (makeAFEConnection()) // If the Connection is made
		{
			try {

				/** **************************************MAKING OF NEXT QUERRY************************************** */
				StringBuffer strSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry
				BProductDetailProperty bProductDetailProperty = new BProductDetailProperty();

				// Begin DEL v9.01d
				// BProductDetail bProductDetail = new BProductDetail();
				// End DEL v9.01d
				BProductRole bProductRole = new BProductRole();
				BNumber bNumber = null;
				BInternet bInternet = null;
				BIntro bIntro = null;

				if (null != teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

					// Vector for storing all the Data that is populated in the tablular form
					bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
							.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
					vctProductSelected = bProductDetailProperty.vctProductSelected; // The Lower Grid Vector
					GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
							"vctProductSelected :" + vctProductSelected);

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */

					// Begin DEL v9.01d
					// if (GAfePropertyLoader.DEBUG) {
					// System.out.println("before starting new product save");
					// System.out.println("Printing complete selected vector");
					// for (iCounter = FINAL_ZERO; iCounter < vctProductSelected.size(); iCounter++) {
					// bProductDetail = new BProductDetail();
					// bProductDetail = (BProductDetail) vctProductSelected.elementAt(iCounter);
					// System.out.println("*****STARTING************" + iCounter + "*************************");
					// System.out.println("PRODUCT ID                            : " + bProductDetail.lProductID);
					// System.out.println("lCustomerProductID            : " + bProductDetail.lCustomerProductID);
					// System.out.println("strDescription1                       : " + bProductDetail.strDescription1);
					// System.out.println("lOptionGroupID                        : " + bProductDetail.lOptionGroupID);
					// System.out.println("lOptionProductID              : " + bProductDetail.lOptionProductID);
					// System.out.println("lPriceSettingID                       : " + bProductDetail.lPriceSettingID);
					// System.out.println("iLevel                                        : " + bProductDetail.iLevel);
					// System.out.println("iInstance                             : " + bProductDetail.iInstance);
					// System.out.println("iParentInstance                       : " + bProductDetail.iParentInstance);
					// System.out.println("*****ENDING**************" + iCounter + "*************************");
					/*
					 * BProductParameter bProductParameter = null;
					 * for (int iCounter1 = FINAL_ZERO; iCounter1 < bProductDetail.vctParameters.size(); iCounter1++) {
					 *   bProductParameter = new BProductParameter();
					 *   bProductParameter = (BProductParameter) (bProductDetail.vctParameters).elementAt(iCounter1);
					 */

					/* BEGIN DELETE VER: 5.59tan */

					// System.out.println("strParameterName                  : "     +bProductParameter.strParameterName);
					// System.out.println("iParameter                                        : "     +bProductParameter.iParameter);
					// System.out.println("Vectot of Paramters                       : "     +bProductParameter.vctParameterValues);
					/* END DELETE VER: 5.59tan */

					// }
					// }
					/* BEGIN DELETE VER: 5.59tan */

					// System.out.println("End of print statement");
					/* END DELETE VER: 5.59tan */

					// }
					// End DEL v9.01d
					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					if (((GAfeDescription.strGetProperty(string_PRODUCT_TELEPHONE))
							.equals(String
									.valueOf(bProductDetailProperty.lProductID)))
							&& ((GAfeDescription.strGetProperty(string_PRODUCT_CPS))
									.equals(String
											.valueOf(bProductDetailProperty.lProductID)))) {

						// For Telephony and CPS
						String strValues = "";

						strValues = strFindProductInVectorSelected(
								bProductDetailProperty.vctProductSelected,
								Long.valueOf(GAfeDescription
										.lGetTypeId("PRODUCT_BASISDIENSTEN")));

						if (!(("").equals(strValues))
								&& (strValues.length() > FINAL_ZERO)) {
							iEncossStatus = Integer.parseInt(string_ONE);
						} // end of the if loop
					} // end of the if loop
					else if ((GAfeDescription
							.strGetProperty(string_PRODUCT_INTERNET)).equals(String
							.valueOf(bProductDetailProperty.lProductID))) {

						// For Internet
						iEncossStatus = FINAL_ZERO;
					} else {
						iEncossStatus = FINAL_ZERO;
					}

					CustomerProductLineRow customerProductLineRow = null;

					customerProductLineTable = (CustomerProductLine) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session

					if (null != customerProductLineTable) {
						customerProductLineRow = new CustomerProductLineRow();
						customerProductLineRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngCustomerProductLineID = customerProductLineRow
								.lNewNr(); // Auto Generation of the  Primary key
						customerProductLineRow.lCustomerProductLineID = lngCustomerProductLineID;
						lCustomerProductLineIDMaster = Long.valueOf(
								lngCustomerProductLineID);
						customerProductLineRow.iEncossStatus = iEncossStatus;
						customerProductLineRow.lProductID = (bProductDetailProperty.lProductID)
								.longValue(); // Adding the Product ID of each and every row
						customerProductLineRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						customerProductLineRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession

						// BEGIN ADD v5.80a
						customerProductLineRow.iRateClassID = bProductDetailProperty.iRateClassIDNew;

						// END ADD v5.80a
						// BEGIN ADD V5.96g Bill Frequency Changes
						// save bill frequency ID
						customerProductLineRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;
						GLogger
								.debug(
										CLASS_NAME,
										striSaveNewProductLine,
										"saved for customerProductLineRow.lBillFrequencyID"
												+ customerProductLineRow.lBillFrequencyID);

						// END ADD V5.96g Bill Frequency Changes

						// BEGIN ADD V5.32a
						// Comment: Changes made for MGM
						GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
								"bProductDetailProperty.lMGMCode :"
										+ bProductDetailProperty.lMGMCode);
						GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
								"lngCustomerProductLineID :"
										+ lngCustomerProductLineID);
						customerProductLineRow.lMgmCode = bProductDetailProperty.lMGMCode; // Retrieving the CreationUser from the BSession

						// END ADD V5.32a

						// Begin Add v7.05j
						customerProductLineRow.lBillCycleID = LAfe
								.lGetBillCycleId(
										null,
										bProductDetailProperty.lBillFrequencyIDNew,
										lCustomerID.longValue());
						GLogger.chkpt("lBillCycleId in CustomerProductLine: "
								+ customerProductLineRow.lBillCycleID);

						// End Add v7.05j
						customerProductLineTable
								.addUniqueRecord(customerProductLineRow); // Adding the Record in the CustomerPromotionTable

						// Put the container back into the session
						teleSessionMgr.putTable(string_CUSTOMERPRODUCTLINE,
								customerProductLineTable);
					} // end of the if loop

					bProductDetailProperty.lCustomerProductLineID = Long.valueOf(
							lngCustomerProductLineID);

					long lngCustomerPLIdentifierID = 0;
					CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

					customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

					if (null != customerProductLineTable) {
						customerProductLineIdentifierRow = new CustomerProductLineIdentifierRow();
						customerProductLineIdentifierRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngCustomerPLIdentifierID = customerProductLineIdentifierRow
								.lNewNr(); // Auto Generation of the  Primary key
						customerProductLineIdentifierRow.lCustomerPLIdentifierID = lngCustomerPLIdentifierID;
						customerProductLineIdentifierRow.lCustomerProductLineID = lngCustomerProductLineID;

						ProductRow productRow = null; // Initializing the Object Class for the Vat table

						if (null == productTable) {
							productTable = (Product) teleSessionMgr
									.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
						}

						productRow = (ProductRow) productTable
								.prSearchByProductIDandObsolete(
										bProductDetailProperty.lProductID
												.longValue(), FINAL_ZERO);

						long lProductLineIdentifierTypeID = 0;

						if (null != productRow) {
							lProductLineIdentifierTypeID = productRow.lProductLineIdentifierTypeID;
						}

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("(Save Case of CPS In CPLI) The BIntro is Number is : " + lProductLineIdentifierTypeID);
							// System.out.println("(Save Case of CPS In CPLI) The BIntro is Number is : " + teleSessionMgr.getValue("BIntro_aCProduct"));
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */

						// BEGIN DELETE V. 6.07h
						// if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_TELEPHONE && null != teleSessionMgr.getValue("BNumber_aCTel") ) {
						// END DELETE V. 6.07h
						// BEGIN ADD V. 6.07h
						// BEGIN ADD V.8.00a
						//Begin Add V9.02a   -- Added condition for FULLMObile Product
						if (((bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_TELEPHONE) || (bProductDetailProperty.lProductID
								.longValue() == GAfeDescription.PRODUCT_VON))
								|| (bProductDetailProperty.lProductID
										.longValue() == GAfeDescription.PRODUCT_MOBILE || GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
										.longValue())
								&& (null != teleSessionMgr
										.getValue("BNumber_aCTel"))) {
							//End V9.02a
							// End ADD V.8.00a
							// END ADD V. 6.07h
							bNumber = null;
							bNumber = (BNumber) teleSessionMgr
									.getValue("BNumber_aCTel");
							customerProductLineIdentifierRow.strCustomerPLIdentifierValue = bNumber.strNumber;
							customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
						}

						// BEGIN DELETE V. 6.07h
						// if ( bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_INTERNET && null != teleSessionMgr.getValue("BNumber_aCTel") ) {
						// END DELETE V. 6.07h
						// BEGIN ADD V. 6.07h
						else if (((bProductDetailProperty.lProductID
								.longValue() == GAfeDescription.PRODUCT_INTERNET))
								&& (null != teleSessionMgr
										.getValue(string_BInternet_aCProduct))) {

							// END ADD V. 6.07h
							bInternet = null;
							bInternet = (BInternet) teleSessionMgr
									.getValue(string_BInternet_aCProduct);
							customerProductLineIdentifierRow.strCustomerPLIdentifierValue = bInternet.strNewMasterLogin;
							customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
						} else if ((bProductDetailProperty.lProductID
								.longValue() == GAfeDescription.PRODUCT_CPS)
								&& (null != teleSessionMgr
										.getValue("BIntro_aCProduct"))) {
							bIntro = null;
							bIntro = (BIntro) teleSessionMgr
									.getValue("BIntro_aCProduct");

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("(Save Case of CPS In CPLI) The CPS Number is : " + bIntro.strNumber);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							customerProductLineIdentifierRow.strCustomerPLIdentifierValue = bIntro.strNumber;
							customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
						}

						// BEGIN ADD V5.71a
						else if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_ANALOGTV) {

							// BEGIN DELETE ver 5.96e
							// customerProductLineIdentifierRow.strCustomerPLIdentifierValue = "TV";
							// END DELETE ver 5.96e
							// BEGIN ADD ver 5.96e
							strIdentifierNumber = LProduct_ext
									.strGetNextIdentifierNumber(bProductDetailProperty.lProductID
											.longValue());
							customerProductLineIdentifierRow.strCustomerPLIdentifierValue = "TV"
									+ strIdentifierNumber;

							// END ADD ver 5.96e
							customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
						}

						// END ADD V5.71a
						// BEGIN ADD ver 5.96e
						else if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_CABLEACCESS) {
							strIdentifierNumber = LProduct_ext
									.strGetNextIdentifierNumber(bProductDetailProperty.lProductID
											.longValue());
							customerProductLineIdentifierRow.strCustomerPLIdentifierValue = "DROP"
									+ strIdentifierNumber;
							customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
							GLogger
									.debug(
											CLASS_NAME,
											"iSaveNewProductLine",
											"customerProductLineIdentifierRow.strCustomerPLIdentifierValue :"
													+ customerProductLineIdentifierRow.strCustomerPLIdentifierValue);
						}

						// END ADD ver 5.96e
						// BEGIN ADD V6.20a
						else if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_DIGITALTV) {
							GLogger.debug(CLASS_NAME, striSaveNewProductLine,
									"Generate Identifier for DigitalTV");
							strIdentifierNumber = LProduct_ext
									.strGetNextIdentifierNumber(bProductDetailProperty.lProductID
											.longValue());
							customerProductLineIdentifierRow.strCustomerPLIdentifierValue = "DTV"
									+ strIdentifierNumber;
							customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
							GLogger
									.debug(
											CLASS_NAME,
											striSaveNewProductLine,
											"Identifier for DigitalTV"
													+ customerProductLineIdentifierRow.strCustomerPLIdentifierValue);
						} else if (bProductDetailProperty.lProductID
								.longValue() == GAfeDescription.PRODUCT_TTV) {
							GLogger.debug(CLASS_NAME, striSaveNewProductLine,
									"Generate Identifier for TTV");
							strIdentifierNumber = LProduct_ext
									.strGetNextIdentifierNumber(bProductDetailProperty.lProductID
											.longValue());
							customerProductLineIdentifierRow.strCustomerPLIdentifierValue = "TTV"
									+ strIdentifierNumber;
							customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
							GLogger
									.debug(
											CLASS_NAME,
											striSaveNewProductLine,
											"Identifier for TTV"
													+ customerProductLineIdentifierRow.strCustomerPLIdentifierValue);
						}

						// END ADD V6.20a

						// Begin Add V7.06b
						// else if ((bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_MOBILE))
						// {
						// String strMobileNumber = (String)teleSessionMgr.getValue(GAfeConstants.MOBILENUMBER);
						// customerProductLineIdentifierRow.strCustomerPLIdentifierValue = strMobileNumber;
						// customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
						// }
						// End Add V7.06b
						customerProductLineIdentifierRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						customerProductLineIdentifierRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
						customerProductLineIdentifierTable
								.addUniqueRecord(customerProductLineIdentifierRow); // Adding the Record in the CustomerPromotionTable

						/*
						 * if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_VON)
						 *   {
						 *   CustomerProductLineIdentifierRow customerProductLineIdentifierRow1 = new CustomerProductLineIdentifierRow();
						 *
						 *   customerProductLineIdentifierRow1.iStatusInDB = Record.INSERT;                                                              // Marking the Flag for insert
						 *
						 *   long lngCustomerPLIdentifierID1 = customerProductLineIdentifierRow1.lNewNr();                                                       // Auto Generation of the  Primary key
						 *
						 *   customerProductLineIdentifierRow1.lCustomerPLIdentifierID = lngCustomerPLIdentifierID1;
						 *   customerProductLineIdentifierRow1.lCustomerProductLineID = lngCustomerProductLineID;
						 *
						 *   ProductRow productRow1 = null;                                                                              // Initializing the Object Class for the Vat table
						 *
						 *   if (null == productTable) {
						 *       productTable = (Product) teleSessionMgr.getMasterTable("PRODUCT");      // Getting the Vat table from the session
						 *   }
						 *
						 *   productRow1 = (ProductRow) productTable.prSearchByProductIDandObsolete(GAfeDescription.lGetTypeId("PRODUCT_NETPHONE"), FINAL_ZERO);
						 *
						 *   long lProductLineIdentifierTypeID1 = 0;
						 *
						 *   if (null != productRow1) {
						 *       lProductLineIdentifierTypeID1 = productRow1.lProductLineIdentifierTypeID;
						 *   }
						 *
						 *    bInternet = null;
						 *   bInternet = (BInternet) teleSessionMgr.getValue("BInternet_aCProduct");
						 *
						 *   customerProductLineIdentifierRow1.strCustomerPLIdentifierValue = bInternet.strNewMasterLogin;
						 *   customerProductLineIdentifierRow1.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID1;
						 *   customerProductLineIdentifierRow1.strModificationUser = bSession.strUserName;                                               // Retrieving the Modification from the BSession
						 *   customerProductLineIdentifierRow1.strCreationUser = bSession.strUserName;                                           // Retrieving the CreationUser from the BSession
						 *
						 *   customerProductLineIdentifierTable.addUniqueRecord(customerProductLineIdentifierRow1);                                                              // Adding the Record in the CustomerPromotionTable
						 *
						 * }
						 */

						// Put the container back into the session
						teleSessionMgr.putTable(
								string_CUSTOMERPRODUCTLINEIDENTIFIER,
								customerProductLineIdentifierTable);
					}

					lMasterCPLID = Long.valueOf(lngCustomerPLIdentifierID);

					// Begin DEL v9.01d
					// PriceSettingRow priceSettingRow = null;                                                                           // Initializing the Object Class for the CustomerProduct table
					// End DEL v9.01d
					if (null == priceSettingTable) {
						priceSettingTable = (PriceSetting) teleSessionMgr
								.getMasterTable("PRICESETTING"); // Getting the CustomerProduct table from the session
					}

					Vector vctpriceSettingRow = new Vector();

					//                  Reconciled by Sachin with Windiff
					//                  As was not present in tags
					//                  BEGIN ADD: V 3.10
					//                  Added function for fixing DEFECT id 70, Obsolete Masters
					//                                                vctpriceSettingRow      =       priceSettingTable.vctSearchByProductIDandObsolete((bProductDetailProperty.lProductID).longValue(), FINAL_ZERO);
					vctpriceSettingRow = priceSettingTable
							.vctSearchByProductIDandObsoleteandDate(
									(bProductDetailProperty.lProductID)
											.longValue(), FINAL_ZERO,
									new java.util.Date());

					//                  BEGIN ADD: V 3.10
					//                  Added function for fixing DEFECT id 70, Obsolete Masters

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					// if (GAfePropertyLoader.DEBUG) {
					// if (null != vctpriceSettingRow)
					// System.out.println("The Price Setting ID is : " + ((PriceSettingRow) vctpriceSettingRow.elementAt(FINAL_ZERO)).lPriceSettingID);
					// else
					// System.out.println("Did Not Got The Price Setting ID Of Product ID : " + bProductDetailProperty.lProductID);
					// }
					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					long lngCustomerProductID = 0;
					CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

					customerProductTable = (CustomerProduct) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

					if (null != customerProductTable) {
						customerProductRow = new CustomerProductRow();
						customerProductRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngCustomerProductID = customerProductRow.lNewNr(); // Auto Generation of the  Primary key
						lMasterCustomerProductID = Long.valueOf(
								lngCustomerProductID);
						customerProductRow.lCustomerProductID = lngCustomerProductID;
						lCustomerProductIDMaster = Long.valueOf(
								lngCustomerProductID);
						customerProductRow.lProductID = (bProductDetailProperty.lProductID)
								.longValue(); // Adding the Product ID of each and every row

						if (null != vctpriceSettingRow) {
							customerProductRow.lPriceSettingID = ((PriceSettingRow) vctpriceSettingRow
									.elementAt(FINAL_ZERO)).lPriceSettingID;
						}

						customerProductRow.lCustomerProductLineID = lngCustomerProductLineID;
						customerProductRow.lCustomerPLIdentifierID = lMasterCPLID
								.longValue();
						customerProductRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						customerProductRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession

						// BEGIN ADD V5.96g Bill Frequency Changes
						customerProductRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;
						GLogger
								.debug(
										CLASS_NAME,
										striSaveNewProductLine,
										"saved for customerProductLineRow.lBillFrequencyID"
												+ customerProductLineRow.lBillFrequencyID);

						// END ADD V5.96g Bill Frequency Changes
						customerProductTable
								.addUniqueRecord(customerProductRow); // Adding the Record in the CustomerPromotionTable

						// Put the container back into the session
						teleSessionMgr.putTable(string_CUSTOMERPRODUCT,
								customerProductTable);
					} // end of the if loop

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("Ther CustomerProductID Inserted into the Table is : " + lCustomerProductIDMaster);
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */

					/*
					 *           long    lOrderStatusTypeID = 0;
					 *
					 *       OrderStatusTypeRow  orderStatusTypeRow              = null;                                                                         // Initializing the Object Class for the PROCESS table
					 *       orderStatusType     =       (OrderStatusType)teleSessionMgr.getMasterTable("ORDERSTATUSTYPE");              // Getting the PROCESS table from the session
					 *
					 *       if( null != orderTable)
					 *       {
					 *           orderStatusTypeRow      =       new OrderStatusTypeRow();
					 *
					 *           orderStatusTypeRow.iStatusInDB                          =       Record.INSERT;                                                          // Marking the Flag for insert
					 *
					 *           lOrderStatusTypeID                                                      =       orderStatusTypeRow.lNewNr();                                                    // Auto Generation of the  Primary key
					 *           orderStatusTypeRow.lOrderStatusTypeID           =       lOrderStatusTypeID;
					 *
					 *           orderStatusTypeRow.strOrderStatusType           =       "NEW";          //Adding the Product ID of each and every row
					 *           orderStatusTypeRow.strModificationUser          =       bSession.strUserName;                                           // Retrieving the Modification from the BSession
					 *           orderStatusTypeRow.strCreationUser                      =       bSession.strUserName;                                           // Retrieving the CreationUser from the BSession
					 *
					 *           orderStatusType.addRecord(orderStatusTypeRow);                                                                                          // Adding the Record in the CustomerPromotionTable
					 *
					 *           // Put the container back into the session
					 *           teleSessionMgr.putTable("ORDERSTATUSTYPE",orderStatusType);
					 *
					 *       }
					 */
					long lngOrderID = 0;
					OrderRow orderRow = null; // Initializing the Object Class for the PROCESS table

					orderTable = (Order) teleSessionMgr.getTable(string_ORDER); // Getting the PROCESS table from the session

					if (null != orderTable) {
						orderRow = new OrderRow();
						orderRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngOrderID = orderRow.lNewNr(); // Auto Generation of the  Primary key
						orderRow.lOrderID = lngOrderID;
						orderRow.lOrderStatusTypeID = GAfeDescription
								.lGetTypeId(string_ORDERSTATUSTYPE_NEW);
						orderRow.lOrderTypeID = GAfeDescription
								.lGetTypeId("ORDERTYPE_INSTALL");
						orderRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						orderRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
						orderTable.addUniqueRecord(orderRow); // Adding the Record in the CustomerPromotionTable

						// Put the container back into the session
						teleSessionMgr.putTable(string_ORDER, orderTable);
					}

					// Begin Add V8.01b
					// Begin Add V9.01a
					if ((bProductDetailProperty.strESalesOrderNum != null)
							&& (bProductDetailProperty.lCbRefId != 0)
							&& !(bProductDetailProperty.strESalesOrderNum
									.equalsIgnoreCase("")))

					// Begin Add V9.01a
					{
						GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
								"entering iSaveNewProductLine1");

						// GLogger.debug(CLASS_NAME,striSaveNewProductLine,"Generate Identifier for DigitalTV");
						Order2OrderRef_tbRow orderRefRow = null;

						orderRefTable = (Order2OrderRef_tb) GConnectMemoryDB
								.getTable("ORDER2ORDERREF_TB");
						GLogger.debug(CLASS_NAME, "orderRefTable-->pratibha",
								orderRefTable);

						if (null != orderRefTable) {
							orderRefRow = new Order2OrderRef_tbRow();
							orderRefRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert

							// lngOrderID = orderRefRow.lNewNr();                                    // Auto Generation of the  Primary key
							orderRefRow.lOrderID = lngOrderID;
							orderRefRow.lObjectTypeID = (bProductDetailProperty.lCbRefId);
							orderRefRow.strObjectID = (bProductDetailProperty.strESalesOrderNum);
							GLogger.debug(CLASS_NAME,
									"iSaveNewProductLine-->pratibha",
									orderRefRow.strObjectID);
							GLogger.debug(CLASS_NAME,
									"iSaveNewProductLine->pratibha",
									orderRefRow.lOrderID);
							GLogger.debug(CLASS_NAME,
									"iSaveNewProductLine--pratibha",
									orderRefRow.lObjectTypeID);
							orderRefTable.addUniqueRecord(orderRefRow); // Adding the Record in the Order2OrderRef_tb Table

							// Put the container back into the session
							GConnectMemoryDB.putTable("ORDER2ORDERREF_TB",
									orderRefTable);
						}

						GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
								"exiting iSaveNewProductLine1");
					}

					// Begin End V8.01b
					Customer2OrderRow customer2OrderRow = null; // Initializing the Object Class for the PROCESS table

					customer2OrderTable = (Customer2Order) teleSessionMgr
							.getTable("CUSTOMER2ORDER"); // Getting the PROCESS table from the session

					if (null != teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct)) {

						// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
						bProductRole = (BProductRole) teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct);
						iSizeOfVector = 0;
						iSizeOfVector = bProductRole.vctProductRole.size();

						for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
							CustomerID = ((BProductRoleDetail) ((bProductRole.vctProductRole))
									.elementAt(iCounter)).lCustomerID;

							if (null != customer2OrderTable) {
								customer2OrderRow = new Customer2OrderRow();
								customer2OrderRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
								customer2OrderRow.lCustomerID = CustomerID
										.longValue(); // Auto Generation of the  Primary key
								customer2OrderRow.lOrderID = lngOrderID; // Adding the Product ID of each and every row
								customer2OrderTable
										.addUniqueRecord(customer2OrderRow); // Adding the Record in the CustomerPromotionTable
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop

					// Put the container back into the session
					teleSessionMgr.putTable("CUSTOMER2ORDER",
							customer2OrderTable);

					// BEGIN ADD ver 5.97a
					// BEGIN DELETE V1.07i

					/*
					 *                   if(GAfeDescription.PRODUCT_CABLEACCESS == bProductDetailProperty.lProductID.longValue())
					 *                   {
					 *                           vInsertInDocumentTable(lngOrderID, GAfeDescription.DOCUMENTTYPE_CABLEACCESS_BROCHURE);
					 *                   }
					 */

					// END DELETE V 1.07i
					// END ADD ver 5.97a
					// This is for a Service Kind Of Product Or Access Kind of Product
					// Begin DEL v9.01d
					// long lngProcessID = 0;
					// long lngProcessLinkID = 0;
					// long lngProcessStatusID = 0;
					// End DEL v9.01d
					int iFlagReturned1 = 0;

					// Begin DEL v9.01d
					// int iFlagReturned2 = 0;
					// End DEL v9.01d

					// BEGIN DELETE V. 6.07h
					// if ((GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE") == bProductDetailProperty.lProductID.longValue())  || (GAfeDescription.lGetTypeId("PRODUCT_INTERNET") == bProductDetailProperty.lProductID.longValue())) {
					// END DELETE V. 6.07h
					// BEGIN DEL V6.20a
					// BEGIN ADD V. 6.07h
					// if ((GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE") == bProductDetailProperty.lProductID.longValue()) || (GAfeDescription.lGetTypeId("PRODUCT_VON") == bProductDetailProperty.lProductID.longValue()) || (GAfeDescription.lGetTypeId("PRODUCT_INTERNET") == bProductDetailProperty.lProductID.longValue())) {
					// END ADD V. 6.07h
					// END DEL V6.20a
					// BEGIN ADD V6.20a
					// Begin Add v8.00a
					//Begin Add V9.02a   -- Added condition for FULLMObile Product
					if ((GAfeDescription.PRODUCT_TELEPHONE == bProductDetailProperty.lProductID
							.longValue())
							|| (GAfeDescription.PRODUCT_VON == bProductDetailProperty.lProductID
									.longValue())
							|| (GAfeDescription.PRODUCT_INTERNET == bProductDetailProperty.lProductID
									.longValue())
							|| (GAfeDescription.PRODUCT_MOBILE == bProductDetailProperty.lProductID
									.longValue())
							|| (GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
									.longValue())

					//End V9.02a
					// Begin Delete V7.06d
					// Deleted since no Provisioning Services & Access required in Install Order for Digital TV
					// || ((GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID.longValue()) && bCheckIDTVFromBProductDetailProperty(bProductDetailProperty))
					// End Delete V7.06d
					) // End Add v8.00a
					{

						// END ADD V6.20a
						GLogger.debug(CLASS_NAME, striSaveNewProductLine,
								"Process for PRODUCT_DIGITALTV ");
						iFlagReturned1 = iFindProductTypeinVectorForService(
								bProductDetailProperty.vctProductSelected,
								Long.valueOf(GAfeDescription
										.lGetTypeId("PRODUCTTYPE_SERVICE")));

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("iFlagReturned1 - " + iFlagReturned1);
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						if (FINAL_ONE == iFlagReturned1) {

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("Entering PROCESSTYPE_PROVISIONINGSERVICES 1 ");
							}

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */
							lProcessService = lngInsertInProcessTables(
									lngCustomerProductLineID,
									GAfeDescription
											.lGetTypeId("PROCESSTYPE_PROVISIONINGSERVICES"),
									GAfeDescription
											.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
									lngOrderID);
						}

						lProcessAccess = lngInsertInProcessTables(
								lngCustomerProductLineID,
								GAfeDescription
										.lGetTypeId("PROCESSTYPE_PROVISIONINGACCESS"),
								GAfeDescription
										.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
								lngOrderID);
						
						//Rel 13.3 HUW - for mobile install order, add HUW provisioning process
						if (GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
						.longValue()){
							
							vInsertInProcessTables(lngCustomerProductLineID,
									GAfeDescription.PROCESSTYPE_HUWPROVISIONING,
									GAfeDescription
											.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
									lngOrderID);
							
						}
					} // end of the if loop
					else {
						GLogger.debug(CLASS_NAME, striSaveNewProductLine,
								"Process Not added for PRODUCT_DIGITALTV ");
					}

					GLogger.debug(CLASS_NAME, striSaveNewProductLine,
							"Billing Process for PRODUCT_DIGITALTV ");

					// BEGIN ADD V7.04d
					// Comment: Saving the New RTP Billing Process.
					if (GAfeDescription.PRODUCT_INTERNET == bProductDetailProperty.lProductID
							.intValue()) {
						vInsertInProcessTables(lngCustomerProductLineID,
								GAfeDescription
										.lGetTypeId("PROCESSTYPE_RTPBILLING"),
								GAfeDescription
										.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
								lngOrderID);
					}					
					// END ADD V7.04d
					// For Activation in Billing Part
					vInsertInProcessTables(
							lngCustomerProductLineID,
							GAfeDescription
									.lGetTypeId("PROCESSTYPE_ACTIVATIONINBILLING"),
							GAfeDescription.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
							lngOrderID);

					// Begin Add V7.06d
					// Create 'Interactive Order' for Digital TV
					if (((GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
							.longValue()) && bCheckIDTVFromBProductDetailProperty(bProductDetailProperty))) {
						if (null != orderTable) {
							orderRow = new OrderRow();
							orderRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
							lngOrderID = orderRow.lNewNr(); // Auto Generation of the  Primary key
							orderRow.lOrderID = lngOrderID;
							orderRow.lOrderStatusTypeID = GAfeDescription
									.lGetTypeId(string_ORDERSTATUSTYPE_NEW);
							orderRow.lOrderTypeID = GAfeDescription
									.lGetTypeId("ORDERTYPE_INTERACTIVE");
							orderRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
							orderRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
							orderTable.addUniqueRecord(orderRow); // Adding the Record in the CustomerPromotionTable

							// Put the container back into the session
							teleSessionMgr.putTable(string_ORDER, orderTable);
						}

						// Begin Add V8.01b
						// Begin Add V9.01a
						if ((bProductDetailProperty.strESalesOrderNum != null)
								&& (bProductDetailProperty.lCbRefId != 0)
								&& !(bProductDetailProperty.strESalesOrderNum
										.equalsIgnoreCase("")))

						// Begin Add V9.01a
						{
							GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
									"entering iSaveNewProductLine2 method");

							// GLogger.debug(CLASS_NAME,striSaveNewProductLine,"Generate Identifier for DigitalTV");
							Order2OrderRef_tbRow orderRefRow = null;

							orderRefTable = (Order2OrderRef_tb) GConnectMemoryDB
									.getTable("ORDER2ORDERREF_TB");

							if (null != orderRefTable) {
								orderRefRow = new Order2OrderRef_tbRow();
								orderRefRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert

								// lngOrderID = orderRefRow.lNewNr();                                    // Auto Generation of the  Primary key
								orderRefRow.lOrderID = lngOrderID;
								orderRefRow.lObjectTypeID = (bProductDetailProperty.lCbRefId);
								orderRefRow.strObjectID = (bProductDetailProperty.strESalesOrderNum);
								GLogger.debug(CLASS_NAME,
										"iSaveNewProductLine2",
										orderRefRow.strObjectID);
								GLogger.debug(CLASS_NAME,
										"iSaveNewProductLine2",
										orderRefRow.lOrderID);
								GLogger.debug(CLASS_NAME,
										"iSaveNewProductLine2",
										orderRefRow.lObjectTypeID);
								orderRefTable.addUniqueRecord(orderRefRow); // Adding the Record in the Order2OrderRef_tb Table

								// Put the container back into the session
								GConnectMemoryDB.putTable("ORDER2ORDERREF_TB",
										orderRefTable);
							}

							GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
									"exiting iSaveNewProductLine2");
						}

						// Begin End V8.01b
						customer2OrderTable = (Customer2Order) teleSessionMgr
								.getTable("CUSTOMER2ORDER"); // Getting the CUSTOMER2ORDER table from the session

						if (null != teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct)) {

							// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
							bProductRole = (BProductRole) teleSessionMgr
									.getValue(string_BProductDetailRole_aCProduct);
							iSizeOfVector = bProductRole.vctProductRole.size();

							for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
								CustomerID = ((BProductRoleDetail) ((bProductRole.vctProductRole))
										.elementAt(iCounter)).lCustomerID;

								if (null != customer2OrderTable) {
									customer2OrderRow = new Customer2OrderRow();
									customer2OrderRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
									customer2OrderRow.lCustomerID = CustomerID
											.longValue(); // Auto Generation of the  Primary key
									customer2OrderRow.lOrderID = lngOrderID; // Adding the Product ID of each and every row
									customer2OrderTable
											.addUniqueRecord(customer2OrderRow); // Adding the Record in the customer2OrderTable
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop

						// Put the container back into the session
						teleSessionMgr.putTable("CUSTOMER2ORDER",
								customer2OrderTable);

						// Check for Service type Products
						iFlagReturned1 = iFindProductTypeinVectorForService(
								bProductDetailProperty.vctProductSelected,
								Long.valueOf(GAfeDescription
										.lGetTypeId("PRODUCTTYPE_SERVICE")));

						if (FINAL_ONE == iFlagReturned1) {

							// Create Proces -- 'Provisioning Services'
							lProcessService = lngInsertInProcessTables(
									lngCustomerProductLineID,
									GAfeDescription
											.lGetTypeId("PROCESSTYPE_PROVISIONINGSERVICES"),
									GAfeDescription
											.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
									lngOrderID);
						}

						// Create Process -- 'Provisioning Access'
						lProcessAccess = lngInsertInProcessTables(
								lngCustomerProductLineID,
								GAfeDescription
										.lGetTypeId("PROCESSTYPE_PROVISIONINGACCESS"),
								GAfeDescription
										.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
								lngOrderID);

						//BEGIN Delete 9.02h
						//Reverted changes for VOD -Flex Rating -Rel 10.1
						//BEGIN Add 9.02g
						//Create RTP Process -- to be inserted next to external Billing
						//lProcessRTP = lngInsertInProcessTables(lngCustomerProductLineID,
						// GAfeDescription.PROCESSTYPE_RTP,
						// GAfeDescription.PROCESSSTATUSTYPE_NEW, lngOrderID);
						//END  Add 9.02g
						//END Delete 9.02h

						// BEGIN ADD V7.06f
						GLogger.chkpt("LORDER:lngInsertInProcessTables:starts");
						lProcessExtBilling = lngInsertInProcessTables(
								lngCustomerProductLineID,
								GAfeDescription
										.lGetTypeId("PROCESSTYPE_EXTERNALBILLING"),
								GAfeDescription
										.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
								lngOrderID);
						GLogger.chkpt("LORDER:lngInsertInProcessTables:Ends");
						GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
								"lProcessExtBilling : " + lProcessExtBilling);

						// END ADD V7.06f

						// Create Process -- 'Activation in Billing'
						vInsertInProcessTables(
								lngCustomerProductLineID,
								GAfeDescription
										.lGetTypeId("PROCESSTYPE_ACTIVATIONINBILLING"),
								GAfeDescription
										.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
								lngOrderID);
					}

					// End Add V7.06d

					//Begin Add V9.02a   -- Added condition for FULLMObile Product
					//For all type of line, check if RTP flag is true then Call insertNewRTPProcess
					if (GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
							.longValue()) {
						boolean isProdRTPable = false;
						isProdRTPable = checkIsProdRTPable(bProductDetailProperty.vctProductSelected);
						if (isProdRTPable) {
							vInsertInProcessTables(lngCustomerProductLineID,
									GAfeDescription.PROCESSTYPE_RTP,
									GAfeDescription.PROCESSSTATUSTYPE_NEW,
									lngOrderID);
							//insertNewRTPProcess(lngCustomerProductLineID , bSession.strUserName);
						}
					}
					//End Add V9.02a

					// Checking for NP Telephony
					if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
						bNumber = new BNumber();
						bNumber = (BNumber) teleSessionMgr
								.getValue("BNumber_aCTel");

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("bNumber.strKindOfNumber " + bNumber.strKindOfNumber);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */

						// BEGIN DELETE V 5.43a
						// Comment:Changes for the NP Related Code
						/*
						 * if(("NP").equalsIgnoreCase(bNumber.strKindOfNumber))
						 * {
						 *   /****************STARTING*****************TO PRINT THE DATA
						 *   if(GAfePropertyLoader.DEBUG)
						 *   {
						 *       System.out.println("Inserting in Process Tables for NP Case");
						 *   }
						 *   /****************ENDING*******************TO PRINT THE DATA
						 *
						 *   //Changed for the NP - Aging Number Flow
						 *   if (!((bNumber.strDonor).equalsIgnoreCase(GAfeDescription.strGetProperty("DONORID_X"))))
						 *   {
						 *       // Pass lorderId
						 *       vInsertInProcessTables(lngCustomerProductLineID, GAfeDescription.lGetTypeId("PROCESSTYPE_NP"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lngOrderID);
						 *   }
						 *
						 * }//end of the if loop
						 */

						// END DELETE V 5.43a
						// BEGIN ADD V 5.43a
						// Comment:Changes for the NP Related Code
						//Begin Mod V9.02a   -- Added condition for FULLMOBILE Product
						if (GAfeDescription.PRODUCT_MOBILE != bProductDetailProperty.lProductID
								.longValue())
						//End Mod V9.02a
						{
							if ((GAfeConstants.NP)
									.equalsIgnoreCase(bNumber.strKindOfNumber)) {

								// BEGIN DELETE V 5.46a
								// if (!((bNumber.strCurrentOwner).equalsIgnoreCase(GAfeConstants.TELE)))
								// END DELETE V 5.46a
								// BEGIN ADD V 5.46a
								if ((null != bNumber.strCurrentOwner)
										&& (!((GAfeConstants.TELE)
												.equalsIgnoreCase(bNumber.strCurrentOwner))))

								// END ADD V 5.46a
								{
									vInsertInProcessTables(
											lngCustomerProductLineID,
											GAfeDescription.PROCESSTYPE_NP,
											GAfeDescription.PROCESSSTATUSTYPE_NEW,
											lngOrderID);
								}
							}
						}

						// END ADD V 5.43a

						// System.out.println("Testing for CR950: Inside LProduct.iSaveNewLine Intercept Option = " + bNumber.iIntercept);
						//	if (bNumber.iIntercept == FINAL_ONE) {

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */

							/**
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("Inserting in Process Tables and Document Tables for Intercept = 1 Case");
							 * }
							 */

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */

							// BEGIN ADD V4.10e
							// comment: If disconnect option is chosen. An entry has to be made in the Document table associated with the Install Oder
							//                        	//Begin Add V9.02a   -- Added condition for FULLMOBILE Product
							/*
							if (GAfeDescription.PRODUCT_MOBILE != bProductDetailProperty.lProductID
									.longValue()
									&& GAfeDescription.PRODUCT_FULLMOBILE != bProductDetailProperty.lProductID
											.longValue())
							//END V9.02a
							{
								vInsertInDocumentTable(
										lngOrderID,
										GAfeDescription
												.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O"));
							}

							// END ADD V4.10e
						} // end of the if loop
						
						else if (bNumber.iIntercept == 2) {

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */

							/**
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("Inserting in Process Tables and Document Tables for Intercept = 2 Case");
							 * }
							 */

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */

							// BEGIN ADD V4.10e
							// comment: There will be entries in the document tables corresponding to the Intercept and Disconnect options
							// vInsertInDocumentTable(lngOrderID, GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_W"));
						//	vInsertInDocumentTable(lngOrderID, GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O"));

							// END ADD V4.10e
						//} // end of the if loop


						if (bNumber.bAging) {
							customerProductLineIdentifierRow = null; // Initializing the Object Class for the customerProductLineIdentifier table
							customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
									.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

							Vector vctObjCPIInternal = new Vector();

							vctObjCPIInternal = customerProductLineIdentifierTable
									.vctSearchBystrCustomerPLIdentifierValueandObsolete(
											bNumber.strNumber, FINAL_ONE);

							if (null != vctObjCPIInternal) {
								for (iCounter = FINAL_ZERO; iCounter < vctObjCPIInternal
										.size(); iCounter++) {
									customerProductRow = null; // Initializing the Object Class for the CustomerProduct table
									customerProductTable = (CustomerProduct) teleSessionMgr
											.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

									Vector vctobjCPInternal = new Vector();

									vctobjCPInternal = customerProductTable
											.vctSearchByCustomerProductLineIDandProductIDandObsolete(
													((CustomerProductLineIdentifierRow) vctObjCPIInternal
															.elementAt(iCounter)).lCustomerProductLineID,
													GAfeDescription
															.lGetTypeId("PRODUCT_CNA"),
													FINAL_ZERO);

									// BEGIN ADD V4.10c
									// comment: inserting Deactivate CNA only if required
									if ((null == vctobjCPInternal)
											|| (vctobjCPInternal.size() == 0)) {

										GLogger.chkpt("Inside if statement ");	// do nothing
									} else {

										// BEGIN ADD V5.34b
										// comment: getting today's date
										Date dtSysdate = new Date();

										// END ADD V5.34b

										for (iCounter = FINAL_ZERO; iCounter < vctobjCPInternal
												.size(); iCounter++) {

											// BEGIN DELETE V5.34b
											// comment: we need to attach this process with the old line
											// vInsertInProcessTables(lngCustomerProductLineID, GAfeDescription.lGetTypeId("PROCESSTYPE_DEACTIVATECNA"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lngOrderID);
											// END DELETE V5.34b
											// BEGIN ADD V5.34b
											// comment: attaching process for deactivating CNA to the old lines, if the CNA product is not deactivated already.
											if ((((CustomerProductRow) vctobjCPInternal
													.elementAt(iCounter)).dtDeactivationDate)
													.after(dtSysdate)) {
												long lProcID = 0;

												lProcID = lngInsertInProcessTables(
														((CustomerProductRow) vctobjCPInternal
																.elementAt(iCounter)).lCustomerProductLineID,
														GAfeDescription
																.lGetTypeId(string_PROCESSTYPE_DEACTIVATECNA),
														GAfeDescription
																.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
														lngOrderID);
												customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
														.getTable(string_CUSTOMERPRODUCTSTATUS);

												CustomerProductStatusRow customerProductStatusRow = new CustomerProductStatusRow();

												customerProductStatusRow.lCustomerProductStatusID = customerProductStatusRow
														.lNewNr();
												customerProductStatusRow.lCustomerProductID = ((CustomerProductRow) vctobjCPInternal
														.elementAt(iCounter)).lCustomerProductID;
												customerProductStatusRow.lProcessID = lProcID;
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_DELETE");
												customerProductStatusRow.lComponentStatusID = GAfeDescription
														.lGetTypeId("COMPONENTSTATUS_NEW");
												customerProductStatusRow.strCreationUser = bSession.strUserName;
												customerProductStatusRow.strModificationUser = bSession.strUserName;
												customerProductStatusRow.iObsolete = FINAL_ZERO;
												customerProductStatusRow.iStatusInDB = Record.INSERT;
												customerProductStatusTable
														.addUniqueRecord(customerProductStatusRow);
												teleSessionMgr
														.putTable(
																string_CUSTOMERPRODUCTSTATUS,
																customerProductStatusTable);
											}

											// END ADD V5.34b
										} // end of the for loop
									}

									// END ADD V4.10c

									// BEGIN DELETE V4.10c
									// comment: this has been incorporated in the new manner above

									/*
									 * for (iCounter = FINAL_ZERO; iCounter < vctobjCPInternal.size(); iCounter++)
									 * {
									 *
									 *   vInsertInProcessTables(lngCustomerProductLineID, GAfeDescription.lGetTypeId("PROCESSTYPE_DEACTIVATECNA"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lngOrderID);
									 *
									 * }//end of the for loop
									 */

									// END DELETE V4.10c
								} // end of the for loop
							}
						} // end of the if loop
					} // end of the if loop
					else if (null != teleSessionMgr
							.getValue("BIntro_aCProduct")) {
						long lProcessID = 0;

						lProcessID = lngInsertInProcessTables(
								lngCustomerProductLineID, GAfeDescription
										.lGetTypeId("PROCESSTYPE_CPS"),
								GAfeDescription
										.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
								lngOrderID);

						long lngCustomerProductStatusID = 0;
						CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

						customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

						if (null != customerProductStatusTable) {
							customerProductStatusRow = new CustomerProductStatusRow();
							customerProductStatusRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
							lngCustomerProductStatusID = customerProductStatusRow
									.lNewNr(); // Auto Generation of the  Primary key
							customerProductStatusRow.lCustomerProductStatusID = lngCustomerProductStatusID;
							customerProductStatusRow.lProcessID = lProcessID; // Adding the Product ID of each and every row
							customerProductStatusRow.lComponentStatusID = GAfeDescription
									.lGetTypeId("COMPONENTSTATUS_NEW");
							customerProductStatusRow.lComponentActionID = GAfeDescription
									.lGetTypeId("COMPONENTACTION_ADD");
							customerProductStatusRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
							customerProductStatusRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
							customerProductStatusRow.lCustomerProductID = lCustomerProductIDMaster
									.longValue();
							customerProductStatusTable
									.addUniqueRecord(customerProductStatusRow); // Adding the Record in the CustomerPromotionTable

							// Put the container back into the session
							teleSessionMgr.putTable(string_CUSTOMERPRODUCTSTATUS,
									customerProductStatusTable);
						}
					}

					// If it is not CPS Product Line ID
					BProductRoleDetail bProductRoleDetail = new BProductRoleDetail();

					if (null == teleSessionMgr.getValue("BIntro_aCProduct")) {
						if (null != teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct)) {

							// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
							bProductRole = (BProductRole) teleSessionMgr
									.getValue(string_BProductDetailRole_aCProduct);

							// Done
							// Get this addressid from bProductRoleDetail.lAddressId for the bProductRoleDetail.lRoleTypeId = ROLETYPE_USER
							for (int iAddCount = FINAL_ZERO; iAddCount < bProductRole.vctProductRole
									.size(); iAddCount++) {
								bProductRoleDetail = new BProductRoleDetail();
								bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
										.elementAt(iAddCount);

								if ((GAfeDescription
										.strGetProperty(string_ROLETYPE_USER))
										.equalsIgnoreCase(String
												.valueOf(bProductRoleDetail.lRoleTypeID))) {
									AddressID = bProductRoleDetail.lAddressID;
								} // end of the if loop
							} // end of the for loop

							// SELECT ACTIONID FROM ACTION WHERE ACTIONVALUE = LADDRESSID
							ActionRow actionRow = null; // Initializing the Object Class for the Vat table

							actionTable = (Action) teleSessionMgr
									.getTable(string_ACTION); // Getting the Vat table from the session

							Vector vctActionInternal = new Vector();

							vctActionInternal = actionTable
									.vctSearchBylObjectIDandObsolete(AddressID
											.longValue(), FINAL_ZERO);

							if ((null != vctActionInternal)
									&& (FINAL_ZERO != vctActionInternal.size())) {
								for (iCounter = FINAL_ZERO; iCounter < vctActionInternal
										.size(); iCounter++) {
									actionRow = new ActionRow(); // Initializing the Object Class for the Vat table
									actionRow = ((ActionRow) vctActionInternal
											.elementAt(iCounter));

									// Done
									// . Do it as mentioned in the spec. Only update the ActionRow with OrderId as objectId
									if (null != actionTable) {
										if (null != actionRow) {

											// Updating All the Values Over here
											actionRow.lObjectID = lngOrderID;
											actionRow.lObjectTypeID = GAfeDescription
													.lGetTypeId("OBJECTTYPE_ORDER");

											if ((actionRow.iStatusInDB == Record.VIEW)
													|| (actionRow.iStatusInDB == Record.UPDATE)) {
												actionRow.iStatusInDB = Record.UPDATE;
												actionTable
														.updateRecord(actionRow);
											}

											// when iStatusInDB is equal to Record.INSERT
											else {
												actionTable
														.updateRecord(actionRow);
											} // end of the if else if loop
										} // end of the if loop
									} // end of the if loop

									// Put the container back into the session
									teleSessionMgr.putTable(string_ACTION,
											actionTable);
								} // end of the for loop
							} // end of the if loop
							else {

								// BEGIN DELETE V5.10a
								// comment: putting it in the declaration segment of function
								// ResultSet rsGetActionDetails  = null; // Making an Object of the ResultSet
								// END DELETE V5.10a
								strSql.setLength(0); // Initialising

								// BEGIN DELETE V 5.70b
								// /* Making the Querry Statement */
								// strSql.append("SELECT * FROM ACTION WHERE ACTIONVALUE = '").append(AddressID);
								// strSql.append("' AND OBSOLETE = ").append(FINAL_ZERO);
								// /****************STARTING*****************TO PRINT THE DATA********************************************/
								// if(GAfePropertyLoader.DEBUG)
								// {
								// /* Printing out the Querry made prior to its firing */
								// System.out.println("The Querry is : " + strSql.toString());
								// }
								// /****************ENDING*******************TO PRINT THE DATA*******************************************/
								// /* Firing the Querry and taking the Result as a ResultSet */
								// rsGetActionDetails = gConnectAfe.rsQuery(strSql.toString());
								// END DELETE V 5.70b
								// BEGIN ADD V 5.70b
								strSql
										.append("SELECT * FROM ACTION WHERE ACTIONVALUE = ? AND OBSOLETE = ? ");
								psSelect = gConnectAfe
										.psPrepareStatement(strSql.toString());
								psSelect
										.setString(1, String.valueOf(AddressID));
								psSelect.setLong(2, FINAL_ZERO);
								rsGetActionDetails = psSelect.executeQuery();

								// END ADD V 5.70b

								if (null != rsGetActionDetails) {
									while (rsGetActionDetails.next()) {
										if (null != actionTable) {
											actionRow = new ActionRow();
											actionRow.iStatusInDB = Record.UPDATE; // Marking the Flag for insert
											actionRow.lActionID = rsGetActionDetails
													.getLong("ACTIONID");
											actionRow.iNumberOfCalls = rsGetActionDetails
													.getInt("NUMBEROFCALLS");
											actionRow.lCustomerID = rsGetActionDetails
													.getLong("CUSTOMERID");
											actionRow.lActionTypeID = rsGetActionDetails
													.getLong("ACTIONTYPEID");
											actionRow.lActionStatusID = rsGetActionDetails
													.getLong("ACTIONSTATUSID");
											actionRow.lActionContactID = rsGetActionDetails
													.getLong("ACTIONCONTACTID");
											actionRow.lActionReasonID = rsGetActionDetails
													.getLong("ACTIONREASONID");
											actionRow.lObjectTypeID = GAfeDescription
													.lGetTypeId("OBJECTTYPE_ORDER");
											;
											actionRow.lObjectID = lngOrderID;
											actionRow.strPhone = rsGetActionDetails
													.getString("PHONE");
											actionRow.strFaxNumber = rsGetActionDetails
													.getString("FAXNUMBER");
											actionRow.strEmail = rsGetActionDetails
													.getString("EMAIL");
											actionRow.strActionValue = rsGetActionDetails
													.getString("ACTIONVALUE");
											actionRow.strAddress = rsGetActionDetails
													.getString(string_ADDRESS);
											actionRow.strRemarks = rsGetActionDetails
													.getString("REMARKS");
											actionRow.strTitle = rsGetActionDetails
													.getString("TITLE");
											actionRow.dtActionDate = rsGetActionDetails
													.getDate("ACTIONDATE");
											actionRow.dtTimeFrom = rsGetActionDetails
													.getDate("TIMEFROM");
											actionRow.dtTimeTo = rsGetActionDetails
													.getDate("TIMETO");
											actionRow.dtActionCloseDate = rsGetActionDetails
													.getDate("ACTIONCLOSEDATE");
											actionRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession

											// actionRow.strCreationUser         =       bSession.strUserName;                                           // Retrieving the CreationUser from the BSession
											actionTable
													.addUniqueRecord(actionRow); // Adding the Record in the CustomerPromotionTable
										} // end of the if loop
									}
								}

								// BEGIN ADD V5.10a
								// comment: closing the open resultset
								if (null != rsGetActionDetails) {
									rsGetActionDetails.close();

									// BEGIN DELETE V 5.70b
									// rsGetActionDetails.getStatement().close();
									// END DELETE V 5.70b
									rsGetActionDetails = null;
								}

								// END ADD V5.10a

								// Put the container back into the session
								teleSessionMgr.putTable(string_ACTION, actionTable);
							}
						} // end of the if loop
					} // end of the if loop

					// Calling the Main function that will Create Account for the CustomerProductLineID
					GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
							"Creating the account lMasterCustomerProductID :"
									+ lMasterCustomerProductID);

					// BEGIN ADD V 7.04c --FOR DATA-QUALITY
					// HERE A NEW CHECK WILL BE DONE TO CHECK WHETHRE USER HAS COME FROM THE ACCOUNT TABE OR NOT /
					// IF YES THEN CALL LPRODUCT_EXT.lCreateAccountForCPLIDNewLogic
					// ELSE CONTINUE WITHTHE EXISTING LOGIC.SIMILAR CHECKS WILL BE DONE IN ISAVEOLDPRODUCTLINE.
					BAccount objBAccount = null;

					objLProduct_ext = new LProduct_ext(teleSessionMgr, bSession);

					// BEGIN DELETE V 7.04e
					// objBAccount = (BAccount)teleSessionMgr.getValue("BAccount_session"); //todo
					// END DELETE V 7.04e
					// BEGIN ADD V 7.04e
					Long lCustomerAcctId = null;

					/*
					 * if(null == hmapPayerDetail)
					 * {
					 *   hmapPayerDetail = new HashMap(1);
					 * }
					 */

					// same as in old
					GLogger.chkpt("before fetching hmapPayerDetail");
					hmapPayerDetail = (HashMap) teleSessionMgr
							.getValue(GAfeConstants.ORDER_INTAKE_ACCOUNT_ALL_PAYERS_DETAILS);

					if (null != hmapPayerDetail) {
						GLogger.chkpt("inside if hmapPayerDetail not null");
						lCustomerAcctId = (Long) teleSessionMgr
								.getValue(GAfeConstants.ORDER_INTAKE_ACCOUNT_SELECTED_CUSTACCID);
						GLogger.chkpt("lCustomerAcctId" + lCustomerAcctId);
						objBAccount = (BAccount) hmapPayerDetail
								.get(lCustomerAcctId);
					}

					if (null != objBAccount) {
						GLogger.chkpt("if bAccount not null");
						lNRCAccountID = objLProduct_ext
								.lCreateAccountForCPLIDNewLogic(
										bProductDetailProperty,
										lMasterCustomerProductID,
										lCustomerProductLineIDMaster,
										objBAccount);
					}

					// END ADD V 7.04e
					// BEGIN DELETE V 7.04e

					/*
					 *  if(null != objBAccount)
					 * {
					 *  lNRCAccountID = objLProduct_ext.lCreateAccountForCPLIDNewLogic(bProductDetailProperty,lMasterCustomerProductID,lCustomerProductLineIDMaster,objBAccount);
					 * }
					 */

					// END DELETE V 7.04e
					else {

						// END ADD V 7.04c --FOR DATA-QUALITY
						GLogger
								.chkpt("before calling lngMainCreateAccountForCustomerProductLineID");
						lNRCAccountID = lngMainCreateAccountForCustomerProductLineID(
								bProductDetailProperty,
								lMasterCustomerProductID,
								lCustomerProductLineIDMaster);

						// BEGIN ADD V 7.04c
					}

					// END ADD V 7.04c

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("The lNRCAccountID is : " + lNRCAccountID);
					}

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */

					// Calling the Main Recursive Function Over here
					Date dtActivationDate = null;

					// Begin Delete V7.06h
					// Begin Delete V7.06f
					// vdMainRFncOfNewOrOldSaveOfProductLine(bProductDetailProperty, lMasterCustomerProductID, FINAL_ONE, FINAL_ONE, Long.valueOf(lProcessService), Long.valueOf(lProcessAccess), Long.valueOf(lngOrderID), lNRCAccountID, dtActivationDate);
					// End Delete V7.06f
					// Begin Add V7.06f
					vdMainRFncOfNewOrOldSaveOfProductLine(
							bProductDetailProperty, lMasterCustomerProductID,
							FINAL_ONE, FINAL_ONE, Long.valueOf(lProcessService),
							Long.valueOf(lProcessAccess), Long.valueOf(lngOrderID),
							lNRCAccountID, dtActivationDate, Long.valueOf(
									lProcessExtBilling));

					// End Add V7.06f
					// End Delete V7.06h
					// Begin Add V7.06h
					// lParentProductID = (bProductDetailProperty.lProductID).longValue();
					// GLogger.chkpt("In method iSaveNewProductLine lParentProductID : " + lParentProductID);
					// vdMainRFncOfNewOrOldSaveOfProductLine(bProductDetailProperty, lMasterCustomerProductID, FINAL_ONE, FINAL_ONE, Long.valueOf(lProcessService), Long.valueOf(lProcessAccess), Long.valueOf(lngOrderID), lNRCAccountID, dtActivationDate,lParentProductID);
					// End Add V7.06h
					//begin add v10.01a
					GLogger.chkpt("TTV Case>>>");
					if (GAfeDescription.PRODUCT_TTV == bProductDetailProperty.lProductID.intValue())
					{
						GLogger.chkpt("TTV Case0000000>>>");
						
						long lProcID = lngInsertInProcessTables(
								 lngCustomerProductLineID,
										GAfeDescription.PROCESSTYPEID_PAIRING,
								GAfeDescription.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
								lngOrderID);
											 
						GLogger.chkpt("TTV Case2222>>>");
						customerProductTable = (CustomerProduct) teleSessionMgr.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
						
						if(customerProductTable != null)
						{
							GLogger.chkpt("TTV Case11111>>>");
							Vector vctTTV = customerProductTable
							.vctSearchByCustomerProductLineIDandProductIDandObsolete(
									lngCustomerProductLineID,
									GAfeDescription.TTV_BASIC_PACK_PRODUCTID,
									FINAL_ZERO);
						
							if(null != vctTTV && vctTTV.size()>0)
							{
								GLogger.chkpt("TTV Case3333>>>");							
								customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCTSTATUS);
								GLogger.chkpt("TTVlProcID>>>"+lProcID);
								CustomerProductStatusRow customerProductStatusRow = new CustomerProductStatusRow();
	
								customerProductStatusRow.lCustomerProductStatusID = customerProductStatusRow
										.lNewNr();
								customerProductStatusRow.lCustomerProductID = ((CustomerProductRow) vctTTV
										.elementAt(0)).lCustomerProductID;
								customerProductStatusRow.lProcessID = lProcID;
								customerProductStatusRow.lComponentActionID = GAfeDescription
										.lGetTypeId("COMPONENTACTION_ADD");
								customerProductStatusRow.lComponentStatusID = GAfeDescription
										.lGetTypeId("COMPONENTSTATUS_NEW");
								customerProductStatusRow.strCreationUser = bSession.strUserName;
								customerProductStatusRow.strModificationUser = bSession.strUserName;
								customerProductStatusRow.iObsolete = FINAL_ZERO;
								customerProductStatusRow.iStatusInDB = Record.INSERT;
								GLogger.chkpt("TTV customerProductStatusRow >>"+customerProductStatusRow);
								customerProductStatusTable.addUniqueRecord(customerProductStatusRow);
								teleSessionMgr.putTable(string_CUSTOMERPRODUCTSTATUS,customerProductStatusTable);
							
							}
						}
					}
					//end add v10.01a
					// Begin Version - 3.29 Changes For putting the process id's of domain with domain linked mailalaises and url's
					bProductDetailProperty = bOPutFlag_NForRelatedDomainProcesses(bProductDetailProperty);

					// Begin Version - 3.29 Changes For putting the process id's of domain with domain linked mailalaises and url's

					if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) // For Internet Kind of Product
					{

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("Inside internet specific function : ");
							// System.out.println("Calling domain process status part : ");
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						vdChangeServiceProvisioning(bProductDetailProperty);

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("Calling child login addition part: ");
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						vInsertIncustomerProductLineIdentifier(bProductDetailProperty);
					}

					// BEGIN ADD V6.20a
					if (GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
							.longValue()) {
						GLogger
								.debug(CLASS_NAME, striSaveNewProductLine,
										"For DigitalTV - insert Logins in CPLIdentifier");

						if (0 == ProductUtils.iIsDTVLine(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), true)) {
							if (null != teleSessionMgr
									.getValue(GAfeConstants.HouseHoldDetails)) {
								vdChangeServiceProvisioning(bProductDetailProperty);

								// BEGIN DELETE V6.20c
								// vInsertIncustomerProductLineIdentifierforiDTV(bProductDetailProperty.lCustomerProductLineID.longValue());
								// END DELETE V6.20c
							}
						}
					}

					// END ADD V6.20a
					// BEGIN ADD v5.90a
					if (null != bProductRole.lCustomerID) {
						vdCallClarifyforContact(bProductRole);
					}

					// END ADD v5.90a
					GLogger.debug(CLASS_NAME, "iSaveNewProductLine",
							"Ends here");
					teleSessionMgr.putValue(BPRODUCTDETAILPROPERTY_ACPRODUCT,
							bProductDetailProperty);

					/** **************************************MAKING OF NEXT QUERRY************************************** */

					// BEGIN DELETE V5.39b
					// Comment: Release 8: LN 68: Removing parent's activation billing process with child order
					/*
					 * //BEGIN ADD V5.32a
					 * //Comment: Changes made for MGM
					 * if(bProductDetailProperty.lMGMCode != MGM_NOMGMCODE)
					 * {
					 *   LProductMGM lProductMGM = new LProductMGM(teleSessionMgr,bSession);
					 *
					 *   lProductMGM.vInsertInProcessTable(bProductDetailProperty.lMGMCode,
					 *       bProductDetailProperty.lProductID.longValue(),
					 *           lngOrderID);
					 * }
					 * //END ADD V5.32a
					 */

					// END DELETE V5.39b
				} // end of checking whether the Main BO is in the session or not
			} // end of the if loop

			// Begin Add V7.04h
			catch (AfeException afe) {
			//	afe.printStackTrace();
				GLogger.logException(afe);
				throw afe;
			}

			// End Add V7.04h
			catch (Exception ex) {

				// if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
           GLogger.logException(ex);
				// }
				AfeException afe = new AfeException(string_ERRCOM_00002, ex
						.getMessage()); // unknown exception occurred

				throw afe;
			} finally {

				// BEGIN ADD V5.10a
				// comment: to close in finally in case of exception
				try {
					if (null != rsGetActionDetails) {
						rsGetActionDetails.close();

						// BEGIN DELETE V 5.70b
						// rsGetActionDetails.getStatement().close();
						// END DELETE V 5.70b
						rsGetActionDetails = null;
					}

					// BEGIN ADD V 5.70b
					if (null != psSelect) {
						psSelect.close();
						psSelect = null;
					}

					// END ADD V 5.70b
				} catch (Exception e) {
					GLogger.logException(e);
				}

				// END ADD V5.10a

				closeAFEConnection();
			}
		}

		// BEGIN DELETE v7.20f
		// call commented to avoid multiple calls to update contact for zoof order intake.
		// BEGIN ADD V. 6.07h
		// updateContactInfo(lCustomerID.longValue());
		// END ADD V. 6.07h
		// END DELETE v7.20f

		// Begin Add 5.96g
		GLogger.logExit(CLASS_NAME, striSaveNewProductLine);

		// End Add 5.96g
		// BEGIN ADD V3.40
		return lngCustomerProductLineID;

		// END ADD V3.40

		// BEGIN DELETE V3.40
		// Returning of the String
		// return ++iCounterForReturn;
		// END DELETE V3.40
	} // Closing Brace of the function

	// BEGIN ADD V6.20b

	//Begin Add V9.02a
	/**
	 * Checks if there is any product in the vector of selected products has IS_RTP_APPLICABLE flag as 1.
	 * @param selectedProducts
	 * @return isRTPFlagPresent
	 * @throws SQLException
	 * @throws Exception
	 */
	protected boolean checkIsProdRTPable(Vector selectedProducts)
			throws SQLException, Exception {
		GLogger.logEntry(CLASS_NAME, METHOD_checkIsProdRTPable);
		GLogger.logInput(METHOD_checkIsProdRTPable, ARG_SELECTEDPRODUCTS,
				selectedProducts);
		boolean isRTPFlagPresent = false;
		Product product = null;
		ProductRow productRow = null;
		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int sizeOfVector = 0; // Local Varaible Declaration
		int counter = 0; // Local Varaible Declaration
		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {
			if (null != teleSessionMgr) {
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("telesessionmanager is not null");
				}
				product = (Product) teleSessionMgr
						.getMasterTable(GAfeConstants.PRODUCT);
				sizeOfVector = selectedProducts.size();
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("sizeOfVector : " + sizeOfVector);
				}
				for (counter = FINAL_ZERO; counter < sizeOfVector; counter++) {
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Getting product row");
					}
					productRow = product
							.prSearchByProductID((((BProductDetail) selectedProducts
									.elementAt(counter)).lProductID)
									.longValue());
					if (null != productRow) {
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("productRow is not null.");
						}
						if (FINAL_ONE == productRow.iS_RTPABLE) {
							if (GAfePropertyLoader.DEBUG) {
								GLogger
										.debug(
												CLASS_NAME,
												METHOD_checkIsProdRTPable,
												"RTP applicable Product ID from BProductDetail: ",
												((BProductDetail) selectedProducts
														.elementAt(counter)).lProductID);
								GLogger
										.debug(
												CLASS_NAME,
												METHOD_checkIsProdRTPable,
												"RTP applicable Product ID from ProductRow: ",
												Long
														.valueOf(productRow.lProductID));
							}
							isRTPFlagPresent = true;
							break;
						} // end of the if loop
					} else {
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("productRow is null.");
						}
					}
				} // end of the for loop
			} else {
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("teleSessionMgr is null.");
				}
			}
		} // end of the try

		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
			throw afe;
		}
		GLogger.logExit(CLASS_NAME, METHOD_checkIsProdRTPable);
		GLogger.logOutput(METHOD_checkIsProdRTPable, ARG_isRTPFlagPresent,
				isRTPFlagPresent);
		return isRTPFlagPresent;
	}

	/**
	 * This method will add the RTP process
	 * @param lCustomerProductLineId
	 * @param strUserName
	 * @throws Exception
	 */
	protected void insertNewRTPProcess(long lCustomerProductLineId,
			String strUserName) throws Exception {

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		long lOrderIdPrev = 0;

		processLinkTable = (ProcessLink) GConnectMemoryDB
				.getTable(GAfeConstants.PROCESSLINK);
		processTable = (Process) GConnectMemoryDB
				.getTable(GAfeConstants.PROCESS);

		processStatusTable = (ProcessStatus) GConnectMemoryDB
				.getTable(GAfeConstants.PROCESSSTATUS);

		if (null != processLinkTable && null != processTable
				&& null != processStatusTable) {
			ProcessLinkRow processLinkRowTemp = null;
			processLinkRowTemp = processLinkTable
					.plrSearchByObjectTypeIDNObjectID(
							(long) GAfeDescription.OBJECTTYPE_CUSTOMERPRODUCTLINE,
							lCustomerProductLineId);

			if (null != processLinkRowTemp
					&& GAfeConstants.EXIST == processLinkRowTemp.iObsolete) {
				ProcessRow processRowTemp = null;
				processRowTemp = processTable
						.prSearchByProcessID(processLinkRowTemp.lProcessID);
				lOrderIdPrev = processRowTemp.lOrderID;
			}

			ProcessRow processRowNew = new ProcessRow();
			processRowNew.iStatusInDB = Record.INSERT;
			processRowNew.lProcessID = processRowNew.lNewNr();
			processRowNew.lProcessTypeID = (long) GAfeDescription.PROCESSTYPE_RTP;
			processRowNew.lOrderID = lOrderIdPrev;
			processRowNew.strCreationUser = strUserName;
			processRowNew.strModificationUser = strUserName;

			processTable.addRecord(processRowNew);

			//Inserting a Record in Process Link table
			ProcessLinkRow processLinkRowNew = new ProcessLinkRow();
			processLinkRowNew.iStatusInDB = Record.INSERT;
			processLinkRowNew.lProcessLinkID = processLinkRowNew.lNewNr();
			processLinkRowNew.lProcessID = processRowNew.lProcessID;
			processLinkRowNew.lObjectTypeID = (long) GAfeDescription.OBJECTTYPE_CUSTOMERPRODUCTLINE;
			processLinkRowNew.lObjectID = lCustomerProductLineId;
			processLinkRowNew.strCreationUser = strUserName;
			processLinkRowNew.strModificationUser = strUserName;

			processLinkTable.addRecord(processLinkRowNew);

			//Inserting a Record in Process Status table
			ProcessStatusRow processStatusRowNew = new ProcessStatusRow();
			processStatusRowNew.iStatusInDB = Record.INSERT;
			processStatusRowNew.lProcessStatusID = processStatusRowNew.lNewNr();
			processStatusRowNew.lProcessID = processRowNew.lProcessID;
			processStatusRowNew.lProcessStatusTypeID = (long) GAfeDescription.PROCESSSTATUSTYPE_NEW;
			processStatusRowNew.strCreationUser = strUserName;
			processStatusRowNew.strModificationUser = strUserName;

			processStatusTable.addRecord(processStatusRowNew);

			//Insert the process tables in the memory
			GConnectMemoryDB.putTable(GAfeConstants.PROCESS, processTable);
			GConnectMemoryDB.putTable(GAfeConstants.PROCESSLINK,
					processLinkTable);
			GConnectMemoryDB.putTable(GAfeConstants.PROCESSSTATUS,
					processStatusTable);
		}
	}

	/**
	 * Checks if the Line is IDTV from BProductDetailProperty object
	 * @param bProductDetailProperty
	 * @return bIsIDTV - true if the line is IDTV
	 * throws Exception
	 */
	public boolean bCheckIDTVFromBProductDetailProperty(
			BProductDetailProperty bProductDetailProperty) throws Exception {
		GLogger.logEntry(CLASS_NAME, "bCheckIDTVFromBProductDetailProperty");

		boolean bIsIDTV = false;

		if (GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
				.longValue()) {
			int iSizeDigiTV = 0;

			// Begin Delete V7.06d
			// int[] iArray = GAfeDescription.IDTV_PACKAGE_PRODUCTID;
			// End Delete V7.06d
			// Begin Add V7.06d
			int[] iArray = GAfeDescription.INTERACTIVE_PRODUCTS_FOR_IDTV;

			// End Add V7.06d
			Vector vctDigiTV = bProductDetailProperty.vctProductSelected;

			// if the selected products are null then check from non selected products
			if ((null == vctDigiTV) || (0 == vctDigiTV.size())) {
				vctDigiTV = bProductDetailProperty.vctProductNonSelected;
			}

			if (null != vctDigiTV) {
				iSizeDigiTV = vctDigiTV.size();
			}

			GLogger.chkpt("Size of Vector" + iSizeDigiTV);

			for (int i = 0; i < iSizeDigiTV; i++) {
				for (int iTemp = 0; iTemp < iSizeDigiTV; iTemp++) {
					long lProdId = ((BProductDetail) vctDigiTV.elementAt(iTemp)).lProductID
							.longValue();

					if (GAfeDescription.bCheckInList(lProdId, iArray)) // Check if Prod id = IDTV
					{
						bIsIDTV = true;
					}
				}
			}
		}

		GLogger.logOutput("bCheckIDTVFromBProductDetailProperty",
				"bIsIDTVLine", bIsIDTV);

		return bIsIDTV;
	}

	// END ADD V6.20b

	/**
	 *  DESCRIPTION :   The Function will Save all the Product Line Related Information To the Session
	 *                                  when the customer says save all at that time In the Old Or the Detail Mode
	 *
	 *  @param          :       Long lCustomerID
	 *
	 *  @return         :       int     -       This function will return 1 in case the fnc is successfull otherwise 0
	 * /******************************************************************************************************************************
	 */
	protected void vInsertIncustomerProductLineIdentifier(
			BProductDetailProperty bProductDetailProperty) throws SQLException,
			Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		String strLoginId = ""; // Local Declation of Variables

		// Begin Add: Ver 3.06
		// Added check before releasing login
		boolean blnReleaseLogin_orNot = true;

		// End Add: Ver 3.06

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */

		/* BEGIN DELETE VER: 5.59tan */

		// System.out.println("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN");
		/* BEGIN DELETE VER: 5.59tan */
		try {
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");	
				// System.out.println("Temp Login delete function called");
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) // For Internet Kind of Product
			{
				BInternet bInternet = null;

				bInternet = (BInternet) teleSessionMgr
						.getValue(string_BInternet_aCProduct);

				ApplSaveAction applSaveActionTable = null;

				// getting the ApplSaveAction container/table from session
				applSaveActionTable = (ApplSaveAction) teleSessionMgr
						.getTable(string_APPLSAVEACTION);

				// Save Other Logins In case Of the Internet to the CustomerProductLineIdentifier Table
				// Begin DEL v9.01d
				// CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null;                                                                                                             // Initializing the Object Class for the CustomerProductLineIdentifierRow table
				// End DEL v9.01d
				customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

				for (int iCPLICount = FINAL_ZERO; iCPLICount < bInternet.vctInternetDetail
						.size(); iCPLICount++) {
					Vector vctCPLIInt = null;

					vctCPLIInt = (Vector) bInternet.vctInternetDetail
							.elementAt(iCPLICount);

					if (GAfePropertyLoader.DEBUG) {

						GLogger.chkpt("Inside if statement ");	// System.out.println("Temp Login" + String.valueOf(vctCPLIInt.elementAt(FINAL_ZERO)));
					}

					// Begin Ver 2.0
					// Changes for showing aged Logins on Internet screen
					if (!bIsAgedLogin(bProductDetailProperty, String
							.valueOf(vctCPLIInt.elementAt(FINAL_ZERO)))) {

						// Changes for showing aged Logins on Internet screen
						// end Ver 2.0
						Vector vctcustomerProductLineIdentifierRow = null;

						vctcustomerProductLineIdentifierRow = customerProductLineIdentifierTable
								.vctSearchBystrCustomerPLIdentifierValueandlCustomerProductLineIDandObsolete(
										bProductDetailProperty.lCustomerProductLineID
												.longValue(),
										String.valueOf(vctCPLIInt
												.elementAt(FINAL_ZERO)),
										FINAL_ZERO);

						if ((null == vctcustomerProductLineIdentifierRow)
								|| (vctcustomerProductLineIdentifierRow.size() == 0)) {
							if ((string_ZERO).equalsIgnoreCase(String
									.valueOf(vctCPLIInt.elementAt(FINAL_ONE)))) {
								strLoginId = "";
								strLoginId = String.valueOf(vctCPLIInt
										.elementAt(FINAL_ZERO));

								// Begin Add: Ver 3.06
								// Added check before releasing login
								// BEGIN ADD V. 6.07h
								if ((bProductDetailProperty.lProductID
										.longValue() != GAfeDescription
										.lGetTypeId(string_PRODUCT_VON))) {

									// END ADD V. 6.07h
									if (bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
											bProductDetailProperty.vctGetLoginfromILMURL,
											strLoginId)) {
										blnReleaseLogin_orNot = false;
									} // end of the for loop

									if (bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
											bProductDetailProperty.vctGetLoginfromILMMAIL,
											strLoginId)) {
										blnReleaseLogin_orNot = false;
									}

									// BEGIN ADD V. 6.07h
								}

								// END ADD V. 6.07h

								if (blnReleaseLogin_orNot) {

									// BEGIN DELETE V. 6.10d

									/*
									 *   //End add: Ver 3.06
									 *   if (GAfePropertyLoader.DEBUG) {
									 *       //System.out.println("Releasing from the ILM" + strLoginId);
									 *   }
									 *
									 *   ApplSaveActionRow applSaveActionRow = null;
									 *
									 *   if (null != applSaveActionTable) {
									 *       applSaveActionRow = applSaveActionTable.asarSearchByActionTypeValue(Record.INSERT, "LOGIN", strLoginId);
									 *
									 *       //this if condition is executed when login was only temporarily added in current session only
									 *       if (null != applSaveActionRow) {
									 *           applSaveActionTable.deleteRecord(applSaveActionRow.lID);
									 *           if (GAfePropertyLoader.DEBUG) {
									 *               //System.out.println("Temp Login function is deleted from session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
									 *           }
									 *       }
									 *
									 *       applSaveActionRow = new ApplSaveActionRow();
									 *       applSaveActionRow.iAction = Record.INSERT;
									 *       applSaveActionRow.strType = "LOGIN";
									 *       applSaveActionRow.strValue = strLoginId;
									 *       applSaveActionRow.strSystem = "IAFEOUT";
									 *       applSaveActionRow.strMethodName = "cancelInternetServices";
									 *
									 *       applSaveActionRow.arrArguments = new Class[3];
									 *       applSaveActionRow.arrArguments[0] = String.class;
									 *       applSaveActionRow.arrArguments[1] = Character.class;
									 *       applSaveActionRow.arrArguments[2] = Integer.class;
									 *
									 *       applSaveActionRow.arrParams = new Object[3];
									 *       applSaveActionRow.arrParams[0] = strLoginId;
									 *       applSaveActionRow.arrParams[1] = new Character('L');
									 *       applSaveActionRow.arrParams[2] = new Integer("1");
									 *
									 *       applSaveActionTable.addRecord(applSaveActionRow);
									 *
									 *       if (GAfePropertyLoader.DEBUG) {
									 *           //System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
									 *       }
									 *
									 *   }
									 */

									// END DELETE V. 6.10d
									// ===========================
									// BEGIN ADD V. 6.10d
									customerProductLineTable = (CustomerProductLine) teleSessionMgr
											.getTable(string_CUSTOMERPRODUCTLINE);

									// Getting the Customer table from the session
									long lngCustomerPLIdentifierID = 0;
									CustomerProductLineIdentifierRow customerProductLineIdentifierRow1 = null;

									// Initializing the Object Class for the CustomerProductLineIdentifierRow table
									// Getting the customerProductLineIdentifier table from the session
									if (null != customerProductLineTable) {
										customerProductLineIdentifierRow1 = new CustomerProductLineIdentifierRow();
										customerProductLineIdentifierRow1.iStatusInDB = Record.INSERT; // Marking the Flag for insert
										lngCustomerPLIdentifierID = customerProductLineIdentifierRow1
												.lNewNr(); // Auto Generation of the  Primary key
										customerProductLineIdentifierRow1.lCustomerPLIdentifierID = lngCustomerPLIdentifierID;
										customerProductLineIdentifierRow1.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
												.longValue();

										// The customerproduclineid needs to be same as the masterlogin.
										// For retrieving the productlineidentifiertypeid.
										ProductRow productRow = null; // Initializing the Object Class for the Vat table

										if (null == productTable) {
											productTable = (Product) teleSessionMgr
													.getMasterTable(string_PRODUCT);

											// Getting the product table from the session
										}

										productRow = (ProductRow) productTable
												.prSearchByProductIDandObsolete(
														bProductDetailProperty.lProductID
																.longValue(),
														FINAL_ZERO);

										long lProductLineIdentifierTypeID = 0;

										if (null != productRow) {
											lProductLineIdentifierTypeID = productRow.lProductLineIdentifierTypeID;
										}

										customerProductLineIdentifierRow1.strCustomerPLIdentifierValue = (String) vctCPLIInt
												.elementAt(FINAL_ZERO);

										// adding the child login to customerproductlineidentifer.
										customerProductLineIdentifierRow1.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;

										// adding the productlineidentifiertype id.
										customerProductLineIdentifierRow1.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
										customerProductLineIdentifierRow1.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
										customerProductLineIdentifierTable
												.addUniqueRecord(customerProductLineIdentifierRow1); // Adding the Record in the

										// ==========================
										// END ADD V. 6.10d
									}
								} // Login check if loop
							} // end of the if loop
						} // end of the if loop
					} // end of the if loop
				} // end of the for loop

				// Put the container back into the session
				teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveActionTable);

				//              teleSessionMgr.putTable("CUSTOMERPRODUCTLINEIDENTIFIER",customerProductLineIdentifierTable);
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	//  Begin Ver 2.0
	//  Changes for showing aged Logins on Internet screen
	public boolean bIsAgedLogin(BProductDetailProperty bProductDetailProperty,
			String strLogin) throws AfeException {
		boolean bIsAgedLogin = false;
		String strTempLogin = null;
		BChangeILogin bChangeILogin = null;

		try {
			for (int iCounter = 0; iCounter < bProductDetailProperty.vctGetLoginfromILMMAIL
					.size(); iCounter++) {
				bChangeILogin = (BChangeILogin) bProductDetailProperty.vctGetLoginfromILMMAIL
						.elementAt(iCounter);

				if (null == bChangeILogin) {
					continue;
				} else {
					strTempLogin = bChangeILogin.strLogin;

					if (strTempLogin.equals(strLogin)) {
						bIsAgedLogin = true;

						break;
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bIsAgedLogin;
	}

	//  Changes for showing aged Logins on Internet screen
	//  End Ver 2.0

	/**
	 *  DESCRIPTION :   The Function will see that in the vctProductSelected whether the producttypeid is the same
	 *                                  as the passed argument of the function and whether it is a provisionable product and whether
	 *                                  that product is not of the domain product.
	 *
	 *  @param          :       Vector vctProductSelected, Long lProductTypeID
	 *
	 *  @return         :       int     -       This function will return 1 in case the fnc is successfull otherwise 0
	 * /******************************************************************************************************************************
	 */
	protected int iFindProductTypeinVectorForService(Vector vctProductSelected,
			Long lProductTypeID) throws SQLException, Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		int iFlagToReturn = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			iSizeOfVector = 0;
			iSizeOfVector = vctProductSelected.size();

			for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {

				//              Begin Delete : Version - 3.31 Changes for Checking the Service KInd of Products
				//                                    if((lProductTypeID.longValue() == ((BProductDetail)vctProductSelected.elementAt(iCounter)).lProductTypeID.longValue()) && (1 == ((BProductDetail)vctProductSelected.elementAt(iCounter)).iProvisionable) && !(blnGetForProperty("PRODUCT_DOMAIN", ((BProductDetail)vctProductSelected.elementAt(iCounter)).lProductID)))
				//              END  Delete : Version - 3.31 Changes for Checking the Service KInd of Products
				//              Begin Add   : Version - 3.31 Changes for Checking the Service KInd of Products
				if ((lProductTypeID.longValue() == ((BProductDetail) vctProductSelected
						.elementAt(iCounter)).lProductTypeID.longValue())
						&& (1 == ((BProductDetail) vctProductSelected
								.elementAt(iCounter)).iProvisionable)
						&& !(blnGetForProperty("PRODUCT_DOMAIN",
								((BProductDetail) vctProductSelected
										.elementAt(iCounter)).lProductID))
						&& (FINAL_ZERO == iServiceProductAttachedToDomain((BProductDetail) vctProductSelected
								.elementAt(iCounter))))

				//              END  Add    : Version - 3.31 Changes for Checking the Service KInd of Products
				{
					iFlagToReturn++;

					break;
				} // end of the if loop
			} // end of the for loop

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return iFlagToReturn;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will see that in the vctProductSelected whether the producttypeid is the same
	 *                                  as the passed argument of the function and whether it is a provisionable product.
	 *
	 *  @param          :       Vector vctProductSelected, Long lProductTypeID
	 *
	 *  @return         :       int     -       This function will return 1 in case the fnc is successfull otherwise 0
	 * /******************************************************************************************************************************
	 */
	protected int iFindProductTypeinVector(Vector vctProductSelected,
			Long lProductTypeID) throws SQLException, Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		int iFlagToReturn = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			iSizeOfVector = 0;
			iSizeOfVector = vctProductSelected.size();

			for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
				if ((String.valueOf(lProductTypeID)).equalsIgnoreCase(String
						.valueOf(((BProductDetail) vctProductSelected
								.elementAt(iCounter)).lProductTypeID))
						&& (1 == ((BProductDetail) vctProductSelected
								.elementAt(iCounter)).iProvisionable)) {
					iFlagToReturn++;

					break;
				} // end of the if loop
			} // end of the for loop

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return iFlagToReturn;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Save all the Product Line Related Information To the Session
	 *                                  when the customer says save all at that time In the Old Or the Detail Mode
	 *
	 *  @param          :       Long lCustomerID
	 *
	 *  @return         :       int     -       This function will return 1 in case the fnc is successfull otherwise 0
	 * /******************************************************************************************************************************
	 */
	public int iSaveOldProductLine(Long lCustomerID) throws SQLException,
			Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iCounterForReturn = 0; // Local Varaible Declaration
		int iEncossStatus = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iResult = 0;              //Local Varaible Declaration
		// End DEL v9.01d
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		int iAppointmentExists = 0; // Local Varaible Declaration
		Date dtActivationDate = null; // Local Varaible Declaration
		long lProcessService = 0; // Local Varaible Declaration
		long lProcessAccess = 0; // Local Varaible Declaration
		long lCustomerProductIdMaster = 0; // Local Varaible Declaration
		long lProcessIDToDeleteForChange_FromNPtoTN = 0; // Local Varaible Declaration
		Long AddressID = null; // Local Varaible Declaration
		Long lNRCAccountID = Long.valueOf(0); // Local Varaible Declaration
		Vector vctProductSelected = new Vector(); // Vector of BproductDetail  business objects for all selected products/packages. This is to populate lower grid on the product property screen.

		// BEGIN ADD V 7.04e
		HashMap hmapDetails = null;

		// END ADD V 7.04e
		// BEGIN ADD V7.05e
		long lPackageIdVon = 0;

		// END ADD V7.05e
		// BEGIN ADD V7.05f
		ArrayList alsDeletedMailAlias = null;

		// END ADD V7.05f

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {
			GLogger.chkpt("LPROUDCT.JAVA - PROCESS PRINT BEFORE START");
			Process printProcessTable = (Process) teleSessionMgr
					.getTable(string_PROCESS);
			Vector allProcessBefore = printProcessTable.vctGetAll();
			GLogger
					.chkpt("LProduct.iSaveOldProductLine - allProcessBefore.size() = "
							+ allProcessBefore.size());
			for (int loop = 0; loop < allProcessBefore.size(); loop++) {
				ProcessRow printProcessRow = (ProcessRow) allProcessBefore
						.get(loop);
				GLogger.chkpt("Process Details Before - "
						+ printProcessRow.lProcessID + " : "
						+ printProcessRow.lProcessTypeID + " : "
						+ printProcessRow.lOrderID);
			}
			GLogger.chkpt("LPROUDCT.JAVA - PROCESS PRINT BEFORE END");
			/** **************************************MAKING OF NEXT QUERRY************************************** */
			BProductDetailProperty bProductDetailProperty = new BProductDetailProperty();
			BProductDetail bProductDetail = new BProductDetail();
			BProductRole bProductRole = new BProductRole();
			BNumber bNumber = null;
			BInternet bInternet = null;
			BIntro bIntro = null;

			// Begin Add v7.05f
			// get hashmap of mailaiases used in contactinfo from session
			HashMap hsmMailAliasInContactInfo = null;

			hsmMailAliasInContactInfo = (HashMap) teleSessionMgr
					.getValue(GAfeConstants.CONTACTINFOMAILALIAS);
			GLogger.chkpt("hsmMailAliasInContactInfo retreived from session:-"
					+ hsmMailAliasInContactInfo);

			// End Add v7.05f
			if (null != teleSessionMgr
					.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

				// Vector for storing all the Data that is populated in the tablular form
				bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);
				vctProductSelected = bProductDetailProperty.vctProductSelected; // The Lower Grid Vector
				iAppointmentExists = iAppointmentExists(bProductDetailProperty.lCustomerProductLineID);

				CustomerProductLineRow customerProductLineRow = null;

				customerProductLineTable = (CustomerProductLine) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
				customerProductLineRow = customerProductLineTable
						.cplrSearchByCustProductLineIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), FINAL_ZERO);

				if (FINAL_ONE == iAppointmentExists) {
					dtActivationDate = customerProductLineRow.dtActivationDate;
				} else {
					dtActivationDate = null;
				}

				// BEGIN DELETE V. 6.07h
				// if (GAfeDescription.strGetProperty("PRODUCT_TELEPHONE")).equals(String.valueOf(bProductDetailProperty.lProductID)) {
				// END DELETE V. 6.07h
				// BEGIN ADD V. 6.07h
				// BEGIN ADD v8.00a
				if ((GAfeDescription.strGetProperty(string_PRODUCT_TELEPHONE))
						.equals(String
								.valueOf(bProductDetailProperty.lProductID))
						|| (GAfeDescription.strGetProperty(string_PRODUCT_VON))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))
						|| (GAfeDescription.strGetProperty(string_PRODUCT_MOBILE))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))
						|| (GAfeDescription.strGetProperty("PRODUCT_ANALOGTV"))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))
						|| (GAfeDescription.strGetProperty("PRODUCT_TTV"))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))
						|| (GAfeDescription
								.strGetProperty("PRODUCT_FULLMOBILE"))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))) {

					// End ADD v8.00a
					// END ADD V. 6.07h
					// For Telephone and von
					String strValues = "";

					strValues = strFindProductInVectorSelected(
							bProductDetailProperty.vctProductSelected,
							Long.valueOf(GAfeDescription
									.lGetTypeId("PRODUCT_BASISDIENSTEN")));

					if (!(("").equals(strValues))
							&& (strValues.length() > FINAL_ZERO)) {
						iEncossStatus = Integer.parseInt(string_ONE);
					} // end of the if loop

					customerProductLineRow = null;
					customerProductLineTable = (CustomerProductLine) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
					customerProductLineRow = customerProductLineTable
							.cplrSearchByCustProductLineIDandObsolete(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(), FINAL_ZERO);

					if (null != customerProductLineTable) {
						if (null != customerProductLineRow) {

							// Updating All the Values Over here
							customerProductLineRow.iEncossStatus = iEncossStatus;

							// BEGIN ADD V5.32a
							// Comment: Changes made for MGM
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"customerProductLineRow.lMgmCode :"
											+ customerProductLineRow.lMgmCode);
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"bProductDetailProperty.lMGMCode :"
											+ bProductDetailProperty.lMGMCode);
							customerProductLineRow.lMgmCode = bProductDetailProperty.lMGMCode;

							// BEGIN ADD ver 5.80b
							customerProductLineRow.iRateClassID = bProductDetailProperty.iRateClassIDNew;

							// END ADD ver 5.80b
							// BEGIN ADD V5.96g Bill Frequency Changes
							customerProductLineRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;

							// END ADD V5.96g Bill Frequency Changes
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"customerProductLineRow.lMgmCode After :"
											+ customerProductLineRow.lMgmCode);

							// END ADD V5.32a

							if ((customerProductLineRow.iStatusInDB == Record.VIEW)
									|| (customerProductLineRow.iStatusInDB == Record.UPDATE)) {
								customerProductLineRow.iStatusInDB = Record.UPDATE;
								customerProductLineTable
										.updateRecord(customerProductLineRow);
							}

							// when iStatusInDB is equal to Record.INSERT
							else {
								customerProductLineTable
										.updateRecord(customerProductLineRow);
							} // end of the if else if loop

							// BEGIN ADD V7.05e
							lPackageIdVon = ProductUtils
									.lGetPackageProduct(customerProductLineRow.lCustomerProductLineID);
							GLogger
									.chkpt("Von Package Product Id="
											+ lPackageIdVon
											+ " for CPLID="
											+ customerProductLineRow.lCustomerProductLineID);

							// END ADD V7.05e
						} // end of the if loop
					} // end of the if loop

					// Put the container back into the session
					teleSessionMgr.putTable(string_CUSTOMERPRODUCTLINE,
							customerProductLineTable);
				}

				if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
					bNumber = new BNumber();
					bNumber = (BNumber) teleSessionMgr
							.getValue("BNumber_aCTel");

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement ");	
						// System.out.println("*************************************************************");
						// System.out.println("bNumber.strNumber" + bNumber.strNumber);
						// System.out.println("bNumber.strNumberOld" + bNumber.strNumberOld);
					}

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					GLogger
							.chkpt("LPROUDCT.iSaveOldProductLine() LN1215 analysis:1");
					if (!((bNumber.strNumber)
							.equalsIgnoreCase(bNumber.strNumberOld))) {

						// BEGIN ADD V5.34b
						// comment: code added to delete any deactivate CNA process attached with old line and delete any entry in CustomerProductStatus table
						processLinkTable = (ProcessLink) teleSessionMgr
								.getTable(string_PROCESSLINK);
						processTable = (Process) teleSessionMgr
								.getTable(string_PROCESS);
						processStatusTable = (ProcessStatus) teleSessionMgr
								.getTable(string_PROCESSSTATUS);
						customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTSTATUS);

						Vector vctProcessLinkRows = null;
						ProcessRow processRowCNA = null;
						long lCNAOrderID = 0;

						if ((null != processTable)
								&& (null != processLinkTable)
								&& (null != processStatusTable)) {
							vctProcessLinkRows = processLinkTable
									.vctSearchByObjectIDandObjectTypeIDandObsolete(
											bProductDetailProperty.lCustomerProductLineID
													.longValue(),
											GAfeDescription
													.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE),
											FINAL_ZERO);

							if (null != vctProcessLinkRows) {
								processRowCNA = processTable
										.prSearchByProcessIDandObsolete(
												((ProcessLinkRow) vctProcessLinkRows
														.elementAt(FINAL_ZERO)).lProcessID,
												FINAL_ZERO);

								if (null != processRowCNA) {
									lCNAOrderID = processRowCNA.lOrderID;
								}
							}

							if (0 != lCNAOrderID) {
								processRowCNA = processTable
										.prSearchBylOrderIDandProcessTypeIDandObsolete(
												lCNAOrderID,
												GAfeDescription
														.lGetTypeId(string_PROCESSTYPE_DEACTIVATECNA),
												FINAL_ZERO);

								if (null != processRowCNA) {

									// Delete processRow if record is in session
									if (processRowCNA.iStatusInDB == Record.INSERT) {
										processTable
												.deleteRecord(processRowCNA.lProcessID);
									}

									// Get ProcessLink Records for this processid and update
									Vector vctProcessCNALinks = processLinkTable
											.vctSearchByProcessIDandObsolete(
													processRowCNA.lProcessID,
													FINAL_ZERO);

									if (null != vctProcessCNALinks) {
										ProcessLinkRow processCNALinkRow = null;

										for (int iCounterOnLink = 0; iCounterOnLink < vctProcessCNALinks
												.size(); iCounterOnLink++) {
											processCNALinkRow = (ProcessLinkRow) vctProcessCNALinks
													.elementAt(iCounterOnLink);

											if (processCNALinkRow.iStatusInDB == Record.INSERT) {
												processLinkTable
														.deleteRecord(processCNALinkRow.lProcessLinkID);
											} else {
												processCNALinkRow.iObsolete = FINAL_ONE;
												processCNALinkRow.iStatusInDB = Record.UPDATE;
												processLinkTable
														.updateRecord(processCNALinkRow);
											}
										}
									}

									ProcessStatusRow processCNAStatusRow = null;

									processCNAStatusRow = processStatusTable
											.psrSearchByProcessIDAndStatusTypeID(
													processRowCNA.lProcessID,
													GAfeDescription
															.lGetTypeId(string_PROCESSSTATUSTYPE_NEW));

									if (null != processCNAStatusRow) {
										if (processCNAStatusRow.iStatusInDB == Record.INSERT) {
											processStatusTable
													.deleteRecord(processCNAStatusRow.lProcessStatusID);
										}
									}

									if ((processRowCNA.iStatusInDB == Record.VIEW)
											|| (processRowCNA.iStatusInDB == Record.UPDATE)) {

										// Make a new entry in ProcessStatusTable with status cancelled
										processCNAStatusRow = new ProcessStatusRow();
										processCNAStatusRow.iStatusInDB = Record.INSERT;
										processCNAStatusRow.lProcessStatusID = processCNAStatusRow
												.lNewNr();
										processCNAStatusRow.lProcessStatusTypeID = GAfeDescription
												.lGetTypeId(string_PROCESSSTATUSTYPE_CANCELLED);
										processCNAStatusRow.lProcessID = processRowCNA.lProcessID;
										processCNAStatusRow.strModificationUser = bSession.strUserName;
										processCNAStatusRow.strCreationUser = bSession.strUserName;
										processStatusTable
												.addUniqueRecord(processCNAStatusRow);
									}

									// Update CustomerProductStatus table for this process
									CustomerProductStatusRow customerProductCNAStatusRow = null;

									customerProductCNAStatusRow = customerProductStatusTable
											.cpsrSearchByProcessIDAndObsolete(
													processRowCNA.lProcessID,
													FINAL_ZERO);

									if (null != customerProductCNAStatusRow) {
										if (customerProductCNAStatusRow.iStatusInDB == Record.INSERT) {
											customerProductStatusTable
													.deleteRecord(customerProductCNAStatusRow.lCustomerProductStatusID);
										} else {
											customerProductCNAStatusRow.iStatusInDB = Record.UPDATE;
											customerProductCNAStatusRow.iObsolete = FINAL_ONE;
											customerProductStatusTable
													.updateRecord(customerProductCNAStatusRow);
										}
									}
								}
							}

							teleSessionMgr.putTable(string_PROCESS, processTable);
							teleSessionMgr.putTable(string_PROCESSLINK,
									processLinkTable);
							teleSessionMgr.putTable(string_PROCESSSTATUS,
									processStatusTable);
							teleSessionMgr.putTable(string_CUSTOMERPRODUCTSTATUS,
									customerProductStatusTable);
						}

						// END ADD V5.34b

						CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

						customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session
						customerProductLineIdentifierRow = customerProductLineIdentifierTable
								.cplirSearchByCustProductLineID(
										bProductDetailProperty.lCustomerProductLineID
												.longValue(), FINAL_ZERO);

						if (null != customerProductLineIdentifierTable) {
							if (null != customerProductLineIdentifierRow) {

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {

									GLogger.chkpt("Inside if statement ");	// System.out.println("customerProductLineIdentifierRow.strCustomerPLIdentifierValue" + customerProductLineIdentifierRow.strCustomerPLIdentifierValue);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */

								// Updating All the Values Over here
								customerProductLineIdentifierRow.strCustomerPLIdentifierValue = bNumber.strNumber;

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {

									GLogger.chkpt("Inside if statement ");		// System.out.println("tHE nEW vALUE IS" + customerProductLineIdentifierRow.strCustomerPLIdentifierValue);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								if ((customerProductLineIdentifierRow.iStatusInDB == Record.VIEW)
										|| (customerProductLineIdentifierRow.iStatusInDB == Record.UPDATE)) {
									customerProductLineIdentifierRow.iStatusInDB = Record.UPDATE;
									customerProductLineIdentifierTable
											.updateRecord(customerProductLineIdentifierRow);
								}

								// when iStatusInDB is equal to Record.INSERT
								else {
									customerProductLineIdentifierTable
											.updateRecord(customerProductLineIdentifierRow);
								} // end of the if else if loop
							} // end of the if loop
						} // end of the if loop

						// Put the container back into the session
						teleSessionMgr.putTable(
								string_CUSTOMERPRODUCTLINEIDENTIFIER,
								customerProductLineIdentifierTable);
					} // end of the if loop
				} // end of the if loop

				// BEGIN DELETE V6.20d
				// if (null != teleSessionMgr.getValue("BInternet_aCProduct"))   //For Internet Kind of Product
				// END DELETE V6.20d
				// BEGIN ADD V6.20d
				if ((null != teleSessionMgr.getValue(string_BInternet_aCProduct))
						|| (GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
								.longValue()))

				// END ADD V6.20d
				{

					// BEGIN ADD V5.32a
					// Comment: Changes made for MGM
					customerProductLineRow = null;
					customerProductLineTable = (CustomerProductLine) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
					customerProductLineRow = customerProductLineTable
							.cplrSearchByCustProductLineIDandObsolete(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(), FINAL_ZERO);

					if (null != customerProductLineTable) {
						if (null != customerProductLineRow) {
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"customerProductLineRow.lMgmCode :"
											+ customerProductLineRow.lMgmCode);
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"bProductDetailProperty.lMGMCode :"
											+ bProductDetailProperty.lMGMCode);
							customerProductLineRow.lMgmCode = bProductDetailProperty.lMGMCode;

							// BEGIN ADD V5.96g Bill Frequency Changes
							customerProductLineRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;

							// END ADD V5.96g Bill Frequency Changes
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"customerProductLineRow.lMgmCode After :"
											+ customerProductLineRow.lMgmCode);

							if ((customerProductLineRow.iStatusInDB == Record.VIEW)
									|| (customerProductLineRow.iStatusInDB == Record.UPDATE)) {
								customerProductLineRow.iStatusInDB = Record.UPDATE;
								customerProductLineTable
										.updateRecord(customerProductLineRow);
							}

							// when iStatusInDB is equal to Record.INSERT
							else {
								customerProductLineTable
										.updateRecord(customerProductLineRow);
							} // end of the if else if loop
						} // end of the if loop
					} // end of the if loop

					// Put the container back into the session
					teleSessionMgr.putTable(string_CUSTOMERPRODUCTLINE,
							customerProductLineTable);

					// END ADD V5.32a
					if (GAfePropertyLoader.DEBUG) {

						GLogger.chkpt("Inside if statement ");	// System.out.println("Changin the master login for internet");
					}

					bInternet = new BInternet();
					bInternet = (BInternet) teleSessionMgr
							.getValue(string_BInternet_aCProduct);

					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement ");	
						// System.out.println("New Master login" + bInternet.strNewMasterLogin);
						// System.out.println("Old Master login" + bInternet.strOldMasterLogin);
					}

					long lCustomerPLIdentifierID = 0;

					// BEGIN DELETE V6.20d
					// if (!((bInternet.strNewMasterLogin).equalsIgnoreCase(bInternet.strOldMasterLogin))) {
					// END DELETE V6.20d
					// BEGIN ADD V6.20d
					if ((GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
							.longValue())
							|| !((bInternet.strNewMasterLogin)
									.equalsIgnoreCase(bInternet.strOldMasterLogin))) {

						// END ADD V6.20d
						if (GAfePropertyLoader.DEBUG) {

							GLogger.chkpt("Inside if statement ");	// System.out.println("Master login is changed");
						}

						CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

						customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

						if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_VON) {
							vdReleaseLoginsNotUsed(bProductDetailProperty,
									bInternet.strNewMasterLogin);
						}

						// BEGIN ADD V6.20d
						else if (GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
								.longValue()) {
							if (null != teleSessionMgr
									.getValue(GAfeConstants.HouseHold_HashMap)) {
								GLogger
										.chkpt("iSaveOldProductLine(): Checking for Login release for IDTV ");

								HashMap hmHHDetails = (HashMap) teleSessionMgr
										.getValue(GAfeConstants.HouseHold_HashMap);
								String strCPLIden = strGetMainCPLIdenValueFromCPLId(bProductDetailProperty.lCustomerProductLineID
										.longValue());

								GLogger
										.chkpt("iSaveOldProductLine(): Checking for Login release for IDTV = >strCPLIden :"
												+ strCPLIden);

								Vector vctIDTVLogin = null;
								BHouseholdDetails bHouseholdDetails = (BHouseholdDetails) hmHHDetails
										.get(strCPLIden);

								GLogger
										.chkpt("iSaveOldProductLine(): Checking for Login release for IDTV = >bHouseholdDetails :"
												+ bHouseholdDetails);

								if (null != bHouseholdDetails) {
									vctIDTVLogin = vctGetLoginsforHHMembers(bHouseholdDetails);
								}

								if (null != vctIDTVLogin) {
									int iIDTVLoginCount = vctIDTVLogin.size();

									GLogger.chkpt("iIDTVLoginCount"
											+ iIDTVLoginCount);

									for (int i = 0; i < iIDTVLoginCount; i++) {
										GLogger
												.chkpt("iSaveOldProductLine(): Releasing login for IDTV "
														+ (String) vctIDTVLogin
																.elementAt(i));
										vdReleaseLoginsNotUsed(
												bProductDetailProperty,
												(String) vctIDTVLogin
														.elementAt(i));
									}
								}
							}
						}

						// END ADD V6.20d
						else {
							vdReleaseLoginsNotUsed(bProductDetailProperty,
									bInternet.strOldMasterLogin);
						}

						Vector vctcustomerProductLineIdentifier = new Vector();

						// BEGIN ADD V6.20d
						if (GAfeDescription.PRODUCT_DIGITALTV != bProductDetailProperty.lProductID
								.longValue()) {

							// END ADD V6.20d
							vctcustomerProductLineIdentifier = customerProductLineIdentifierTable
									.vctSearchBystrCustomerPLIdentifierValueandlCustomerProductLineIDandObsolete(
											bProductDetailProperty.lCustomerProductLineID
													.longValue(),
											bInternet.strNewMasterLogin,
											FINAL_ZERO);

							if (null == vctcustomerProductLineIdentifier) {
								if (GAfePropertyLoader.DEBUG) {

									GLogger.chkpt("Inside if statement ");	// System.out.println("No row found with new master login");
								}

								customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table
								customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

								if (null != customerProductLineTable) {
									customerProductLineIdentifierRow = new CustomerProductLineIdentifierRow();
									customerProductLineIdentifierRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
									lCustomerPLIdentifierID = customerProductLineIdentifierRow
											.lNewNr(); // Auto Generation of the  Primary key
									customerProductLineIdentifierRow.lCustomerPLIdentifierID = lCustomerPLIdentifierID;
									customerProductLineIdentifierRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
											.longValue();

									if (null != dtActivationDate) {
										customerProductLineIdentifierRow.dtActivationDate = dtActivationDate;
									}

									ProductRow productRow = null; // Initializing the Object Class for the Vat table

									if (null == productTable) {
										productTable = (Product) teleSessionMgr
												.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
									}

									if (bProductDetailProperty.lProductID
											.longValue() == GAfeDescription.PRODUCT_VON) {

										// BEGIN MODIFY V7.05e - Now Von has 2 packages
										// productRow = (ProductRow) productTable.prSearchByProductIDandObsolete(GAfeDescription.PRODUCT_NETPHONE, FINAL_ZERO);
										productRow = (ProductRow) productTable
												.prSearchByProductIDandObsolete(
														lPackageIdVon,
														FINAL_ZERO);

										// END MODIFY V7.05e
									} else {
										productRow = (ProductRow) productTable
												.prSearchByProductIDandObsolete(
														bProductDetailProperty.lProductID
																.longValue(),
														FINAL_ZERO);
									}

									long lProductLineIdentifierTypeID = 0;

									if (null != productRow) {
										lProductLineIdentifierTypeID = productRow.lProductLineIdentifierTypeID;
									}

									if (null != teleSessionMgr
											.getValue(string_BInternet_aCProduct)) {
										bInternet = null;
										bInternet = (BInternet) teleSessionMgr
												.getValue(string_BInternet_aCProduct);
										customerProductLineIdentifierRow.strCustomerPLIdentifierValue = bInternet.strNewMasterLogin;
										customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
									}

									customerProductLineIdentifierRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
									customerProductLineIdentifierRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
									customerProductLineIdentifierTable
											.addUniqueRecord(customerProductLineIdentifierRow); // Adding the Record in the CustomerPromotionTable

									// Put the container back into the session
									teleSessionMgr.putTable(
											string_CUSTOMERPRODUCTLINEIDENTIFIER,
											customerProductLineIdentifierTable);
								} // end of the if loop
							} else {
								customerProductLineIdentifierRow = new CustomerProductLineIdentifierRow();
								customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctcustomerProductLineIdentifier
										.elementAt(FINAL_ZERO);
								lCustomerPLIdentifierID = customerProductLineIdentifierRow.lCustomerPLIdentifierID;

								if (GAfePropertyLoader.DEBUG) {

									GLogger.chkpt("Inside if statement ");	// System.out.println("No Master login found");
								}
							}

							CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

							customerProductTable = (CustomerProduct) teleSessionMgr
									.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

							if (bProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_VON) {

								// BEGIN MODIFY V7.05e - Now Von has 2 packages
								// customerProductRow = customerProductTable.cprSearchByCustomerProductLineIDandProductIDandObsolete(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.PRODUCT_NETPHONE, FINAL_ZERO);
								customerProductRow = customerProductTable
										.cprSearchByCustomerProductLineIDandProductIDandObsolete(
												bProductDetailProperty.lCustomerProductLineID
														.longValue(),
												lPackageIdVon, FINAL_ZERO);

								// END MODIFY V7.05e
							} else {
								customerProductRow = customerProductTable
										.cprSearchByCustomerProductLineIDandProductIDandObsolete(
												bProductDetailProperty.lCustomerProductLineID
														.longValue(),
												bProductDetailProperty.lProductID
														.longValue(),
												FINAL_ZERO);
							}

							if (null != customerProductTable) {
								if (null != customerProductRow) {

									// Updating All the Values Over here
									customerProductRow.lCustomerPLIdentifierID = lCustomerPLIdentifierID;

									if ((customerProductRow.iStatusInDB == Record.VIEW)
											|| (customerProductRow.iStatusInDB == Record.UPDATE)) {
										customerProductRow.iStatusInDB = Record.UPDATE;
										customerProductTable
												.updateRecord(customerProductRow);
									}

									// when iStatusInDB is equal to Record.INSERT
									else {
										customerProductTable
												.updateRecord(customerProductRow);
									} // end of the if else if loop
								} // end of the if loop
							} // end of the if loop

							// Put the container back into the session

							teleSessionMgr.putTable(string_CUSTOMERPRODUCT,
									customerProductTable);

							// BEGIN ADD V6.20d
						} // end of loop for not DigitalTV

						// END ADD V6.20d
					} // end of the if loop
				} // end of the if loop
				else if (null != teleSessionMgr.getValue("BIntro_aCProduct")) {

					// BEGIN ADD V5.32a
					// Comment: Changes made for MGM
					customerProductLineRow = null;
					customerProductLineTable = (CustomerProductLine) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
					customerProductLineRow = customerProductLineTable
							.cplrSearchByCustProductLineIDandObsolete(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(), FINAL_ZERO);

					if (null != customerProductLineTable) {
						if (null != customerProductLineRow) {
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"customerProductLineRow.lMgmCode :"
											+ customerProductLineRow.lMgmCode);
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"bProductDetailProperty.lMGMCode :"
											+ bProductDetailProperty.lMGMCode);
							customerProductLineRow.lMgmCode = bProductDetailProperty.lMGMCode;

							// BEGIN ADD V5.96g Bill Frequency Changes
							customerProductLineRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;

							// END ADD V5.96g Bill Frequency Changes
							GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
									"customerProductLineRow.lMgmCode After :"
											+ customerProductLineRow.lMgmCode);

							if ((customerProductLineRow.iStatusInDB == Record.VIEW)
									|| (customerProductLineRow.iStatusInDB == Record.UPDATE)) {
								customerProductLineRow.iStatusInDB = Record.UPDATE;
								customerProductLineTable
										.updateRecord(customerProductLineRow);
							}

							// when iStatusInDB is equal to Record.INSERT
							else {
								customerProductLineTable
										.updateRecord(customerProductLineRow);
							} // end of the if else if loop
						} // end of the if loop
					} // end of the if loop

					// Put the container back into the session
					teleSessionMgr.putTable(string_CUSTOMERPRODUCTLINE,
							customerProductLineTable);

					// END ADD V5.32a
					bIntro = new BIntro();
					bIntro = (BIntro) teleSessionMgr
							.getValue("BIntro_aCProduct");

					if (!((String.valueOf(bIntro.strNumber))
							.equalsIgnoreCase(String
									.valueOf(bIntro.strOldNumber)))) {
						CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

						customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session
						customerProductLineIdentifierRow = customerProductLineIdentifierTable
								.cplirSearchByCustProductLineID(
										bProductDetailProperty.lCustomerProductLineID
												.longValue(), FINAL_ZERO);

						if (null != customerProductLineIdentifierTable) {
							if (null != customerProductLineIdentifierRow) {

								// Updating All the Values Over here
								customerProductLineIdentifierRow.strCustomerPLIdentifierValue = String
										.valueOf(bIntro.strNumber);

								if ((customerProductLineIdentifierRow.iStatusInDB == Record.VIEW)
										|| (customerProductLineIdentifierRow.iStatusInDB == Record.UPDATE)) {
									customerProductLineIdentifierRow.iStatusInDB = Record.UPDATE;
									customerProductLineIdentifierTable
											.updateRecord(customerProductLineIdentifierRow);
								}

								// when iStatusInDB is equal to Record.INSERT
								else {
									customerProductLineIdentifierTable
											.updateRecord(customerProductLineIdentifierRow);
								} // end of the if else if loop
							} // end of the if loop
						} // end of the if loop

						// Put the container back into the session
						teleSessionMgr.putTable(
								string_CUSTOMERPRODUCTLINEIDENTIFIER,
								customerProductLineIdentifierTable);
					} // end of the if loop
				} // end of the intro part

				// Begin Add V7.06b

				/*
				 * else if(null != teleSessionMgr.getValue(GAfeConstants.MOBILENUMBER))
				 * {
				 *   GLogger.chkpt("in comparison of mobile numbers");
				 *   CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null;
				 *   customerProductLineIdentifierTable = (CustomerProductLineIdentifier)
				 *                                        teleSessionMgr.getTable("CUSTOMERPRODUCTLINEIDENTIFIER");
				 *   // Getting the customerProductLineIdentifier table from the session
				 *
				 *   customerProductLineIdentifierRow = customerProductLineIdentifierTable.cplirSearchByCustProductLineID(bProductDetailProperty.lCustomerProductLineID.longValue(), FINAL_ZERO);
				 *   if (null != customerProductLineIdentifierTable)
				 *   {
				 *    if (null != customerProductLineIdentifierRow)
				 *    {
				 *       String strMobileNumber = (String) teleSessionMgr.getValue(GAfeConstants.MOBILENUMBER);
				 *        //Begin Delete V7.06e
				 *        //if(customerProductLineIdentifierRow.strCustomerPLIdentifierValue != strMobileNumber)
				 *        //End Delete V7.06e
				 *        //Begin Add V7.06e
				 *        GLogger.chkpt("strMobileNumber"+strMobileNumber);
				 *        GLogger.chkpt("customerProductLineIdentifierRow.strCustomerPLIdentifierValue"+customerProductLineIdentifierRow.strCustomerPLIdentifierValue);
				 *        if(!((customerProductLineIdentifierRow.strCustomerPLIdentifierValue).equalsIgnoreCase(strMobileNumber)))
				 *        //End Add V7.06e
				 *        {
				 *                GLogger.chkpt("inside compare");
				 *                customerProductLineIdentifierRow.strCustomerPLIdentifierValue = strMobileNumber;
				 *                GLogger.chkpt("customerProductLineIdentifierRow.strCustomerPLIdentifierValue2"+customerProductLineIdentifierRow.strCustomerPLIdentifierValue);
				 *                if (customerProductLineIdentifierRow.iStatusInDB == Record.VIEW || customerProductLineIdentifierRow.iStatusInDB == Record.UPDATE)
				 *                {
				 *                    GLogger.chkpt("inside view");
				 *                    customerProductLineIdentifierRow.iStatusInDB = Record.UPDATE;
				 *                    customerProductLineIdentifierTable.updateRecord(customerProductLineIdentifierRow);
				 *                }
				 *                //when iStatusInDB is equal to Record.INSERT
				 *                else
				 *                {
				 *                   GLogger.chkpt("inside insert");
				 *                   customerProductLineIdentifierTable.updateRecord(customerProductLineIdentifierRow);
				 *                }
				 *
				 *       }
				 *    }
				 *   }
				 *   // Put the container back into the session
				 *   teleSessionMgr.putTable("CUSTOMERPRODUCTLINEIDENTIFIER", customerProductLineIdentifierTable);
				 *
				 * }
				 */

				// End Add V7.06b
				// BEGIN DELETE V6.20c
				// BEGIN ADD V V6.20a
				/*
				 *   if(null != teleSessionMgr.getValue(GAfeConstants.HouseHold_HashMap))
				 *                   {
				 *       vInsertIncustomerProductLineIdentifierforiDTV(bProductDetailProperty.lCustomerProductLineID.longValue());
				 *                   }
				 */

				// END ADD V V6.20a
				// END DELETE V6.20c
				// Get the record from CustomerProduct table for the CustomerProductLIneId
				CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

				customerProductTable = (CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
				customerProductRow = customerProductTable
						.cprSearchByCustomerProductLineIDandProductIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(),
								bProductDetailProperty.lProductID.longValue(),
								FINAL_ZERO);

				if (null != customerProductRow) {
					lCustomerProductIdMaster = customerProductRow.lCustomerProductID; // Save this CustomerProductId as lCustomerProductIdMaster
				}

				// Now we need to create order and process:
				long lOrderID = 0;

				/*                      BProductRoleDetail      bProductRoleDetail      =       new BProductRoleDetail();

				 if (null != teleSessionMgr.getValue("BProductDetailRole_aCProduct"))
				 {
				 //Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
				 bProductRole = (BProductRole)teleSessionMgr.getValue("BProductDetailRole_aCProduct");

				 //Done
				 // Get this addressid from bProductRoleDetail.lAddressId for the bProductRoleDetail.lRoleTypeId = ROLETYPE_USER

				 bProductRoleDetail      =       new BProductRoleDetail();
				 bProductRoleDetail      =       (BProductRoleDetail)bProductRole.vctProductRole.elementAt(0);
				 }
				 */
				ProcessLinkRow processLinkRow = null; // Initializing the Object Class for the Vat table

				processLinkTable = (ProcessLink) teleSessionMgr
						.getTable(string_PROCESSLINK); // Getting the Vat table from the session
				orderTable = (Order) teleSessionMgr.getTable(string_ORDER); // Getting the PROCESS table from the session
				processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session

				Vector vctObjPLInternal = new Vector();

				vctObjPLInternal = processLinkTable
						.vctSearchByObjectIDandObjectTypeIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(),
								GAfeDescription
										.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE),
								FINAL_ZERO);

				if (null != vctObjPLInternal) {
					for (int ivctPLCount = FINAL_ZERO; ivctPLCount < vctObjPLInternal
							.size(); ivctPLCount++) {
						processLinkRow = new ProcessLinkRow(); // Initializing the Object Class for the Vat table
						processLinkRow = (ProcessLinkRow) vctObjPLInternal
								.elementAt(ivctPLCount);

						if (null != processLinkRow) {
							ProcessRow processRow = null; // Initializing the Object Class for the PROCESS table

							processRow = processTable
									.prSearchByProcessIDandObsolete(
											processLinkRow.lProcessID,
											FINAL_ZERO);

							if (null != processRow) {
								lProcessIDToDeleteForChange_FromNPtoTN = processRow.lProcessID;

								OrderRow orderRow = null; // Initializing the Object Class for the PROCESS table

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("lProcessIDToDeleteForChange_FromNPtoTN : " + lProcessIDToDeleteForChange_FromNPtoTN);
									// System.out.println("The Order ID is : " + processRow.lOrderID);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								orderRow = orderTable
										.orSearchByOrderIDandObsolete(
												processRow.lOrderID, FINAL_ZERO);

								if (orderRow.lOrderTypeID == GAfeDescription
										.lGetTypeId("ORDERTYPE_INSTALL")) {
									lOrderID = orderRow.lOrderID;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("The Order ID for order type install is : " + lOrderID);
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}
							}
						}
					}
				}

				/*                      Customer2OrderRow       customer2OrderRow               = null;                                                                                                         // Initializing the Object Class for the PROCESS table
				 customer2OrderTable     =       (Customer2Order)teleSessionMgr.getTable("CUSTOMER2ORDER");                              // Getting the PROCESS table from the session

				 Vector  vctcustomer2OrderRow    =       new Vector();
				 vctcustomer2OrderRow    =       customer2OrderTable.vctSearchByCustID(bProductRoleDetail.lCustomerID.longValue());

				 if(GAfePropertyLoader.DEBUG)
				 {
				 System.out.println("--------------------------------------------------------------");
				 System.out.println("customer2OrderTable                 -------------------------"+vctcustomer2OrderRow);
				 System.out.println("bProductRoleDetail.lCustomerID-------------------------"+bProductRoleDetail.lCustomerID);
				 }

				 if(null != vctcustomer2OrderRow)
				 {
				 lOrderID        =       ((Customer2OrderRow)vctcustomer2OrderRow.elementAt(FINAL_ZERO)).lOrderID;
				 }
				 */

				/** ************* CHANGED FOR PROCESSES GOING WITHOUT ORDERID FOR MIGRATED LINES *********** */
				customerProductLineRow = null;
				customerProductLineTable = (CustomerProductLine) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
				customerProductLineRow = customerProductLineTable
						.cplrSearchByCustProductLineIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), FINAL_ZERO);

				// BEGIN DELETE V6.07b
				// if ((null != customerProductLineRow) && ((("MIGRATION").equalsIgnoreCase(String.valueOf(customerProductLineRow.strCreationUser))) || (("MIGRATION").equalsIgnoreCase(String.valueOf(customerProductLineRow.strModificationUser)))) && (FINAL_ZERO == lOrderID)) {
				// END DELETE V6.07b
				// BEGIN ADD V6.07b
				if ((null != customerProductLineRow)
						&& (StringUtils.bCompareStringMigration(customerProductLineRow.strCreationUser))
						|| (StringUtils.bCompareStringMigration(customerProductLineRow.strModificationUser))
						&& (FINAL_ZERO == lOrderID)) {

					// END ADD V6.07b
					// create order
					OrderRow orderRow = null; // Initializing the Object Class for the PROCESS table

					orderTable = (Order) teleSessionMgr.getTable(string_ORDER); // Getting the PROCESS table from the session

					if (null != orderTable) {
						long lngOrderID = 0;

						orderRow = new OrderRow();
						orderRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngOrderID = orderRow.lNewNr(); // Auto Generation of the  Primary key
						orderRow.lOrderID = lngOrderID;
						orderRow.lOrderStatusTypeID = GAfeDescription
								.lGetTypeId(string_ORDERSTATUSTYPE_NEW);
						orderRow.lOrderTypeID = GAfeDescription
								.lGetTypeId("ORDERTYPE_INSTALL");
						orderRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						orderRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
						orderTable.addUniqueRecord(orderRow); // Adding the Record in the CustomerPromotionTable
						lOrderID = lngOrderID;

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("Created New Order ID Only For Migrated Customers of Order type install is : " + lOrderID);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */

						// Put the container back into the session
						teleSessionMgr.putTable(string_ORDER, orderTable);
					}

					// Begin Add V8.01b
					// Begin Add V9.01a
					if ((bProductDetailProperty.strESalesOrderNum != null)
							&& (bProductDetailProperty.lCbRefId != 0)
							&& !(bProductDetailProperty.strESalesOrderNum
									.equalsIgnoreCase("")))

					// Begin Add V9.01a
					{
						GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
								"entering iSaveOldProductLine3");

						Order2OrderRef_tbRow orderRefRow = null;

						orderRefTable = (Order2OrderRef_tb) GConnectMemoryDB
								.getTable("ORDER2ORDERREF_TB");

						if (null != orderRefTable) {
							orderRefRow = new Order2OrderRef_tbRow();
							orderRefRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert

							// lngOrderID = orderRefRow.lNewNr();                                    // Auto Generation of the  Primary key
							orderRefRow.lOrderID = lOrderID;
							orderRefRow.lObjectTypeID = (bProductDetailProperty.lCbRefId);
							orderRefRow.strObjectID = (bProductDetailProperty.strESalesOrderNum);
							GLogger.debug(CLASS_NAME, "iSaveNewProductLine3",
									orderRefRow.strObjectID);
							GLogger.debug(CLASS_NAME, "iSaveNewProductLine3",
									orderRefRow.lOrderID);
							GLogger.debug(CLASS_NAME, "iSaveNewProductLine3",
									orderRefRow.lObjectTypeID);
							orderRefTable.addUniqueRecord(orderRefRow); // Adding the Record in the Order2OrderRef_tb Table

							// Put the container back into the session
							GConnectMemoryDB.putTable("ORDER2ORDERREF_TB",
									orderRefTable);
						}

						GLogger.debug(CLASS_NAME, "iSaveOldProductLine",
								"exiting iSaveOldProductLine3");
					}

					// End Add V8.01b

					/** ************TO BE CONFIRMED BY DAXESH************** */
					Customer2OrderRow customer2OrderRow = null; // Initializing the Object Class for the PROCESS table

					customer2OrderTable = (Customer2Order) teleSessionMgr
							.getTable("CUSTOMER2ORDER"); // Getting the PROCESS table from the session

					if (null != teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct)) {

						// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
						bProductRole = (BProductRole) teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct);
						iSizeOfVector = 0;
						iSizeOfVector = bProductRole.vctProductRole.size();

						for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
							Long LngCustomerID = Long.valueOf(0);

							LngCustomerID = ((BProductRoleDetail) ((Vector) (bProductRole.vctProductRole))
									.elementAt(iCounter)).lCustomerID;

							if (null != customer2OrderTable) {
								customer2OrderRow = new Customer2OrderRow();
								customer2OrderRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
								customer2OrderRow.lCustomerID = LngCustomerID
										.longValue(); // Auto Generation of the  Primary key
								customer2OrderRow.lOrderID = lOrderID; // Adding the Product ID of each and every row
								customer2OrderTable
										.addUniqueRecord(customer2OrderRow); // Adding the Record in the CustomerPromotionTable
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("Inserting into Customer2Order Table with the foll values - ");
						// System.out.println("customer2OrderRow.lCustomerID     - " + customer2OrderRow.lCustomerID);
						// System.out.println("customer2OrderRow.lOrderID                - " + customer2OrderRow.lOrderID);
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */

					// Put the container back into the session
					teleSessionMgr.putTable("CUSTOMER2ORDER",
							customer2OrderTable);

					/** ************TO BE CONFIRMED BY DAXESH************** */
				}

				/** ************* CHANGED FOR PROCESSES GOING WITHOUT ORDERID FOR MIGRATED LINES *********** */
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement");
					// System.out.println("lOrderID                      -------------------------" + lOrderID);
				}

				int iFlagReturned1 = 0;

				iFlagReturned1 = iFindProductTypeinVectorForService(
						bProductDetailProperty.vctProductSelected, Long.valueOf(
								GAfeDescription
										.lGetTypeId("PRODUCTTYPE_SERVICE")));

				ProcessRow processRow = null; // Initializing the Object Class for the PROCESS table

				processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session

				if (FINAL_ZERO != iFlagReturned1) {
					processRow = null;

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("Entering PROCESSTYPE_PROVISIONINGSERVICES 2 ");
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */

					// BEGIN DELETE V6.07b
					// if ((("MIGRATION").equalsIgnoreCase(String.valueOf(customerProductLineRow.strCreationUser))) || (("MIGRATION").equalsIgnoreCase(String.valueOf(customerProductLineRow.strModificationUser)))) {
					// END DELETE V6.07b
					// BEGIN ADD V6.07b
					if ((StringUtils.bCompareStringMigration(customerProductLineRow.strCreationUser))
							|| (StringUtils.bCompareStringMigration(customerProductLineRow.strModificationUser))) {

						// END ADD V6.07b
						processLinkRow = null; // Initializing the Object Class for the Vat table
						processLinkTable = (ProcessLink) teleSessionMgr
								.getTable(string_PROCESSLINK); // Getting the Vat table from the session
						vctObjPLInternal = new Vector();
						vctObjPLInternal = processLinkTable
								.vctSearchByObjectIDandObjectTypeIDandObsolete(
										bProductDetailProperty.lCustomerProductLineID
												.longValue(),
										GAfeDescription
												.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE),
										FINAL_ZERO);

						if (null != vctObjPLInternal) {
							for (int iCtr = FINAL_ZERO; iCtr < vctObjPLInternal
									.size(); iCtr++) {
								processLinkRow = new ProcessLinkRow();
								processLinkRow = (ProcessLinkRow) vctObjPLInternal
										.elementAt(iCtr);
								processRow = new ProcessRow();
								processRow = (ProcessRow) processTable
										.prSearchByProcessIDandObsolete(
												processLinkRow.lProcessID,
												FINAL_ZERO);

								if (GAfeDescription
										.lGetTypeId("PROCESSTYPE_PROVISIONINGSERVICES") == processRow.lProcessTypeID) {

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("Found the Process for Migrated Customers of Type PROVISIONINGSERVICES");
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									break;
								} // end of the if loop
								else {
									processRow = null;
								}
							} // end of the for loop
						} // end of the if loop
					} else {
						processRow = (ProcessRow) processTable
								.prSearchBylOrderIDandProcessTypeIDandObsolete(
										lOrderID,
										GAfeDescription
												.lGetTypeId("PROCESSTYPE_PROVISIONINGSERVICES"),
										FINAL_ZERO);
					}

					// BEGIN : ADD V5.71e
					long lLatestPrStatusID = 0;
					long lLatestPrStatusTypeID = 0;
					ProcessStatusRow processStatusRow = null;

					// Retrieving latest Process Status for the Process id
					if (null != processRow) {
						Vector vctPSRows = null;

						if (null == processStatusTable) {
							processStatusTable = (ProcessStatus) teleSessionMgr
									.getTable(string_PROCESSSTATUS);
						}

						vctPSRows = processStatusTable
								.vctSearchByProcessIDandObsolete(
										processRow.lProcessID, FINAL_ZERO);

						if ((null != vctPSRows)
								&& (FINAL_ZERO != vctPSRows.size())) {
							for (iCounter = 0; iCounter < vctPSRows.size(); iCounter++) {
								processStatusRow = (ProcessStatusRow) vctPSRows
										.elementAt(iCounter);

								if (processStatusRow.lProcessStatusID > lLatestPrStatusID) {
									lLatestPrStatusID = processStatusRow.lProcessStatusID;
									lLatestPrStatusTypeID = processStatusRow.lProcessStatusTypeID;
								}
							}
						}
					}

					// END : ADD V5.71e

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("The ProcessRow is Services PROCESSTYPE_PROVISIONINGSERVICES - " + processRow);
						// System.out.println("If ProcessRow is null Enter a New Entry Otherwise Take the Existing");
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */

					// BEGIN : DELETE V5.71e
					// if (null != processRow)
					// {
					// END : DELETE V5.71e
					// BEGIN : ADD V5.71e
					if ((0 != lLatestPrStatusTypeID)
							&& (long) GAfeDescription.PROCESSSTATUSTYPE_CANCELLED != lLatestPrStatusTypeID) {

						// END : ADD V5.71e
						lProcessService = processRow.lProcessID;
					} else {

						// Make new process for service type

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("Entering PROCESSTYPE_PROVISIONINGSERVICES 3 ");
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */

						// Begin Add V7.06j
						if (!(GAfeDescription.PRODUCT_DIGITALTV == (bProductDetailProperty.lProductID).longValue()
								|| GAfeDescription.PRODUCT_TTV == (bProductDetailProperty.lProductID).longValue())) {

							// End Add V7.06j
							lProcessService = lngInsertInProcessTables(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(),
									GAfeDescription
											.lGetTypeId("PROCESSTYPE_PROVISIONINGSERVICES"),
									GAfeDescription
											.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
									lOrderID);

							// Begin Add V7.06j
						}

						// End Add V7.06j
						// vInsertInProcessTables(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.lGetTypeId("PROCESSTYPE_PROVISIONINGSERVICES"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lOrderID);
					}
				} else {
					processRow = new ProcessRow();

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("Entering PROCESSTYPE_PROVISIONINGSERVICES Process for Service");
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */
					processRow = (ProcessRow) processTable
							.prSearchBylOrderIDandProcessTypeIDandObsolete(
									lOrderID,
									GAfeDescription
											.lGetTypeId("PROCESSTYPE_PROVISIONINGSERVICES"),
									FINAL_ZERO);

					if (null != processRow) {
						vdMakeProcessIDObsolete(Long.valueOf(processRow.lProcessID));
					}
				}

				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement");
					// System.out.println("lProcessService                       -------------------------" + lProcessService);
				}

				iFlagReturned1 = iFindProductTypeinVector(
						bProductDetailProperty.vctProductSelected, Long.valueOf(
								GAfeDescription
										.lGetTypeId("PRODUCTTYPE_ACCESS")));

				if (FINAL_ZERO != iFlagReturned1) {
					processRow = null;

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						//                      System.out.println("Entering PRODUCTTYPE_ACCESS 2 ");
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */

					// BEGIN DELETE V6.07b
					// if ((("MIGRATION").equalsIgnoreCase(String.valueOf(customerProductLineRow.strCreationUser))) || (("MIGRATION").equalsIgnoreCase(String.valueOf(customerProductLineRow.strModificationUser)))) {
					// END DELETE V6.07b
					// BEGIN ADD V6.07b
					if ((StringUtils.bCompareStringMigration(customerProductLineRow.strCreationUser))
							|| (StringUtils.bCompareStringMigration(customerProductLineRow.strModificationUser))) {
						GLogger
								.chkpt("LPROUDCT.iSaveOldProductLine() LN1215 analysis:5");
						// END ADD V6.07b
						// END ADD V6.07b
						processLinkRow = null; // Initializing the Object Class for the Vat table
						processLinkTable = (ProcessLink) teleSessionMgr
								.getTable(string_PROCESSLINK); // Getting the Vat table from the session
						vctObjPLInternal = new Vector();
						vctObjPLInternal = processLinkTable
								.vctSearchByObjectIDandObjectTypeIDandObsolete(
										bProductDetailProperty.lCustomerProductLineID
												.longValue(),
										GAfeDescription
												.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE),
										FINAL_ZERO);

						if (null != vctObjPLInternal) {
							for (int iCtr = FINAL_ZERO; iCtr < vctObjPLInternal
									.size(); iCtr++) {
								processLinkRow = new ProcessLinkRow();
								processLinkRow = (ProcessLinkRow) vctObjPLInternal
										.elementAt(iCtr);
								processRow = new ProcessRow();
								processRow = (ProcessRow) processTable
										.prSearchByProcessIDandObsolete(
												processLinkRow.lProcessID,
												FINAL_ZERO);

								if (GAfeDescription
										.lGetTypeId("PROCESSTYPE_PROVISIONINGACCESS") == processRow.lProcessTypeID) {

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("Found the Process for Migrated Customers of Type PROVISIONINGACCESS");
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									break;
								} // end of the if loop
								else {
									processRow = null;
								}
							} // end of the for loop
						} // end of the if loop
					} else {
						processRow = (ProcessRow) processTable
								.prSearchBylOrderIDandProcessTypeIDandObsolete(
										lOrderID,
										GAfeDescription
												.lGetTypeId("PROCESSTYPE_PROVISIONINGACCESS"),
										FINAL_ZERO);
					} // end of the if else if loop

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("The ProcessRow is Services PROCESSTYPE_PROVISIONINGSERVICES - " + processRow);
						// System.out.println("If ProcessRow is null Enter a New Entry Otherwise Take the Existing");
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */
					if (null != processRow) {
						lProcessAccess = processRow.lProcessID;
					} else {

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("Entering PROCESSTYPE_PROVISIONINGACCESS Process for Access");
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */

						// Make new process for service type
						// Begin Add V7.06j
						GLogger
								.chkpt("LPROUDCT.iSaveOldProductLine() LN1215analysis ProductId:"
										+ bProductDetailProperty.lProductID);
						if (!(GAfeDescription.PRODUCT_DIGITALTV == (bProductDetailProperty.lProductID)
								.longValue() || GAfeDescription.PRODUCT_FULLMOBILE == (bProductDetailProperty.lProductID)
								.longValue())) {
							GLogger
									.chkpt("LPROUDCT.iSaveOldProductLine() LN1215 analysis:6");

							// End Add V7.06j
							lProcessAccess = lngInsertInProcessTables(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(),
									GAfeDescription
											.lGetTypeId("PROCESSTYPE_PROVISIONINGACCESS"),
									GAfeDescription
											.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
									lOrderID);

							// Begin Add V7.06j
						}
						GLogger
								.chkpt("LPROUDCT.iSaveOldProductLine() LN1215 analysis:7");
						// End Add V7.06j
						// vInsertInProcessTables(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.lGetTypeId("PROCESSTYPE_PROVISIONINGSERVICES"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lOrderID);
					}
				} else {
					processRow = new ProcessRow();
					processRow = (ProcessRow) processTable
							.prSearchBylOrderIDandProcessTypeIDandObsolete(
									lOrderID,
									GAfeDescription
											.lGetTypeId("PROCESSTYPE_PROVISIONINGACCESS"),
									FINAL_ZERO);

					if (null != processRow) {
						vdMakeProcessIDObsolete(Long.valueOf(processRow.lProcessID));
					}
				}

				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement");
					// System.out.println("lProcessAccess                        -------------------------" + lProcessAccess);
				}

				// In case of tn-np case we need to add np process also.
				// Begin Add v.8.00a
				if ((GAfeDescription.strGetProperty(string_PRODUCT_TELEPHONE))
						.equals(String
								.valueOf(bProductDetailProperty.lProductID))) {

					// End Add v.8.00a
					if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
						bNumber = new BNumber();
						bNumber = (BNumber) teleSessionMgr
								.getValue("BNumber_aCTel");

						// BEGIN DELETE V5.43c
						// comment: check to see when to add the new special NP process

						/*
						 * if(("NP").equalsIgnoreCase(bNumber.strKindOfNumber))
						 * {
						 *   if (("TN").equalsIgnoreCase(bNumber.strKindOfNumberOld))
						 *   {
						 *       vInsertInProcessTables(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.lGetTypeId("PROCESSTYPE_NP"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lOrderID);
						 *
						 *   }
						 * }
						 */

						// END DELETE V5.43c
						// BEGIN ADD V5.43c
						// comment: check to see when to add the new special NP process
						if (bModification_For_New_NP_Required(bNumber)) {
							vInsertInProcessTables(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(),
									GAfeDescription.PROCESSTYPE_NP,
									GAfeDescription.PROCESSSTATUSTYPE_NEW,
									lOrderID);
						}

						// END ADD V5.43c
					}
				}

				CustomerAppointment2OrderRow customerAppointment2OrderRow = null;

				customerAppointment2OrderTable = (CustomerAppointment2Order) teleSessionMgr
						.getTable("CUSTOMERAPPOINTMENT2ORDER");

				Vector vctCAppt2Order = new Vector();

				vctCAppt2Order = customerAppointment2OrderTable
						.vctSearchByOrderID(lOrderID);

				if (GAfePropertyLoader.DEBUG) {

					GLogger.chkpt("Inside if statement ");		// System.out.println("vctCAppt2Order                        -------------------------" + vctCAppt2Order);
				}

				long lCustomerAppointmentID = 0;

				if (null != vctCAppt2Order) {
					for (iCounter = 0; iCounter < vctCAppt2Order.size(); iCounter++) {
						long lngCustomerAppointmentID = 0;

						customerAppointment2OrderRow = new CustomerAppointment2OrderRow();
						customerAppointment2OrderRow = ((CustomerAppointment2OrderRow) vctCAppt2Order
								.elementAt(iCounter));
						lngCustomerAppointmentID = customerAppointment2OrderRow.lCustomerAppointmentID;

						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("lngCustomerAppointmentID                      -------------------------" + lngCustomerAppointmentID);
						}

						// Begin DEL v9.01d
						// CustomerAppointmentRow customerAppointmentRow = null;
						// End DEL v9.01d
						customerAppointmentTable = (CustomerAppointment) teleSessionMgr
								.getTable(string_CUSTOMERAPPOINTMENT);

						Vector vctcustomerAppointment = new Vector();

						vctcustomerAppointment = customerAppointmentTable
								.vctSearchByCustomerAppointmentIDandObsolete(
										lngCustomerAppointmentID, FINAL_ZERO);

						if ((null != vctcustomerAppointment)
								&& (vctcustomerAppointment.size() != FINAL_ZERO)) {
							lCustomerAppointmentID = ((CustomerAppointmentRow) vctcustomerAppointment
									.elementAt(FINAL_ZERO)).lCustomerAppointmentID;

							// if (GAfePropertyLoader.DEBUG)
							// System.out.println("lCustomerAppointmentID                    -------------------------" + lCustomerAppointmentID);
							break;
						}
					} // end of the for loop
				} // end of the if loop

				// Point 6
				if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
					bNumber = new BNumber();
					bNumber = (BNumber) teleSessionMgr
							.getValue("BNumber_aCTel");
					processRow = null; // Initializing the Object Class for the PROCESS table
					processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session

					// BEGIN DELETE V4.10d
					// comment: wron piece of code plus modifications to the flow as well

					/*
					 *
					 * if((FINAL_ONE == bNumber.iIntercept) || (2 == bNumber.iIntercept) || (FINAL_ZERO == bNumber.iIntercept))
					 * {
					 *   processLinkRow          = null;                                                                                         // Initializing the Object Class for the Vat table
					 *   processLinkTable        =       (ProcessLink)teleSessionMgr.getTable("PROCESSLINK");                    // Getting the Vat table from the session
					 *
					 *   vctObjPLInternal        =       new Vector();
					 *   vctObjPLInternal        =       processLinkTable.vctSearchByObjectIDandObjectTypeIDandObsolete(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCTLINE"), FINAL_ZERO);
					 *
					 *   if (null != vctObjPLInternal)
					 *   {
					 *       for (int iCtr = FINAL_ZERO; iCtr < vctObjPLInternal.size(); iCtr++)
					 *       {
					 *           processLinkRow  =       new ProcessLinkRow();
					 *           processLinkRow  =       (ProcessLinkRow)vctObjPLInternal.elementAt(iCtr);
					 *
					 *           processRow      = new ProcessRow();
					 *           processRow      =       (ProcessRow)processTable.prSearchByProcessIDandObsolete(processLinkRow.lProcessID, FINAL_ZERO);
					 *
					 *           if (null != processRow)
					 *           {
					 *               if (( ! ((GAfeDescription.strGetProperty("PROCESSTYPE_DISCONNECT")).equals(String.valueOf(processRow.lProcessTypeID)))) && ((FINAL_ONE == bNumber.iIntercept) || (2 == bNumber.iIntercept)) )
					 *               {
					 *                   //Call Of the Process Function
					 *
					 *                   vInsertInProcessTables(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.lGetTypeId("PROCESSTYPE_DISCONNECT"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lOrderID);
					 *                   vInsertInDocumentTable(processRow.lOrderID, GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_W"));
					 *
					 *               }//end of the if loop
					 *               if(((GAfeDescription.strGetProperty("PROCESSTYPE_DISCONNECT")).equals(String.valueOf(processRow.lProcessTypeID))) && (FINAL_ZERO == bNumber.iIntercept))
					 *               {
					 *                   if(null != processTable)
					 *                   {
					 *                       if(null != processRow)
					 *                       {
					 *                           //Updating All the Values Over here
					 *                           processRow.iObsolete    =       NOTEXISTS;
					 *                           processRow.strModificationUser  = bSession.strUserName;
					 *
					 *                           if(processRow.iStatusInDB == Record.VIEW || processRow.iStatusInDB == Record.UPDATE)
					 *                           {
					 *                               processRow.iStatusInDB = Record.UPDATE;
					 *                               processTable.updateRecord(processRow);
					 *                           }
					 *                           //when iStatusInDB is equal to Record.INSERT
					 *                           else
					 *                           {
					 *                               processRow.iStatusInDB = Record.DELETE;
					 *                               processTable.deleteRecord(processRow.lProcessID);
					 *                           }
					 *
					 *                       }//end of the if loop
					 *
					 *                   }//end of the if loop
					 *
					 *                   // Put the container back into the session
					 *                   teleSessionMgr.putTable("PROCESS",processTable);
					 *
					 *               }//end of the else part of if else if loop
					 *               if(((GAfeDescription.strGetProperty("PROCESSTYPE_INTERCEPT")).equals(String.valueOf(processRow.lProcessTypeID))) && ((FINAL_ONE == bNumber.iIntercept) || (FINAL_ZERO == bNumber.iIntercept)))
					 *               {
					 *                   if(null != processTable)
					 *                   {
					 *                       if(null != processRow)
					 *                       {
					 *                           //Updating All the Values Over here
					 *                           processRow.iObsolete    =       NOTEXISTS;
					 *                           processRow.strModificationUser  = bSession.strUserName;
					 *
					 *                           if(processRow.iStatusInDB == Record.VIEW || processRow.iStatusInDB == Record.UPDATE)
					 *                           {
					 *                               processRow.iStatusInDB = Record.UPDATE;
					 *                               processTable.updateRecord(processRow);
					 *                           }
					 *                           //when iStatusInDB is equal to Record.INSERT
					 *                           else
					 *                           {
					 *                               processRow.iStatusInDB = Record.DELETE;
					 *                               processTable.deleteRecord(processRow.lProcessID);
					 *                           }
					 *
					 *                       }//end of the if loop
					 *
					 *                   }//end of the if loop
					 *
					 *                   // Put the container back into the session
					 *                   teleSessionMgr.putTable("PROCESS",processTable);
					 *
					 *               }//end of the else part of if else if loop
					 *               if(!((GAfeDescription.strGetProperty("PROCESSTYPE_INTERCEPT")).equals(String.valueOf(processRow.lProcessTypeID))) && (2 == bNumber.iIntercept) )
					 *               {
					 *                   //Call Of the Process Function
					 *
					 *                   vInsertInProcessTables(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.lGetTypeId("PROCESSTYPE_INTERCEPT"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lOrderID);
					 *                   vInsertInDocumentTable(processRow.lOrderID, GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O"));
					 *
					 *               }//end of the if loop
					 *
					 *           }//end of the if loop
					 *
					 *       }//end of the for loop
					 *
					 *   }//end of the if loop
					 *
					 * }//end of the if loop
					 */

					// END DELETE V4.10d
					// BEGIN ADD V4.10e
					// Changes appended for the changes requirement for Intercept Disconnect option change
					if ((FINAL_ONE == bNumber.iIntercept)
							|| (2 == bNumber.iIntercept)
							|| (FINAL_ZERO == bNumber.iIntercept)) {
						processTable = (Process) teleSessionMgr
								.getTable(string_PROCESS);
						processLinkTable = (ProcessLink) teleSessionMgr
								.getTable(string_PROCESSLINK);
						objectTypeTable = (ObjectType) teleSessionMgr
								.getMasterTable(string_OBJECTTYPE);

						DocumentRow documentRow = null;

						processLinkRow = null;

						// BEGIN ADD V4.10e
						// comment: to get orderiD
						long lngOrderID = 0;

						// END ADD V4.10e
						boolean bDisconnectFound = false;
						boolean bInterceptFound = false;

						// getting all processlink rows for the productline
						vctObjPLInternal = processLinkTable
								.vctSearchByObjectIDandObjectTypeIDandObsolete(
										bProductDetailProperty.lCustomerProductLineID
												.longValue(),
										GAfeDescription
												.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE),
										FINAL_ZERO);

						// BEGIN ADD V4.10e
						// comment: We have to update tables Document, PrintHeader and PrintBody if changes are made in the Intercept, Disconnect option
						if (null != vctObjPLInternal) {
							ObjectTypeRow objTypeRow = objectTypeTable
									.otrSearchBystrObjectNameandObsolete(
											"\"ORDER\"", FINAL_ZERO); // Get the ObjectType row for Order table

							for (int iCtr = FINAL_ZERO; iCtr < vctObjPLInternal
									.size(); iCtr++) {
								processLinkRow = new ProcessLinkRow();
								processLinkRow = (ProcessLinkRow) vctObjPLInternal
										.elementAt(iCtr);

								// finding out the process row corresponding to processlink row
								processRow = (ProcessRow) processTable
										.prSearchByProcessIDandObsolete(
												processLinkRow.lProcessID,
												FINAL_ZERO);

								// Continue if the process is not found
								if (null == processRow) {
									continue;
								}

								if ((null != processRow)
										&& (processRow.lProcessTypeID == GAfeDescription
												.lGetTypeId("PROCESSTYPE_PROVISIONINGACCESS"))) {
									lngOrderID = processRow.lOrderID;

									break;
								}
							}

							// Delete the entries from the document, printheader and printbody tables if any

							/**
							 * UPDATING THE DOCUMENT, PRINTHEADER AND PRINTBODY TABLES
							 */
							documentTable = (Document) teleSessionMgr
									.getTable("DOCUMENT");

							// Get all documents related to the order
							documentRow = documentTable
									.docSearchByObjectIDandObjectTypeIDandDocTypeIDandObsolete(
											lngOrderID,
											objTypeRow.lObjectTypeID,
											GAfeDescription
													.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O"),
											FINAL_ZERO);

							if (null != documentRow) {
								bDisconnectFound = true;
							}

							documentRow = documentTable
									.docSearchByObjectIDandObjectTypeIDandDocTypeIDandObsolete(
											lngOrderID,
											objTypeRow.lObjectTypeID,
											GAfeDescription
													.lGetTypeId("DOCUMENTTYPE_INTERCEPT_W"),
											FINAL_ZERO);

							if (null != documentRow) {
								bInterceptFound = true;
							}
							//Begin Add V9.02a   -- Added condition for FULLMObile Product
							/*
							if ((bNumber.iIntercept == 0)
									&& (bProductDetailProperty.lProductID
											.longValue() != GAfeDescription.PRODUCT_MOBILE || GAfeDescription.PRODUCT_FULLMOBILE != bProductDetailProperty.lProductID
											.longValue())) {
								if (bDisconnectFound) {
									vDeleteInDocumentTable(
											lngOrderID,
											GAfeDescription
													.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O"));
								}

								if (bInterceptFound) {
									//vDeleteInDocumentTable(lngOrderID,
									//                     GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_W"));
								}
							}
							*/
							/*

							if ((bNumber.iIntercept == 1)
									&& (bProductDetailProperty.lProductID
											.longValue() != GAfeDescription.PRODUCT_MOBILE)
									|| GAfeDescription.PRODUCT_FULLMOBILE != bProductDetailProperty.lProductID
											.longValue()) {
								if (!bDisconnectFound) {

									// Make entries in Document, PrintHeader and PrintBody tables
									vInsertInDocumentTable(
											lngOrderID,
											GAfeDescription
													.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O")); // Entry for Disconnect
								}

								if (bInterceptFound) {
									//vDeleteInDocumentTable(lngOrderID,
									//                     GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_W"));
								}
							}

							if ((bNumber.iIntercept == 2)
									&& (bProductDetailProperty.lProductID
											.longValue() != GAfeDescription.PRODUCT_MOBILE)
									|| GAfeDescription.PRODUCT_FULLMOBILE != bProductDetailProperty.lProductID
											.longValue()) {

								// Make entries in Document, PrintHeader and PrintBody tables
								if (!bDisconnectFound) {
									vInsertInDocumentTable(
											lngOrderID,
											GAfeDescription
													.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O")); // Entry for Disconnect
								}

								if (!bInterceptFound) {
									//vInsertInDocumentTable(
									//   lngOrderID,
									//  GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_W"));    // Entry for Intercept
								}
						
							}
						*/
}
					}
					//End V9.02a
					// END ADD V4.10e

					if ((!((bNumber.strNumber)
							.equalsIgnoreCase(bNumber.strNumberOld)))
							&& (bNumber.bAging)) {
						CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

						customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

						Vector vctCPLIInternal = new Vector();

						vctCPLIInternal = customerProductLineIdentifierTable
								.vctSearchBystrCustomerPLIdentifierValueandObsolete(
										bNumber.strNumber, FINAL_ONE);

						if (null != vctCPLIInternal) {
							for (int iCtr = FINAL_ZERO; iCtr < vctCPLIInternal
									.size(); iCtr++) {
								customerProductLineIdentifierRow = new CustomerProductLineIdentifierRow();
								customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCPLIInternal
										.elementAt(iCtr);
								customerProductRow = null; // Initializing the Object Class for the CustomerProduct table
								customerProductTable = (CustomerProduct) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

								Vector vctobjCPInternal = new Vector();

								vctobjCPInternal = customerProductTable
										.vctSearchByCustomerProductLineIDandProductIDandObsolete(
												customerProductLineIdentifierRow.lCustomerProductLineID,
												GAfeDescription
														.lGetTypeId("PRODUCT_CNA"),
												FINAL_ZERO);

								if (null != vctobjCPInternal) {

									// BEGIN ADD V5.34b
									// comment: getting today's date
									Date dtSysDate = new Date();

									// END ADD V5.34b

									for (int iCPCounter = FINAL_ZERO; iCPCounter < vctobjCPInternal
											.size(); iCPCounter++) {

										// BEGIN DELETE V5.34b
										// comment: the process deactivate CNA needs to be attached to the old lines
										// vInsertInProcessTables(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.lGetTypeId("PROCESSTYPE_DEACTIVATECNA"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), 0);
										// END DELETE V5.34b
										// BEGIN ADD V5.34b
										// comment: attaching process for deactivating CNA to the old lines if the CNA product is active
										if ((((CustomerProductRow) vctobjCPInternal
												.elementAt(iCounter)).dtDeactivationDate)
												.after(dtSysDate)) {
											long lProcID = 0;

											lProcID = lngInsertInProcessTables(
													((CustomerProductRow) vctobjCPInternal
															.elementAt(iCounter)).lCustomerProductLineID,
													GAfeDescription
															.lGetTypeId(string_PROCESSTYPE_DEACTIVATECNA),
													GAfeDescription
															.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
													lOrderID);
											customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
													.getTable(string_CUSTOMERPRODUCTSTATUS);

											CustomerProductStatusRow customerProductStatusRow = new CustomerProductStatusRow();

											customerProductStatusRow.lCustomerProductStatusID = customerProductStatusRow
													.lNewNr();
											customerProductStatusRow.lCustomerProductID = ((CustomerProductRow) vctobjCPInternal
													.elementAt(iCounter)).lCustomerProductID;
											customerProductStatusRow.lProcessID = lProcID;
											customerProductStatusRow.lComponentActionID = GAfeDescription
													.lGetTypeId("COMPONENTACTION_DELETE");
											customerProductStatusRow.lComponentStatusID = GAfeDescription
													.lGetTypeId("COMPONENTSTATUS_NEW");
											customerProductStatusRow.strCreationUser = bSession.strUserName;
											customerProductStatusRow.strModificationUser = bSession.strUserName;
											customerProductStatusRow.iObsolete = FINAL_ZERO;
											customerProductStatusRow.iStatusInDB = Record.INSERT;
											customerProductStatusTable
													.addUniqueRecord(customerProductStatusRow);
											teleSessionMgr.putTable(
													string_CUSTOMERPRODUCTSTATUS,
													customerProductStatusTable);
										}

										// END ADD V5.34b
									} // end of the for loop
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop
					} // end of the if loop
				} // end of the if loop

				// UPDATE installation address in the DSL if the same is changed
				BProductRoleDetail bProductRoleDetail = new BProductRoleDetail();

				bNumber = new BNumber(); // creating new object of the Business Class

				// BEGIN DELETE V. 6.07h
				// if ((GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE") == bProductDetailProperty.lProductID.longValue()) ) {
				// END DELETE V. 6.07h
				// BEGIN ADD V. 8.00a
				//Begin Mod v9.02a  -- Added condition for FULL Mobile
				if ((GAfeDescription.PRODUCT_TELEPHONE == bProductDetailProperty.lProductID
						.longValue())
						|| (GAfeDescription.PRODUCT_VON == bProductDetailProperty.lProductID
								.longValue())
						|| (GAfeDescription.PRODUCT_MOBILE == bProductDetailProperty.lProductID
								.longValue())
						|| (GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
								.longValue())) {
					//END Mod v9.02a
					// End ADD V. 8.00a
					// END ADD V.6.07h
					if ((null != teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct))
							&& (null != teleSessionMgr
									.getValue("BNumber_aCTel"))) {

						// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
						bProductRole = (BProductRole) teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct);
						bNumber = (BNumber) teleSessionMgr
								.getValue("BNumber_aCTel");

						for (int iAddCount = FINAL_ZERO; iAddCount < bProductRole.vctProductRole
								.size(); iAddCount++) {
							bProductRoleDetail = new BProductRoleDetail();
							bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
									.elementAt(iAddCount);

							if (GAfeDescription.lGetTypeId(string_ROLETYPE_USER) == bProductRoleDetail.lRoleTypeID
									.longValue()) {

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("Making bProductRoleDetail.lCustomerID - " + bProductRoleDetail.lCustomerID);
									// System.out.println("Making bProductRoleDetail.lOldCustomerID - " + bProductRoleDetail.lOldCustomerID);
									// System.out.println("Making bProductRoleDetail.lAddressID - " + bProductRoleDetail.lAddressID);
									// System.out.println("Making bProductRoleDetail.lOldAddressID - " + bProductRoleDetail.lOldAddressID);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								if ((bProductRoleDetail.lOldCustomerID
										.longValue() != bProductRoleDetail.lCustomerID
										.longValue())
										|| (bProductRoleDetail.lOldAddressID
												.longValue() != bProductRoleDetail.lAddressID
												.longValue())) {
									if ((bNumber.strNumber)
											.equalsIgnoreCase(bNumber.strNumberOld)) {

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if statement");
											// System.out.println("Making the DSL Update Call for the Changed Customer Or Address.");
										}

										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										blnDeleteAndInsertPhoneInDSL_CaseTelephone_ForChangedCustomerOrAddress(
												bProductRoleDetail.lCustomerID,
												bProductRoleDetail.lAddressID);
									}

									// Commented to Be Removed (Not to be Used Again)

									/*
									 * else
									 * {
									 *
									 *   if (makeAFEConnection()) //If the Connection is made
									 *   {
									 *       try
									 *       {
									 *
									 *           //Making the second Querry
									 *           ResultSet rsGetAddData          = null; // Making an Object of the ResultSet
									 *           strSql.setLength(0); //Initialising
									 *
									 *           strSql.append("SELECT * FROM ADDRESS WHERE ADDRESSID = ").append(bProductRoleDetail.lAddressID).append(" AND OBSOLETE = 0");
									 *
									 *           /****************STARTING*****************TO PRINT THE DATA
									 *           if(GAfePropertyLoader.DEBUG)
									 *           {
									 *               System.out.println("The Querry is : " + strSql.toString());
									 *           }
									 *           /****************ENDING*******************TO PRINT THE DATA
									 *
									 *           rsGetAddData = gConnectAfe.rsQuery(strSql.toString());
									 *
									 *           //Making the second Querry
									 *           ResultSet rsGetCustData         = null; // Making an Object of the ResultSet
									 *           strSql.setLength(0); //Initialising
									 *
									 *           strSql.append("SELECT * FROM CUSTOMER WHERE CUSTOMERID = ").append(bProductRoleDetail.lCustomerID).append(" AND OBSOLETE = 0");
									 *
									 *           /****************STARTING*****************TO PRINT THE DATA
									 *           if(GAfePropertyLoader.DEBUG)
									 *           {
									 *               System.out.println("The Querry is : " + strSql.toString());
									 *           }
									 *           /****************ENDING*******************TO PRINT THE DATA
									 *
									 *           rsGetCustData = gConnectAfe.rsQuery(strSql.toString());
									 *
									 *           if((rsGetAddData.next()) && (rsGetCustData.next()))
									 *           {
									 *               /****************STARTING*****************TO PRINT THE DATA
									 *               if(GAfePropertyLoader.DEBUG)
									 *               {
									 *                   System.out.println("Making the DSL Update Call for the Changed Customer Or Address.");
									 *               }
									 *               /****************ENDING*******************TO PRINT THE DATA
									 *
									 *               iAFEOUT.blnChangeAddress(rsGetCustData.getString("NAME"), bProductRoleDetail.lAddressID.longValue(), bNumber.strNumber, rsGetAddData.getString("HOUSENUMBER"), rsGetAddData.getString("SUBHOUSENUMBER"), rsGetAddData.getString("BOX"));
									 *
									 *           }//end of the while Loop
									 *
									 *       }//end of the if loop
									 *       catch (SQLException e)
									 *       {
									 *           throw e;
									 *       }
									 *       finally
									 *       {
									 *           closeAFEConnection();   //closing the connection
									 *       }
									 *
									 *   }//end of the try block
									 *
									 * }//end of the if else if loop
									 *
									 */

									// Commented to Be Removed (Not to be Used Again)
								} // end of the if loop
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop
				} // end of the if loop

				// If it is not CPS Product Line ID
				bProductRoleDetail = new BProductRoleDetail();

				if (null == teleSessionMgr.getValue("BIntro_aCProduct")) {
					if (null != teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct)) {

						// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
						bProductRole = (BProductRole) teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct);

						// Done
						// Get this addressid from bProductRoleDetail.lAddressId for the bProductRoleDetail.lRoleTypeId = ROLETYPE_USER
						for (int iAddCount = FINAL_ZERO; iAddCount < bProductRole.vctProductRole
								.size(); iAddCount++) {
							bProductRoleDetail = new BProductRoleDetail();
							bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
									.elementAt(iAddCount);

							if ((GAfeDescription
									.strGetProperty(string_ROLETYPE_USER))
									.equalsIgnoreCase(String
											.valueOf(bProductRoleDetail.lRoleTypeID))) {
								AddressID = bProductRoleDetail.lAddressID;
							} // end of the if loop
						} // end of the for loop

						ActionRow actionRow = null; // Initializing the Object Class for the Vat table

						actionTable = (Action) teleSessionMgr
								.getTable(string_ACTION); // Getting the Vat table from the session

						//                      Need to Confirm
						//                       ActionValue
						Vector vctActionInternal = new Vector();

						vctActionInternal = actionTable
								.vctSearchByActionValueandObsolete(String
										.valueOf(AddressID), FINAL_ZERO);

						if ((null != vctActionInternal)
								&& (FINAL_ZERO != vctActionInternal.size())) {
							for (iCounter = FINAL_ZERO; iCounter < vctActionInternal
									.size(); iCounter++) {
								actionRow = new ActionRow(); // Initializing the Object Class for the Vat table
								actionRow = ((ActionRow) vctActionInternal
										.elementAt(iCounter));

								if (null != actionTable) {
									if (null != actionRow) {
										actionRow.lObjectID = lOrderID;
										actionRow.lObjectTypeID = GAfeDescription
												.lGetTypeId("OBJECTTYPE_ORDER");

										if ((actionRow.iStatusInDB == Record.VIEW)
												|| (actionRow.iStatusInDB == Record.UPDATE)) {
											actionRow.iStatusInDB = Record.UPDATE;
											actionTable.updateRecord(actionRow);
										}

										// when iStatusInDB is equal to Record.INSERT
										else {
											actionTable.updateRecord(actionRow);
										} // end of the if else if loop
									} // end of the if loop
								} // end of the if loop

								// Put the container back into the session
								teleSessionMgr.putTable(string_ACTION, actionTable);
							} // end of the for loop
						} // end of the if loop
					} // end of the if loop
				} // end of the if loop

				// We need to take care of all products which are deleted.
				long lngCustomerProductID = 0;
				long lngProductID = 0;
				int iFlagForProduct = 0;

				// Begin DEL v9.01d
				// int iStatusILM = 0;
				// BProductParameter bProductParameter = null;
				// End DEL v9.01d

				customerProductRow = null; // Initializing the Object Class for the CustomerProduct table
				customerProductTable = (CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

				Vector vctobjCPInternal = new Vector();

				vctobjCPInternal = customerProductTable
						.vctSearchByCustomerProductLineIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), FINAL_ZERO);

				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement ");	
					// System.out.println("Vector " + vctobjCPInternal);
					// System.out.println("No of product in the CustomeRProduct table for CPLID = " + vctobjCPInternal.size());
				}

				if (null != vctobjCPInternal) {
					for (iCounter = FINAL_ZERO; iCounter < vctobjCPInternal
							.size(); iCounter++) {
						lngCustomerProductID = 0;
						lngProductID = 0;
						lngCustomerProductID = ((CustomerProductRow) vctobjCPInternal
								.elementAt(iCounter)).lCustomerProductID;
						lngProductID = ((CustomerProductRow) vctobjCPInternal
								.elementAt(iCounter)).lProductID;

						//                      customerProductRow              = null;                                                                                                                         // Initializing the Object Class for the CustomerProduct table
						//                      customerProductTable    =       (CustomerProduct)teleSessionMgr.getTable("CUSTOMERPRODUCT");    // Getting the CustomerProduct table from the session
						//                      customerProductRow      =       customerProductTable.cprSearchByCustomerProductLineIDandProductIDandObsolete(bProductDetailProperty.lCustomerProductLineID.longValue(), bProductDetailProperty.lProductID.longValue(), FINAL_ZERO);
						if (GAfePropertyLoader.DEBUG) {

							GLogger.chkpt("Inside if statement ");	// System.out.println("We will print ProdcutId" + ((CustomerProductRow) vctobjCPInternal.elementAt(iCounter)).lProductID);
							// System.out.println(" bProductDetailProperty.lProductID = " + bProductDetailProperty.lProductID);
						}

						if (((CustomerProductRow) vctobjCPInternal
								.elementAt(iCounter)).lProductID == bProductDetailProperty.lProductID
								.longValue()) {
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement ");	
								// System.out.println("This is for main productLine");
							}

							// BEGIN ADD V5.96g Bill Frequency Changes
							// Update bill frequencyID
							customerProductRow = (CustomerProductRow) vctobjCPInternal
									.elementAt(iCounter);
							customerProductRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;

							// BEGIN DELETE V6.02e
							// customerProductRow.iStatusInDB = Record.UPDATE;
							// END DELETE V6.02e
							// BEGIN ADD V6.02e
							if (customerProductRow.iStatusInDB != Record.INSERT) {
								customerProductRow.iStatusInDB = Record.UPDATE;
							}

							// END ADD V6.02e
							customerProductTable
									.updateRecord(customerProductRow);

							// END ADD V5.96g Bill Frequency Changes

							continue;
						}

						iSizeOfVector = 0;
						iSizeOfVector = vctProductSelected.size();
						iFlagForProduct = 0;

						for (int iBPCounter = FINAL_ZERO; iBPCounter < iSizeOfVector; iBPCounter++) {
							bProductDetail = new BProductDetail();
							bProductDetail = (BProductDetail) vctProductSelected
									.elementAt(iBPCounter);

							if (((String.valueOf(lngCustomerProductID))
									.equalsIgnoreCase(String
											.valueOf(bProductDetail.lCustomerProductID)))) {
								iFlagForProduct++;

								break;
							} // end of the if loop
						} // end fo the for loop

						// This Product is deleted from the Grid if the value of iFlagForProduct is 0 and if not then it is 1
						if (FINAL_ZERO == iFlagForProduct) {
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("lngCustomerProductID" + lngCustomerProductID);
								// System.out.println("This product is deleted pi" + (((CustomerProductRow) vctobjCPInternal.elementAt(iCounter)).lProductID));
							}

							// First delete the product form the ILM
							if ((bProductDetailProperty.lProductID.longValue() == GAfeDescription
									.lGetTypeId(string_PRODUCT_INTERNET))) {
								if (GAfePropertyLoader.DEBUG) {

									GLogger.chkpt("Inside if statement ");	// System.out.println("Delete function call for ILM ");
								}

								MInternet mInternet = new MInternet(
										teleSessionMgr);

								// Begin MOD v9.01d
								mInternet.iDeleteProductILM(
										lngCustomerProductID, lngProductID);

								// End MOD v9.01d

								// Begin DEL v9.01d
								// if (GAfePropertyLoader.DEBUG) {
								// System.out.println("Delete function call for ILM done iStatusILM = " + iStatusILM);
								// }
								// End DEL v9.01d
							}

							customerProductRow = null; // Initializing the Object Class for the CustomerProduct table
							customerProductTable = (CustomerProduct) teleSessionMgr
									.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
							customerProductRow = customerProductTable
									.cprSearchByCustProductID(lngCustomerProductID);

							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("This product is deleted Full ros" + customerProductRow);
							}

							if (null != customerProductRow) {
								if (null != customerProductTable) {

									// Updating All the Values Over here
									customerProductRow.iObsolete = NOTEXISTS;
									customerProductRow.strModificationUser = bSession.strUserName;

									if ((customerProductRow.iStatusInDB == Record.VIEW)
											|| (customerProductRow.iStatusInDB == Record.UPDATE)) {
										customerProductRow.iStatusInDB = Record.UPDATE;
										customerProductTable
												.updateRecord(customerProductRow);
									}

									// when iStatusInDB is equal to Record.INSERT
									else {
										customerProductRow.iStatusInDB = Record.DELETE;
										customerProductTable
												.deleteRecord(customerProductRow.lCustomerProductID);
									}
								} // end of the if loop

								// Put the container back into the session
								teleSessionMgr.putTable(string_CUSTOMERPRODUCT,
										customerProductTable);
								//Add 16.1 FMC
								GLogger.chkpt("remove dcpr while change before prov for :"+customerProductRow.lCustomerProductID);
								DerivedCustomerProductRelation derivedCustomerProductRelationTable = null;
								DerivedCustomerProductRelationRow derivedCustomerProductRelationRow = null;
								Vector vctDerivedCP = null;
								
								derivedCustomerProductRelationTable = (DerivedCustomerProductRelation) teleSessionMgr.getTable(GAfeConstants.DERIVEDCUSTOMERPRODUCTRELATION);
								if(null != derivedCustomerProductRelationTable){
								GLogger.chkpt("derivedCustomerProductRelationTable"+derivedCustomerProductRelationTable.toString());
								derivedCustomerProductRelationRow = derivedCustomerProductRelationTable.derivedCustomerProductSearchByProductId(customerProductRow.lCustomerProductID);
								}
								if(null != derivedCustomerProductRelationRow){
									GLogger.chkpt("derivedCustomerProductRelationRow"+derivedCustomerProductRelationRow.toString());
									GLogger.chkpt("row found"+derivedCustomerProductRelationRow.lDerivedCustomerProductId);
									derivedCustomerProductRelationRow.iObsolete=NOTEXISTS;
									GLogger.chkpt("row status :"+derivedCustomerProductRelationRow.iStatusInDB);
									if ((derivedCustomerProductRelationRow.iStatusInDB == Record.VIEW)
											|| (derivedCustomerProductRelationRow.iStatusInDB == Record.UPDATE)) {
										derivedCustomerProductRelationRow.iStatusInDB = Record.UPDATE;
									}else {
										GLogger.chkpt("delete from memory");
										derivedCustomerProductRelationRow.iStatusInDB = Record.DELETE;
										derivedCustomerProductRelationTable
												.deleteRecord(derivedCustomerProductRelationRow.lDerivedCustomerProductId);
									}
								}
								teleSessionMgr.putTable(GAfeConstants.DERIVEDCUSTOMERPRODUCTRELATION, derivedCustomerProductRelationTable);
								
								CustomerProductParameterRow customerProductParameterRow = null; // Initializing the Object Class for the Currency table

								customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCTPARAMETER); // Getting the Customer table from the session

								Vector vctCPParamInternal = new Vector();

								vctCPParamInternal = customerProductParameterTable
										.vctSearchByCustomerProductIDandObsolete(
												lngCustomerProductID,
												FINAL_ZERO);

								if (null != vctCPParamInternal) {
									for (int iCPParamCounter = FINAL_ZERO; iCPParamCounter < vctCPParamInternal
											.size(); iCPParamCounter++) {
										customerProductParameterRow = new CustomerProductParameterRow();
										customerProductParameterRow = (CustomerProductParameterRow) vctCPParamInternal
												.elementAt(iCPParamCounter);

										// Begin Add v7.05f
										// MAILALIAS DELETE SCENARIO handling
										// check if its ProductParameterID = mailalias productparamID
										GLogger
												.chkpt("lProductParameterID:"
														+ customerProductParameterRow.lProductParameterID);

										if (customerProductParameterRow.lProductParameterID == GAfeDescription.PRODUCTPARAMETER_EMAILADDRESS) {

											// fetch mailaddress
											if (null == alsDeletedMailAlias) {
												alsDeletedMailAlias = new ArrayList(
														1);
											}

											alsDeletedMailAlias
													.add(customerProductParameterRow.strCustomerProductParameterValue);
										}

										// End Add v7.05f

										// Updating All the Values Over here
										customerProductParameterRow.iObsolete = NOTEXISTS;
										customerProductParameterRow.strModificationUser = bSession.strUserName;

										if ((customerProductParameterRow.iStatusInDB == Record.VIEW)
												|| (customerProductParameterRow.iStatusInDB == Record.UPDATE)) {
											customerProductParameterRow.iStatusInDB = Record.UPDATE;
											customerProductParameterTable
													.updateRecord(customerProductParameterRow);
										}

										// when iStatusInDB is equal to Record.INSERT
										else {
											customerProductParameterRow.iStatusInDB = Record.DELETE;
											customerProductParameterTable
													.deleteRecord(customerProductParameterRow.lCustomerProductParameterID);
										}

										// Put the container back into the session
										teleSessionMgr.putTable(
												string_CUSTOMERPRODUCTPARAMETER,
												customerProductParameterTable);
									} // end of the for loop
								} // end of the if loop

								CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

								customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

								Vector vctCPPStatusInternal = new Vector();

								vctCPPStatusInternal = customerProductStatusTable
										.vctSearchByCustomerProductIDandObslete(
												lngCustomerProductID,
												FINAL_ZERO);

								if (null != vctCPPStatusInternal) {
									for (int iCPPStatusCounter = FINAL_ZERO; iCPPStatusCounter < vctCPPStatusInternal
											.size(); iCPPStatusCounter++) {
										customerProductStatusRow = new CustomerProductStatusRow();
										customerProductStatusRow = (CustomerProductStatusRow) vctCPPStatusInternal
												.elementAt(iCPPStatusCounter);

										// Updating All the Values Over here
										customerProductStatusRow.iObsolete = NOTEXISTS;
										customerProductStatusRow.strModificationUser = bSession.strUserName;

										if ((customerProductStatusRow.iStatusInDB == Record.VIEW)
												|| (customerProductStatusRow.iStatusInDB == Record.UPDATE)) {
											customerProductStatusRow.iStatusInDB = Record.UPDATE;
											customerProductStatusTable
													.updateRecord(customerProductStatusRow);
										}

										// when iStatusInDB is equal to Record.INSERT
										else {
											customerProductStatusRow.iStatusInDB = Record.DELETE;
											customerProductStatusTable
													.deleteRecord(customerProductStatusRow.lCustomerProductStatusID);
										}

										// Put the container back into the session
										teleSessionMgr.putTable(
												string_CUSTOMERPRODUCTSTATUS,
												customerProductStatusTable);
									} // end of the for loop
								} // end of the if loop

								// Here the Process has to be deleted for the domain kind of product
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("The Product ID (For Deletion)is - " + lngProductID);
								}

								if (blnGetForProperty("PRODUCT_DOMAIN",
										Long.valueOf(lngProductID))) {
									processLinkRow = null; // Initializing the Object Class for the Vat table
									processLinkTable = (ProcessLink) teleSessionMgr
											.getTable(string_PROCESSLINK); // Getting the Vat table from the session

									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("processLinkTable - " + processLinkTable);
									}

									vctObjPLInternal = new Vector();
									vctObjPLInternal = processLinkTable
											.vctSearchByObjectIDandObjectTypeIDandObsolete(
													lngCustomerProductID,
													GAfeDescription
															.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCT"),
													FINAL_ZERO);

									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("lngCustomerProductID - " + lngCustomerProductID);
										// System.out.println("GAfeDescription.lGetTypeIdOBJECTTYPE_CUSTOMERPRODUCT - " + GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCT"));
										// System.out.println("The vctObjPLInternal - " + vctObjPLInternal);
									}

									//                                  Begin Modify : V3.36
									//                                  Change made to fix defect related to domain Process (incident# 39)
									ProcessStatus processStatusTable = null;
									ProcessStatusRow processStatusRow = null;
									ProcessStatusRow processStatusRowNew = null;

									if (null == processStatusTable) {
										processStatusTable = (ProcessStatus) teleSessionMgr
												.getTable(string_PROCESSSTATUS);
									}

									//                                  Change made to fix defect related to domain Process (incident# 39)
									//                                  End Modify : V3.36
									if (null != vctObjPLInternal) {
										for (int iPLCounter = FINAL_ZERO; iPLCounter < vctObjPLInternal
												.size(); iPLCounter++) {
											processLinkRow = null;
											processLinkRow = (ProcessLinkRow) vctObjPLInternal
													.elementAt(iPLCounter);

											//                                          Begin Modify : V3.36
											//                                          Begin Add : V3.32
											//                                          Change made to fix defect related to domain Process (incident# 39)
											//                                                                                                                       processRow = processTable.prSearchByProcessID(processLinkRow.lProcessID);
											processStatusRow = processStatusTable
													.psrSearchByProcessID(processLinkRow.lProcessID);

											//                                          Change made to fix defect related to domain Process (incident# 39)
											//                                          End Add : V3.32
											//                                          End Modify : V3.36
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("The Process Link ID For deletion of Domain is = " + processLinkRow.lProcessLinkID);
											}

											//                                          Begin Modify : V3.36
											//                                          Begin Add : V3.32
											//                                          Change made to fix defect related to domain Process (incident# 39)

											/*                                                                              if (null != processRow)
											 {
											 processRow.iObsolete    =       NOTEXISTS;
											 processRow.strModificationUser  = bSession.strUserName;

											 if(processRow.iStatusInDB == Record.VIEW || processRow.iStatusInDB == Record.UPDATE)
											 {
											 processRow.iStatusInDB = Record.UPDATE;
											 processTable.updateRecord(processRow);
											 }
											 else
											 {
											 processRow.iStatusInDB = Record.DELETE;
											 processTable.deleteRecord(processRow.lProcessID);
											 }
											 }
											 */
											if (null != processStatusRow) {
												processStatusRowNew = new ProcessStatusRow();
												processStatusRowNew.iStatusInDB = Record.INSERT;
												processStatusRowNew.lProcessStatusID = processStatusRowNew
														.lNewNr();
												processStatusRowNew.lProcessID = processStatusRow.lProcessID;
												processStatusRowNew.strRemarks = processStatusRow.strRemarks;
												processStatusRowNew.strCreationUser = processStatusRow.strCreationUser;
												processStatusRowNew.dtCreationDate = processStatusRow.dtCreationDate;
												processStatusRowNew.dtModificationDate = processStatusRow.dtModificationDate;
												processStatusRowNew.iObsolete = FINAL_ZERO;
												processStatusRowNew.lProcessStatusTypeID = GAfeDescription
														.lGetTypeId(string_PROCESSSTATUSTYPE_CANCELLED);
												processStatusRowNew.strModificationUser = bSession.strUserName;
												processStatusTable
														.addUniqueRecord(processStatusRowNew);
											}

											//                                          Change made to fix defect related to domain Process (incident# 39)
											//                                          End Add : V3.32
											//                                          End Modify : V3.36
											if (null != processLinkTable) {
												if (null != processLinkRow) {

													// Updating All the Values Over here
													processLinkRow.iObsolete = NOTEXISTS;
													processLinkRow.strModificationUser = bSession.strUserName;

													if ((processLinkRow.iStatusInDB == Record.VIEW)
															|| (processLinkRow.iStatusInDB == Record.UPDATE)) {
														processLinkRow.iStatusInDB = Record.UPDATE;
														processLinkTable
																.updateRecord(processLinkRow);
													}

													// when iStatusInDB is equal to Record.INSERT
													else {
														processLinkRow.iStatusInDB = Record.DELETE;
														processLinkTable
																.deleteRecord(processLinkRow.lProcessLinkID);
													}
												} // end of the if loop

												// Put the container back into the session
												// Begin Add : V3.32
												// Change made to fix defect related to domain Process (incident# 39)
												teleSessionMgr.putTable(
														string_PROCESSSTATUS,
														processStatusTable);

												//                                              teleSessionMgr.putTable("PROCESS",processTable);
												// Change made to fix defect related to domain Process(incident#39)
												// End Add : V3.32
												teleSessionMgr.putTable(
														string_PROCESSLINK,
														processLinkTable);
											} // end of the if loop
										} // end of the for loop
									} // end of the if loop
								} // end of the if loop
							} // end of the if loop
						} // end of the if loop
					} // end of the for loop

					// Begin Add v7.05f

					/*
					 *  Following piece of code will be executed when:
					 * 1. Atleast one MailAlias is being used as ContactInfo(HashMap Size>0)
					 * 2. Any of the mailalias has been deleted.
					 */

					GLogger
							.chkpt("alsDeletedMailAlias:-"
									+ alsDeletedMailAlias);

					if ((null != hsmMailAliasInContactInfo)
							&& (0 != hsmMailAliasInContactInfo.size())
							&& (null != alsDeletedMailAlias)
							&& (0 != alsDeletedMailAlias.size())) {
						String strTemp = null;

						for (int iHsmcnt = 0; iHsmcnt < alsDeletedMailAlias
								.size(); iHsmcnt++) {
							strTemp = (String) alsDeletedMailAlias.get(iHsmcnt);

							if (hsmMailAliasInContactInfo
									.containsValue(strTemp)) {
								GLogger.chkpt("Deleted MailAlias is:-"
										+ strTemp);

								// update Hashmap for the case where MailAlias has been deleted.
								hsmMailAliasInContactInfo.put(strTemp, "");
							}
						}

						// put HashMap back in session.
						teleSessionMgr.putValue(
								GAfeConstants.CONTACTINFOMAILALIAS,
								hsmMailAliasInContactInfo);
					}

					// End Add v7.05f
				} // end of the if loop

				// Now we need to make a link to this customerproductlineid to the customer
				// and create accounts for this.

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement");
					// System.out.println("\n\n\n");
					// System.out.println("Calling the Account Function");
				}

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */

				// BEGIN ADD V 7.04c--DATAQUALITY
				// HERE A NEW CHECK WILL BE DONE TO CHECK WHETHRE USER HAS COME FROM THE ACCOUNT TABE OR NOT /
				// IF YES THEN CALL LPRODUCT_EXT.lCreateAccountForCPLIDNewLogic
				// ELSE CONTINUE WITHTHE EXISTING LOGIC.SIMILAR CHECKS WILL BE DONE IN ISAVEOLDPRODUCTLINE.
				BAccount objBAccount = null;

				objLProduct_ext = new LProduct_ext(teleSessionMgr, bSession);

				// BEGIN DELETE V 7.04e
				// objBAccount = (BAccount)teleSessionMgr.getValue(GAfeConstants.ORDER_INTAKE_ACCOUNT_SELECTED_BACCOUNT); //ToDo

				/*
				 * if(null != objBAccount)
				 * {
				 * lNRCAccountID = objLProduct_ext.lCreateAccountForCPLIDNewLogic(bProductDetailProperty,Long.valueOf(lCustomerProductIdMaster),bProductDetailProperty.lCustomerProductLineID,objBAccount);
				 * }
				 */

				// END DELETE V 7.04e
				// BEGIN ADD V 7.04e
				Long lCustomerAcctId = null;

				/*
				 *  if(null == hmapDetails)
				 * {
				 *       hmapDetails = new HashMap(1);
				 * }
				 */
				hmapDetails = (HashMap) teleSessionMgr
						.getValue(GAfeConstants.ORDER_INTAKE_ACCOUNT_ALL_PAYERS_DETAILS);

				if (null != hmapDetails) {
					lCustomerAcctId = (Long) teleSessionMgr
							.getValue(GAfeConstants.ORDER_INTAKE_ACCOUNT_SELECTED_CUSTACCID);
					objBAccount = (BAccount) hmapDetails.get(lCustomerAcctId);
				}

				if (null != objBAccount) {
					GLogger.chkpt("Baccount is not null applying new logic");
					lNRCAccountID = objLProduct_ext
							.lCreateAccountForCPLIDNewLogic(
									bProductDetailProperty,
									Long.valueOf(lCustomerProductIdMaster),
									bProductDetailProperty.lCustomerProductLineID,
									objBAccount);
				}

				// END ADD V 7.04e
				else {

					// END ADD V 7.04c--DATAQUALITY
					GLogger.chkpt("Baccount is  null applying new old");
					lNRCAccountID = lngNewMainCreateAccountForCustomerProductLineIDForOld(
							bProductDetailProperty, Long.valueOf(
									lCustomerProductIdMaster), dtActivationDate);

					// BEGIN ADD V 7.04c--DATAQUALITY
				}

				// END ADD V 7.04c--DATAQUALITY

				// We needto take care of the new products added and old products updated.
				// Calling the Main Recursive Function Over here
				// Begin Delete V7.06h
				// Begin Delete V7.06f
				// vdMainRFncOfNewOrOldSaveOfProductLine(bProductDetailProperty, Long.valueOf(lCustomerProductIdMaster), FINAL_ONE, FINAL_ONE, Long.valueOf(lProcessService), Long.valueOf(lProcessAccess), Long.valueOf(lOrderID), lNRCAccountID, dtActivationDate);//order id comes here
				// End Delete V7.06f
				// Begin Add V7.06f
				vdMainRFncOfNewOrOldSaveOfProductLine(bProductDetailProperty,
						Long.valueOf(lCustomerProductIdMaster), FINAL_ONE,
						FINAL_ONE, Long.valueOf(lProcessService), Long.valueOf(
								lProcessAccess), Long.valueOf(lOrderID),
						lNRCAccountID, dtActivationDate, Long.valueOf(0)); // order id comes here

				// End Add V7.06f
				// End Delete V7.06h
				// Begin Add V7.06h
				// lParentProductID = (bProductDetailProperty.lProductID).longValue();
				// GLogger.chkpt("In method iSaveOldProductLine lParentProductID : " + lParentProductID);
				// vdMainRFncOfNewOrOldSaveOfProductLine(bProductDetailProperty, Long.valueOf(lCustomerProductIdMaster), FINAL_ONE, FINAL_ONE, Long.valueOf(lProcessService), Long.valueOf(lProcessAccess), Long.valueOf(lOrderID), lNRCAccountID, dtActivationDate,lParentProductID);//order id comes here
				// End Add V7.06d
				// Begin Version - 3.29 Changes For putting the process id's of domain with domain linked mailalaises and url's
				bProductDetailProperty = bOPutFlag_OForRelatedDomainProcesses(bProductDetailProperty);

				// Begin Version - 3.29 Changes For putting the process id's of domain with domain linked mailalaises and url's

				// Changes Done by Sachin Saurabh Saxena
				// When there is no appoointment taken for this Productline and there is a change from Np to Tn

				/** ***********************MAKING THE PROCESS OBSOLETE FOR CHANGE OF CASE NP TO TN******************************* */
				if ((FINAL_ZERO == lCustomerAppointmentID)
						&& (((GAfeDescription
								.strGetProperty(string_PRODUCT_TELEPHONE))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))))) {
					if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
						bNumber = new BNumber();
						bNumber = (BNumber) teleSessionMgr
								.getValue("BNumber_aCTel");

						// BEGIN DELETE V5.43c
						// comment: Check if the old NP number is not a case of reactiveer porteer

						/*
						 * if(("TN").equalsIgnoreCase(bNumber.strKindOfNumber))
						 * {
						 *   if (("NP").equalsIgnoreCase(bNumber.strKindOfNumberOld))
						 *   {
						 *
						 *
						 *       //BEGIN DELETE V5.43c
						 *       //comment: Check if the old NP number is not a case of reactiveer porteer
						 *       //vdMakeProcessIDObsoleteInAllProcessTables(lProcessIDToDeleteForChange_FromNPtoTN);
						 *       //END DELETE V5.43c
						 *
						 *
						 *   }//end of the if loop
						 *
						 * }//end of the if loop
						 */

						// END DELETE V5.43c
						// BEGIN ADD V5.43c
						// comment: Check if the old NP number is not a case of reactiveer porteer
						long lNP_ProcessID = lProcessIDToDeleteForChange_FromNPtoTN;

						vMakeNPProcessObsolete(bNumber, lNP_ProcessID);

						// END ADD V5.43c
					} // end of the if loop
				} // end of the if loop

				/** ***********************MAKING THE PROCESS OBSOLETE FOR CHANGE OF CASE NP TO TN******************************* */

				// When there is appoointment taken for this Productline
				// Check that appointment should not be obsolete
				if ((!(FINAL_ZERO == lCustomerAppointmentID))
						&& (((GAfeDescription
								.strGetProperty(string_PRODUCT_TELEPHONE))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))))) {
					if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
						bNumber = new BNumber();
						bNumber = (BNumber) teleSessionMgr
								.getValue("BNumber_aCTel");

						// if (GAfePropertyLoader.DEBUG)
						// System.out.println("strNumber             -------------------------" + bNumber.strNumber);

						// BEGIN DELETE V5.43c
						// comment: Modification for the current owner check

						/*
						 * if(("NP").equalsIgnoreCase(bNumber.strKindOfNumber))
						 * {
						 *
						 *
						 *   if (("TN").equalsIgnoreCase(bNumber.strKindOfNumberOld))
						 *   {
						 *
						 *
						 *       if(GAfePropertyLoader.DEBUG)
						 *           System.out.println("-----------------TN-NP Case out---------------");
						 *       //Set the Flag in CustomerProductLineTable
						 *       customerProductLineRow  =       new CustomerProductLineRow();
						 *       customerProductLineTable        =       (CustomerProductLine)teleSessionMgr.getTable("CUSTOMERPRODUCTLINE");    // Getting the CustomerProduct table from the session
						 *
						 *       if(null != customerProductLineTable)
						 *       {
						 *           if(null != customerProductLineRow)
						 *           {
						 *               customerProductLineRow  =       new CustomerProductLineRow();
						 *               customerProductLineRow  =       customerProductLineTable.cplrSearchByCustProductLineIDandObsolete(bProductDetailProperty.lCustomerProductLineID.longValue(), FINAL_ZERO);
						 *               if(GAfePropertyLoader.DEBUG)
						 *                   System.out.println("-----------------  customerProductLineRow.iTelChange ---------------");
						 *               //Updating All the Values Over here
						 *               customerProductLineRow.iTelChange       =       FINAL_ONE;
						 *               customerProductLineTable.updateRecord(customerProductLineRow);
						 *
						 *           }//end of the if loop
						 *
						 *       }//end of the if loop
						 *
						 *
						 *       teleSessionMgr.putTable("CUSTOMERPRODUCTLINE" ,customerProductLineTable);
						 *       //vInsertInProcessTables(bProductDetailProperty.lCustomerProductLineID.longValue(), GAfeDescription.lGetTypeId("PROCESSTYPE_NP"), GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW"), lOrderID);
						 *
						 *   }//end of the if loop
						 */

						// END DELETE V5.43c
						// BEGIN DELETE V 5.47a
						// NOW tn-np SCENARIO IS HANDLED SEPERATELY
						/*
						 * //BEGIN ADD V5.43c
						 * //after checking that the Np modification is required we set the iTelChange so that appointment
						 * // changes can be done.
						 * if (bModification_For_New_NP_Required(bNumber))
						 * {
						 *   // set the flag iTelChange = 1.
						 *
						 *   customerProductLineTable = (CustomerProductLine)teleSessionMgr.getTable(
						 *   CUSTOMERPRODUCTLINE_TABLE);
						 *   if(null != customerProductLineTable)
						 *   {
						 *       customerProductLineRow  = customerProductLineTable.
						 *       cplrSearchByCustProductLineIDandObsolete(
						 *       bProductDetailProperty.lCustomerProductLineID.longValue(),FINAL_ZERO);
						 *
						 *       GLogger.debug(CLASS_NAME,METHOD_iSaveOldProductLine,"iTelChange is being set to 1 ");
						 *
						 *       //Updating All the Values Over here
						 *       customerProductLineRow.iTelChange       =       FINAL_ONE;
						 *       customerProductLineTable.updateRecord(customerProductLineRow);
						 *   }
						 *   teleSessionMgr.putTable("CUSTOMERPRODUCTLINE" ,customerProductLineTable);
						 * }
						 * //END ADD V5.43c
						 */

						// END DELETE V 5.47a
						// BEGIN DELETE V 5.43e
						// HANDLED IN MANAGER
						/*
						 * //BEGIN ADD V5.43c
						 * //comment: Only in case of NP-NP do the following
						 * if(("NP").equalsIgnoreCase(bNumber.strKindOfNumber))
						 * {
						 * //END ADD V5.43c
						 *   if (("NP").equalsIgnoreCase(bNumber.strKindOfNumberOld))
						 *   {
						 *       //NP-NP Case
						 *
						 *       if(GAfePropertyLoader.DEBUG)
						 *           System.out.println("-----------------NP-NP Case out---------------");
						 *
						 *       if (!((bNumber.strNumber).equalsIgnoreCase(bNumber.strNumberOld)))
						 *       {
						 *           if(GAfePropertyLoader.DEBUG)
						 *               System.out.println("-----------------NP-NP Case In---------------");
						 *
						 *       //BEGIN DELETE V5.43e
						 *       //NOW THESE SCENARIOS WILL BE HANDLED THROUGH MANAGER
						 *       //iChangeNPcase(lCustomerAppointmentID, bProductDetailProperty.lCustomerProductLineID.longValue(),bNumber.strNumberOld,1);
						 *       //END DELETE V5.43e
						 *
						 *       }//end of the if loop
						 *       else if(!((bNumber.strType).equalsIgnoreCase(bNumber.strTypeOld)))
						 *       {
						 *           if(GAfePropertyLoader.DEBUG)
						 *               System.out.println("-----------------strType /strTypeOld- Case out--------------"+ bNumber.strTypeOld+"  "+bNumber.strType);
						 *
						 *           //BEGIN DELETE V5.43c
						 *           //comment: Only in case of current owner == OLO do the following
						 *           //iSendNPRForComplexityCode(bProductDetailProperty.lCustomerProductLineID.longValue());
						 *           //END DELETE V5.43c
						 *
						 *           //BEGIN ADD V5.43c
						 *           //comment: Only in case of current owner == OLO do the following
						 *           if (!( GAfeConstants.TELE.equalsIgnoreCase(bNumber.strCurrentOwner)))
						 *           {
						 *               // Business object defines customer productline id as Long and not long.
						 *               iSendNPRForComplexityCode(bProductDetailProperty.lCustomerProductLineID.longValue());
						 *           }
						 *           //END ADD V5.43c
						 *
						 *       }
						 *
						 *   }//end of the if loop
						 *
						 * }//end of the if loop
						 */

						// END ADD V 5.43e
						if (("TN").equalsIgnoreCase(bNumber.strKindOfNumber)) {
							if (("TN")
									.equalsIgnoreCase(bNumber.strKindOfNumberOld)) {

								// TN-TN Case
								// if (GAfePropertyLoader.DEBUG)
								// System.out.println("-----------------TN-TN Case out---------------");
								if (!((bNumber.strNumber)
										.equalsIgnoreCase(bNumber.strNumberOld))) {
									GLogger.chkpt("Inside if statement ");	
									// DO NOTHING
								} // end of the if loop
							} // end of the if loop

							// BEGIN DELETE V5.43e
							// NOW THESE SCENARIOS WILL BE HANDLED THROUGH MANAGER

							/*
							 * if (("NP").equalsIgnoreCase(bNumber.strKindOfNumberOld))
							 * {
							 *   //NP-TN Case
							 *   if(GAfePropertyLoader.DEBUG)
							 *       System.out.println("-----------------TN-NP Case---------------");
							 *
							 *   iChangeNPcase(lCustomerAppointmentID, bProductDetailProperty.lCustomerProductLineID.longValue(),bNumber.strNumberOld,2);
							 *
							 * }//end of the if loop
							 */

							// END DELETE V5.43e
						} // end of the if loop
					}
				}

				// We can not provision mail address and URL whose domain is still not
				// Provisioned
				if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) // For Internet Kind of Product
				{
					vdChangeServiceProvisioning(bProductDetailProperty);

					// Save all the Other Logins in case of internet kind of Product
					vInsertIncustomerProductLineIdentifier(bProductDetailProperty);
				}

				// BEGIN DELETE V5.39b
				// Comment: Release 8: LN 68: Removing parent's activation billing process with child order

				/*
				 * //BEGIN ADD V5.32a
				 * //Comment: Changes made for MGM
				 * LProductMGM lProductMGM = new LProductMGM(teleSessionMgr,bSession);
				 * lProductMGM.vCreateParentProcess(bProductDetailProperty.lMGMCode,
				 *   bProductDetailProperty.lMGMCodeOld,
				 *        bProductDetailProperty.lProductID.longValue(),lOrderID);
				 * //END ADD V5.32a
				 */

				// END DELETE V5.39b
				// BEGIN ADD V7.05f
				// retrieve the hashmap which is finally updated and call another method which will do the updates in the contactinfo tables
				// here the update is done in container tables.
				hsmMailAliasInContactInfo = (HashMap) teleSessionMgr
						.getValue(GAfeConstants.CONTACTINFOMAILALIAS);
				GLogger
						.chkpt("final hsmMailAliasInContactInfo before calling update method is:-"
								+ hsmMailAliasInContactInfo);

				// call method for updating contactinfo tables.
				LProduct_ext
						.vUpdateMailAliasInContactInfo(hsmMailAliasInContactInfo);
				teleSessionMgr.removeValue(GAfeConstants.CONTACTINFOMAILALIAS);

				// END ADD V7.05f
			} // end of the if loop
			GLogger.chkpt("LPROUDCT.JAVA - PROCESS PRINT AFTER START");
			Process printProcessTable1 = (Process) teleSessionMgr
					.getTable(string_PROCESS);
			Vector allProcessAfter = printProcessTable1.vctGetAll();
			GLogger
					.chkpt("LProduct.iSaveOldProductLine - allProcessAfter.size() = "
							+ allProcessAfter.size());
			for (int loop = 0; loop < allProcessAfter.size(); loop++) {
				ProcessRow printProcessRow = (ProcessRow) allProcessAfter
						.get(loop);
				GLogger.chkpt("Process Details After - "
						+ printProcessRow.lProcessID + " : "
						+ printProcessRow.lProcessTypeID + " : "
						+ printProcessRow.lOrderID);
			}
			GLogger.chkpt("LPROUDCT.JAVA - PROCESS PRINT AFTER END");
			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop

		// Begin Add V7.04h
		catch (AfeException afe) {
			throw afe;
		}

		// End Add V7.04h
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			GLogger.logException(ex);

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// BEGIN ADD V. 6.07h
		updateContactInfo(lCustomerID.longValue());

		// BEGIN ADD V.6.07h

		// Returning of the String
		return ++iCounterForReturn;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will is used for Creation of the Customer Account for a given
	 *                                  CustomerProductLine
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long CustomerProductID, Long CustomerProductLineID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected void vdMakeProcessIDObsolete(Long lProcessID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */

		// BEGIN : ADD V5.71e
		long lProcessStatusID = 0;

		// END : ADD V5.71e
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			ProcessRow processRow = null; // Initializing the Object Class for the PROCESS table

			// BEGIN : ADD V5.71e
			ProcessLinkRow processLinkRow = null;
			ProcessStatusRow processStatusRow = null;
			Vector vctResult = null;

			// END : ADD V5.71e
			processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session
			//processRow = new ProcessRow();
			processRow = (ProcessRow) processTable
					.prSearchByProcessIDandObsolete(lProcessID.longValue(),
							FINAL_ZERO);

			// BEGIN : ADD V5.71e
			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(GAfeConstants.PROCESSLINK);
			vctResult = processLinkTable.vctSearchByProcessIDandObsolete(
					lProcessID.longValue(), FINAL_ZERO);
			processStatusTable = (ProcessStatus) teleSessionMgr
					.getTable(GAfeConstants.PROCESSSTATUS);

			// END       : ADD V5.71e

			// BEGIN DELETE v5.71e

			/*                      if (null != processRow)
			 {
			 if (null != processTable)
			 {
			 if (null != processRow)
			 {
			 //Updating All the Values Over here
			 processRow.iObsolete = NOTEXISTS;
			 processRow.strModificationUser = bSession.strUserName;

			 if (processRow.iStatusInDB == Record.VIEW || processRow.iStatusInDB == Record.UPDATE)
			 {
			 processRow.iStatusInDB = Record.UPDATE;
			 processTable.updateRecord(processRow);
			 }
			 //when iStatusInDB is equal to Record.INSERT
			 else
			 {
			 processRow.iStatusInDB = Record.DELETE;
			 processTable.deleteRecord(processRow.lProcessID);
			 }

			 }//end of the if loop

			 }//end of the if loop

			 // Put the container back into the session
			 teleSessionMgr.putTable("PROCESS", processTable);

			 }//end of the if loop
			 */

			// END DELETE v5.71e
			// BEGIN : ADD V5.71e
			if (null != processRow) {

				// Delete process row if it has not yet been inserted into the database
				if (processRow.iStatusInDB == Record.INSERT) {
					processTable.deleteRecord(processRow.lProcessID);

					// Delete ProcessLink rows
					if ((null != vctResult) && (FINAL_ZERO != vctResult.size())) {
						for (int iCounter = 0; iCounter < vctResult.size(); iCounter++) {
							processLinkRow = (ProcessLinkRow) vctResult
									.elementAt(iCounter);
							processLinkTable
									.deleteRecord(processLinkRow.lProcessLinkID);
						}
					}

					// Delete ProcessStatus rows
					vctResult = processStatusTable
							.vctSearchByProcessIDandObsolete(lProcessID
									.longValue(), FINAL_ZERO);

					if ((null != vctResult) && (FINAL_ZERO != vctResult.size())) {
						for (int iCounter = 0; iCounter < vctResult.size(); iCounter++) {
							processStatusRow = (ProcessStatusRow) vctResult
									.elementAt(iCounter);
							processStatusTable
									.deleteRecord(processStatusRow.lProcessStatusID);
						}
					}

					teleSessionMgr
							.putTable(GAfeConstants.PROCESS, processTable);
					teleSessionMgr.putTable(GAfeConstants.PROCESSLINK,
							processLinkTable);
					teleSessionMgr.putTable(GAfeConstants.PROCESSSTATUS,
							processStatusTable);
				}

				// If the Process row has already been inserted, then insert a row for CANCEL status in ProcessStatus
				else {

					// Mark Process as OBSOLETE in Process table
					processRow.iObsolete = NOTEXISTS;
					processRow.strModificationUser = bSession.strUserName;
					processRow.iStatusInDB = Record.UPDATE;
					processTable.updateRecord(processRow);

					// BEGIN : ADD V5.71e
					// Mark Process as OBSOLETE in ProcessLink table
					if ((null != vctResult) && (FINAL_ZERO != vctResult.size())) {
						for (int iCounter = 0; iCounter < vctResult.size(); iCounter++) {
							processLinkRow = (ProcessLinkRow) vctResult
									.elementAt(iCounter);
							processLinkRow.iObsolete = NOTEXISTS;
							processLinkRow.strModificationUser = bSession.strUserName;
							processLinkRow.iStatusInDB = Record.UPDATE;
							processLinkTable.updateRecord(processLinkRow);
						}
					}

					// END       : ADD V5.71e

					if (null != processStatusTable) {
						processStatusRow = new ProcessStatusRow();
						processStatusRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lProcessStatusID = processStatusRow.lNewNr(); // Auto Generation of the  Primary key
						processStatusRow.lProcessStatusID = lProcessStatusID;
						processStatusRow.lProcessID = lProcessID.longValue();
						processStatusRow.lProcessStatusTypeID = GAfeDescription.PROCESSSTATUSTYPE_CANCELLED; // Marking the process status as cancel
						processStatusTable.addUniqueRecord(processStatusRow); // Adding the Record in the CustomerPromotionTable

						// Put the container back into the session
						teleSessionMgr.putTable(GAfeConstants.PROCESS,
								processTable);
						teleSessionMgr.putTable(GAfeConstants.PROCESSLINK,
								processLinkTable);
						teleSessionMgr.putTable(GAfeConstants.PROCESSSTATUS,
								processStatusTable);
					}
				}
			}

			// END       : ADD V5.71e

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will is used for Creation of the Customer Account for a given
	 *                                  CustomerProductLine
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long CustomerProductID, Long CustomerProductLineID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected void vdMakeProcessIDObsoleteInAllProcessTables(long lProcessID)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			ProcessRow processRow = null; // Initializing the Object Class for the PROCESS table

			processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session
			//processRow = new ProcessRow();
			processRow = (ProcessRow) processTable
					.prSearchByProcessIDandObsolete(lProcessID, FINAL_ZERO);

			if (null != processRow) {
				if (null != processTable) {
					if (null != processRow) {

						// ****************STARTING*****************TO PRINT QUERRY**********************************************
						if ((GAfePropertyLoader.DEBUG)) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("********************************************************************");
							// System.out.println("Deleted Process       : " + processRow.lProcessID + " from the Process Table");
							// System.out.println("********************************************************************");
						}

						// ****************ENDING*******************TO PRINT QUERRY**********************************************

						// Updating All the Values Over here
						processRow.iObsolete = NOTEXISTS;
						processRow.strModificationUser = bSession.strUserName;

						if ((processRow.iStatusInDB == Record.VIEW)
								|| (processRow.iStatusInDB == Record.UPDATE)) {
							GLogger.chkpt("Inside if statement");
							// BEGIN DELETE V5.21a
							// comment: As per Change NSA flow the below code nothing needs to be done

							/*
							 * processRow.iStatusInDB = Record.UPDATE;
							 * processTable.updateRecord(processRow);
							 */

							// END DELETE V5.21a
						}

						// when iStatusInDB is equal to Record.INSERT
						else {
							processRow.iStatusInDB = Record.DELETE;
							processTable.deleteRecord(processRow.lProcessID);
						}
					} // end of the if loop
				} // end of the if loop

				// Put the container back into the session
				teleSessionMgr.putTable(string_PROCESS, processTable);
			} // end of the if loop

			ProcessLinkRow processLinkRow = null; // Initializing the Object Class for the Vat table

			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(string_PROCESSLINK); // Getting the Vat table from the session

			Vector vctProcessLinkRow = null;

			vctProcessLinkRow = processLinkTable
					.vctSearchByProcessIDandObsolete(lProcessID, FINAL_ZERO);

			if ((null != vctProcessLinkRow)
					&& (FINAL_ZERO != vctProcessLinkRow.size())) {
				for (int iCounter = FINAL_ZERO; iCounter < vctProcessLinkRow
						.size(); iCounter++) {
					processLinkRow = new ProcessLinkRow();
					processLinkRow = (ProcessLinkRow) vctProcessLinkRow
							.elementAt(iCounter);

					if (null != processLinkTable) {

						// If the ProcessLink Row is not null and is not obsolete then to mark them for deletion
						if ((null != processLinkRow)
								&& (FINAL_ONE != processLinkRow.iObsolete)) {

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */
							if ((GAfePropertyLoader.DEBUG)) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("********************************************************************");
								// System.out.println("Deleted ProcessLink       : " + processLinkRow.lProcessLinkID + " from the ProcessLink Table");
								// System.out.println("********************************************************************");
							}

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */

							// Updating All the Values Over here
							processLinkRow.iObsolete = NOTEXISTS;
							processLinkRow.strModificationUser = bSession.strUserName;

							if ((processLinkRow.iStatusInDB == Record.VIEW)
									|| (processLinkRow.iStatusInDB == Record.UPDATE)) {
								processLinkRow.iStatusInDB = Record.UPDATE;
								processLinkTable.updateRecord(processLinkRow);
							}

							// when iStatusInDB is equal to Record.INSERT
							else {
								processLinkRow.iStatusInDB = Record.DELETE;
								processLinkTable
										.deleteRecord(processLinkRow.lProcessLinkID);
							}
						} // end of the if loop

						// Put the container back into the session
						teleSessionMgr
								.putTable(string_PROCESSLINK, processLinkTable);
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop

			ProcessStatusRow processStatusRow = null; // Initializing the Object Class for the Vat table

			processStatusTable = (ProcessStatus) teleSessionMgr
					.getTable(string_PROCESSSTATUS); // Getting the Vat table from the session
			processStatusRow = processStatusTable
					.psrSearchByProcessID(lProcessID);

			if (null != processStatusTable) {

				// If the ProcessStatus Row is not null and is not obsolete then to mark them for deletion
				if ((null != processStatusRow)
						&& (FINAL_ONE != processStatusRow.iObsolete)) {

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if ((GAfePropertyLoader.DEBUG)) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("********************************************************************");
						// System.out.println("Deleted ProcessStatus     : " + processStatusRow.lProcessStatusID + " from the ProcessStatus Table");
						// System.out.println("********************************************************************");
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */

					// BEGIN DELETE V5.21a
					// comment: only insertion in processstatus as per Change NSA Flow doc
					/*
					 *
					 * //Updating All the Values Over here
					 * processStatusRow.iObsolete  =       NOTEXISTS;
					 * processStatusRow.strModificationUser        = bSession.strUserName;
					 *
					 * //Begin : Add ver 2.43 by Abhishek
					 * processStatusRow.lProcessStatusTypeID = GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NP_CANCELLED");
					 * //End   : Add ver 2.43 by Abhishek
					 */

					// END DELETE V5.21a
					if ((processStatusRow.iStatusInDB == Record.VIEW)
							|| (processStatusRow.iStatusInDB == Record.UPDATE)) {

						// BEGIN DELETE V5.21a
						// comment: only insertion in process table

						/*
						 * processStatusRow.iStatusInDB = Record.UPDATE;
						 * processStatusTable.updateRecord(processStatusRow);
						 */

						// END DELETE V5.21a
						// BEGIN ADD V5.21a
						// comment: code to add a process status row with status cancel
						// Inserting a Record in Process Status table
						processStatusRow = null;
						processStatusRow = new ProcessStatusRow();
						processStatusRow.iStatusInDB = Record.INSERT;
						processStatusRow.lProcessStatusID = processStatusRow
								.lNewNr();
						processStatusRow.lProcessID = lProcessID;
						processStatusRow.lProcessStatusTypeID = GAfeDescription
								.lGetTypeId("PROCESSSTATUSTYPE_NP_CANCELLED");
						processStatusRow.strCreationUser = bSession.strUserName;
						processStatusRow.strModificationUser = bSession.strUserName;
						processStatusTable.addUniqueRecord(processStatusRow);

						// END ADD V5.21a
					}

					// when iStatusInDB is equal to Record.INSERT
					else {
						processStatusRow.iStatusInDB = Record.DELETE;
						processStatusTable
								.deleteRecord(processStatusRow.lProcessStatusID);
					}
				} // end of the if loop

				// Put the container back into the session
				teleSessionMgr.putTable(string_PROCESSSTATUS, processStatusTable);
			} // end of the if loop

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will is used for Creation of the Customer Account for a given
	 *                                  CustomerProductLine
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long CustomerProductID, Long CustomerProductLineID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected Long lngNewMainCreateAccountForCustomerProductLineIDForOld(
			BProductDetailProperty bProductDetailProperty,
			Long CustomerProductID, Date dtActivationDate) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iCounter = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		Long lNRCAccountID = Long.valueOf(0); // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** *************************************MAKING OF NEXT QUERRY************************************** */
			CustomerLR2CustomerProductRow customerLR2CustomerProductRow = null;

			customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session

			Vector vctCustomerLR2CustomerProd = null;

			vctCustomerLR2CustomerProd = customerLR2CustomerProductTable
					.vctSearchByCustomerProductLineID(bProductDetailProperty.lCustomerProductLineID
							.longValue());

			long lCustomerLinkRoleID = 0;
			long RoleTypeID = 0;
			long lCLRIDUser = 0;
			long lCLRIDUsage = 0;
			long lCLRIDURC = 0;
			long lCLRIDNRC = 0;

			// Begin DEL v9.01d
			// long lCLIDUser = 0;
			// End DEL v9.01d
			long lCLIDUsage = 0;
			long lCLIDRC = 0;
			long lCLIDNRC = 0;

			if (null != vctCustomerLR2CustomerProd) {
				for (iCounter = 0; iCounter < vctCustomerLR2CustomerProd.size(); iCounter++) {
					lCustomerLinkRoleID = 0;
					lCustomerLinkRoleID = ((CustomerLR2CustomerProductRow) vctCustomerLR2CustomerProd
							.elementAt(iCounter)).lCustomerLinkRoleID;

					// Begin DEL v9.01d
					// CustomerLinkRoleRow customerLinkRoleRow = null;
					// End DEL v9.01d
					customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
							.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session

					Vector vctCustomerLRole = new Vector();

					vctCustomerLRole = customerLinkRoleTable
							.vctSearchByCustomerLinkRoleIDandObsolete(
									lCustomerLinkRoleID, FINAL_ZERO);
					RoleTypeID = 0;
					if(vctCustomerLRole!=null)
					{///added PR158961 
					RoleTypeID = ((CustomerLinkRoleRow) vctCustomerLRole
							.elementAt(FINAL_ZERO)).lRoleTypeID;

					if ((GAfeDescription.strGetProperty(string_ROLETYPE_USER))
							.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
						lCLRIDUser = lCustomerLinkRoleID;

						// Begin DEL v9.01d
						// lCLIDUser = ((CustomerLinkRoleRow) vctCustomerLRole.elementAt(FINAL_ZERO)).lCustomerLinkID;
						// End DEL v9.01d
					} // end of the if loop
					else if ((GAfeDescription.strGetProperty(string_ROLETYPE_USAGE))
							.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
						lCLRIDUsage = lCustomerLinkRoleID;
						lCLIDUsage = ((CustomerLinkRoleRow) vctCustomerLRole
								.elementAt(FINAL_ZERO)).lCustomerLinkID;
					} // end of the else part of the if loop
					else if ((GAfeDescription.strGetProperty(string_ROLETYPE_RC))
							.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
						lCLRIDURC = lCustomerLinkRoleID;
						lCLIDRC = ((CustomerLinkRoleRow) vctCustomerLRole
								.elementAt(FINAL_ZERO)).lCustomerLinkID;
					} // end of the else part of the if loop
					else if ((GAfeDescription.strGetProperty(string_ROLETYPE_NRC))
							.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
						lCLRIDNRC = lCustomerLinkRoleID;
						lCLIDNRC = ((CustomerLinkRoleRow) vctCustomerLRole
								.elementAt(FINAL_ZERO)).lCustomerLinkID;
					} // end of the else part of the if loop
				} // end of the for loop
				}//newly added brace PR158961
			} // end of the if loop

			/** **************STARTING*****************TO PRINT QUERRY******************************************** */
			if ((GAfePropertyLoader.DEBUG)) {
				GLogger.chkpt("Inside if statement");
				// System.out.println("***********************************************************");
				// System.out.println("The lCLRIDUser    : " + lCLRIDUser);
				// System.out.println("The lCLRIDUsage   : " + lCLRIDUsage);
				// System.out.println("The lCLRIDURC     : " + lCLRIDURC);
				// System.out.println("The lCLRIDNRC     : " + lCLRIDNRC);
				// System.out.println("***********************************************************");
			}

			/** **************ENDING*******************TO PRINT QUERRY******************************************** */

			// begin add 7.04k
			long lCustomerAccountID = 0;
			int iProtected = 0;

			// get custchargetype get by line and obsolete
			CustomerChargeType customerChargeType = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);
			Vector vctCustomerChargeTypeRow = customerChargeType
					.vctSearchByCustomerProductLineIDandObsolete(
							bProductDetailProperty.lCustomerProductLineID
									.longValue(), FINAL_ZERO);

			if ((null != vctCustomerChargeTypeRow)
					&& (0 < vctCustomerChargeTypeRow.size())) {

				// get cuatacc id
				lCustomerAccountID = ((CustomerChargeTypeRow) vctCustomerChargeTypeRow
						.get(FINAL_ZERO)).lCustomerAccountID;

				// get cust acc table
				CustomerAccount customerAccount = (CustomerAccount) teleSessionMgr
						.getTable("CUSTOMERACCOUNT");

				// get cust acc row
				CustomerAccountRow customerAccountRow = customerAccount
						.crSearchByCustomerAccountID(lCustomerAccountID);

				// get protectred to a local variable
				iProtected = customerAccountRow.iProtected;
			}

			GLogger.chkpt("iProtected = " + iProtected);

			// end add 7.04k

			long lAddressID = 0;
			long lCustomerID = 0;
			long CustomerLinkID = 0;
			BProductRole bProductRole = null;
			BProductRoleDetail bProductRoleDetail = null;

			if (null != teleSessionMgr.getValue(string_BProductDetailRole_aCProduct)) {

				// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
				bProductRole = (BProductRole) teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct);
				iSizeOfVector = bProductRole.vctProductRole.size();

				for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
					bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
							.elementAt(iCounter);
					lAddressID = 0;
					lCustomerID = 0;
					lAddressID = bProductRoleDetail.lAddressID.longValue();
					lCustomerID = bProductRoleDetail.lCustomerID.longValue();

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if ((GAfePropertyLoader.DEBUG)) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("***********************************************************");
						// System.out.println("The RoleTypeID    : " + bProductRoleDetail.lRoleTypeID);
						// System.out.println("The lAddressID    : " + lAddressID);
						// System.out.println("The lCustomerID   : " + lCustomerID);
						// System.out.println("***********************************************************");
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */
					CustomerLinkRow customerLinkRow = null;

					customerLinkTable = (CustomerLink) teleSessionMgr
							.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

					Vector vctcustomerLink = null;

					vctcustomerLink = customerLinkTable
							.clrSearchByCustIDAddIDandObsolete(lCustomerID,
									lAddressID, FINAL_ZERO);
					CustomerLinkID = 0;

					if ((null == vctcustomerLink)
							|| ((null != vctcustomerLink) && (FINAL_ZERO == vctcustomerLink
									.size()))) {

						// Create the Row CustomerLink
						// If we do not find any row in here then do this
						// If this CustomerLinkID is not there then add that in the table
						//customerLinkRow = new CustomerLinkRow();
						customerLinkTable = (CustomerLink) teleSessionMgr
								.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

						if (null != customerLinkTable) {
							customerLinkRow = new CustomerLinkRow();
							customerLinkRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
							CustomerLinkID = customerLinkRow.lNewNr(); // Auto Generation of the  Primary key

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */
							if ((GAfePropertyLoader.DEBUG)) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("***********************************************************");
								// System.out.println("New Insertion CustomerLinkID      : " + CustomerLinkID);
								// System.out.println("***********************************************************");
							}

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */
							customerLinkRow.lCustomerLinkID = CustomerLinkID;
							customerLinkRow.lCustomerID = lCustomerID;
							customerLinkRow.lAddressID = lAddressID;
							customerLinkRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
							customerLinkRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
							customerLinkTable.addRecord(customerLinkRow); // Adding the Record in the CustomerPromotionTable

							// Put the container back into the session
							teleSessionMgr.putTable(string_CUSTOMERLINK,
									customerLinkTable);
						} // end of the if loop
					} // end of the if loop
					else {
						if ((null != vctcustomerLink)
								&& (vctcustomerLink.size() > FINAL_ZERO)) {
							CustomerLinkID = ((CustomerLinkRow) vctcustomerLink
									.elementAt(FINAL_ZERO)).lCustomerLinkID;

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */
							if ((GAfePropertyLoader.DEBUG)) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("***********************************************************");
								// System.out.println("Already Insertion CustomerLinkID  : " + CustomerLinkID);
								// System.out.println("***********************************************************");
							}

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						} // end of the if loop
					} // end of the if else if loop

					// Continue here

					/** **************STARTING*****************TO PRINT QUERRY******************************************** */
					if ((GAfePropertyLoader.DEBUG)) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("***********************************************************");
						// System.out.println("The bProductDetailProperty.lPaymentMethodUsage    : " + bProductDetailProperty.lPaymentMethodUsage);
						// System.out.println("The bProductDetailProperty.lPaymentMethodNRC      : " + bProductDetailProperty.lPaymentMethodNRC);
						// System.out.println("The bProductDetailProperty.lPaymentMethodRC               : " + bProductDetailProperty.lPaymentMethodRC);
						// System.out.println("The bProductDetailProperty.lPaymentMethodUsageOld: " + bProductDetailProperty.lPaymentMethodUsageOld);
						// System.out.println("The bProductDetailProperty.lPaymentMethodNRCOld   : " + bProductDetailProperty.lPaymentMethodNRCOld);
						// System.out.println("The bProductDetailProperty.lPaymentMethodRCOld    : " + bProductDetailProperty.lPaymentMethodRCOld);
						// System.out.println("***********************************************************");
					}

					/** **************ENDING*******************TO PRINT QUERRY******************************************** */
					//Begin Modify v9.04a
					if (null != teleSessionMgr.getValue("bIsSocialTariff")) {
						GLogger.chkpt("Social Tariff : "
								+ ((Boolean) teleSessionMgr
										.getValue("bIsSocialTariff"))
										.booleanValue());

					}
					//End Modify v9.04a
					// Begin Add V8.01d
					teleSessionMgr.putValue("STTProtected", Integer.valueOf(
							iProtected));

					// End Add V8.01d

					if ((GAfeDescription.strGetProperty(string_ROLETYPE_USAGE))
							.equalsIgnoreCase(String
									.valueOf(bProductRoleDetail.lRoleTypeID))) {
						if (

						// begin add 7.04k
						((com.fullgc.afe.utils.Constants.INT_PROTECTED == iProtected)

						// Begin Add V8.01d
						&& ((null == teleSessionMgr.getValue("bIsSocialTariff")) || (!((Boolean) teleSessionMgr
								.getValue("bIsSocialTariff")).booleanValue()))

						// End Add V8.01d
						)

								// end add 7.04k
								|| (CustomerLinkID != lCLIDUsage)
								|| (bProductDetailProperty.lPaymentMethodUsageOld
										.longValue() != bProductDetailProperty.lPaymentMethodUsage
										.longValue())) {
							vdInsertInCustomerAccount(
									bProductDetailProperty,
									bProductRoleDetail,
									Long.valueOf(CustomerLinkID),
									bProductRoleDetail.lRoleTypeID,
									bProductDetailProperty.lPaymentMethodUsageOld,
									CustomerProductID,
									bProductDetailProperty.lPaymentMethodUsage,
									lCLIDUsage, dtActivationDate);
						}
					} else if ((GAfeDescription.strGetProperty(string_ROLETYPE_RC))
							.equalsIgnoreCase(String
									.valueOf(bProductRoleDetail.lRoleTypeID))) {
						if (

						// begin add 7.04k
						((com.fullgc.afe.utils.Constants.INT_PROTECTED == iProtected)

						// Begin Add V8.01d
						&& ((null == teleSessionMgr.getValue("bIsSocialTariff")) || (!((Boolean) teleSessionMgr
								.getValue("bIsSocialTariff")).booleanValue()))

						// End Add V8.01d
						)

								// end add 7.04k
								|| (CustomerLinkID != lCLIDRC)
								|| (bProductDetailProperty.lPaymentMethodRCOld
										.longValue() != bProductDetailProperty.lPaymentMethodRC
										.longValue())) {
							vdInsertInCustomerAccount(bProductDetailProperty,
									bProductRoleDetail,
									Long.valueOf(CustomerLinkID),
									bProductRoleDetail.lRoleTypeID,
									bProductDetailProperty.lPaymentMethodRCOld,
									CustomerProductID,
									bProductDetailProperty.lPaymentMethodRC,
									lCLIDRC, dtActivationDate);
						}
					} else if ((GAfeDescription.strGetProperty(string_ROLETYPE_NRC))
							.equalsIgnoreCase(String
									.valueOf(bProductRoleDetail.lRoleTypeID))) {

						// 3.01    Begin Update
						// Purpose : Incident 854 : Making enties in CustomerProduct table for OriginalNRCCustomerAccountID
						// if((CustomerLinkID != lCLIDNRC) || (bProductDetailProperty.lPaymentMethodNRCOld.longValue() != bProductDetailProperty.lPaymentMethodNRC.longValue()))
						if (

						// begin add 7.04k
						((com.fullgc.afe.utils.Constants.INT_PROTECTED == iProtected)

						// Begin Add V8.01d
						&& ((null == teleSessionMgr.getValue("bIsSocialTariff")) || (!((Boolean) teleSessionMgr
								.getValue("bIsSocialTariff")).booleanValue()))

						// End Add V8.01d
						)

								// end add 7.04k
								|| (CustomerLinkID == lCLIDNRC)
								|| (CustomerLinkID != lCLIDNRC)
								|| (bProductDetailProperty.lPaymentMethodNRCOld
										.longValue() != bProductDetailProperty.lPaymentMethodNRC
										.longValue())) {

							// 3.01    End Update
							lNRCAccountID = lngInsertInCustomerAccount(
									bProductDetailProperty,
									bProductRoleDetail,
									Long.valueOf(CustomerLinkID),
									bProductRoleDetail.lRoleTypeID,
									bProductDetailProperty.lPaymentMethodNRCOld,
									CustomerProductID,
									bProductDetailProperty.lPaymentMethodNRC,
									lCLIDNRC, dtActivationDate);
						}
					} // end of the else part of the if else if loop

					// Code here
					CustomerLinkRoleRow customerLinkRoleRow = null;

					customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
							.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session

					Vector vctCustomerLIDandRoleTypeID = null;

					vctCustomerLIDandRoleTypeID = customerLinkRoleTable
							.vctSearchByCustomerLinkIDandRoleTypeIDandObsolete(
									CustomerLinkID,
									bProductRoleDetail.lRoleTypeID.longValue(),
									FINAL_ZERO);

					long CustomerLinkRoleID = 0;

					if (null == vctCustomerLIDandRoleTypeID) {
						if (null != customerLinkRoleTable) {
							customerLinkRoleRow = new CustomerLinkRoleRow();
							customerLinkRoleRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
							CustomerLinkRoleID = customerLinkRoleRow.lNewNr(); // Auto Generation of the  Primary key

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */
							if ((GAfePropertyLoader.DEBUG)) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("***********************************************************");
								// System.out.println("New Insertion CustomerLinkRoleID  : " + CustomerLinkRoleID);
								// System.out.println("***********************************************************");
							}

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */
							customerLinkRoleRow.lCustomerLinkRoleID = CustomerLinkRoleID;
							customerLinkRoleRow.lCustomerLinkID = CustomerLinkID;
							customerLinkRoleRow.lRoleTypeID = bProductRoleDetail.lRoleTypeID
									.longValue();
							customerLinkRoleRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
							customerLinkRoleRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
							customerLinkRoleTable
									.addUniqueRecord(customerLinkRoleRow); // Adding the Record in the CustomerPromotionTable

							// Put the container back into the session
							teleSessionMgr.putTable(string_CUSTOMERLINKROLE,
									customerLinkRoleTable);
						} // end of the if loop
					} // end of the if loop
					else {
						CustomerLinkRoleID = ((CustomerLinkRoleRow) vctCustomerLIDandRoleTypeID
								.elementAt(FINAL_ZERO)).lCustomerLinkRoleID;

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if ((GAfePropertyLoader.DEBUG)) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("***********************************************************");
							// System.out.println("Already Insertion CustomerLinkRoleID  : " + CustomerLinkRoleID);
							// System.out.println("***********************************************************");
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
					} // end of the if else if loop

					if ((GAfeDescription.strGetProperty(string_ROLETYPE_USER))
							.equalsIgnoreCase(String
									.valueOf(bProductRoleDetail.lRoleTypeID))) {

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if ((GAfePropertyLoader.DEBUG)) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("***********************************************************");
							// System.out.println("Comparing lCLRIDUser                  : " + lCLRIDUser);
							// System.out.println("Comparing CustomerLinkRoleID  : " + CustomerLinkRoleID);
							// System.out.println("***********************************************************");
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						if (!((String.valueOf(lCLRIDUser))
								.equalsIgnoreCase(String
										.valueOf(CustomerLinkRoleID)))) {
							customerLR2CustomerProductRow = null;
							customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
									.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session
							customerLR2CustomerProductRow = customerLR2CustomerProductTable
									.clrcpSearchByCustLRIdCustProdId(
											lCLRIDUser,
											bProductDetailProperty.lCustomerProductLineID
													.longValue());

							if (null != customerLR2CustomerProductTable) {
								if (null != customerLR2CustomerProductRow) {

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if ((GAfePropertyLoader.DEBUG)) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("***********************************************************");
										// System.out.println("Updating CLR2 CustomerLinkRoleID                  : " + CustomerLinkRoleID);
										// System.out.println("***********************************************************");
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */

									// Updating All the Values Over here
									if ((customerLR2CustomerProductRow.iStatusInDB == Record.VIEW)
											|| (customerLR2CustomerProductRow.iStatusInDB == Record.UPDATE)) {
										customerLR2CustomerProductRow.iStatusInDB = Record.DELETE;
										customerLR2CustomerProductTable
												.updateRecord(customerLR2CustomerProductRow);
									}

									// when iStatusInDB is equal to Record.INSERT
									else if (customerLR2CustomerProductRow.iStatusInDB == Record.INSERT) {
										customerLR2CustomerProductRow.iStatusInDB = Record.DELETE;
										customerLR2CustomerProductTable
												.deleteRecord(
														customerLR2CustomerProductRow.lCustomerLinkRoleID,
														customerLR2CustomerProductRow.lCustomerProductLineID);
									}

									// Inserting a new record
									customerLR2CustomerProductRow = new CustomerLR2CustomerProductRow();
									customerLR2CustomerProductRow.iStatusInDB = Record.INSERT;
									customerLR2CustomerProductRow.lCustomerLinkRoleID = CustomerLinkRoleID;
									customerLR2CustomerProductRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
											.longValue();
									customerLR2CustomerProductTable
											.addUniqueRecord(customerLR2CustomerProductRow);
								} // end of the if loop
							} // end of the if loop

							// Put the container back into the session
							teleSessionMgr.putTable(
									string_CUSTOMERLR2CUSTOMERPRODUCT,
									customerLR2CustomerProductTable);
						} // end of the if loop
					} else if ((GAfeDescription
							.strGetProperty(string_ROLETYPE_USAGE))
							.equalsIgnoreCase(String
									.valueOf(bProductRoleDetail.lRoleTypeID))) {

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if ((GAfePropertyLoader.DEBUG)) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("***********************************************************");
							// System.out.println("Comparing lCLRIDUsage                 : " + lCLRIDUsage);
							// System.out.println("Comparing CustomerLinkRoleID  : " + CustomerLinkRoleID);
							// System.out.println("***********************************************************");
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						if (!((String.valueOf(lCLRIDUsage))
								.equalsIgnoreCase(String
										.valueOf(CustomerLinkRoleID)))) {
							customerLR2CustomerProductRow = null;
							customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
									.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session
							customerLR2CustomerProductRow = customerLR2CustomerProductTable
									.clrcpSearchByCustLRIdCustProdId(
											lCLRIDUsage,
											bProductDetailProperty.lCustomerProductLineID
													.longValue());

							if (null != customerLR2CustomerProductTable) {
								if (null != customerLR2CustomerProductRow) {

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if ((GAfePropertyLoader.DEBUG)) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("***********************************************************");
										// System.out.println("Updating CLR2 CustomerLinkRoleID                  : " + CustomerLinkRoleID);
										// System.out.println("***********************************************************");
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */

									// Updating All the Values Over here
									if ((customerLR2CustomerProductRow.iStatusInDB == Record.VIEW)
											|| (customerLR2CustomerProductRow.iStatusInDB == Record.UPDATE)) {
										customerLR2CustomerProductRow.iStatusInDB = Record.DELETE;
										customerLR2CustomerProductTable
												.updateRecord(customerLR2CustomerProductRow);
									}

									// when iStatusInDB is equal to Record.INSERT
									else if (customerLR2CustomerProductRow.iStatusInDB == Record.INSERT) {
										customerLR2CustomerProductRow.iStatusInDB = Record.DELETE;
										customerLR2CustomerProductTable
												.deleteRecord(
														lCLRIDUsage,
														bProductDetailProperty.lCustomerProductLineID
																.longValue());
									}

									// Inserting a new record
									customerLR2CustomerProductRow = new CustomerLR2CustomerProductRow();
									customerLR2CustomerProductRow.iStatusInDB = Record.INSERT;
									customerLR2CustomerProductRow.lCustomerLinkRoleID = CustomerLinkRoleID;
									customerLR2CustomerProductRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
											.longValue();
									customerLR2CustomerProductTable
											.addUniqueRecord(customerLR2CustomerProductRow);
								} // end of the if loop
							} // end of the if loop

							// Put the container back into the session
							teleSessionMgr.putTable(
									string_CUSTOMERLR2CUSTOMERPRODUCT,
									customerLR2CustomerProductTable);
						} // end of the if loop
					} else if ((GAfeDescription.strGetProperty(string_ROLETYPE_RC))
							.equalsIgnoreCase(String
									.valueOf(bProductRoleDetail.lRoleTypeID))) {

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if ((GAfePropertyLoader.DEBUG)) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("***********************************************************");
							// System.out.println("Comparing lCLRIDURC                           : " + lCLRIDURC);
							// System.out.println("Comparing CustomerLinkRoleID  : " + CustomerLinkRoleID);
							// System.out.println("***********************************************************");
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						if (!((String.valueOf(lCLRIDURC))
								.equalsIgnoreCase(String
										.valueOf(CustomerLinkRoleID)))) {
							customerLR2CustomerProductRow = null;
							customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
									.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session
							customerLR2CustomerProductRow = customerLR2CustomerProductTable
									.clrcpSearchByCustLRIdCustProdId(
											lCLRIDURC,
											bProductDetailProperty.lCustomerProductLineID
													.longValue());

							if (null != customerLR2CustomerProductTable) {
								if (null != customerLR2CustomerProductRow) {

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if ((GAfePropertyLoader.DEBUG)) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("***********************************************************");
										// System.out.println("Updating CLR2 CustomerLinkRoleID                  : " + CustomerLinkRoleID);
										// System.out.println("***********************************************************");
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */

									// Updating All the Values Over here
									if ((customerLR2CustomerProductRow.iStatusInDB == Record.VIEW)
											|| (customerLR2CustomerProductRow.iStatusInDB == Record.UPDATE)) {
										customerLR2CustomerProductRow.iStatusInDB = Record.DELETE;
										customerLR2CustomerProductTable
												.updateRecord(customerLR2CustomerProductRow);
									}

									// when iStatusInDB is equal to Record.INSERT
									else if (customerLR2CustomerProductRow.iStatusInDB == Record.INSERT) {
										customerLR2CustomerProductRow.iStatusInDB = Record.DELETE;
										customerLR2CustomerProductTable
												.deleteRecord(
														lCLRIDURC,
														bProductDetailProperty.lCustomerProductLineID
																.longValue());
									}

									// Inserting a new record
									customerLR2CustomerProductRow = new CustomerLR2CustomerProductRow();
									customerLR2CustomerProductRow.iStatusInDB = Record.INSERT;
									customerLR2CustomerProductRow.lCustomerLinkRoleID = CustomerLinkRoleID;
									customerLR2CustomerProductRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
											.longValue();
									customerLR2CustomerProductTable
											.addUniqueRecord(customerLR2CustomerProductRow);
								} // end of the if loop
							} // end of the if loop

							// Put the container back into the session
							teleSessionMgr.putTable(
									string_CUSTOMERLR2CUSTOMERPRODUCT,
									customerLR2CustomerProductTable);
						} // end of the if loop
					} else if ((GAfeDescription.strGetProperty(string_ROLETYPE_NRC))
							.equalsIgnoreCase(String
									.valueOf(bProductRoleDetail.lRoleTypeID))) {

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if ((GAfePropertyLoader.DEBUG)) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("***********************************************************");
							// System.out.println("Comparing lCLRIDNRC                           : " + lCLRIDNRC);
							// System.out.println("Comparing CustomerLinkRoleID  : " + CustomerLinkRoleID);
							// System.out.println("***********************************************************");
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						if (!((String.valueOf(lCLRIDNRC))
								.equalsIgnoreCase(String
										.valueOf(CustomerLinkRoleID)))) {
							customerLR2CustomerProductRow = null;
							customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
									.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session
							customerLR2CustomerProductRow = customerLR2CustomerProductTable
									.clrcpSearchByCustLRIdCustProdId(
											lCLRIDNRC,
											bProductDetailProperty.lCustomerProductLineID
													.longValue());

							if (null != customerLR2CustomerProductTable) {
								if (null != customerLR2CustomerProductRow) {

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if ((GAfePropertyLoader.DEBUG)) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("***********************************************************");
										// System.out.println("Updating CLR2 CustomerLinkRoleID                  : " + CustomerLinkRoleID);
										// System.out.println("***********************************************************");
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */

									// Updating All the Values Over here
									if ((customerLR2CustomerProductRow.iStatusInDB == Record.VIEW)
											|| (customerLR2CustomerProductRow.iStatusInDB == Record.UPDATE)) {
										customerLR2CustomerProductRow.iStatusInDB = Record.DELETE;
										customerLR2CustomerProductTable
												.updateRecord(customerLR2CustomerProductRow);
									}

									// when iStatusInDB is equal to Record.INSERT
									else if (customerLR2CustomerProductRow.iStatusInDB == Record.INSERT) {
										customerLR2CustomerProductRow.iStatusInDB = Record.DELETE;
										customerLR2CustomerProductTable
												.deleteRecord(
														lCLRIDNRC,
														bProductDetailProperty.lCustomerProductLineID
																.longValue());
									}

									// Inserting a new record
									customerLR2CustomerProductRow = new CustomerLR2CustomerProductRow();
									customerLR2CustomerProductRow.iStatusInDB = Record.INSERT;
									customerLR2CustomerProductRow.lCustomerLinkRoleID = CustomerLinkRoleID;
									customerLR2CustomerProductRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
											.longValue();
									customerLR2CustomerProductTable
											.addUniqueRecord(customerLR2CustomerProductRow);
								} // end of the if loop
							} // end of the if loop

							// Put the container back into the session
							teleSessionMgr.putTable(
									string_CUSTOMERLR2CUSTOMERPRODUCT,
									customerLR2CustomerProductTable);
						} // end of the if loop
					} // end of the else part of the if else if loop
				} // end of the for loop
			} // end of the if loop

			/** **************************************MAKING OF NEXT QUERRY************************************** */

			// Begin Add V8.01d
			teleSessionMgr.removeValue("STTProtected");

			// End Add V8.01d
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return lNRCAccountID;
	} // Closing Brace of the function

	protected void vdMainCreateAccountForCustomerProductLineIDForOld(
			BProductDetailProperty bProductDetailProperty,
			Long CustomerProductID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iCounter = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** *************************************MAKING OF NEXT QUERRY************************************** */
			BProductRole bProductRole = null;
			BProductRoleDetail bProductRoleDetail = null;

			if (null != teleSessionMgr.getValue(string_BProductDetailRole_aCProduct)) {

				// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
				bProductRole = (BProductRole) teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct);
				iSizeOfVector = bProductRole.vctProductRole.size();

				for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
					bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
							.elementAt(iCounter);

					// BEgin DEL v9.01d
					// CustomerLR2CustomerProductRow customerLR2CustomerProductRow = null;
					// End DEL v9.01d
					customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
							.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session

					Vector vctCustomerLR2CustomerProduct = null;

					vctCustomerLR2CustomerProduct = customerLR2CustomerProductTable
							.vctSearchByCustomerProductLineID(bProductDetailProperty.lCustomerProductLineID
									.longValue());

					if (null != vctCustomerLR2CustomerProduct) {
						for (int iCLCPCounter = FINAL_ZERO; iCLCPCounter < vctCustomerLR2CustomerProduct
								.size(); iCLCPCounter++) {

							// Begin DEL v9.01d
							// CustomerLinkRoleRow customerLinkRoleRow = null;
							// End DEL v9.01d
							customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
									.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session

							Vector vctCustomerLR = null;
							long lCustomerLinkRoleID = 0;

							lCustomerLinkRoleID = ((CustomerLR2CustomerProductRow) vctCustomerLR2CustomerProduct
									.elementAt(iCLCPCounter)).lCustomerLinkRoleID;
							vctCustomerLR = customerLinkRoleTable
									.vctSearchByCustomerLinkRoleIDandObsolete(
											lCustomerLinkRoleID, FINAL_ZERO);

							if (null != vctCustomerLR) {
								for (int iCLRCounter = FINAL_ZERO; iCLRCounter < vctCustomerLR
										.size(); iCLRCounter++) {
									long lMRoleTypeID = 0;
									long lMCustomerLinkID = 0;

									lMRoleTypeID = ((CustomerLinkRoleRow) vctCustomerLR
											.elementAt(iCLRCounter)).lRoleTypeID;
									lMCustomerLinkID = ((CustomerLinkRoleRow) vctCustomerLR
											.elementAt(iCLRCounter)).lCustomerLinkID;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("hi sachin --lMRoleTypeID------> " + lMRoleTypeID);
										// System.out.println("hi sachin --lMCustomerLinkID--> " + lMCustomerLinkID);
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_USER))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										vdLinkCustomerProductLineandCreateAccountSubAccToRoleType(
												bProductRole,
												bProductRoleDetail, Long.valueOf(
														lMRoleTypeID),
												Long.valueOf(lMCustomerLinkID));
									} // end of the if loop
									else if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_NRC))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										vdLinkCustomerProductLineandCreateAccountSubAccToRoleType(
												bProductRole,
												bProductRoleDetail, Long.valueOf(
														lMRoleTypeID),
												Long.valueOf(lMCustomerLinkID));
									} // end of the else part of the if loop
									else if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_RC))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										vdLinkCustomerProductLineandCreateAccountSubAccToRoleType(
												bProductRole,
												bProductRoleDetail, Long.valueOf(
														lMRoleTypeID),
												Long.valueOf(lMCustomerLinkID));
									} // end of the else part of the if loop
									else if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_USAGE))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										vdLinkCustomerProductLineandCreateAccountSubAccToRoleType(
												bProductRole,
												bProductRoleDetail, Long.valueOf(
														lMRoleTypeID),
												Long.valueOf(lMCustomerLinkID));
									} // end of the else part of the if loop
								} // end of the for loop
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Remove all the Forbidden Products from
	 *                                  The upper Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Vector vctProductSelected, Vector vctProductNonSelected
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected void vdInsertInCustomerAccount(
			BProductDetailProperty bProductDetailProperty,
			BProductRoleDetail bProductRoleDetail, Long CustomerLinkID,
			Long RoleTypeID, Long PaymentMethodOld, Long CustomerProductID,
			Long PaymentMethodNew, long lCustomerLinkIDOld,
			Date dtActivationDate) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		Long lAccountNumber = null; // Local Varaible Declaration
		Long lBillFormatID = null; // Local Varaible Declaration
		Vector vctCustomerChargeType = null;
		int iFlag = 0;
		long lChargeTypeID = 0;
		ChargeType chargeTypeTable = null;

		// BEGIN ADD V5.10a
		// comment: removedfrom body and added here
		ResultSet rsGetAccountNumber = null; // Making an Object of the ResultSet

		// END ADD V5.10a

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b
		// BEGIN ADD ver 5.96e
		long lAccountTypeID = 0;
		ProductAccountType objProductAccountType = null;
		ProductAccountTypeRow objProductAccountTypeRow = null;

		// END ADD ver 5.96e

		if (makeAFEConnection()) // If the Connection is made
		{
			try {
				StringBuffer strSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				// BEGIN ADD ver 5.96e
				objProductAccountType = (ProductAccountType) GConnectMemoryDB
						.getMasterTable(GMasterDataConstants.PRODUCTACCOUNTTYPE);
				objProductAccountTypeRow = objProductAccountType
						.objSearchByProductIDAndObsolete(
								bProductDetailProperty.lProductID.longValue(),
								FINAL_ZERO);
				lAccountTypeID = objProductAccountTypeRow.lAccountTypeID;

				// END ADD ver 5.96e

				/** **************************************MAKING OF NEXT QUERRY************************************** */
				CustomerAccountRow customerAccountRow = null; // Initializing the Object Class for the Currency table

				customerAccountTable = (CustomerAccount) teleSessionMgr
						.getTable("CUSTOMERACCOUNT"); // Getting the Customer table from the session
				customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
						.getTable(string_CUSTOMERCHARGETYPE);

				if (null == chargeTypeTable) {
					chargeTypeTable = (ChargeType) teleSessionMgr
							.getMasterTable("CHARGETYPE");
				}

				Vector vctChargeTypeTemp = null;

				vctChargeTypeTemp = chargeTypeTable.vctGetAllExisting();

				if (null == vctChargeTypeTemp) {
					vctChargeTypeTemp = new Vector();
				}

				for (int iCount = 0; iCount < vctChargeTypeTemp.size(); iCount++) {
					if (((ChargeTypeRow) (vctChargeTypeTemp.elementAt(iCount))).lRoleTypeID == RoleTypeID
							.longValue()) {
						lChargeTypeID = ((ChargeTypeRow) (vctChargeTypeTemp
								.elementAt(iCount))).lChargeTypeID;

						break;
					}
				}

				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement");
					// System.out.println("Charge Type Returned is : " + lChargeTypeID);
				}

				Vector vctCAInternal = new Vector(1);

				// BEGIN DELETE ver 5.96e
				// vctCAInternal = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDandObsolete(lCustomerLinkIDOld, PaymentMethodOld.longValue(), FINAL_ZERO);
				// END DELETE ver 5.96e
				// BEGIN DELETE V 7.04c commenting for DataQuality --ORDERINTAKE
				// BEGIN ADD ver 5.96e
				// vctCAInternal = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsolete(lCustomerLinkIDOld, PaymentMethodOld.intValue(),lAccountTypeID, FINAL_ZERO);
				// END ADD 5.96e
				// END DELETE V 7.04c commenting for DataQuality --ORDERINTAKE
				// BEGIN ADD V 7.04c --ORDERINTAKE
				long lCustomerAccountID = 0;
				CustomerChargeTypeRow custChargeTypeRow = null;
				Vector vctAccount = null;

				vctAccount = customerChargeTypeTable
						.vctSearchByCustomerProductLineIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), FINAL_ZERO);

				if ((null != vctAccount) && (vctAccount.size() != FINAL_ZERO)) {
					custChargeTypeRow = ((CustomerChargeTypeRow) vctAccount
							.elementAt(FINAL_ZERO));
					lCustomerAccountID = custChargeTypeRow.lCustomerAccountID;
					vctCAInternal = customerAccountTable
							.vctSearchByCustomerAccountID(lCustomerAccountID);
				}

				// END ADD V 7.04c  --ORDERINTAKE
				// begin delete v 7.04i
				// long lCustomerAccountID = 0;
				// end delete v 7.04i
				if ((null != vctCAInternal)
						&& (vctCAInternal.size() != FINAL_ZERO)) {

					// begin delete v 7.04i
					// lCustomerAccountID = ((CustomerAccountRow) vctCAInternal.elementAt(FINAL_ZERO)).lCustomerAccountID;
					// end delete v 7.04i
					customerAccountRow = ((CustomerAccountRow) vctCAInternal
							.elementAt(FINAL_ZERO));

					if (null != customerAccountRow) {
						vctCustomerChargeType = customerChargeTypeTable
								.vctSearchByCustomerAccountID(
										lCustomerAccountID, FINAL_ZERO);

						if (null == vctCustomerChargeType) {
							vctCustomerChargeType = new Vector();
						}

						for (int iCount = 0; iCount < vctCustomerChargeType
								.size(); iCount++) {
							if (((CustomerChargeTypeRow) (vctCustomerChargeType
									.elementAt(iCount))).lCustomerProductLineID != bProductDetailProperty.lCustomerProductLineID
									.longValue()
									|| ((CustomerChargeTypeRow) (vctCustomerChargeType
											.elementAt(iCount))).lChargeTypeID != lChargeTypeID) {
								iFlag = FINAL_ONE;

								break;
							}
						}

						if (iFlag == FINAL_ZERO) {
							if (Record.INSERT == customerAccountRow.iStatusInDB) {
								customerAccountTable
										.deleteRecord(customerAccountRow.lCustomerAccountID);

								// Begin Add Ver 5.23a
								// Comment 5.23a: Called a Method vDeleteAccountLevelPromotion to delele Account Level Promotions when Account is gettind deleted
								// BEGIN DELETE V 5.96u
								// vDeleteAccountLevelPromotion(customerAccountRow.lCustomerAccountID);
								// END DELETE V 5.96u
								// End Ver 5.23a
							} else if ((Record.VIEW == customerAccountRow.iStatusInDB)
									|| (Record.UPDATE == customerAccountRow.iStatusInDB)) {

								// BEGIN ADD V 5.71e
								CustomerAccountRow customerAccountRowLocal = customerAccountTable
										.crSearchByCustID_BillingDetail(customerAccountRow.lCustomerAccountID);

								if (null == customerAccountRowLocal) {
									customerAccountRow.iObsolete = FINAL_ONE;
									customerAccountRow.iStatusInDB = Record.UPDATE;
									customerAccountRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
									customerAccountTable
											.updateRecord(customerAccountRow);
									vDeleteAccountLevelPromotion(customerAccountRow.lCustomerAccountID);
								}

								// END ADD V 5.71e
								// BEGIN DELETE v 5.71e

								/*
								 * customerAccountRow.iObsolete = FINAL_ONE;
								 * customerAccountRow.iStatusInDB = Record.UPDATE;
								 * customerAccountRow.strModificationUser = bSession.strUserName;                                          // Retrieving the Modification from the BSession
								 * customerAccountTable.updateRecord(customerAccountRow);
								 * //Begin Add Ver 5.23a
								 * //Comment 5.23a:Called a Method vDeleteAccountLevelPromotion to delele Account Level Promotions when Account is gettind deleted
								 * vDeleteAccountLevelPromotion(customerAccountRow.lCustomerAccountID);
								 * //End Ver 5.23a
								 */

								// BEGIN DELETE v 5.71e
							}
						}
					}
				} // end of the if loop

				// BEGIN DELETE ver 5.96e
				// vctCAInternal = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDandObsolete(CustomerLinkID.longValue(), PaymentMethodNew.longValue(), FINAL_ZERO);
				// END DELETE ver 5.96e
				// BEGIN DELETE V 7.04c COMMENTING FOR DATA QUALITY--ORDERINTAKE
				// BEGIN ADD ver 5.96e
				// vctCAInternal = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsolete(CustomerLinkID.longValue(), PaymentMethodNew.intValue(),lAccountTypeID, FINAL_ZERO);
				// END ADD ver 5.96e
				// END DELETE V 7.04c COMMENTING FOR DATA QUALITY--ORDERINTAKE
				// BEGIN ADD V 7.04c --ORDERINTAKE
				vctCAInternal = customerAccountTable
						.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsoleteandProtectedFlag(
								CustomerLinkID.longValue(), PaymentMethodNew
										.intValue(), lAccountTypeID,
								FINAL_ZERO, FINAL_ZERO);

				// END ADD V 7.04c --ORDERINTAKE
				// Begin Add V8.01d
				if ((null != teleSessionMgr.getValue("bIsSocialTariff"))
						&& (null != teleSessionMgr.getValue("STTProtected"))) {
					if (((Boolean) teleSessionMgr.getValue("bIsSocialTariff"))
							.booleanValue()
							&& (1 == ((Integer) teleSessionMgr
									.getValue("STTProtected")).intValue())) {
						vctCAInternal = customerAccountTable
								.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsoleteandProtectedFlag(
										CustomerLinkID.longValue(),
										PaymentMethodNew.intValue(),
										lAccountTypeID, FINAL_ZERO, FINAL_ONE);

						if (null != vctCAInternal) {
							Vector vctTepAcc = new Vector();

							GLogger
									.chkpt("lCustomerAccountID for Social Tariff : "
											+ lCustomerAccountID);

							for (int iCnt = 0; iCnt < vctCAInternal.size(); iCnt++) {
								if (lCustomerAccountID == ((CustomerAccountRow) vctCAInternal
										.get(iCnt)).getCustomerAccountID()) {
									vctTepAcc
											.add((CustomerAccountRow) vctCAInternal
													.get(iCnt));
								}
							}

							vctCAInternal = vctTepAcc;
						}
					}
				}

				// End Add V8.01d
				// Begin Add v7.05k
				vctCAInternal = vctSearchActiveAccounts(vctCAInternal);

				// End Add v7.05k
				lCustomerAccountID = 0;

				if ((null != vctCAInternal) && (vctCAInternal.size() != 0)) {
					customerAccountRow = null;
					customerAccountRow = ((CustomerAccountRow) (vctCAInternal
							.elementAt(FINAL_ZERO)));

					if (null != customerAccountRow) {
						lCustomerAccountID = customerAccountRow.lCustomerAccountID;
					}
				} // end of the if loop
				else {

					/** **************************************MAKING OF 2RD QUERRY************************************** */

					// Making the second Querry
					// BEGIN DELETE V5.10a
					// comment: is declared at the top
					// ResultSet rsGetAccountNumber              = null; // Making an Object of the ResultSet
					// END DELETE V5.10a
					strSql.setLength(0); // Initialising

					// BEGIN DELETE V 5.70b
					// /* Making the Querry Statement */
					// strSql.append("SELECT S_ACCOUNTNUMBER.NEXTVAL NEXTACCOUNTNUMBER FROM DUAL ");
					// /****************STARTING*****************TO PRINT THE DATA********************************************/
					// if(GAfePropertyLoader.DEBUG)
					// {
					// /* Printing out the Querry made prior to its firing */
					// System.out.println("The Querry is : " + strSql.toString());
					// }
					// /****************ENDING*******************TO PRINT THE DATA*******************************************/
					// /* Firing the Querry and taking the Result as a ResultSet */
					// rsGetAccountNumber = gConnectAfe.rsQuery(strSql.toString());
					// END DELETE V 5.70b
					// BEGIN ADD V 5.70b
					strSql
							.append("SELECT S_ACCOUNTNUMBER.NEXTVAL NEXTACCOUNTNUMBER FROM DUAL ");
					psSelect = gConnectAfe
							.psPrepareStatement(strSql.toString());
					rsGetAccountNumber = psSelect.executeQuery();

					// END ADD V 5.70b

					while (rsGetAccountNumber.next()) {
						lAccountNumber = Long.valueOf(rsGetAccountNumber
								.getString("NEXTACCOUNTNUMBER"));
					} // end of the while Loop

					// BEGIN ADD V5.10a
					// comment: closing the open resultset
					if (null != rsGetAccountNumber) {
						rsGetAccountNumber.close();

						// BEGIN DELETE V 5.70b
						// rsGetAccountNumber.getStatement().close();
						// END DELETE V 5.70b
						rsGetAccountNumber = null;
					}

					// END ADD V5.10a

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if statement");
						// System.out.println("Hi there sachin ----OK---> Account Number Generated - " + lAccountNumber);
					}

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */

					/** **************************************MAKING OF 2RD QUERRY************************************** */
					CustomerProfileRow customerProfileRow = null;

					customerProfileTable = (CustomerProfile) teleSessionMgr
							.getTable("CUSTOMERPROFILE"); // Getting the Customer table from the session
					customerProfileRow = customerProfileTable
							.cprSearchByCustIDandObsolete(
									bProductRoleDetail.lCustomerID.longValue(),
									FINAL_ZERO);

					if (null != customerProfileRow) {

						// BEGIN DELETE V6.08a
						// if (GAfeDescription.strGetProperty("SEGMENT_RESIDENTIAL").equalsIgnoreCase(String.valueOf(customerProfileRow.lSegmentID))) {
						// lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMATID_RESIDENTIAL"));
						// }//end of the if loop
						// else {
						// lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMATID_OTHER"));
						// }//end of the else loop of the if case
						// END DELETE V6.08a
						// BEGIN ADD V6.08a
						// Begin Mod V9.00a
						// lBillFormatID = Long.valueOf(RBilling.lGetBillFormatID(lAccountTypeID,customerProfileRow.lSegmentID));
						// get the bill type id of the customer
						// Get teh bill format id form bill type id
						lBillFormatID = Long.valueOf(
								LBilling
										.lGetBillFormatId(CustomerUtils
												.lGetBillTypeId(bProductRoleDetail.lCustomerID
														.longValue())));
						GLogger
								.chkpt("vdInsertInCustomerAccount ::Segmentation >>"
										+ lBillFormatID);

						// End Mod V9.00a
						// END ADD V6.08a
					}

					// Begin del V9.00a

					/*
					 * else {
					 *   lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMATID_OTHER"));
					 *
					 * }
					 */

					// end of the else loop of the if case
					// End del V9.00a
					long lngCustomerAccountID = 0;

					if (null != customerAccountTable) {
						customerAccountRow = new CustomerAccountRow();
						customerAccountRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngCustomerAccountID = customerAccountRow.lNewNr(); // Auto Generation of the  Primary key
						lCustomerAccountID = lngCustomerAccountID;
						customerAccountRow.lCustomerAccountID = lngCustomerAccountID;

						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println(" Primary Key CustomerAccountID for the CustomerAccountTable- " + customerAccountRow.lCustomerAccountID);
						}

						customerAccountRow.lAccountNumber = lAccountNumber
								.longValue();
						customerAccountRow.lCustomerLinkID = CustomerLinkID
								.longValue();
						customerAccountRow.iMinimumService = 0;

						if (null != dtActivationDate) {
							customerAccountRow.dtActivationDate = dtActivationDate;
						}

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("Entering for RoleTypeID as PaymentMethod ID - " + PaymentMethodNew + " for Role Type ID " + RoleTypeID);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						customerAccountRow.lPaymentMethodID = PaymentMethodNew
								.longValue();

						if (customerAccountRow.lPaymentMethodID == GAfeDescription
								.lGetTypeId("PAYMENTMETHOD_DIRECTDEBIT")) {

							// BEGIN DELETE : VER 1.1
							// customerAccountRow.lDirectDebitStatusID   =       GAfeDescription.lGetTypeId("DIRECTDEBITSTATUS_BR1");
							// END DELETE : VER 1.1
							// BEGIN ADD : VER 1.1
							customerAccountRow.lDirectDebitStatusID = 0;

							// END ADD : VER 1.1
						}

						customerAccountRow.lCurrencyID = bProductDetailProperty.lCurrencyID
								.longValue();

						// Begin Changes for PR 54680
						// customerAccountRow.lBillCycleID = 1;
						customerAccountRow.lBillCycleID = 987;

						// End Changes for PR 54680
						customerAccountRow.lRecurringTypeID = GAfeDescription
								.lGetTypeId("RECURRINGTYPE_MONTHLY");

						if ((null != lBillFormatID)
								&& (!(("")
										.equals(String.valueOf(lBillFormatID))))
								&& (!((string_ZERO).equals(String
										.valueOf(lBillFormatID))))) {
							customerAccountRow.lBillFormatID = lBillFormatID
									.longValue();
						} // end of the if loop

						customerAccountRow.iSuspendInvoice = 0;
						customerAccountRow.lDisplayMethodID = GAfeDescription
								.lGetTypeId("DISPLAYMETHOD_INVOICEONPAPER");
						customerAccountRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						customerAccountRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession

						// BEGIN ADD ver 5.96e
						customerAccountRow.lAccountType = lAccountTypeID;

						// END ADD ver 5.96e
						customerAccountTable
								.addUniqueRecord(customerAccountRow); // Adding the Record in the CustomerPromotionTable

						// Put the container back into the session
					} // end of the if loop
				} // end of the if loop

				lChargeTypeID = 0;

				if ((GAfeDescription.strGetProperty(string_ROLETYPE_USAGE))
						.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
					lChargeTypeID = GAfeDescription
							.lGetTypeId("CHARGETYPE_USAGE");
				} else if ((GAfeDescription.strGetProperty(string_ROLETYPE_RC))
						.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
					lChargeTypeID = GAfeDescription.lGetTypeId(string_CHARGETYPE_RC);
				} else if ((GAfeDescription.strGetProperty(string_ROLETYPE_NRC))
						.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
					lChargeTypeID = GAfeDescription
							.lGetTypeId(string_CHARGETYPE_NRC);
				} // end of the else part of the if else if loop

				CustomerChargeTypeRow customerChargeTypeRow = null; // Initializing the Object Class for the Currency table

				customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
						.getTable(string_CUSTOMERCHARGETYPE); // Getting the Customer table from the session

				Vector vctcustomerChargeTypeRow = new Vector(); // Initializing the Object Class for the Currency table

				vctcustomerChargeTypeRow = customerChargeTypeTable
						.vctSearchByCustomerProductLineIDAndChargeTypeID(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), lChargeTypeID, FINAL_ZERO);

				long lAccountIDCompare = 0;

				if (null != vctcustomerChargeTypeRow) {
					lAccountIDCompare = 0;
					customerChargeTypeRow = ((CustomerChargeTypeRow) vctcustomerChargeTypeRow
							.elementAt(FINAL_ZERO));
					lAccountIDCompare = customerChargeTypeRow.lCustomerAccountID;
				} // end of the if loop

				if (!((String.valueOf(lAccountIDCompare))
						.equalsIgnoreCase(String.valueOf(lCustomerAccountID)))) {

					// Make the fetched Row Obsolete
					if (null != customerChargeTypeTable) {
						if (null != customerChargeTypeRow) {

							// Updating All the Values Over here
							customerChargeTypeRow.iObsolete = NOTEXISTS;
							customerChargeTypeRow.strModificationUser = bSession.strUserName;

							if ((customerChargeTypeRow.iStatusInDB == Record.VIEW)
									|| (customerChargeTypeRow.iStatusInDB == Record.UPDATE)) {
								customerChargeTypeRow.iStatusInDB = Record.UPDATE;
								customerChargeTypeTable
										.updateRecord(customerChargeTypeRow);
							}

							// when iStatusInDB is equal to Record.INSERT
							else {
								customerChargeTypeRow.iStatusInDB = Record.DELETE;
								customerChargeTypeTable
										.deleteRecord(customerChargeTypeRow.lCustomerChargeTypeID);
							}
						} // end of the if loop
					} // end of the if loop

					long lngCustomerChargeTypeID = 0;

					if (null != customerChargeTypeTable) {
						customerChargeTypeRow = new CustomerChargeTypeRow();
						customerChargeTypeRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngCustomerChargeTypeID = customerChargeTypeRow
								.lNewNr(); // Auto Generation of the  Primary key
						customerChargeTypeRow.lCustomerChargeTypeID = lngCustomerChargeTypeID;
						customerChargeTypeRow.lCustomerAccountID = lCustomerAccountID;

						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println(" Foreign Key CustomerAccountID for the CustomerChargeTypeTable- " + customerChargeTypeRow.lCustomerAccountID + " Role Type ID = " + RoleTypeID);
						}

						customerChargeTypeRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
								.longValue();

						if ((GAfeDescription.strGetProperty(string_ROLETYPE_USAGE))
								.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
							customerChargeTypeRow.lChargeTypeID = GAfeDescription
									.lGetTypeId("CHARGETYPE_USAGE");
						} else if ((GAfeDescription
								.strGetProperty(string_ROLETYPE_RC))
								.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
							customerChargeTypeRow.lChargeTypeID = GAfeDescription
									.lGetTypeId(string_CHARGETYPE_RC);
						} else if ((GAfeDescription
								.strGetProperty(string_ROLETYPE_NRC))
								.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
							customerChargeTypeRow.lChargeTypeID = GAfeDescription
									.lGetTypeId(string_CHARGETYPE_NRC);
						} // end of the else part of the if else if loop

						/** ************************* Changed For No ActivationDate being Inserted *********************** */
						customerProductLineTable = (CustomerProductLine) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session

						CustomerProductLineRow customerProductLineRow = null;

						customerProductLineRow = customerProductLineTable
								.cplrSearchByCustProductLineIDandObsolete(
										bProductDetailProperty.lCustomerProductLineID
												.longValue(), FINAL_ZERO);

						if (null != customerProductLineRow.dtActivationDate) {
							customerChargeTypeRow.dtActivationDate = customerProductLineRow.dtActivationDate;
						} // end of the if loop

						/** ************************* Changed For No ActivationDate being Inserted *********************** */
						customerChargeTypeRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						customerChargeTypeRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
						customerChargeTypeTable
								.addUniqueRecord(customerChargeTypeRow); // Adding the Record in the CustomerPromotionTable
					} // end of the if loop
				} // end of the if loop

				/** **************************************MAKING OF NEXT QUERRY************************************** */

				// Put the container back into the session
				teleSessionMgr.putTable(string_CUSTOMERCHARGETYPE,
						customerChargeTypeTable);
				teleSessionMgr
						.putTable("CUSTOMERACCOUNT", customerAccountTable);
			} // end of the if loop
			catch (SQLException e) {
				throw e;
			}

			//          BEGIN ADD : V3.27
			catch (Exception ex) {
				if (GAfePropertyLoader.DEBUG) {
					GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree,
							this);
				}

				throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
			}

			//          END ADD : v3.27
			finally {

				// BEGIN ADD V5.10a
				// comment:finally closing the resultset in case of exception
				try {
					if (null != rsGetAccountNumber) {
						rsGetAccountNumber.close();

						// BEGIN DELETE V 5.70b
						// rsGetAccountNumber.getStatement().close();
						// END DELETE V 5.70b
						rsGetAccountNumber = null;
					}

					// BEGIN ADD V 5.70b
					if (null != psSelect) {
						psSelect.close();
						psSelect = null;
					}

					// END ADD V 5.70b
				} catch (Exception e) {

					// consuming it
					GLogger.logException(e);
				}

				// END ADD V5.10a

				closeAFEConnection(); // closing the connection
			}
		} // end of the if loop
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Remove all the Forbidden Products from
	 *                                  The upper Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Vector vctProductSelected, Vector vctProductNonSelected
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected Long lngInsertInCustomerAccount(
			BProductDetailProperty bProductDetailProperty,
			BProductRoleDetail bProductRoleDetail, Long CustomerLinkID,
			Long RoleTypeID, Long PaymentMethodOld, Long CustomerProductID,
			Long PaymentMethodNew, long lCustomerLinkIDOld,
			Date dtActivationDate) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		Long lAccountNumber = null; // Local Varaible Declaration
		Long lBillFormatID = null; // Local Varaible Declaration
		Long lNRCAccountID = Long.valueOf(0); // Local Varaible Declaration
		Vector vctCustomerChargeType = null;
		int iFlag = 0;
		long lChargeTypeID = 0;
		ChargeType chargeTypeTable = null;

		// BEGIN ADD V5.10a
		// comment: removed from body and added here
		ResultSet rsGetAccountNumber = null; // Making an Object of the ResultSet

		// END ADD V5.10a

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b
		// BEGIN ADD ver 5.96e
		long lAccountTypeID = 0;
		ProductAccountType objProductAccountType = null;
		ProductAccountTypeRow objProductAccountTypeRow = null;

		// END ADD ver 5.96e

		if (makeAFEConnection()) // If the Connection is made
		{
			try {
				GLogger.chkpt("Check for Social");

				StringBuffer strSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				// BEGIN ADD ver 5.96e
				objProductAccountType = (ProductAccountType) GConnectMemoryDB
						.getMasterTable(GMasterDataConstants.PRODUCTACCOUNTTYPE);
				objProductAccountTypeRow = objProductAccountType
						.objSearchByProductIDAndObsolete(
								bProductDetailProperty.lProductID.longValue(),
								FINAL_ZERO);
				lAccountTypeID = objProductAccountTypeRow.lAccountTypeID;

				// END ADD ver 5.96e

				/** **************************************MAKING OF NEXT QUERRY************************************** */
				CustomerAccountRow customerAccountRow = null; // Initializing the Object Class for the Currency table

				customerAccountTable = (CustomerAccount) teleSessionMgr
						.getTable("CUSTOMERACCOUNT"); // Getting the Customer table from the session
				customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
						.getTable(string_CUSTOMERCHARGETYPE);

				if (null == chargeTypeTable) {
					chargeTypeTable = (ChargeType) teleSessionMgr
							.getMasterTable("CHARGETYPE");
				}

				Vector vctChargeTypeTemp = null;

				vctChargeTypeTemp = chargeTypeTable.vctGetAllExisting();

				if (null == vctChargeTypeTemp) {
					vctChargeTypeTemp = new Vector();
				}

				for (int iCount = 0; iCount < vctChargeTypeTemp.size(); iCount++) {
					if (((ChargeTypeRow) (vctChargeTypeTemp.elementAt(iCount))).lRoleTypeID == RoleTypeID
							.longValue()) {
						lChargeTypeID = ((ChargeTypeRow) (vctChargeTypeTemp
								.elementAt(iCount))).lChargeTypeID;

						break;
					}
				}

				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if statement");
					// System.out.println("Charge Type Returned is : " + lChargeTypeID);
				}

				Vector vctCAInternal = new Vector(1);

				// BEGIN DELETE ver 5.96e
				// vctCAInternal = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDandObsolete(lCustomerLinkIDOld, PaymentMethodOld.longValue(), FINAL_ZERO);
				// END DELETE ver 5.96e
				// BEGIN DELETE V 7.04c --COMMENTING FOR DATA QUALITY
				// BEGIN ADD ver 5.96e
				// vctCAInternal = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsolete(lCustomerLinkIDOld, PaymentMethodOld.intValue(),lAccountTypeID, FINAL_ZERO);
				// END ADD 5.96e
				// END DELETE V 7.04c--COMMENTING FOR DATA QUALITY
				// BEGIN ADD V 7.04c
				long lCustomerAccountID = 0;
				CustomerChargeTypeRow custChargeTypeRow = null;
				Vector vctAccount = null;

				vctAccount = customerChargeTypeTable
						.vctSearchByCustomerProductLineIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), FINAL_ZERO);

				if ((null != vctAccount) && (vctAccount.size() != FINAL_ZERO)) {
					custChargeTypeRow = ((CustomerChargeTypeRow) vctAccount
							.elementAt(FINAL_ZERO));
					lCustomerAccountID = custChargeTypeRow.lCustomerAccountID;
					vctCAInternal = customerAccountTable
							.vctSearchByCustomerAccountID(lCustomerAccountID);
				}

				// END ADD V 7.04c
				// begin delete v 7.04i
				// long lCustomerAccountID = 0;
				// end delete v 7.04i
				if ((null != vctCAInternal)
						&& (vctCAInternal.size() != FINAL_ZERO)) {

					// begin delete v 7.04i
					// lCustomerAccountID = ((CustomerAccountRow) vctCAInternal.elementAt(FINAL_ZERO)).lCustomerAccountID;
					// end delete v 7.04i
					customerAccountRow = ((CustomerAccountRow) vctCAInternal
							.elementAt(FINAL_ZERO));

					if (null != customerAccountRow) {
						vctCustomerChargeType = customerChargeTypeTable
								.vctSearchByCustomerAccountID(
										lCustomerAccountID, FINAL_ZERO);

						if (null == vctCustomerChargeType) {
							vctCustomerChargeType = new Vector();
						}

						for (int iCount = 0; iCount < vctCustomerChargeType
								.size(); iCount++) {
							if (((CustomerChargeTypeRow) (vctCustomerChargeType
									.elementAt(iCount))).lCustomerProductLineID != bProductDetailProperty.lCustomerProductLineID
									.longValue()
									|| ((CustomerChargeTypeRow) (vctCustomerChargeType
											.elementAt(iCount))).lChargeTypeID != lChargeTypeID) {
								iFlag = FINAL_ONE;

								break;
							}
						}

						if (iFlag == FINAL_ZERO) {
							if (Record.INSERT == customerAccountRow.iStatusInDB) {
								customerAccountTable
										.deleteRecord(customerAccountRow.lCustomerAccountID);

								// Begin Add Ver 5.23a
								// Comment 5.23a:Called a Method vDeleteAccountLevelPromotion to delele Account Level Promotions when Account is gettind deleted
								// BEGIN DELETE V 5.96u
								// vDeleteAccountLevelPromotion(customerAccountRow.lCustomerAccountID);
								// END DELETE V 5.96u
								// End Ver 5.23a
							} else if ((Record.VIEW == customerAccountRow.iStatusInDB)
									|| (Record.UPDATE == customerAccountRow.iStatusInDB)) {

								// BEGIN ADD V 5.71e
								CustomerAccountRow customerAccountRowLocal = customerAccountTable
										.crSearchByCustID_BillingDetail(customerAccountRow.lCustomerAccountID);

								// BEGIN DELETE V5.71f

								/*
								 * if (null!=customerAccountRowLocal)
								 * {
								 *   customerAccountRow.iObsolete = FINAL_ONE;
								 *   customerAccountRow.iStatusInDB      =       Record.UPDATE;
								 *   customerAccountRow.strModificationUser              =       bSession.strUserName;                                           // Retrieving the Modification from the BSession
								 *   customerAccountTable.updateRecord(customerAccountRow);
								 *   vDeleteAccountLevelPromotion(customerAccountRow.lCustomerAccountID);
								 * }
								 */

								// END DELETE V5.71f
								// END ADD V 5.71e
								// BEGIN ADD V 5.71f
								if (null == customerAccountRowLocal) {
									customerAccountRow.iObsolete = FINAL_ONE;
									customerAccountRow.iStatusInDB = Record.UPDATE;
									customerAccountRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
									customerAccountTable
											.updateRecord(customerAccountRow);
									vDeleteAccountLevelPromotion(customerAccountRow.lCustomerAccountID);
								}

								// END ADD V 5.71f
								// BEGIN DELETE v5.71e

								/*
								 * customerAccountRow.iObsolete = FINAL_ONE;
								 * customerAccountRow.iStatusInDB = Record.UPDATE;
								 * customerAccountRow.strModificationUser = bSession.strUserName;                                          // Retrieving the Modification from the BSession
								 * customerAccountTable.updateRecord(customerAccountRow);
								 * //Begin Add Ver 5.23a
								 * //Comment 5.23a:Called a Method vDeleteAccountLevelPromotion to delele Account Level Promotions when Account is gettind deleted
								 * vDeleteAccountLevelPromotion(customerAccountRow.lCustomerAccountID);
								 * //End Ver 5.23a
								 */

								// END DELETE v5.71e
							}
						}
					}
				} // end of the if loop

				// BEGIN DELETE ver 5.96e
				// vctCAInternal = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDandObsolete(CustomerLinkID.longValue(), PaymentMethodNew.longValue(), FINAL_ZERO);
				// END DELETE ver 5.96e
				// BEGIN DELETE V 7.04c COMMENTING FOR DATAQUALITY-ORDERINTAKE
				// BEGIN ADD ver 5.96e
				// vctCAInternal = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsolete(CustomerLinkID.longValue(), PaymentMethodNew.intValue(),lAccountTypeID, FINAL_ZERO);
				// END ADD 5.96e
				// BEGIN DELETE V 7.04c COMMENTING FOR DATAQUALITY-ORDERINTAKE
				// BEGIN ADD V 7.04c FOR DATAQUALITY-ORDERINTAKE
				vctCAInternal = customerAccountTable
						.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsoleteandProtectedFlag(
								CustomerLinkID.longValue(), PaymentMethodNew
										.intValue(), lAccountTypeID,
								FINAL_ZERO, FINAL_ZERO);

				// END ADD V 7.04c FOR DATAQUALITY-ORDERINTAKE
				// Begin Add V8.01d
				if ((null != teleSessionMgr.getValue("bIsSocialTariff"))
						&& (null != teleSessionMgr.getValue("STTProtected"))) {
					if (((Boolean) teleSessionMgr.getValue("bIsSocialTariff"))
							.booleanValue()
							&& (1 == ((Integer) teleSessionMgr
									.getValue("STTProtected")).intValue())) {
						vctCAInternal = customerAccountTable
								.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsoleteandProtectedFlag(
										CustomerLinkID.longValue(),
										PaymentMethodNew.intValue(),
										lAccountTypeID, FINAL_ZERO, FINAL_ONE);

						if (null != vctCAInternal) {
							Vector vctTepAcc = new Vector();

							GLogger
									.chkpt("lCustomerAccountID for Social Tariff : "
											+ lCustomerAccountID);

							for (int iCnt = 0; iCnt < vctCAInternal.size(); iCnt++) {
								if (lCustomerAccountID == ((CustomerAccountRow) vctCAInternal
										.get(iCnt)).getCustomerAccountID()) {
									vctTepAcc
											.add((CustomerAccountRow) vctCAInternal
													.get(iCnt));
								}
							}

							vctCAInternal = vctTepAcc;
						}
					}
				}

				// End Add V8.01d
				// Begin Add v7.05k
				vctCAInternal = vctSearchActiveAccounts(vctCAInternal);

				// End Add v7.05k
				lCustomerAccountID = 0;

				if ((null != vctCAInternal) && (vctCAInternal.size() != 0)) {
					lCustomerAccountID = ((CustomerAccountRow) (vctCAInternal
							.elementAt(FINAL_ZERO))).lCustomerAccountID;

					//                  Begin : Add ver 2.42 by Abhishek
					if ((GAfeDescription.strGetProperty(string_ROLETYPE_NRC))
							.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
						lNRCAccountID = Long.valueOf(lCustomerAccountID);
					}

					//                  End : Add ver 2.42 by Abhishek
				} // end of the if loop
				else {

					/** **************************************MAKING OF 2RD QUERRY************************************** */

					// Making the second Querry
					// BEGIN DELETE V5.10a
					// comment:declared in the declaration segment
					// ResultSet rsGetAccountNumber              = null; // Making an Object of the ResultSet
					// END DELETE V5.10a
					strSql.setLength(0); // Initialising

					// BEGIN DELETE V 5.70b
					// /* Making the Querry Statement */
					// strSql.append("SELECT S_ACCOUNTNUMBER.NEXTVAL NEXTACCOUNTNUMBER FROM DUAL ");
					// /****************STARTING*****************TO PRINT THE DATA********************************************/
					// if(GAfePropertyLoader.DEBUG)
					// {
					// /* Printing out the Querry made prior to its firing */
					// System.out.println("The Querry is : " + strSql.toString());
					// }
					// /****************ENDING*******************TO PRINT THE DATA*******************************************/
					// /* Firing the Querry and taking the Result as a ResultSet */
					// rsGetAccountNumber = gConnectAfe.rsQuery(strSql.toString());
					// END DELETE V 5.70b
					// BEGIN ADD V 5.70b
					strSql
							.append("SELECT S_ACCOUNTNUMBER.NEXTVAL NEXTACCOUNTNUMBER FROM DUAL ");
					psSelect = gConnectAfe
							.psPrepareStatement(strSql.toString());
					rsGetAccountNumber = psSelect.executeQuery();

					// END ADD V 5.70b

					while (rsGetAccountNumber.next()) {
						lAccountNumber = Long.valueOf(rsGetAccountNumber
								.getString("NEXTACCOUNTNUMBER"));
					} // end of the while Loop

					// BEGIN ADD V5.10a
					// comment: closing the open resultset
					if (null != rsGetAccountNumber) {
						rsGetAccountNumber.close();

						// BEGIN DELETE V 5.70b
						// rsGetAccountNumber.getStatement().close();
						// END DELETE V 5.70b
						rsGetAccountNumber = null;
					}

					// END ADD V5.10a

					CustomerProfileRow customerProfileRow = null;

					customerProfileTable = (CustomerProfile) teleSessionMgr
							.getTable("CUSTOMERPROFILE"); // Getting the Customer table from the session
					customerProfileRow = customerProfileTable
							.cprSearchByCustIDandObsolete(
									bProductRoleDetail.lCustomerID.longValue(),
									FINAL_ZERO);

					if (null != customerProfileRow) {

						// BEGIN DELETE V6.08a
						// if (GAfeDescription.strGetProperty("SEGMENT_RESIDENTIAL").equalsIgnoreCase(String.valueOf(customerProfileRow.lSegmentID))) {
						// lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMATID_RESIDENTIAL"));
						// }//end of the if loop
						// else {
						// lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMATID_OTHER"));
						// }//end of the else loop of the if case
						// END DELETE V6.08a
						// BEGIN ADD V6.08a
						// Begin Mod V9.00a
						// lBillFormatID = Long.valueOf(RBilling.lGetBillFormatID(lAccountTypeID, customerProfileRow.lSegmentID));
						// get the bill type id of the customer
						// Get teh bill format id frm bill type id
						lBillFormatID = Long.valueOf(
								LBilling
										.lGetBillFormatId(CustomerUtils
												.lGetBillTypeId(bProductRoleDetail.lCustomerID
														.longValue())));
						GLogger
								.chkpt("lngInsertInCustomerAccount ::Segmentation >>"
										+ lBillFormatID);

						// End Mod V9.00a
						// END ADD V6.08a
					}

					// Begin Del V9.00a
					//                    else {
					//                        lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMATID_OTHER"));
					//
					//                    }//end of the else loop of the if case
					// End Del V9.00a
					long lngCustomerAccountID = 0;

					if (null != customerAccountTable) {
						customerAccountRow = new CustomerAccountRow();
						customerAccountRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngCustomerAccountID = customerAccountRow.lNewNr(); // Auto Generation of the  Primary key
						lCustomerAccountID = lngCustomerAccountID;
						customerAccountRow.lCustomerAccountID = lngCustomerAccountID;

						if (GAfePropertyLoader.DEBUG) {

							GLogger.chkpt("Inside if statement ");	// System.out.println(" Primary Key CustomerAccountID for the CustomerAccountTable- " + customerAccountRow.lCustomerAccountID);
						}

						if (null != dtActivationDate) {
							customerAccountRow.dtActivationDate = dtActivationDate;
						}

						customerAccountRow.lAccountNumber = lAccountNumber
								.longValue();
						customerAccountRow.lCustomerLinkID = CustomerLinkID
								.longValue();
						customerAccountRow.iMinimumService = 0;
						customerAccountRow.lPaymentMethodID = PaymentMethodNew
								.longValue();

						if (customerAccountRow.lPaymentMethodID == GAfeDescription
								.lGetTypeId("PAYMENTMETHOD_DIRECTDEBIT")) {

							// BEGIN DELETE : VER 1.1
							// customerAccountRow.lDirectDebitStatusID   =       GAfeDescription.lGetTypeId("DIRECTDEBITSTATUS_BR1");
							// END DELETE : VER 1.1
							// BEGIN ADD : VER 1.1
							customerAccountRow.lDirectDebitStatusID = 0;

							// BEGIN ADD : VER 1.1
						}

						customerAccountRow.lCurrencyID = bProductDetailProperty.lCurrencyID
								.longValue();

						// Begin Changes for PR 54680
						// customerAccountRow.lBillCycleID = 1;
						customerAccountRow.lBillCycleID = 987;

						// End Changes for PR 54680
						customerAccountRow.lRecurringTypeID = GAfeDescription
								.lGetTypeId("RECURRINGTYPE_MONTHLY");

						if ((null != lBillFormatID)
								&& (!(("")
										.equals(String.valueOf(lBillFormatID))))
								&& (!((string_ZERO).equals(String
										.valueOf(lBillFormatID))))) {
							customerAccountRow.lBillFormatID = lBillFormatID
									.longValue();
						} // end of the if loop

						if ((GAfeDescription.strGetProperty(string_ROLETYPE_NRC))
								.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
							lNRCAccountID = Long.valueOf(lngCustomerAccountID);
						}

						customerAccountRow.iSuspendInvoice = 0;
						customerAccountRow.lDisplayMethodID = GAfeDescription
								.lGetTypeId("DISPLAYMETHOD_INVOICEONPAPER");

						// BEGIN ADD ver 5.96e
						customerAccountRow.lAccountType = lAccountTypeID;

						// END ADD ver 5.96e
						customerAccountRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						customerAccountRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
						customerAccountTable
								.addUniqueRecord(customerAccountRow); // Adding the Record in the CustomerPromotionTable
					} // end of the if loop
				} // end of the if loop

				lChargeTypeID = 0;

				if ((GAfeDescription.strGetProperty(string_ROLETYPE_USAGE))
						.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
					lChargeTypeID = GAfeDescription
							.lGetTypeId("CHARGETYPE_USAGE");
				} else if ((GAfeDescription.strGetProperty(string_ROLETYPE_RC))
						.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
					lChargeTypeID = GAfeDescription.lGetTypeId(string_CHARGETYPE_RC);
				} else if ((GAfeDescription.strGetProperty(string_ROLETYPE_NRC))
						.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
					lChargeTypeID = GAfeDescription
							.lGetTypeId(string_CHARGETYPE_NRC);
				} // end of the else part of the if else if loop

				CustomerChargeTypeRow customerChargeTypeRow = null; // Initializing the Object Class for the Currency table

				customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
						.getTable(string_CUSTOMERCHARGETYPE); // Getting the Customer table from the session

				Vector vctcustomerChargeTypeRow = new Vector(); // Initializing the Object Class for the Currency table

				vctcustomerChargeTypeRow = customerChargeTypeTable
						.vctSearchByCustomerProductLineIDAndChargeTypeID(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), lChargeTypeID, FINAL_ZERO);

				long lAccountIDCompare = 0;

				if (null != vctcustomerChargeTypeRow) {
					lAccountIDCompare = 0;
					customerChargeTypeRow = ((CustomerChargeTypeRow) vctcustomerChargeTypeRow
							.elementAt(FINAL_ZERO));
					lAccountIDCompare = customerChargeTypeRow.lCustomerAccountID;
				} // end of the if loop

				if (!((String.valueOf(lAccountIDCompare))
						.equalsIgnoreCase(String.valueOf(lCustomerAccountID)))) {

					// Make the fetched Row Obsolete
					if (null != customerChargeTypeTable) {
						if (null != customerChargeTypeRow) {

							// Updating All the Values Over here
							customerChargeTypeRow.iObsolete = NOTEXISTS;
							customerChargeTypeRow.strModificationUser = bSession.strUserName;

							if ((customerChargeTypeRow.iStatusInDB == Record.VIEW)
									|| (customerChargeTypeRow.iStatusInDB == Record.UPDATE)) {
								customerChargeTypeRow.iStatusInDB = Record.UPDATE;
								customerChargeTypeTable
										.updateRecord(customerChargeTypeRow);
							}

							// when iStatusInDB is equal to Record.INSERT
							else {
								customerChargeTypeRow.iStatusInDB = Record.DELETE;
								customerChargeTypeTable
										.deleteRecord(customerChargeTypeRow.lCustomerChargeTypeID);
							}
						} // end of the if loop
					} // end of the if loop

					long lngCustomerChargeTypeID = 0;

					if (null != customerChargeTypeTable) {
						customerChargeTypeRow = new CustomerChargeTypeRow();
						customerChargeTypeRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
						lngCustomerChargeTypeID = customerChargeTypeRow
								.lNewNr(); // Auto Generation of the  Primary key
						customerChargeTypeRow.lCustomerChargeTypeID = lngCustomerChargeTypeID;
						customerChargeTypeRow.lCustomerAccountID = lCustomerAccountID;

						if (GAfePropertyLoader.DEBUG) {

							GLogger.chkpt("Inside if statement ");	// System.out.println(" Foreign Key CustomerAccountID for the CustomerChargeTypeTable- " + customerChargeTypeRow.lCustomerAccountID + " Role Type ID = " + RoleTypeID);
						}

						customerChargeTypeRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
								.longValue();

						if ((GAfeDescription.strGetProperty(string_ROLETYPE_USAGE))
								.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
							customerChargeTypeRow.lChargeTypeID = GAfeDescription
									.lGetTypeId("CHARGETYPE_USAGE");
						} else if ((GAfeDescription
								.strGetProperty(string_ROLETYPE_RC))
								.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
							customerChargeTypeRow.lChargeTypeID = GAfeDescription
									.lGetTypeId(string_CHARGETYPE_RC);
						} else if ((GAfeDescription
								.strGetProperty(string_ROLETYPE_NRC))
								.equalsIgnoreCase(String.valueOf(RoleTypeID))) {
							customerChargeTypeRow.lChargeTypeID = GAfeDescription
									.lGetTypeId(string_CHARGETYPE_NRC);
						} // end of the else part of the if else if loop

						/** ************************* Changed For No ActivationDate being Inserted *********************** */
						customerProductLineTable = (CustomerProductLine) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session

						CustomerProductLineRow customerProductLineRow = null;

						customerProductLineRow = customerProductLineTable
								.cplrSearchByCustProductLineIDandObsolete(
										bProductDetailProperty.lCustomerProductLineID
												.longValue(), FINAL_ZERO);

						if (null != customerProductLineRow.dtActivationDate) {
							customerChargeTypeRow.dtActivationDate = customerProductLineRow.dtActivationDate;
						} // end of the if loop

						/** ************************* Changed For No ActivationDate being Inserted *********************** */
						customerChargeTypeRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
						customerChargeTypeRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
						customerChargeTypeTable
								.addUniqueRecord(customerChargeTypeRow); // Adding the Record in the CustomerPromotionTable
					} // end of the if loop
				} // end of the if loop

				/** **************************************MAKING OF NEXT QUERRY************************************** */

				// Put the container back into the session
				teleSessionMgr
						.putTable("CUSTOMERACCOUNT", customerAccountTable);

				// Put the container back into the session
				teleSessionMgr.putTable(string_CUSTOMERCHARGETYPE,
						customerChargeTypeTable);
			} // end of the if loop
			catch (SQLException e) {
				throw e;
			}

			//          BEGIN ADD : V3.27
			catch (Exception ex) {
				if (GAfePropertyLoader.DEBUG) {
					GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree,
							this);
				}

			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);

				throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
			}

			//          END ADD : v3.27
			finally {

				// BEGIN ADD V5.10a
				// comment: closing resultset in case ofexception
				try {
					if (null != rsGetAccountNumber) {
						rsGetAccountNumber.close();

						// BEGIN DELETE V 5.70b
						// rsGetAccountNumber.getStatement().close();
						// END DELETE V 5.70b
						rsGetAccountNumber = null;
					}

					// BEGIN ADD V 5.70b
					if (null != psSelect) {
						psSelect.close();
						psSelect = null;
					}

					// END ADD V 5.70b
				} catch (Exception e) {

					// consume it
					GLogger.logException(e);
				}

				// END ADD V5.10a

				closeAFEConnection(); // closing the connection
			}
		} // end of the if loop

		// Returning of the String
		return lNRCAccountID;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will Remove all the Forbidden Products from
	 *                                  The upper Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Vector vctProductSelected, Vector vctProductNonSelected
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected void vdLinkCustomerProductLineandCreateAccountSubAccToRoleType(
			BProductRole bProductRole, BProductRoleDetail bProductRoleDetail,
			Long lMRoleTypeID, Long lMCustomerLinkID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		Long lCustomerID = null; // Local Varaible Declaration
		Long lAddressID = null; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			lCustomerID = bProductRoleDetail.lCustomerID;
			lAddressID = bProductRoleDetail.lAddressID;

			CustomerLinkRow customerLinkRow = null;

			customerLinkTable = (CustomerLink) teleSessionMgr
					.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

			Vector vctCLInternal = null;

			vctCLInternal = customerLinkTable
					.clrSearchByCustIDAddIDandObsolete(lCustomerID.longValue(),
							lAddressID.longValue(), FINAL_ZERO);

			CustomerLinkRoleRow customerLinkRoleRow = null;

			customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
					.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session

			if (null != vctCLInternal) {
				for (int iCLinkCounter = FINAL_ZERO; iCLinkCounter < vctCLInternal
						.size(); iCLinkCounter++) {
					if (!((String.valueOf(lMCustomerLinkID))
							.equalsIgnoreCase(String
									.valueOf(((CustomerLinkRow) vctCLInternal
											.elementAt(iCLinkCounter)).lCustomerLinkID)))) {
						if (null != customerLinkRoleTable) {
							if (null != customerLinkRoleRow) {

								// Updating All the Values Over here
								customerLinkRoleRow.lCustomerLinkID = ((CustomerLinkRow) vctCLInternal
										.elementAt(iCLinkCounter)).lCustomerLinkID;

								if ((customerLinkRoleRow.iStatusInDB == Record.VIEW)
										|| (customerLinkRoleRow.iStatusInDB == Record.UPDATE)) {
									customerLinkRoleRow.iStatusInDB = Record.UPDATE;
									customerLinkRoleTable
											.updateRecord(customerLinkRoleRow);
								}

								// when iStatusInDB is equal to Record.INSERT
								else {
									customerLinkRoleTable
											.updateRecord(customerLinkRoleRow);
								} // end of the if else if loop
							} // end of the if loop
						} // end of the if loop

						// Put the container back into the session
						teleSessionMgr.putTable(string_CUSTOMERLINKROLE,
								customerLinkRoleTable);
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop
			else {

				// If we do not find any row in here then do this
				// If this CustomerLinkID is not there then add that in the table
				long CustomerLinkID = 0;

				customerLinkRow = null;
				customerLinkTable = (CustomerLink) teleSessionMgr
						.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

				if (null != customerLinkTable) {
					customerLinkRow = new CustomerLinkRow();
					customerLinkRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
					CustomerLinkID = customerLinkRow.lNewNr(); // Auto Generation of the  Primary key
					customerLinkRow.lCustomerLinkID = CustomerLinkID;
					customerLinkRow.lCustomerID = lCustomerID.longValue();
					customerLinkRow.lAddressID = lAddressID.longValue();
					customerLinkRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
					customerLinkRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
					customerLinkTable.addUniqueRecord(customerLinkRow); // Adding the Record in the CustomerPromotionTable

					// Put the container back into the session
					teleSessionMgr.putTable(string_CUSTOMERLINK, customerLinkTable);
				} // end of the if loop

				customerLinkRoleRow = null;
				customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
						.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session

				if (null != customerLinkRoleTable) {
					if (null != customerLinkRoleRow) {

						// Updating All the Values Over here
						customerLinkRoleRow.lCustomerLinkID = CustomerLinkID;

						if ((customerLinkRoleRow.iStatusInDB == Record.VIEW)
								|| (customerLinkRoleRow.iStatusInDB == Record.UPDATE)) {
							customerLinkRoleRow.iStatusInDB = Record.UPDATE;
							customerLinkRoleTable
									.updateRecord(customerLinkRoleRow);
						}

						// when iStatusInDB is equal to Record.INSERT
						else {
							customerLinkRoleTable
									.updateRecord(customerLinkRoleRow);
						} // end of the if else if loop
					} // end of the if loop
				} // end of the if loop

				// Put the container back into the session
				teleSessionMgr.putTable(string_CUSTOMERLINKROLE,
						customerLinkRoleTable);
			} // end of the if else if part

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will is used for Creation of the Customer Account for a given
	 *                                  CustomerProductLine
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long CustomerProductID, Long CustomerProductLineID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected Long lngMainCreateAccountForCustomerProductLineID(
			BProductDetailProperty bProductDetailProperty,
			Long CustomerProductID, Long CustomerProductLineID)
			throws SQLException, Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iCounter = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		Long lCustomerID = null; // Local Varaible Declaration
		Long lAddressID = null; // Local Varaible Declaration
		Long lAccountNumber = null; // Local Varaible Declaration
		Long lBillFormatID = null; // Local Varaible Declaration
		Long lNRCAccountID = Long.valueOf(0); // Local Varaible Declaration

		// BEGIN ADD V5.10a
		// comment: removed from above
		ResultSet rsGetAccountNumber = null; // Making an Object of the ResultSet

		// END ADD V5.10a

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b
		// BEGIN ADD ver 5.96e
		long lAccountTypeID = 0;
		ProductAccountType objProductAccountType = null;
		ProductAccountTypeRow objProductAccountTypeRow = null;

		// END ADD ver 5.96e

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		if (makeAFEConnection()) // If the Connection is made
		{
			try {

				// BEGIN ADD ver 5.96e
				objProductAccountType = (ProductAccountType) GConnectMemoryDB
						.getMasterTable(GMasterDataConstants.PRODUCTACCOUNTTYPE);
				objProductAccountTypeRow = objProductAccountType
						.objSearchByProductIDAndObsolete(
								bProductDetailProperty.lProductID.longValue(),
								FINAL_ZERO);
				lAccountTypeID = objProductAccountTypeRow.lAccountTypeID;

				// END ADD ver 5.96e
				StringBuffer strSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				/** *************************************MAKING OF NEXT QUERRY************************************** */
				BProductRole bProductRole = null;
				BProductRoleDetail bProductRoleDetail = null;

				if (null != teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct)) {

					// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
					bProductRole = (BProductRole) teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct);
					iSizeOfVector = bProductRole.vctProductRole.size();

					for (iCounter = FINAL_ZERO; iCounter < iSizeOfVector; iCounter++) {
						bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
								.elementAt(iCounter);
						lCustomerID = bProductRoleDetail.lCustomerID;
						lAddressID = bProductRoleDetail.lAddressID;

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement ");	
							// System.out.println("\n\n\n\n\n");
							// System.out.println("RoleTypeId : = " + bProductRoleDetail.lRoleTypeID);
							// System.out.println("******************************************************************");
							// System.out.println("lCustomerID : = " + lCustomerID);
							// System.out.println("lAddressID  : = " + lAddressID);
							// System.out.println("******************************************************************");
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						CustomerLinkRow customerLinkRow = null;

						customerLinkTable = (CustomerLink) teleSessionMgr
								.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

						Vector vctObjCLInternal = null;

						vctObjCLInternal = customerLinkTable
								.clrSearchByCustIDAddIDandObsolete(lCustomerID
										.longValue(), lAddressID.longValue(),
										FINAL_ZERO);

						long lngCustomerLinkID = 0;

						if (null != customerLinkTable) {
							if ((null == vctObjCLInternal)
									|| (FINAL_ZERO == vctObjCLInternal.size())) {
								customerLinkRow = new CustomerLinkRow();
								customerLinkRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
								lngCustomerLinkID = customerLinkRow.lNewNr(); // Auto Generation of the  Primary key

								/** **************STARTING*****************TO PRINT QUERRY******************************************** */
								if ((GAfePropertyLoader.DEBUG)) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("***********************************************************");
									// System.out.println("New Insertion CustomerLinkID  : " + lngCustomerLinkID);
									// System.out.println("***********************************************************");
								}

								/** **************ENDING*******************TO PRINT QUERRY******************************************** */
								customerLinkRow.lCustomerLinkID = lngCustomerLinkID;
								customerLinkRow.lCustomerID = lCustomerID
										.longValue();
								customerLinkRow.lAddressID = lAddressID
										.longValue();
								customerLinkRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
								customerLinkRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
								customerLinkTable
										.addUniqueRecord(customerLinkRow); // Adding the Record in the CustomerPromotionTable

								// Put the container back into the session
								teleSessionMgr.putTable(string_CUSTOMERLINK,
										customerLinkTable);
							} // end of the if loop
							else {

								// else use the same customer link id how
								if ((string_ZERO).equalsIgnoreCase(String
										.valueOf(lngCustomerLinkID))) {
									if (null != vctObjCLInternal) {
										lngCustomerLinkID = ((CustomerLinkRow) vctObjCLInternal
												.elementAt(FINAL_ZERO)).lCustomerLinkID;

										/** **************STARTING*****************TO PRINT QUERRY******************************************** */
										if ((GAfePropertyLoader.DEBUG)) {
											GLogger.chkpt("Inside if statement");
											// System.out.println("***********************************************************");
											// System.out.println("Already Insertion CustomerLinkID      : " + lngCustomerLinkID);
											// System.out.println("***********************************************************");
										}

										/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									} // end of the if loop
								} // end of the if loop
							}
						}

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("CustomerLinkID = : " + lngCustomerLinkID);
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						long lngCustomerLinkRole = 0;
						CustomerLinkRoleRow customerLinkRoleRow = null;

						customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
								.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session

						Vector vctcustomerLinkRole = null;

						vctcustomerLinkRole = customerLinkRoleTable
								.vctSearchByCustomerLinkIDandRoleTypeIDandObsolete(
										lngCustomerLinkID,
										bProductRoleDetail.lRoleTypeID
												.longValue(), FINAL_ZERO);

						if (null != customerLinkRoleTable) {
							if ((null == vctcustomerLinkRole)
									|| (FINAL_ZERO == vctcustomerLinkRole
											.size())) {
								customerLinkRoleRow = new CustomerLinkRoleRow();
								customerLinkRoleRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
								lngCustomerLinkRole = customerLinkRoleRow
										.lNewNr(); // Auto Generation of the  Primary key

								/** **************STARTING*****************TO PRINT QUERRY******************************************** */
								if ((GAfePropertyLoader.DEBUG)) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("***********************************************************");
									// System.out.println("New Insertion CustomerLinkRoleID      : " + lngCustomerLinkRole);
									// System.out.println("***********************************************************");
								}

								/** **************ENDING*******************TO PRINT QUERRY******************************************** */
								customerLinkRoleRow.lCustomerLinkRoleID = lngCustomerLinkRole;
								customerLinkRoleRow.lCustomerLinkID = lngCustomerLinkID;
								customerLinkRoleRow.lRoleTypeID = bProductRoleDetail.lRoleTypeID
										.longValue();
								customerLinkRoleRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
								customerLinkRoleRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
								customerLinkRoleTable
										.addUniqueRecord(customerLinkRoleRow); // Adding the Record in the CustomerPromotionTable

								// Put the container back into the session
								teleSessionMgr.putTable(string_CUSTOMERLINKROLE,
										customerLinkRoleTable);
							} // end of the if loop
							else {

								// else use the same customer link id how
								if ((string_ZERO).equalsIgnoreCase(String
										.valueOf(lngCustomerLinkRole))) {
									if (null != vctcustomerLinkRole) {
										lngCustomerLinkRole = ((CustomerLinkRoleRow) vctcustomerLinkRole
												.elementAt(FINAL_ZERO)).lCustomerLinkRoleID;

										/** **************STARTING*****************TO PRINT QUERRY******************************************** */
										if ((GAfePropertyLoader.DEBUG)) {
											GLogger.chkpt("Inside if statement");
											// System.out.println("***********************************************************");
											// System.out.println("Already Insertion CustomerLinkRoleID  : " + lngCustomerLinkRole);
											// System.out.println("***********************************************************");
										}

										/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									} // end of the if loop
								} // end of the if loop
							} // end of the else loop
						} // end of the if loop

						CustomerLR2CustomerProductRow customerLR2CustomerProductRow = null;

						customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
								.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session

						if (null != customerLR2CustomerProductTable) {
							customerLR2CustomerProductRow = new CustomerLR2CustomerProductRow();
							customerLR2CustomerProductRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
							customerLR2CustomerProductRow.lCustomerLinkRoleID = lngCustomerLinkRole;
							customerLR2CustomerProductRow.lCustomerProductLineID = CustomerProductLineID
									.longValue();
							customerLR2CustomerProductTable
									.addUniqueRecord(customerLR2CustomerProductRow); // Adding the Record in the CustomerPromotionTable

							// Put the container back into the session
							teleSessionMgr.putTable(
									string_CUSTOMERLR2CUSTOMERPRODUCT,
									customerLR2CustomerProductTable);
						} // end of the if loop

						// Begin DEL v9.01d
						// boolean bFlagForClarifyEntries = false;
						// End DEL v9.01d
						if ((null != teleSessionMgr
								.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT))
								&& ((GAfeDescription
										.strGetProperty(string_ROLETYPE_USER))
										.equalsIgnoreCase(String
												.valueOf(bProductRoleDetail.lRoleTypeID)))) {

							// Vector for storing all the Data that is populated in the tablular form
							bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
									.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

							// Now Check Whether already this Customer has Product Lines Purchased with it or not
							customerLinkRoleRow = null;
							customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
									.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session

							Vector vctCustomerLRole = new Vector();

							vctCustomerLRole = customerLinkRoleTable
									.vctSearchBylCustomerLinkIDandiObsolete(
											lngCustomerLinkID, FINAL_ZERO);

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */
							if ((GAfePropertyLoader.DEBUG)) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("******************************************************************");
								// System.out.println("Create Contact vctCustomerLRole - " + vctCustomerLRole);
								// System.out.println("******************************************************************");
							}

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */
							if (null != vctCustomerLRole) {
								for (int iCLCount = FINAL_ZERO; iCLCount < vctCustomerLRole
										.size(); iCLCount++) {
									customerLinkRoleRow = new CustomerLinkRoleRow();
									customerLinkRoleRow = ((CustomerLinkRoleRow) vctCustomerLRole
											.elementAt(iCLCount));

									// if (GAfeDescription.lGetTypeId("ROLETYPE_USER") ==        customerLinkRoleRow.lRoleTypeID)
									{
										customerLR2CustomerProductRow = null;
										customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
												.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session

										// Begin DEL v9.01d
										// Vector vctObjCLR2CPInternal = new Vector();
										// vctObjCLR2CPInternal = customerLR2CustomerProductTable.clrcpSearchByCustLinkRoleId(customerLinkRoleRow.lCustomerLinkRoleID);
										// End DEL v9.01d

										/** **************STARTING*****************TO PRINT QUERRY******************************************** */
										// Begin DEL v9.01d
										// if ((GAfePropertyLoader.DEBUG)) {
										// System.out.println("******************************************************************");
										// System.out.println("Create Contact vctObjCLR2CPInternal - " + vctObjCLR2CPInternal);
										// System.out.println("******************************************************************");
										// }
										// End DEL v9.01d
										/** **************ENDING*******************TO PRINT QUERRY******************************************** */
										// Begin DEL v9.01d
										/*
										 * if (null != vctObjCLR2CPInternal) {
										 *   if (vctObjCLR2CPInternal.size() >= 2) {
										 *       bFlagForClarifyEntries = false;
										 *       break;
										 *
										 *   }//end of the if loop
										 *   else if (vctObjCLR2CPInternal.size() == FINAL_ONE) {
										 *       bFlagForClarifyEntries = true;
										 *
										 *   }//end of the if else if loop
										 *
										 * }//end of the if loop
										 */

										// End DEL v9.01d
									} // end of the if loop
								} // end of the for loop
							} // end of the if loop

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */

							/*
							 * if ((GAfePropertyLoader.DEBUG)) {
							 *   if (bFlagForClarifyEntries) {
							 *       //System.out.println("*******************************");
							 *       //System.out.println("Going for Create Contact");
							 *       //System.out.println("*******************************");
							 *   } else {
							 *       //System.out.println("*******************************");
							 *       //System.out.println("Not Going for Create Contact");
							 *       //System.out.println("*******************************");
							 *   }
							 * }
							 */

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						} // end of the if loop

						// BEGIN DELETE v5.90a

						/*
						 *   if (((GAfeDescription.strGetProperty("ROLETYPE_USER")).equalsIgnoreCase(String.valueOf(bProductRoleDetail.lRoleTypeID))) && bFlagForClarifyEntries)
						 *   {
						 *       if ((GAfePropertyLoader.DEBUG))
						 *       {
						 *           System.out.println("******************************************************************");
						 *           System.out.println("Clarify Entries Going with lngCustomerLinkID    : " + lngCustomerLinkID);
						 *           System.out.println("Clarify Entries Going with lCustomerID                  : " + bProductRoleDetail.lCustomerID);
						 *           System.out.println("Clarify Entries Going with CatSapID                             : " + bProductRoleDetail.CatSapID);
						 *       }
						 *
						 *       CustomerRow customerRow = null;                                                         // Initializing the Object Class for the Customer table
						 *       customerTable = (Customer) teleSessionMgr.getTable("CUSTOMER"); // Getting the Customer table from the session
						 *
						 *       String strFirstName = " ";
						 *       String strLastName = " ";
						 *       String strStreet = " ";
						 *       //BEGIN ADD V5.71e
						 *       String strBox = "";
						 *       //END ADD V5.71e
						 *
						 *       //BEGIN ADD V4.10b
						 *       //Comment: For changes of 891
						 *       String strEpithet = null;
						 *       EpithetRow epithetRow = null;
						 *       BSession bSession = null;
						 *       //END ADD V4.10b
						 *
						 *
						 *       if (null != customerTable && null != bProductRoleDetail.lCustomerID)
						 *       {
						 *           customerRow = (CustomerRow) customerTable.crSearchByCustIDandObsolete(bProductRoleDetail.lCustomerID.longValue(), FINAL_ZERO);
						 *
						 *           if (null != customerRow)
						 *           {
						 *               strFirstName = customerRow.strFirstName;
						 *               strLastName = customerRow.strName;
						 *
						 *               //BEGIN ADD V4.10b
						 *               //Comment: For changes of 891
						 *               epithetTable = (Epithet) teleSessionMgr.getMasterTable("EPITHET");
						 *               bSession = (BSession) teleSessionMgr.getValue("BSession_Afe");
						 *               if (null != epithetTable && null != bSession)
						 *               {
						 *                   epithetRow = epithetTable.astrSearchByEpithetID(customerRow.lEpithetID);
						 *                   if (null != epithetRow)
						 *                   {
						 *                       strEpithet = strGetDescription(bSession.lLanguageId, epithetRow.lDescriptionID);
						 *                   }
						 *                   else
						 *                   {
						 *                       strEpithet = "";
						 *                   }
						 *               }
						 *               //END ADD V4.10b
						 *
						 *               if (GAfePropertyLoader.DEBUG)
						 *               {
						 *                   System.out.println("The First Customer Name is      : " + strFirstName);
						 *                   System.out.println("The Last Customer Name is       : " + strLastName);
						 *               }
						 *           }
						 *           else
						 *           {
						 *               strFirstName = "";
						 *               strLastName = "";
						 *               //BEGIN ADD V4.10b
						 *               //Comment: For changes of 891
						 *               strEpithet = "";
						 *               //END ADD V4.10b
						 *           }
						 *       }
						 *       if (null != bProductRoleDetail.CatSapID && FINAL_ZERO != bProductRoleDetail.CatSapID.longValue())
						 *       {
						 *           BCustomerAddress bCustomerAddressTemp = new BCustomerAddress();
						 *
						 *           bCustomerAddressTemp.lCustomerId = bProductRoleDetail.lCustomerID.longValue();
						 *           bCustomerAddressTemp.lAddressId = lAddressID.longValue();
						 *           bCustomerAddressTemp.lServiceAddressId = bProductRoleDetail.CatSapID.longValue();
						 *
						 *           LCustomer lCustomer = new LCustomer();
						 *           lCustomer.vSelectCatsapAddress(bCustomerAddressTemp);
						 *
						 *           BCatsapAddress bCatsapAddress = new BCatsapAddress();
						 *
						 *           bCatsapAddress = lCustomer.objAddressFromSapId(bProductRole.lServiceAddressID.longValue());
						 *
						 *           strStreet = bCatsapAddress.strStreet;
						 *
						 *           //BEGIN ADD V5.71e
						 *           if (bCatsapAddress.strBox == null)
						 *           {
						 *               strBox = "";
						 *           }
						 *           else
						 *           {
						 *               strBox = bCatsapAddress.strBox;
						 *           }
						 *
						 *           //END ADD 5.71e
						 *
						 *           if ((GAfePropertyLoader.DEBUG))
						 *           {
						 *               System.out.println("bCatsapAddress.strStreet                    : " + bCatsapAddress.strStreet);
						 *               System.out.println("bCustomerAddressTemp.strCity                : " + bCustomerAddressTemp.strCity);
						 *               System.out.println("bCustomerAddressTemp.strPostCode    : " + bCustomerAddressTemp.strPostCode);
						 *               System.out.println("*******************************************************************");
						 *           }
						 *           /****************ENDING*******************TO PRINT QUERRY*********************************************
						 */

						// BEGIN DELETE V4.10b
						// Comment: For changes of 891
						// iCreateContactInClfy(Long.valueOf(lngCustomerLinkID), bProductRoleDetail.lCustomerID, bProductRoleDetail.CatSapID, strFirstName, strLastName, bCustomerAddressTemp.strCity, bCustomerAddressTemp.strPostCode, strStreet, bCustomerAddressTemp.strHouseNumber, bCustomerAddressTemp.strSubHouseNumber);
						// END DELETE V4.10b
						// BEGIN DELETE V5.71e
						// BEGIN ADD V4.10b
						// Comment: For changes of 891
						// iCreateContactInClfy(Long.valueOf(lngCustomerLinkID), bProductRoleDetail.lCustomerID, bProductRoleDetail.CatSapID, strFirstName, strLastName, bCustomerAddressTemp.strCity, bCustomerAddressTemp.strPostCode, strStreet, bCustomerAddressTemp.strHouseNumber, bCustomerAddressTemp.strSubHouseNumber, strEpithet);
						// END ADD V4.10b
						// END DELETE V5.71e
						// BEGIN ADD V5.71e
						// iCreateContactInClfy(Long.valueOf(lngCustomerLinkID), bProductRoleDetail.lCustomerID, bProductRoleDetail.CatSapID, strFirstName, strLastName, bCustomerAddressTemp.strCity, bCustomerAddressTemp.strPostCode, strStreet, bCustomerAddressTemp.strHouseNumber, bCustomerAddressTemp.strSubHouseNumber, strEpithet, strBox);
						// END ADD V5.71e
						/*
						 * }
						 * else
						 * {
						 *   //Get the data form the manual address table.
						 *   //No SapID Available move for the Manual Address ID
						 *   if (FINAL_ZERO != bProductRoleDetail.lManualAddressID.longValue())
						 *   {
						 *       ManualAddressRow manualAddressRow = null;
						 *       manualAddressTable = (ManualAddress) teleSessionMgr.getTable("MANUALADDRESS");          // Getting the Customer table from the session
						 *
						 *       manualAddressRow = manualAddressTable.marSearchByManualAddressID(bProductRoleDetail.lManualAddressID.longValue());
						 *
						 *       AddressRow addressRow = null;
						 *       addressTable = (Address) teleSessionMgr.getTable("ADDRESS");            // Getting the Customer table from the session
						 *
						 *       Vector vctAddressInternal = new Vector();
						 *       vctAddressInternal = addressTable.vctSearchByAddressIDandObsolete(bProductRoleDetail.lAddressID.longValue(), FINAL_ZERO);
						 *
						 *       if (null != manualAddressRow)
						 *       {
						 *           if (null == manualAddressRow.strCity)
						 *           {
						 *               manualAddressRow.strCity = "";
						 *           }
						 *           if (null == manualAddressRow.strZip)
						 *           {
						 *               manualAddressRow.strZip = "";
						 *           }
						 *           if (null == manualAddressRow.strStreetName)
						 *           {
						 *               manualAddressRow.strStreetName = "";
						 *           }
						 *
						 *           //Space for SAPID
						 *           //BEGIN DELETE V4.10b
						 *           //Comment: For changes of 891
						 *           //iCreateContactInClfy(Long.valueOf(lngCustomerLinkID), bProductRoleDetail.lCustomerID, null, strFirstName, strLastName, manualAddressRow.strCity, manualAddressRow.strZip, manualAddressRow.strStreetName, ((AddressRow)vctAddressInternal.elementAt(FINAL_ZERO)).strHouseNumber, ((AddressRow)vctAddressInternal.elementAt(FINAL_ZERO)).strSubHouseNumber);
						 *           //END DELETE V4.10b
						 *
						 *           //BEGIN DELETE V5.71e
						 *           //BEGIN ADD V4.10b
						 *           //Comment: For changes of 891
						 *           //iCreateContactInClfy(Long.valueOf(lngCustomerLinkID), bProductRoleDetail.lCustomerID, null, strFirstName, strLastName, manualAddressRow.strCity, manualAddressRow.strZip, manualAddressRow.strStreetName, ((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).strHouseNumber, ((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).strSubHouseNumber, strEpithet);
						 *           //END ADD V4.10b
						 *           //BEGIN DELETE V5.71e
						 *
						 *           //BEGIN ADD V5.71e
						 *           iCreateContactInClfy(Long.valueOf(lngCustomerLinkID), bProductRoleDetail.lCustomerID, null, strFirstName, strLastName, manualAddressRow.strCity, manualAddressRow.strZip, manualAddressRow.strStreetName, ((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).strHouseNumber, ((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).strSubHouseNumber, strEpithet, ((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).strBox);
						 *           //END ADD V5.71e
						 *
						 *       }//end of the if loop
						 *
						 *   }//end of the if loop
						 *
						 * }//end of the if loop
						 * }
						 */

						// END DELETE v5.90a
						if (!((GAfeDescription.strGetProperty(string_ROLETYPE_USER))
								.equalsIgnoreCase(String
										.valueOf(bProductRoleDetail.lRoleTypeID)))) {

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("We are in Account creation for new product line");
								// System.out.println("RoleTypeId : " + bProductRoleDetail.lRoleTypeID);
							}

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */
							CustomerAccountRow customerAccountRow = null; // Initializing the Object Class for the Currency table

							customerAccountTable = (CustomerAccount) teleSessionMgr
									.getTable("CUSTOMERACCOUNT"); // Getting the Customer table from the session

							Vector vctCustomerAccount = new Vector();

							// Pending
							int iPaymentMethodID = 0;

							if ((GAfeDescription
									.strGetProperty(string_ROLETYPE_USAGE))
									.equalsIgnoreCase(String
											.valueOf(bProductRoleDetail.lRoleTypeID))) {
								iPaymentMethodID = Integer
										.parseInt(String
												.valueOf(bProductDetailProperty.lPaymentMethodUsage));
							}

							if ((GAfeDescription.strGetProperty(string_ROLETYPE_RC))
									.equalsIgnoreCase(String
											.valueOf(bProductRoleDetail.lRoleTypeID))) {
								iPaymentMethodID = Integer
										.parseInt(String
												.valueOf(bProductDetailProperty.lPaymentMethodRC));
							}

							if ((GAfeDescription.strGetProperty(string_ROLETYPE_NRC))
									.equalsIgnoreCase(String
											.valueOf(bProductRoleDetail.lRoleTypeID))) {
								iPaymentMethodID = Integer
										.parseInt(String
												.valueOf(bProductDetailProperty.lPaymentMethodNRC));
							} // end of the else part of the if else if loop

							// BEGIN DELETE ver 5.96e
							// vctCustomerAccount = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDandObsolete(lngCustomerLinkID, iPaymentMethodID, FINAL_ZERO);
							// END DELETE ver 5.96e
							// BEGIN DELETE V 7.04c COMMENTING FOR DATAQUALITY-ORDERINTAKE
							// BEGIN ADD ver 5.96e
							// vctCustomerAccount = customerAccountTable.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsolete(lngCustomerLinkID, iPaymentMethodID,lAccountTypeID, FINAL_ZERO);
							// END ADD ver 5.96e
							// END DELETE V 7.04c COMMENTING FOR DATAQUALITY-ORDERINTAKE
							// BEGIN ADD V 7.04c
							vctCustomerAccount = customerAccountTable
									.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsoleteandProtectedFlag(
											lngCustomerLinkID,
											iPaymentMethodID, lAccountTypeID,
											FINAL_ZERO, FINAL_ZERO);

							// END ADD V 7.04c
							// Begin Add V8.01d
							if ((null != teleSessionMgr
									.getValue("bIsSocialTariff"))
									&& (null != teleSessionMgr
											.getValue("STTProtected"))) {
								if (((Boolean) teleSessionMgr
										.getValue("bIsSocialTariff"))
										.booleanValue()
										&& (1 == ((Integer) teleSessionMgr
												.getValue("STTProtected"))
												.intValue())) {
									vctCustomerAccount = customerAccountTable
											.vctSearchByCustomerLinkIDandPayMethIDAccountTypeIDandObsoleteandProtectedFlag(
													lngCustomerLinkID,
													iPaymentMethodID,
													lAccountTypeID, FINAL_ZERO,
													FINAL_ONE);

									if (null != vctCustomerAccount) {
										long lCustomerAccountID = 0;
										CustomerChargeTypeRow custChargeTypeRowS = null;
										Vector vctAccountSocial = null;

										if (null != bProductDetailProperty) {
											vctAccountSocial = customerChargeTypeTable
													.vctSearchByCustomerProductLineIDandObsolete(
															bProductDetailProperty.lCustomerProductLineID
																	.longValue(),
															FINAL_ZERO);
										}

										if ((null != vctAccountSocial)
												&& (vctAccountSocial.size() != FINAL_ZERO)) {
											custChargeTypeRowS = ((CustomerChargeTypeRow) vctAccountSocial
													.elementAt(FINAL_ZERO));
											lCustomerAccountID = custChargeTypeRowS.lCustomerAccountID;
										}

										GLogger
												.chkpt("lCustomerAccountID for Social Tariff : "
														+ lCustomerAccountID);

										Vector vctTepAcc = new Vector();

										for (int iCnt = 0; iCnt < vctCustomerAccount
												.size(); iCnt++) {
											if (lCustomerAccountID == ((CustomerAccountRow) vctCustomerAccount
													.get(iCnt))
													.getCustomerAccountID()) {
												vctTepAcc
														.add((CustomerAccountRow) vctCustomerAccount
																.get(iCnt));
											}
										}

										vctCustomerAccount = vctTepAcc;
									}
								}
							}

							// End Add V8.01d
							// Begin Add v7.05k
							vctCustomerAccount = vctSearchActiveAccounts(vctCustomerAccount);

							// End Add v7.05k
							if (null == vctCustomerAccount) {

								/** **************STARTING*****************TO PRINT QUERRY******************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("CustomerAcccount is not there ");
								}

								/** **************ENDING*******************TO PRINT QUERRY******************************************** */

								/** **************************************MAKING OF 2RD QUERRY************************************** */

								// Making the second Querry
								// BEGIN ADD V5.10a
								// comment: declared above
								// ResultSet rsGetAccountNumber          = null; // Making an Object of the ResultSet
								// END ADD V5.10a
								// BEGIN DELETE V 5.70b
								// strSql.setLength(0); //Initialising
								// /* Making the Querry Statement */
								// strSql.append("SELECT S_ACCOUNTNUMBER.NEXTVAL NEXTACCOUNTNUMBER FROM DUAL ");
								// /****************STARTING*****************TO PRINT THE DATA********************************************/
								// if(GAfePropertyLoader.DEBUG)
								// {
								// /* Printing out the Querry made prior to its firing */
								// System.out.println("The Querry is : " + strSql.toString());
								// }
								// /****************ENDING*******************TO PRINT THE DATA*******************************************/
								// /* Firing the Querry and taking the Result as a ResultSet */
								// rsGetAccountNumber = gConnectAfe.rsQuery(strSql.toString());
								// END DELETE V 5.70b
								// BEGIN ADD V 5.70b
								strSql.setLength(0); // Initialising
								strSql
										.append("SELECT S_ACCOUNTNUMBER.NEXTVAL NEXTACCOUNTNUMBER FROM DUAL ");
								psSelect = gConnectAfe
										.psPrepareStatement(strSql.toString());
								rsGetAccountNumber = psSelect.executeQuery();

								// END ADD V 5.70b

								while (rsGetAccountNumber.next()) {
									lAccountNumber = Long.valueOf(
											rsGetAccountNumber
													.getString("NEXTACCOUNTNUMBER"));
								} // end of the while Loop

								// BEGIN ADD V5.10a
								// comment: closing the open resultset
								if (null != rsGetAccountNumber) {
									rsGetAccountNumber.close();

									// BEGIN DELETE V 5.70b
									// rsGetAccountNumber.getStatement().close();
									// END DELETE V 5.70b
									rsGetAccountNumber = null;
								}

								// END ADD V5.10a

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("Hi there sachin ----OK---> Account Number Generated - " + lAccountNumber);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */

								/** **************************************MAKING OF 2RD QUERRY************************************** */
								CustomerProfileRow customerProfileRow = null;

								customerProfileTable = (CustomerProfile) teleSessionMgr
										.getTable("CUSTOMERPROFILE"); // Getting the Customer table from the session
								customerProfileRow = (CustomerProfileRow) customerProfileTable
										.cprSearchByCustIDandObsolete(
												bProductRoleDetail.lCustomerID
														.longValue(),
												FINAL_ZERO);

								if (null != customerProfileRow) {

									// BEGIN DELETE V6.08a
									// if (GAfeDescription.strGetProperty("SEGMENT_RESIDENTIAL").equalsIgnoreCase(String.valueOf(customerProfileRow.lSegmentID))) {
									// lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMAT_RESIDENTIAL"));
									// }//end of the if loop
									// else {
									// lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMAT_OTHER"));
									// }//end of the else loop of the if case
									// END DELETE V6.08a
									// BEGIN ADD V6.08a
									// Begin Mod V9.00a
									// lBillFormatID = Long.valueOf(RBilling.lGetBillFormatID(lAccountTypeID, customerProfileRow.lSegmentID));
									// get the bill type id of the customer
									// Get teh bill format id form bill type id
									lBillFormatID = Long.valueOf(
											LBilling
													.lGetBillFormatId(CustomerUtils
															.lGetBillTypeId(bProductRoleDetail.lCustomerID
																	.longValue())));
									GLogger
											.chkpt("lngMainCreateAccountForCustomerProductLineID ::Segmentation >>"
													+ lBillFormatID);

									// End Mod V9.00a
									// END ADD V6.08a
								}

								// Begin Del V9.00a

								/*
								 * else {
								 *   lBillFormatID = Long.valueOf(GAfeDescription.lGetTypeId("BILLFORMAT_OTHER"));
								 *
								 * }
								 */

								// end of the else loop of the if case
								// End Del V9.00a
								long lngCustomerAccountID = 0;

								customerAccountTable = (CustomerAccount) teleSessionMgr
										.getTable("CUSTOMERACCOUNT"); // Getting the Customer table from the session

								if (null != customerAccountTable) {
									customerAccountRow = new CustomerAccountRow();
									customerAccountRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
									lngCustomerAccountID = customerAccountRow
											.lNewNr(); // Auto Generation of the  Primary key
									customerAccountRow.lCustomerAccountID = lngCustomerAccountID;
									customerAccountRow.lCustomerLinkID = lngCustomerLinkID;
									customerAccountRow.lAccountNumber = lAccountNumber
											.longValue();
									customerAccountRow.iMinimumService = 0;
									customerAccountRow.lCurrencyID = bProductDetailProperty.lCurrencyID
											.longValue();

									// customerAccountRow.lBillCycleID = 1;
									customerAccountRow.lBillCycleID = 987;
									customerAccountRow.lRecurringTypeID = GAfeDescription
											.lGetTypeId("RECURRINGTYPE_MONTHLY");

									// BEGIN ADD ver 5.96e
									customerAccountRow.lAccountType = lAccountTypeID;

									// END ADD ver 5.96e
									if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_USAGE))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										customerAccountRow.lPaymentMethodID = bProductDetailProperty.lPaymentMethodUsage
												.longValue();

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if statement");
											// System.out.println("Entering for ROLETYPE_USAGE as PaymentMethod ID - " + bProductDetailProperty.lPaymentMethodUsage);
										}

										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									}

									if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_RC))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										customerAccountRow.lPaymentMethodID = bProductDetailProperty.lPaymentMethodRC
												.longValue();

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if statement");
											// System.out.println("Entering for ROLETYPE_RC as PaymentMethod ID - " + bProductDetailProperty.lPaymentMethodRC);
										}

										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									}

									if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_NRC))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										customerAccountRow.lPaymentMethodID = bProductDetailProperty.lPaymentMethodNRC
												.longValue();
										lNRCAccountID = Long.valueOf(
												lngCustomerAccountID);

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if statement");
											// System.out.println("Entering for ROLETYPE_NRC as PaymentMethod ID - " + bProductDetailProperty.lPaymentMethodNRC);
										}

										/** **************ENDING*******************TO PRINT THE DATA***************************************** */

										/** **************STARTING*****************TO PRINT QUERRY******************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if statement");
											// System.out.println("lNRCAccountID --------------------------------------------->> : " + lNRCAccountID);
										}

										/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									} // end of the else part of the if else if loop

									if ((null != lBillFormatID)
											&& (!(("").equals(String
													.valueOf(lBillFormatID))))
											&& (!((string_ZERO).equals(String
													.valueOf(lBillFormatID))))) {
										customerAccountRow.lBillFormatID = lBillFormatID
												.longValue();
									} // end of the if loop

									if (customerAccountRow.lPaymentMethodID == GAfeDescription
											.lGetTypeId("PAYMENTMETHOD_DIRECTDEBIT")) {

										// BEGIN DELETE : VER 1.1
										// customerAccountRow.lDirectDebitStatusID       =       GAfeDescription.lGetTypeId("DIRECTDEBITSTATUS_BR1");
										// END DELETE : VER 1.1
										// BEGIN ADD : VER 1.1
										customerAccountRow.lDirectDebitStatusID = 0;

										// END ADD : VER 1.1
									}

									customerAccountRow.iSuspendInvoice = 0;
									customerAccountRow.lDisplayMethodID = GAfeDescription
											.lGetTypeId("DISPLAYMETHOD_INVOICEONPAPER");
									customerAccountRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
									customerAccountRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
									customerAccountTable
											.addUniqueRecord(customerAccountRow); // Adding the Record in the CustomerPromotionTable

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("CustomerAcccount is Created with id " + lngCustomerAccountID);
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */

									// Put the container back into the session
									teleSessionMgr.putTable("CUSTOMERACCOUNT",
											customerAccountTable);
								} // end of the if loop

								CustomerChargeTypeRow customerChargeTypeRow = null; // Initializing the Object Class for the Currency table

								customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
										.getTable(string_CUSTOMERCHARGETYPE); // Getting the Customer table from the session

								long lngCustomerChargeTypeID = 0;

								if (null != customerChargeTypeTable) {
									customerChargeTypeRow = new CustomerChargeTypeRow();
									customerChargeTypeRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
									lngCustomerChargeTypeID = customerChargeTypeRow
											.lNewNr(); // Auto Generation of the  Primary key
									customerChargeTypeRow.lCustomerChargeTypeID = lngCustomerChargeTypeID;
									customerChargeTypeRow.lCustomerAccountID = lngCustomerAccountID;

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if (GAfePropertyLoader.DEBUG) {

										GLogger.chkpt("Inside if statement ");	// System.out.println("CustomerChargeType table is added with this customeraccountId :" + lngCustomerAccountID);
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									customerChargeTypeRow.lCustomerProductLineID = CustomerProductLineID
											.longValue();

									if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_USAGE))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										customerChargeTypeRow.lChargeTypeID = GAfeDescription
												.lGetTypeId("CHARGETYPE_USAGE");
									} else if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_RC))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										customerChargeTypeRow.lChargeTypeID = GAfeDescription
												.lGetTypeId(string_CHARGETYPE_RC);
									} else if ((GAfeDescription
											.strGetProperty(string_ROLETYPE_NRC))
											.equalsIgnoreCase(String
													.valueOf(bProductRoleDetail.lRoleTypeID))) {
										customerChargeTypeRow.lChargeTypeID = GAfeDescription
												.lGetTypeId(string_CHARGETYPE_NRC);
									} // end of the else part of the if else if loop

									customerChargeTypeRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
									customerChargeTypeRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
									customerChargeTypeTable
											.addUniqueRecord(customerChargeTypeRow); // Adding the Record in the CustomerPromotionTable

									// Put the container back into the session
									teleSessionMgr.putTable(
											string_CUSTOMERCHARGETYPE,
											customerChargeTypeTable);
								} // end of the if loop
							} // end of the if loop
							else {

								/** **************STARTING*****************TO PRINT QUERRY******************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("CustomerAcccount is there ");
								}

								/** **************ENDING*******************TO PRINT QUERRY******************************************** */
								for (int iCounterCA = FINAL_ZERO; iCounterCA < vctCustomerAccount
										.size(); iCounterCA++) {
									customerAccountRow = (CustomerAccountRow) vctCustomerAccount
											.elementAt(iCounterCA);

									if ((FINAL_ZERO != customerAccountRow.lCustomerAccountID)
											&& (FINAL_ZERO == lNRCAccountID
													.longValue())
											&& ((GAfeDescription
													.strGetProperty(string_ROLETYPE_NRC))
													.equalsIgnoreCase(String
															.valueOf(bProductRoleDetail.lRoleTypeID)))) {
										lNRCAccountID = Long.valueOf(
												customerAccountRow.lCustomerAccountID);
									}

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("lNRCAccountID --------------------------------------------->> : " + customerAccountRow.lCustomerAccountID);
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									CustomerChargeTypeRow customerChargeTypeRow = null; // Initializing the Object Class for the Currency table

									customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
											.getTable(string_CUSTOMERCHARGETYPE); // Getting the Customer table from the session

									long lngCustomerChargeTypeID = 0;

									if (null != customerChargeTypeTable) {
										customerChargeTypeRow = new CustomerChargeTypeRow();
										customerChargeTypeRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
										lngCustomerChargeTypeID = customerChargeTypeRow
												.lNewNr(); // Auto Generation of the  Primary key
										customerChargeTypeRow.lCustomerChargeTypeID = lngCustomerChargeTypeID;
										customerChargeTypeRow.lCustomerAccountID = customerAccountRow.lCustomerAccountID;
										customerChargeTypeRow.lCustomerProductLineID = CustomerProductLineID
												.longValue();

										if ((GAfeDescription
												.strGetProperty(string_ROLETYPE_USAGE))
												.equalsIgnoreCase(String
														.valueOf(bProductRoleDetail.lRoleTypeID))) {
											customerChargeTypeRow.lChargeTypeID = GAfeDescription
													.lGetTypeId("CHARGETYPE_USAGE");
										} else if ((GAfeDescription
												.strGetProperty(string_ROLETYPE_RC))
												.equalsIgnoreCase(String
														.valueOf(bProductRoleDetail.lRoleTypeID))) {
											customerChargeTypeRow.lChargeTypeID = GAfeDescription
													.lGetTypeId(string_CHARGETYPE_RC);
										} else if ((GAfeDescription
												.strGetProperty(string_ROLETYPE_NRC))
												.equalsIgnoreCase(String
														.valueOf(bProductRoleDetail.lRoleTypeID))) {
											customerChargeTypeRow.lChargeTypeID = GAfeDescription
													.lGetTypeId(string_CHARGETYPE_NRC);
										} // end of the else part of the if else if loop

										customerChargeTypeRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
										customerChargeTypeRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
										customerChargeTypeTable
												.addUniqueRecord(customerChargeTypeRow); // Adding the Record in the CustomerPromotionTable

										// Put the container back into the session
										teleSessionMgr.putTable(
												string_CUSTOMERCHARGETYPE,
												customerChargeTypeTable);

										/** **************STARTING*****************TO PRINT QUERRY******************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if statement");
											// System.out.println("CustomerChargeType table is added with this customerAccountId : " + customerAccountRow.lCustomerAccountID);
										}

										/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									} // end of the if loop
								} // end of the for loop
							} // end of the else if loop
						} // end of the if loop
					} // end of the for loop
				} // end of the if loop

				/** **************************************MAKING OF NEXT QUERRY************************************** */
			} // end of the if loop
			catch (SQLException e) {
				throw e;
			}

			//          BEGIN ADD : V3.27
			catch (Exception ex) {
				if (GAfePropertyLoader.DEBUG) {
					GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree,
							this);
				}

				throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
			}

			//          END ADD : v3.27
			finally {

				// BEGIN ADD V5.10a
				// comment: closing resultset in case ofexception
				try {
					if (null != rsGetAccountNumber) {
						rsGetAccountNumber.close();

						// BEGIN DELETE V 5.70b
						// rsGetAccountNumber.getStatement().close();
						// END DELETE V 5.70b
						rsGetAccountNumber = null;
					}

					// BEGIN ADD V 5.70b
					if (null != psSelect) {
						psSelect.close();
						psSelect = null;
					}

					// END ADD V 5.70b
				} catch (Exception e) {

					// consume it
					GLogger.logException(e);
				}

				// END ADD V5.10a
				closeAFEConnection(); // closing the connection
			}
		} // end of the if loop

		// Returning of the String
		return lNRCAccountID;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will is a Main Recursive Function for storing all the final Information
	 *                                  about the Products that have been taken by the user back to the session
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Long CustomerProductID, int iLevel, int iInstance, Long lProcessService, Long lProcessAccess
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */

	// Begin Delete V7.06h
	// Begin Delete V7.06f
	// protected void vdMainRFncOfNewOrOldSaveOfProductLine(BProductDetailProperty bProductDetailProperty, Long CustomerProductID, int iLevel, int iInstance, Long lProcessService, Long lProcessAccess, Long lOrderID, Long lNRCAccountID, Date dtActivationDate) throws Exception { //Starting Braces of the Function
	// End Delete V7.06f
	// Begin Add V7.06f
	protected void vdMainRFncOfNewOrOldSaveOfProductLine(
			BProductDetailProperty bProductDetailProperty,
			Long CustomerProductID, int iLevel, int iInstance,
			Long lProcessService, Long lProcessAccess, Long lOrderID,
			Long lNRCAccountID, Date dtActivationDate, Long lProcessExtBilling)
			throws Exception { // Starting Braces of the Function

		// End Add V7.06f
		// End Delete V7.06h
		// Begin Add V7.06h
		// protected void vdMainRFncOfNewOrOldSaveOfProductLine(BProductDetailProperty bProductDetailProperty, Long CustomerProductID, int iLevel, int iInstance, Long lProcessService, Long lProcessAccess, Long lOrderID, Long lNRCAccountID, Date dtActivationDate,long lParentProductID) throws Exception { //Starting Braces of the Function
		// End Add V7.06h

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iCounter = 0; // Local Varaible Declaration
		int iCtr = 0; // Local Varaible Declaration
		long lProcessIDDomain = 0; // Local Varaible Declaration
		long lProcessIDBillDomain = 0; // Local Varaible Declaration
		String strValues = ""; // Local Varaible Declaration
		Vector vctProductSelected = new Vector();

		// BEGIN ADD V7.05f
		HashMap hsmMailAliasInContactInfo = null;

		// END ADD V7.05f

		// BEGIN ADD V7.06f
		boolean bExtBillingFlag = true;

		// END ADD V7.06f

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		BProductDetail bProductDetail = null;
		BProductParameter bProductParameter = null;

		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */

			// BEGIN ADD V7.05f
			// get the hashmap which has the mailaliases used in contactinfo
			hsmMailAliasInContactInfo = (HashMap) teleSessionMgr
					.getValue(GAfeConstants.CONTACTINFOMAILALIAS);

			// END ADD V7.05f
			vctProductSelected = bProductDetailProperty.vctProductSelected;

			if (null != CustomerProductID) {
				GLogger.chkpt("Outside Loop CustomerProductID "
						+ CustomerProductID.longValue());
			}

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("No of product in CPs line (selected): " +vctProductSelected.size());
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			BInternet bInternet = new BInternet();

			if (null != teleSessionMgr.getValue(string_BInternet_aCProduct)) {
				bInternet = (BInternet) teleSessionMgr
						.getValue(string_BInternet_aCProduct);
			}

			for (iCounter = FINAL_ZERO; iCounter < vctProductSelected.size(); iCounter++) {
				bProductDetail = new BProductDetail();
				bProductDetail = ((BProductDetail) vctProductSelected
						.elementAt(iCounter));

				long lgCustomerParentId = 0;

				if (null != CustomerProductID) {
					GLogger.chkpt("Inside Loop CustomerProductID"
							+ CustomerProductID.longValue() + "Counter"
							+ iCounter);
				}

				// GLogger.chkpt("bala bProductDetail.iLevel=" + bProductDetail.iLevel);
				// GLogger.chkpt("bProductDetail.iParentInstance=" + bProductDetail.iParentInstance);

				/*
				 GLogger.chkpt("****************************************************************************************");
				 GLogger.chkpt("*************INSIDE METHOD vdMainRFncOfNewOrOldSaveOfProductLine*************");
				 GLogger.chkpt("*************STARTING OF THE PRINTING OF THE BPRODUCTDETAIL BO*************");
				 GLogger.chkpt("****************************************************************************************");

				 GLogger.chkpt("\tbProductDetail.lProductID                          : "     +bProductDetail.lProductID);
				 GLogger.chkpt("\tbProductDetail.lCustomerProductID          : "     +bProductDetail.lCustomerProductID);
				 GLogger.chkpt("\tbProductDetail.strDescription1             : "     +bProductDetail.strDescription1);
				 GLogger.chkpt("\tbProductDetail.lProductTypeID                      : "     +bProductDetail.lProductTypeID);
				 GLogger.chkpt("\tbProductDetail.lPrice                                      : "     +bProductDetail.lPrice);
				 GLogger.chkpt("\tbProductDetail.lPriceSettingID             : "     +bProductDetail.lPriceSettingID);
				 GLogger.chkpt("\tbProductDetail.strPeriodicity                      : "     +bProductDetail.strPeriodicity);
				 GLogger.chkpt("\tbProductDetail.lOptionGroupID                      : "     +bProductDetail.lOptionGroupID);
				 GLogger.chkpt("\tbProductDetail.lOptionProductID            : "     +bProductDetail.lOptionProductID);
				 GLogger.chkpt("\tbProductDetail.iBillable                           : "     +bProductDetail.iBillable);
				 GLogger.chkpt("\tbProductDetail.iProvisionable                      : "     +bProductDetail.iProvisionable);
				 GLogger.chkpt("\tbProductDetail.iHidden                             : "     +bProductDetail.iHidden);
				 GLogger.chkpt("\tbProductDetail.dtActivationDate            : "     +bProductDetail.dtActivationDate);
				 GLogger.chkpt("\tbProductDetail.dtDeactivationDate          : "     +bProductDetail.dtDeactivationDate);
				 GLogger.chkpt("\tbProductDetail.iVisibleOnSelection : "     +bProductDetail.iVisibleOnSelection);
				 GLogger.chkpt("\tbProductDetail.iLevel                                      : "     +bProductDetail.iLevel);
				 GLogger.chkpt("\tbProductDetail.iInstance                           : "     +bProductDetail.iInstance);
				 GLogger.chkpt("\tbProductDetail.iParentInstance             : "     +bProductDetail.iParentInstance);
				 GLogger.chkpt("\tbProductDetail.strProductStatus            : "     +bProductDetail.strProductStatus);
				 */
				GLogger.chkpt("\tiLevel : " + iLevel);
				GLogger.chkpt("\tiInstance : " + iInstance);

				// if ((bProductDetail.iLevel == (iLevel + FINAL_ONE)) && (bProductDetail.iParentInstance == iInstance)){
				if ((bProductDetail.iLevel == (iLevel + FINAL_ONE))
						&& (bProductDetail.iParentInstance == iInstance)
						&& (bVerifyParentProductID(vctProductSelected,
								(bProductDetail.lProductID).longValue(),
								CustomerProductID.longValue()))) { // && (lParentProductID == lGetParentProductID((bProductDetail.lProductID).longValue()))) {
					long lngCustomerProductID = 0;

					if (bProductDetail.lCustomerProductID.longValue() == FINAL_ZERO) {

						/**
						 * **************STARTING*****************TO PRINT QUERRY
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("inserting the customerproduct into new mode :" + bProductDetail.lProductID);
						 * }
						 * /****************STARTING*****************TO PRINT QUERRY*********************************************
						 */
						long lngCustomerPLIdentifierID = 0;

						if (bProductDetail.vctParameters != null) {
							GLogger.chkpt("bProductDetail.vctParameters="
									+ bProductDetail.vctParameters);
						}

						for (iCtr = FINAL_ZERO; iCtr < bProductDetail.vctParameters
								.size(); iCtr++) {
							bProductParameter = new BProductParameter();
							bProductParameter = (BProductParameter) bProductDetail.vctParameters
									.elementAt(iCtr);
							GLogger.chkpt("bProductParameter.iParameter="
									+ bProductParameter.iParameter);

							if (FINAL_ZERO == bProductParameter.iParameter) {
								if (bProductParameter.vctParameterValues != null) {
									GLogger
											.chkpt("bProductParameter.vctParameterValues="
													+ bProductParameter.vctParameterValues);
								}

								for (int iCntr = FINAL_ZERO; iCntr < bProductParameter.vctParameterValues
										.size(); iCntr++) {
									Vector vctBPPInternal = new Vector();

									vctBPPInternal = (Vector) bProductParameter.vctParameterValues
											.elementAt(iCntr);

									/**
									 * **************STARTING*****************TO PRINT QUERRY
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("vctBPPInternal : " + vctBPPInternal);
									 * }
									 * /****************ENDING*******************TO PRINT QUERRY*********************************************
									 */
									if ((string_ONE).equalsIgnoreCase(String
											.valueOf(vctBPPInternal
													.elementAt(FINAL_ONE)))) {
										strValues = (String) vctBPPInternal
												.elementAt(FINAL_ZERO);

										if ((FINAL_ZERO == strValues.length())
												|| (null == strValues)) {
											strValues = "";
										}

										/**
										 * **************STARTING*****************TO PRINT QUERRY
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("The strValues are : " + strValues);
										 * System.out.println("teleSessionMgr.getValue("BInternet_aCProduct") : " + teleSessionMgr.getValue("BInternet_aCProduct"));
										 * }
										 * /****************ENDING*******************TO PRINT QUERRY*********************************************
										 */

										// BEGIN DELETE V6.20c
										// if (null != teleSessionMgr.getValue("BInternet_aCProduct")) {
										// END DELETE V6.20c
										// BEGIN ADD V6.20c
										if ((null != teleSessionMgr
												.getValue(string_BInternet_aCProduct))
												|| (bProductDetailProperty.lProductID
														.longValue() == GAfeDescription.PRODUCT_DIGITALTV)) {
											GLogger
													.chkpt("vdMainRFncOfNewOrOldSaveOfProductLine():Entered for Login");

											// END ADD V6.20c
											bInternet = null;
											bInternet = new BInternet();
											bInternet = (BInternet) teleSessionMgr
													.getValue(string_BInternet_aCProduct);

											// BEGIN DELETE V6.20c

											/*
											 * if ((bProductDetailProperty.lProductID.longValue() == GAfeDescription.lGetTypeId("PRODUCT_INTERNET")) ||
											 *                                                           (bProductDetailProperty.lProductID.longValue() == GAfeDescription.lGetTypeId("PRODUCT_VON"))) {
											 *
											 *   if (null != bInternet) {
											 */

											// END DELETE V6.20c
											// BEGIN ADD V6.20c
											if ((bProductDetailProperty.lProductID
													.longValue() == GAfeDescription
													.lGetTypeId(string_PRODUCT_INTERNET))
													|| (bProductDetailProperty.lProductID
															.longValue() == GAfeDescription
															.lGetTypeId(string_PRODUCT_VON))
													|| (bProductDetailProperty.lProductID
															.longValue() == GAfeDescription.PRODUCT_DIGITALTV)) {
												if ((null != bInternet)
														|| (bProductDetailProperty.lProductID
																.longValue() == GAfeDescription.PRODUCT_DIGITALTV)) {
													GLogger
															.chkpt("vdMainRFncOfNewOrOldSaveOfProductLine():Entered for adding CPLIdentifier");

													// END ADD V6.20c

													/**
													 * **************STARTING*****************TO PRINT QUERRY
													 * if(GAfePropertyLoader.DEBUG)
													 * {
													 * System.out.println("bInternet.strNewMasterLogin : " + bInternet.strNewMasterLogin);
													 * }
													 * /****************ENDING*******************TO PRINT QUERRY*********************************************
													 */

													//                                                  if(!((strValues).equalsIgnoreCase(bInternet.strNewMasterLogin)))
													//                                                  {
													CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table
													ProductRow productRow = null; // Initializing the Object Class for the Vat table

													if (null == productTable) {
														productTable = (Product) teleSessionMgr
																.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
													}

													if ((bProductDetailProperty.lProductID
															.longValue() == GAfeDescription
															.lGetTypeId(string_PRODUCT_VON))) {

														// BEGIN DELETE V7.05e
														// productRow = (ProductRow) productTable.prSearchByProductIDandObsolete(GAfeDescription.lGetTypeId("PRODUCT_NETPHONE"), FINAL_ZERO);
														// END DELETE V7.05e
														// BEGIN ADD V7.05e
														long lPackageIdVON = lGetPackageProduct(bProductDetailProperty.lCustomerProductLineID
																.longValue());

														GLogger
																.chkpt("Von PackageId:"
																		+ lPackageIdVON);
														productRow = (ProductRow) productTable
																.prSearchByProductIDandObsolete(
																		lPackageIdVON,
																		FINAL_ZERO);

														// END ADD V7.05e
													} else {
														productRow = (ProductRow) productTable
																.prSearchByProductIDandObsolete(
																		bProductDetail.lProductID
																				.longValue(),
																		FINAL_ZERO);
													}

													/**
													 * **************STARTING*****************TO PRINT QUERRY
													 * if(GAfePropertyLoader.DEBUG)
													 * {
													 * System.out.println("Inserting into the cpli table PID: " +productRow.lProductLineIdentifierTypeID);
													 * }
													 * /****************ENDING*******************TO PRINT QUERRY*********************************************
													 */
													if ((null != productRow)
															&& (FINAL_ZERO != productRow.lProductLineIdentifierTypeID)) {
														customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
																.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session
														customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

														Vector vctCPLITable = new Vector(); // Creating Object

														vctCPLITable = customerProductLineIdentifierTable
																.vctSearchBystrCustomerPLIdentifierValueandlCustomerProductLineIDandObsolete(
																		bProductDetailProperty.lCustomerProductLineID
																				.longValue(),
																		strValues,
																		FINAL_ZERO); // Search By CustomerProductLineID

														if ((null != customerProductLineIdentifierTable)
																&& (null == vctCPLITable)) {
															customerProductLineIdentifierRow = new CustomerProductLineIdentifierRow();
															customerProductLineIdentifierRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert

															if (null != dtActivationDate) {
																customerProductLineIdentifierRow.dtActivationDate = dtActivationDate;
															}

															lngCustomerPLIdentifierID = customerProductLineIdentifierRow
																	.lNewNr(); // Auto Generation of the  Primary key

															/** **************STARTING*****************TO PRINT QUERRY******************************************** */
															if (GAfePropertyLoader.DEBUG) {
																GLogger.chkpt("Inside if statement");
																// System.out.println("Inserting into the cpli table CPLID: " + lngCustomerPLIdentifierID);
															}

															/** **************ENDING*******************TO PRINT QUERRY******************************************** */
															customerProductLineIdentifierRow.lCustomerPLIdentifierID = lngCustomerPLIdentifierID;
															customerProductLineIdentifierRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
																	.longValue();
															customerProductLineIdentifierRow.strCustomerPLIdentifierValue = strValues;

															// Done
															// Pending Get the master lProductLineIdentifierTypeID from ProductIdentifier table for bProductDetail.lProductId. You will get one row only.
															customerProductLineIdentifierRow.lProductLineIdentifierTypeID = productRow.lProductLineIdentifierTypeID;
															customerProductLineIdentifierRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
															customerProductLineIdentifierRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
															customerProductLineIdentifierTable
																	.addUniqueRecord(customerProductLineIdentifierRow); // Adding the Record in the CustomerPromotionTable

															// Put the container back into the session
															teleSessionMgr
																	.putTable(
																			string_CUSTOMERPRODUCTLINEIDENTIFIER,
																			customerProductLineIdentifierTable);
														} // end of the if loop
														else {
															if (null != vctCPLITable) {
																lngCustomerPLIdentifierID = ((CustomerProductLineIdentifierRow) vctCPLITable
																		.elementAt(FINAL_ZERO)).lCustomerPLIdentifierID;
															}
														}
													} // end of the if loop

													//                                                  }
												}
											}
										}
									}
								}
							} // end of the if
						} // end of the for loop

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// Entering to add customerproduct table
							// System.out.println(" Adding custoemrProdcut table with : " + bProductDetail.lProductID);
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

						customerProductTable = (CustomerProduct) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

						if (null != customerProductTable) {
							customerProductRow = new CustomerProductRow();
							customerProductRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
							lngCustomerProductID = customerProductRow.lNewNr(); // Auto Generation of the  Primary key
							customerProductRow.lCustomerProductID = lngCustomerProductID;

							if (null != dtActivationDate) {
								customerProductRow.dtActivationDate = dtActivationDate;
							}

							customerProductRow.lProductID = (bProductDetail.lProductID)
									.longValue(); // Adding the Product ID of each and every row
							GLogger.chkpt("Product id"
									+ (bProductDetail.lProductID).longValue());
							customerProductRow.lCustomerPLIdentifierID = lngCustomerPLIdentifierID;
							customerProductRow.lPriceSettingID = bProductDetail.lPriceSettingID
									.longValue();
							customerProductRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
									.longValue();

							if ((!((string_ZERO).equalsIgnoreCase(String
									.valueOf(lNRCAccountID))))
									&& (FINAL_ONE == bProductDetail.iBillable)) {
								customerProductRow.lOriginalNRCCustomerAccountID = lNRCAccountID
										.longValue();
							}

							customerProductRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
							customerProductRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
							customerProductRow.lParentID = CustomerProductID
									.longValue();

							// BEGIN ADD 5.96g Bill Frequency Changes
							// if (bProductDetail.iBillable == FINAL_ONE)
							// {
							customerProductRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;

							// }
							// END ADD V5.96g Bill Frequency Changes

							/** **************STARTING*****************TO PRINT QUERRY******************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("CustomerProductId : " + lngCustomerProductID);
							}

							/** **************ENDING*******************TO PRINT QUERRY******************************************** */
							customerProductTable
									.addUniqueRecord(customerProductRow); // Adding the Record in the CustomerPromotionTable
							bProductDetail.lCustomerProductID = Long.valueOf(
									lngCustomerProductID);

							// Put the container back into the session
							teleSessionMgr.putTable(string_CUSTOMERPRODUCT,
									customerProductTable);
						} // end of the if loop

						GLogger.logAlert("DerivedCustomerProductId"+bProductDetail.getDerivedCustomerProductId());
						if(bProductDetail.getDerivedCustomerProductId()>0){
							//Add the row in MemDB
							DerivedCustomerProductRelation dcprTable = null;
							DerivedCustomerProductRelationRow dcprRow = null;
							dcprTable = (DerivedCustomerProductRelation) teleSessionMgr.getTable(GAfeConstants.DERIVEDCUSTOMERPRODUCTRELATION);
							if(null != dcprTable){
								dcprRow = new DerivedCustomerProductRelationRow();
								dcprRow.iStatusInDB = Record.INSERT;
								dcprRow.lCustomerProductID = bProductDetail.getDerivedCustomerProductId();
								dcprRow.lDerivedCustomerProductId = lngCustomerProductID;
								dcprRow.iObsolete =FINAL_ZERO;
								dcprTable.addRecord(dcprRow);
								teleSessionMgr.putTable(GAfeConstants.DERIVEDCUSTOMERPRODUCTRELATION, dcprTable);
							}
						}
						
						if ((((GAfeDescription
								.strGetProperty(string_PRODUCT_TELEPHONE))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))))
								|| ((GAfeDescription
										.strGetProperty(string_PRODUCT_INTERNET))
										.equals(String
												.valueOf(bProductDetailProperty.lProductID)))
								|| (((GAfeDescription
										.strGetProperty(string_PRODUCT_VON))
										.equals(String
												.valueOf(bProductDetailProperty.lProductID))))
								|| (GAfeDescription.PRODUCT_DIGITALTV == bProductDetailProperty.lProductID
										.longValue())
								|| (GAfeDescription.PRODUCT_MOBILE == bProductDetailProperty.lProductID
										.longValue()) ||
								//Begin Add v9.02d
								(GAfeDescription.PRODUCT_FULLMOBILE == bProductDetailProperty.lProductID
										.longValue()))
						//End v9.02d
						{

							// END ADD V6.20a
							GLogger.chkpt("For IDTV CustProdStatusUpdation");

							if (((GAfeDescription
									.strGetProperty("PRODUCTTYPE_SERVICE"))
									.equals(String
											.valueOf(((BProductDetail) vctProductSelected
													.elementAt(iCounter)).lProductTypeID)))
									&& ((string_ONE)
											.equalsIgnoreCase(String
													.valueOf(bProductDetail.iProvisionable)))) {
								GLogger.chkpt("PRODUCTTYPE_SERVICE For IDTV");

								long lngCustomerProductStatusID = 0;
								CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

								customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

								if (null != customerProductStatusTable) {
									customerProductStatusRow = new CustomerProductStatusRow();
									customerProductStatusRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
									lngCustomerProductStatusID = customerProductStatusRow
											.lNewNr(); // Auto Generation of the  Primary key
									customerProductStatusRow.lCustomerProductStatusID = lngCustomerProductStatusID;

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("Component ActionId problem");
										// System.out.println("Product TypeId = " + ((BProductDetail) vctProductSelected.elementAt(iCounter)).lProductTypeID);
										// System.out.println("Product Descirption = " + ((BProductDetail) vctProductSelected.elementAt(iCounter)).strDescription1);
										// System.out.println("Product Parameter Value = " + strValues);
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									customerProductStatusRow.lProcessID = lProcessService
											.longValue(); // Adding the Product ID of each and every row

									// customerProductStatusRow.lExtProcessID                          =       0;
									customerProductStatusRow.lComponentStatusID = GAfeDescription
											.lGetTypeId("COMPONENTSTATUS_NEW");

									if (((GAfeDescription
											.strGetProperty(string_PRODUCT_INTERNET))
											.equals(String
													.valueOf(bProductDetailProperty.lProductID)))) {
										if (blnGetForProperty("PRODUCT_DOMAIN",
												bProductDetail.lProductID)) {
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for Domain: Status : " + bProductDetail.strProductStatus);
											}

											if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											} else {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_POSTINSTALLPROVISIONING");
											}

											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for Domain:" + customerProductStatusRow.lComponentActionID);
											}
										} else if (blnGetForProperty(
												"PRODUCT_SUBDOMAIN",
												bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_EXTERNDOMAIN",
														bProductDetail.lProductID)) {
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for SubDomain/Extern Domain:Status:" + bProductDetail.strProductStatus);
											}

											if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											} else {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											}

											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for Subdomain/Exteren:" + customerProductStatusRow.lComponentActionID);
											}
										} else if (blnGetForProperty(
												"PRODUCT_URL",
												bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_MAILADDRESS",
														bProductDetail.lProductID)

												// BEGIN DELETE 5.54a

												/* || blnGetForProperty("PRODUCT_DOMAINMAILSERVER", bProductDetail.lProductID) */

												// END DELETE V5.54a
												|| blnGetForProperty(
														"PRODUCT_FROMMAILADDRESS",
														bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_TOMAILADDRESS",
														bProductDetail.lProductID)) {
											GLogger
													.chkpt("bProductDetail.ProductId is "
															+ bProductDetail.lProductID);
											GLogger
													.chkpt("bProductDetail.iDisabled is "
															+ bProductDetail.iDisabled);
											GLogger
													.chkpt("bProductDetail.strProductStatus is "
															+ bProductDetail.strProductStatus);

											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for URL/Mail:  Status : " + bProductDetail.strProductStatus);
											}

											if (("ADD")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											} else if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											}

											// BEGIN ADD V7.20a
											else if (("M")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_MODIFY");
											}

											// END ADD V7.20a
											else {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_POSTINSTALLPROVISIONING");
											}

											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for URL/Mail:" + customerProductStatusRow.lComponentActionID);
											}
										}

										// Begin Modify v7.20b
										// BEGIN ADD V7.20a
										else if (blnGetForProperty(
												"PRODUCT_MAILBOX",
												bProductDetail.lProductID)
												&& (("M")
														.equalsIgnoreCase(bProductDetail.strProductStatus) || ("MOD")
														.equalsIgnoreCase(bProductDetail.strProductStatus))) {
											customerProductStatusRow.lComponentActionID = GAfeDescription
													.lGetTypeId("COMPONENTACTION_MODIFY");
										}

										// END ADD V7.20a
										// End Modify v7.20b
										// BEGIN MODIFY V5.54a
										else if (blnGetForProperty(
												"PRODUCT_MAILBOX_ALL",
												bProductDetail.lProductID))

										// END MODIFY V5.54a
										{
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for MailBox: Status : " + bProductDetail.strProductStatus);
											}

											for (int iCtrILMM = FINAL_ZERO; iCtrILMM < bProductDetailProperty.vctGetLoginfromILMMAIL
													.size(); iCtrILMM++) {
												BChangeILogin bChangeILogin = new BChangeILogin();

												bChangeILogin = (BChangeILogin) bProductDetailProperty.vctGetLoginfromILMMAIL
														.elementAt(iCtrILMM);

												if ((strValues)
														.equalsIgnoreCase(String
																.valueOf(bChangeILogin.strLogin))) {
													if (GAfePropertyLoader.DEBUG) {

														GLogger.chkpt("Inside if statement ");	// System.out.println("Got the matching value form the login vecotr");
													}

													customerProductStatusRow.lComponentActionID = GAfeDescription
															.lGetTypeId("COMPONENTACTION_REVERT");

													break;
												} else {
													customerProductStatusRow.lComponentActionID = GAfeDescription
															.lGetTypeId("COMPONENTACTION_ADD");
												}
											}

											if (bProductDetailProperty.vctGetLoginfromILMMAIL
													.size() == FINAL_ZERO) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											}

											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for MailBox:" + customerProductStatusRow.lComponentActionID);
											}
										} else {
											customerProductStatusRow.lComponentActionID = GAfeDescription
													.lGetTypeId("COMPONENTACTION_ADD");

											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for Other product: " + bProductDetail.strProductStatus);
												// System.out.println("Component ActionId for Other product: " + customerProductStatusRow.lComponentActionID);
											}
										}
									} else {
										customerProductStatusRow.lComponentActionID = GAfeDescription
												.lGetTypeId("COMPONENTACTION_ADD");
									}

									customerProductStatusRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
									customerProductStatusRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
									customerProductStatusRow.lCustomerProductID = lngCustomerProductID;
									customerProductStatusTable
											.addUniqueRecord(customerProductStatusRow); // Adding the Record in the CustomerPromotionTable

									// Put the container back into the session
									teleSessionMgr.putTable(
											string_CUSTOMERPRODUCTSTATUS,
											customerProductStatusTable);
								} // end of the if loop
							} // end of the if loop

							if (((GAfeDescription
									.strGetProperty("PRODUCTTYPE_ACCESS"))
									.equals(String
											.valueOf(((BProductDetail) vctProductSelected
													.elementAt(iCounter)).lProductTypeID)))
									&& ((string_ONE)
											.equalsIgnoreCase(String
													.valueOf(bProductDetail.iProvisionable)))) {
								GLogger.chkpt("PRODUCTTYPE_ACCESS For IDTV");

								long lngCustomerProductStatusID = 0;
								CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

								customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

								if (null != customerProductStatusTable) {
									customerProductStatusRow = new CustomerProductStatusRow();
									customerProductStatusRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
									lngCustomerProductStatusID = customerProductStatusRow
											.lNewNr(); // Auto Generation of the  Primary key
									customerProductStatusRow.lCustomerProductStatusID = lngCustomerProductStatusID;

									/** **************STARTING*****************TO PRINT QUERRY******************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("Product TypeId = " + ((BProductDetail) vctProductSelected.elementAt(iCounter)).lProductTypeID);
									}

									/** **************ENDING*******************TO PRINT QUERRY******************************************** */
									customerProductStatusRow.lProcessID = lProcessAccess
											.longValue(); // Adding the Product ID of each and every row

									// customerProductStatusRow.lExtProcessID                          =       0;
									customerProductStatusRow.lComponentStatusID = GAfeDescription
											.lGetTypeId("COMPONENTSTATUS_NEW");

									if (((GAfeDescription
											.strGetProperty(string_PRODUCT_INTERNET))
											.equals(String
													.valueOf(bProductDetailProperty.lProductID)))) {
										if (blnGetForProperty("PRODUCT_DOMAIN",
												bProductDetail.lProductID)) {
											if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											} else {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_POSTINSTALLPROVISIONING");
											}
										} else if (blnGetForProperty(
												"PRODUCT_SUBDOMAIN",
												bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_EXTERNDOMAIN",
														bProductDetail.lProductID)) {
											if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											} else {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											}
										} else if (blnGetForProperty(
												"PRODUCT_URL",
												bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_MAILADDRESS",
														bProductDetail.lProductID)

												// BEGIN DELETE V5.54a

												/* || blnGetForProperty("PRODUCT_DOMAINMAILSERVER", bProductDetail.lProductID) */

												// END DELETE V5.54a
												|| blnGetForProperty(
														"PRODUCT_TOMAILADDRESS",
														bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_FROMMAILADDRESS",
														bProductDetail.lProductID)) {
											if (("ADD")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											} else if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											} else {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_POSTINSTALLPROVISIONING");
											}
										}

										// BEGIN MODIFY V5.54a
										else if (blnGetForProperty(
												"PRODUCT_MAILBOX_ALL",
												bProductDetail.lProductID))

										// END MODIFY V5.54a
										{
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("For access for mailbox component actionid ");
											}

											for (int iCtrILMM = FINAL_ZERO; iCtrILMM < bProductDetailProperty.vctGetLoginfromILMMAIL
													.size(); iCtrILMM++) {
												BChangeILogin bChangeILogin = new BChangeILogin();

												bChangeILogin = (BChangeILogin) bProductDetailProperty.vctGetLoginfromILMMAIL
														.elementAt(iCtrILMM);

												if ((strValues)
														.equalsIgnoreCase(String
																.valueOf(bChangeILogin.strLogin))) {
													customerProductStatusRow.lComponentActionID = GAfeDescription
															.lGetTypeId("COMPONENTACTION_REVERT");

													break;
												} else {
													customerProductStatusRow.lComponentActionID = GAfeDescription
															.lGetTypeId("COMPONENTACTION_ADD");
												}
											}

											if (bProductDetailProperty.vctGetLoginfromILMMAIL
													.size() == FINAL_ZERO) {
												customerProductStatusRow.lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											}

											if (GAfePropertyLoader.DEBUG) {

												GLogger.chkpt("Inside if statement ");	// System.out.println("Component ActionId for MailBox:" + customerProductStatusRow.lComponentActionID);
											}
										} else {
											customerProductStatusRow.lComponentActionID = GAfeDescription
													.lGetTypeId("COMPONENTACTION_ADD");
										}
									}

									// BEGIN ADD V. 6.07h
									else if (((GAfeDescription
											.strGetProperty(string_PRODUCT_VON))
											.equals(String
													.valueOf(bProductDetailProperty.lProductID)))
											&& (("AGE")
													.equalsIgnoreCase(bInternet.strLoginStatusForVON))) {
										customerProductStatusRow.lComponentActionID = GAfeDescription
												.lGetTypeId("COMPONENTACTION_REVERT");
									}

									// END ADD V. 6.07h
									else {
										customerProductStatusRow.lComponentActionID = GAfeDescription
												.lGetTypeId("COMPONENTACTION_ADD");
									}

									customerProductStatusRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
									customerProductStatusRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
									customerProductStatusRow.lCustomerProductID = lngCustomerProductID;
									customerProductStatusTable
											.addUniqueRecord(customerProductStatusRow); // Adding the Record in the CustomerPromotionTable

									// Put the container back into the session
									teleSessionMgr.putTable(
											string_CUSTOMERPRODUCTSTATUS,
											customerProductStatusTable);
								} // end of the if loop

								/*
								 *       if(((GAfeDescription.strGetProperty("PRODUCT_TELEPHONE")).equals(String.valueOf(bProductDetailProperty.lProductID))))
								 *   {
								 *
								 *       lngCustomerProductStatusID      =       0;
								 *       customerProductStatusRow                = null;                                                                         // Initializing the Object Class for the CustomerProduct table
								 *       customerProductStatusTable      =       (CustomerProductStatus)teleSessionMgr.getTable("CUSTOMERPRODUCTSTATUS");        // Getting the CustomerProduct table from the session
								 *
								 *       if( null != customerProductStatusTable)
								 *       {
								 *           customerProductStatusRow    =       new CustomerProductStatusRow();
								 *
								 *           customerProductStatusRow.iStatusInDB        =       Record.INSERT;                                                          // Marking the Flag for insert
								 *
								 *           lngCustomerProductStatusID                                                  =       customerProductStatusRow.lNewNr();                                                      // Auto Generation of the  Primary key
								 *           customerProductStatusRow.lCustomerProductStatusID   =       lngCustomerProductStatusID;
								 *
								 *           /****************STARTING*****************TO PRINT QUERRY*********************************************
								 */

								/*
								 *                       if(GAfePropertyLoader.DEBUG)
								 *           {
								 *               System.out.println("Product TypeId = " + ((BProductDetail)vctProductSelected.elementAt(iCounter)).lProductTypeID);
								 *           }
								 *           /****************ENDING*******************TO PRINT QUERRY*********************************************
								 */

								/*
								 *                       customerProductStatusRow.lProcessID                                     =       lProcessService.longValue();            //Adding the Product ID of each and every row
								 *
								 * //                                                      customerProductStatusRow.lExtProcessID                          =       0;
								 *           customerProductStatusRow.lComponentStatusID                 =       GAfeDescription.lGetTypeId("COMPONENTSTATUS_NEW");
								 *
								 *           customerProductStatusRow.lComponentActionID                 =       GAfeDescription.lGetTypeId("COMPONENTACTION_ADD");
								 *
								 *           customerProductStatusRow.strModificationUser                =       bSession.strUserName;                                           // Retrieving the Modification from the BSession
								 *           customerProductStatusRow.strCreationUser                    =       bSession.strUserName;                                           // Retrieving the CreationUser from the BSession
								 *           customerProductStatusRow.lCustomerProductID                 =       lngCustomerProductID;
								 *
								 *           customerProductStatusTable.addUniqueRecord(customerProductStatusRow);                                                               // Adding the Record in the CustomerPromotionTable
								 *
								 *           // Put the container back into the session
								 *           teleSessionMgr.putTable("CUSTOMERPRODUCTSTATUS",customerProductStatusTable);
								 *
								 *       }//end of the if loop
								 *
								 *   }//end of the if loop
								 */
							} // end of the if loop

							// Begin Add v7.06f
							if ((0 != lProcessExtBilling.longValue())
									&& bExtBillingFlag) {
								bExtBillingFlag = false;
								GLogger.chkpt("ExternalBilling process");

								long lngCustomerProductStatusID = 0;
								CustomerProductStatusRow customerProductStatusRow = null;

								// Initializing the Object Class for the CustomerProduct table
								customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCTSTATUS);

								// Getting the CustomerProduct table from the sessionteleSessionMgr
								GLogger
										.chkpt("customerProductStatusTable is retrieved");

								if (null != customerProductStatusTable) {
									GLogger
											.chkpt("customerProductStatusTable is not null");
									customerProductStatusRow = new CustomerProductStatusRow();
									customerProductStatusRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
									lngCustomerProductStatusID = customerProductStatusRow
											.lNewNr();

									// Auto Generation of the  Primary key
									customerProductStatusRow.lCustomerProductStatusID = lngCustomerProductStatusID;
									customerProductStatusRow.lProcessID = lProcessExtBilling
											.longValue();
									customerProductStatusRow.lComponentStatusID = GAfeDescription
											.lGetTypeId("COMPONENTSTATUS_NEW");
									customerProductStatusRow.lComponentActionID = GAfeDescription
											.lGetTypeId("COMPONENTACTION_MODIFY");

									// Retrieving the Modification from the BSession
									customerProductStatusRow.strModificationUser = bSession.strUserName;

									// Retrieving the CreationUser from the BSession
									customerProductStatusRow.strCreationUser = bSession.strUserName;
									customerProductStatusRow.lCustomerProductID = lngCustomerProductID;
									customerProductStatusRow.iObsolete = FINAL_ZERO;
									GLogger
											.chkpt("Before Adding the Record in the CustomerPromotionTable");

									// Adding the Record in the CustomerPromotionTable
									customerProductStatusTable
											.addUniqueRecord(customerProductStatusRow);
									GLogger
											.chkpt("After Adding the Record in the CustomerPromotionTable");

									// Put the container back into the session
									teleSessionMgr.putTable(
											string_CUSTOMERPRODUCTSTATUS,
											customerProductStatusTable);
									GLogger
											.chkpt("After Putting the container back into the session");
								} // end of the if loop
							}

							// End Add v7.06f
						} // end of the if loop

						for (iCtr = FINAL_ZERO; iCtr < bProductDetail.vctParameters
								.size(); iCtr++) {
							bProductParameter = new BProductParameter();
							bProductParameter = (BProductParameter) bProductDetail.vctParameters
									.elementAt(iCtr);

							for (int iCntr = FINAL_ZERO; iCntr < bProductParameter.vctParameterValues
									.size(); iCntr++) {
								Vector vctBPPInternal = new Vector();

								vctBPPInternal = (Vector) bProductParameter.vctParameterValues
										.elementAt(iCntr);

								if ((string_ONE).equals(String.valueOf(vctBPPInternal
										.elementAt(FINAL_ONE)))) {
									strValues = String.valueOf(vctBPPInternal
											.elementAt(FINAL_ZERO));

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("ProductParamtereID : = " + bProductParameter.lParameterID);
										// System.out.println("ProductParamtereName : = " + bProductParameter.strParameterName);
										// System.out.println("CustomerProductParamterevalue : = " + strValues);
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									if (FINAL_ONE == bProductParameter.iParameter) {

										// For all the Product Parameters Code Saving it to the CustomerProductParameter Table
										long lngCustomerProductParameterID = 0;
										CustomerProductParameterRow customerProductParameterRow = null; // Initializing the Object Class for the Currency table

										customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
												.getTable(string_CUSTOMERPRODUCTPARAMETER); // Getting the Customer table from the session

										if (null != customerProductParameterTable) {
											customerProductParameterRow = new CustomerProductParameterRow();
											customerProductParameterRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
											lngCustomerProductParameterID = customerProductParameterRow
													.lNewNr(); // Auto Generation of the  Primary key
											customerProductParameterRow.lCustomerProductParameterID = lngCustomerProductParameterID;
											customerProductParameterRow.lCustomerProductID = lngCustomerProductID; // Adding the Product ID of each and every row

											if (null != dtActivationDate) {
												customerProductParameterRow.dtActivationDate = dtActivationDate;
											}

											/** **************STARTING*****************TO PRINT QUERRY******************************************** */
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("CustomerProductParameter table CustomerProductId :" + lngCustomerProductID);
											}

											/** **************ENDING*******************TO PRINT QUERRY******************************************** */
											if ((GAfeDescription
													.lGetTypeId("PRODUCT_MAILFORWARD") == bProductDetail.lProductID
													.longValue())
													&& (blnGetForProperty(
															"PRODUCTPARAMETER_MAILFORWARDID",
															bProductParameter.lParameterID))) {
												customerProductParameterRow.strCustomerProductParameterValue = String
														.valueOf(bProductDetail.lCustomerProductID);
											} else {
												customerProductParameterRow.strCustomerProductParameterValue = strValues;
											}

											customerProductParameterRow.lProductParameterID = bProductParameter.lParameterID
													.longValue();
											customerProductParameterRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
											customerProductParameterRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
											customerProductParameterTable
													.addUniqueRecord(customerProductParameterRow); // Adding the Record in the CustomerPromotionTable

											// Put the container back into the session
											teleSessionMgr
													.putTable(
															string_CUSTOMERPRODUCTPARAMETER,
															customerProductParameterTable);
										} // end of the if loop
									}
								}
							}
						} // end of for loop

						if (blnGetForProperty("PRODUCT_DOMAIN",
								bProductDetail.lProductID)) {
							lProcessIDDomain = FINAL_ZERO;
							lProcessIDDomain = lngInsertInProcessTables(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(),
									GAfeDescription
											.lGetTypeId("PROCESSTYPE_DOMAINPROVISIONING"),
									GAfeDescription
											.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
									lOrderID.longValue());

							ObjectTypeRow objectTypeRow = null; // Initializing the Object Class for the Vat table

							if (null == objectTypeTable) {
								objectTypeTable = (ObjectType) teleSessionMgr
										.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
							}

							objectTypeRow = objectTypeTable
									.otrSearchBystrObjectNameandObsolete(
											string_CUSTOMERPRODUCTLINE, FINAL_ZERO);

							long lngProcessLinkID = 0;
							ProcessLinkRow processLinkRow = null; // Initializing the Object Class for the Vat table

							processLinkTable = (ProcessLink) teleSessionMgr
									.getTable(string_PROCESSLINK); // Getting the Vat table from the session

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("Inserting for lngProcessLinkID - " + lngProcessLinkID);
								// System.out.println("Inserting for lProcessIDDomain - " + lProcessIDDomain);
								// System.out.println("Inserting for lCustomerProductLineID - " + bProductDetailProperty.lCustomerProductLineID);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							if (null != processLinkTable) {

								/*                                                      processLinkRow  =       new ProcessLinkRow();

								 processLinkRow.iStatusInDB                              =       Record.INSERT;                                                          // Marking the Flag for insert

								 lngProcessLinkID                                                =       processLinkRow.lNewNr();                                                        // Auto Generation of the  Primary key

								 processLinkRow.lProcessLinkID                   =       lngProcessLinkID;
								 processLinkRow.lProcessID                               =       lProcessIDDomain;
								 processLinkRow.lObjectTypeID                    =       objectTypeRow.lObjectTypeID;                            //Adding the Product ID of each and every row
								 processLinkRow.lObjectID                                =       bProductDetailProperty.lCustomerProductLineID.longValue();
								 processLinkRow.strModificationUser              =       bSession.strUserName;                                           // Retrieving the Modification from the BSession
								 processLinkRow.strCreationUser                  =       bSession.strUserName;                                           // Retrieving the CreationUser from the BSession

								 processLinkTable.addUniqueRecord(processLinkRow);                                                                                               // Adding the Record in the CustomerPromotionTable
								 */
								objectTypeRow = null; // Initializing the Object Class for the Vat table

								if (null == objectTypeTable) {
									objectTypeTable = (ObjectType) teleSessionMgr
											.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
								}

								objectTypeRow = objectTypeTable
										.otrSearchBystrObjectNameandObsolete(
												string_CUSTOMERPRODUCT, FINAL_ZERO);
								processLinkRow = new ProcessLinkRow();

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("Inserting for lProcessIDDomain - " + lProcessIDDomain);
									// System.out.println("Inserting for lngCustomerProductID - " + lngCustomerProductID);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								processLinkRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
								lngProcessLinkID = processLinkRow.lNewNr(); // Auto Generation of the  Primary key
								processLinkRow.lProcessLinkID = lngProcessLinkID;
								processLinkRow.lProcessID = lProcessIDDomain;
								processLinkRow.lObjectTypeID = objectTypeRow.lObjectTypeID; // Adding the Product ID of each and every row
								processLinkRow.lObjectID = lngCustomerProductID;
								processLinkRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
								processLinkRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
								processLinkTable
										.addUniqueRecord(processLinkRow); // Adding the Record in the CustomerPromotionTable

								// Put the container back into the session
								teleSessionMgr.putTable(string_PROCESSLINK,
										processLinkTable);
							} // end of the if loop

							// Now we need to special process for inserting the Billingdomain kind of process for this domain
							lProcessIDBillDomain = FINAL_ZERO;
							lProcessIDBillDomain = lngInsertInProcessTables(
									bProductDetailProperty.lCustomerProductLineID
											.longValue(),
									GAfeDescription
											.lGetTypeId("PROCESSTYPE_BILLINGDOMAIN"),
									GAfeDescription
											.lGetTypeId(string_PROCESSSTATUSTYPE_NEW),
									lOrderID.longValue());
							objectTypeRow = null; // Initializing the Object Class for the Vat table

							if (null == objectTypeTable) {
								objectTypeTable = (ObjectType) teleSessionMgr
										.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
							}

							objectTypeRow = objectTypeTable
									.otrSearchBystrObjectNameandObsolete(
											string_CUSTOMERPRODUCTLINE, FINAL_ZERO);
							lngProcessLinkID = 0;

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("Inserting for lngProcessLinkID - " + lngProcessLinkID);
								// System.out.println("Inserting for lProcessIDBillDomain - " + lProcessIDBillDomain);
								// System.out.println("Inserting for lCustomerProductLineID - " + bProductDetailProperty.lCustomerProductLineID);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							processLinkRow = null; // Initializing the Object Class for the Vat table
							processLinkTable = (ProcessLink) teleSessionMgr
									.getTable(string_PROCESSLINK); // Getting the Vat table from the session

							if (null != processLinkTable) {

								/*                                                      processLinkRow  =       new ProcessLinkRow();

								 processLinkRow.iStatusInDB                              =       Record.INSERT;                                                          // Marking the Flag for insert

								 lngProcessLinkID                                                =       processLinkRow.lNewNr();                                                        // Auto Generation of the  Primary key

								 processLinkRow.lProcessLinkID                   =       lngProcessLinkID;
								 processLinkRow.lProcessID                               =       lProcessIDBillDomain;
								 processLinkRow.lObjectTypeID                    =       objectTypeRow.lObjectTypeID;                            //Adding the Product ID of each and every row
								 processLinkRow.lObjectID                                =       bProductDetailProperty.lCustomerProductLineID.longValue();
								 processLinkRow.strModificationUser              =       bSession.strUserName;                                           // Retrieving the Modification from the BSession
								 processLinkRow.strCreationUser                  =       bSession.strUserName;                                           // Retrieving the CreationUser from the BSession

								 processLinkTable.addUniqueRecord(processLinkRow);                                                                                               // Adding the Record in the CustomerPromotionTable
								 */
								objectTypeRow = null; // Initializing the Object Class for the Vat table

								if (null == objectTypeTable) {
									objectTypeTable = (ObjectType) teleSessionMgr
											.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
								}

								objectTypeRow = objectTypeTable
										.otrSearchBystrObjectNameandObsolete(
												string_CUSTOMERPRODUCT, FINAL_ZERO);
								processLinkRow = new ProcessLinkRow();
								processLinkRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("Inserting for lProcessIDBillDomain - " + lProcessIDBillDomain);
									// System.out.println("Inserting for lngCustomerProductID - " + lngCustomerProductID);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								lngProcessLinkID = processLinkRow.lNewNr(); // Auto Generation of the  Primary key
								processLinkRow.lProcessLinkID = lngProcessLinkID;
								processLinkRow.lProcessID = lProcessIDBillDomain;
								processLinkRow.lObjectTypeID = objectTypeRow.lObjectTypeID; // Adding the Product ID of each and every row
								processLinkRow.lObjectID = lngCustomerProductID;
								processLinkRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
								processLinkRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
								processLinkTable
										.addUniqueRecord(processLinkRow); // Adding the Record in the CustomerPromotionTable

								// Put the container back into the session
								teleSessionMgr.putTable(string_PROCESSLINK,
										processLinkTable);
							} // end of the if loop

							// To update the processid for the domain kind of product.
							customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
									.getTable(string_CUSTOMERPRODUCTSTATUS);

							CustomerProductStatusRow customerProductStatusRow = null;
							Vector vctTempCustomerProductStatusRow = null;

							vctTempCustomerProductStatusRow = (Vector) customerProductStatusTable
									.vctSearchByCustomerProductIDandObslete(
											lngCustomerProductID, FINAL_ZERO);

							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println(" Vector of CustomerProductStatus for the Customer ID =" + lngCustomerProductID + " is  " + vctTempCustomerProductStatusRow);
							}

							if ((null != vctTempCustomerProductStatusRow)
									&& (vctTempCustomerProductStatusRow.size() != 0)) {
								customerProductStatusRow = (CustomerProductStatusRow) vctTempCustomerProductStatusRow
										.elementAt(FINAL_ZERO);
							}

							if (null != customerProductStatusRow) {
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println(" INSIDE THE IF BLOCK FOR THE CUSTOMERPRODUCTSTATUS ROW");
								}

								customerProductStatusRow.lProcessID = lProcessIDDomain;

								if ((customerProductStatusRow.iStatusInDB == Record.VIEW)
										|| (customerProductStatusRow.iStatusInDB == Record.UPDATE)) {
									customerProductStatusRow.iStatusInDB = Record.UPDATE;
								} else if (customerProductStatusRow.iStatusInDB == Record.INSERT) {
									customerProductStatusRow.iStatusInDB = Record.INSERT;
								}

								customerProductStatusTable
										.updateRecord(customerProductStatusRow);

								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println(" IN THE END OF THE IF BLOCK ");
								}
							}

							teleSessionMgr.putTable(string_CUSTOMERPRODUCTSTATUS,
									customerProductStatusTable);
						} // end of the if loop

						lgCustomerParentId = lngCustomerProductID;
						GLogger
								.chkpt("lgCustomerParentId"
										+ lgCustomerParentId);
					} // end of the if loop
					else if (!(bProductDetail.lCustomerProductID.longValue() == FINAL_ZERO)) {

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("Updating the customerproduct parameter CPID:" + bProductDetail.lCustomerProductID);
							// System.out.println("Updating the customerproduct parameter PID:" + bProductDetail.lProductID);
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						if ((!((string_ZERO).equalsIgnoreCase(String
								.valueOf(lNRCAccountID))))
								&& (FINAL_ONE == bProductDetail.iBillable)) {
							CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

							customerProductTable = (CustomerProduct) teleSessionMgr
									.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

							Vector vctcustomerProductRow = new Vector();

							vctcustomerProductRow = customerProductTable
									.vctSearchByCustomerProductIDandObsolete(
											bProductDetail.lCustomerProductID
													.longValue(), FINAL_ZERO);
							customerProductRow = (CustomerProductRow) vctcustomerProductRow
									.elementAt(FINAL_ZERO);

							if (null != customerProductRow) {
								if (!(customerProductRow.lOriginalNRCCustomerAccountID == lNRCAccountID
										.longValue())) {
									if (null != customerProductTable) {

										// Updating All the Values Over here
										customerProductRow.lOriginalNRCCustomerAccountID = lNRCAccountID
												.longValue();

										if ((customerProductRow.iStatusInDB == Record.VIEW)
												|| (customerProductRow.iStatusInDB == Record.UPDATE)) {
											customerProductRow.iStatusInDB = Record.UPDATE;
											customerProductTable
													.updateRecord(customerProductRow);
										}

										// when iStatusInDB is equal to Record.INSERT
										else {
											customerProductTable
													.updateRecord(customerProductRow);
										} // end of the if else if loop
									} // end of the if loop
								} // end of the if loop

								// Put the container back into the session
								teleSessionMgr.putTable(string_CUSTOMERPRODUCT,
										customerProductTable);
							} // end of the if loop
						} // end of the if loop

						//                      BEGIN ADD: V 3.10
						//                      Added function for fixing DEFECT id 70, Obsolete Masters
						//                      Update pricesettingid also if it is changed

						/** **************STARTING*****************TO PRINT QUERRY******************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("Updating the customerproduct parameter CPID:" + bProductDetail.lCustomerProductID);
							// System.out.println("Updating the customerproduct parameter PID:" + bProductDetail.lProductID);
							// System.out.println("bProductDetail.iBillable before Updation:" + bProductDetail.iBillable);
						}

						/** **************ENDING*******************TO PRINT QUERRY******************************************** */
						if (FINAL_ONE == bProductDetail.iBillable) {
							CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

							customerProductTable = (CustomerProduct) teleSessionMgr
									.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

							Vector vctcustomerProductRow = new Vector();

							vctcustomerProductRow = customerProductTable
									.vctSearchByCustomerProductIDandObsolete(
											bProductDetail.lCustomerProductID
													.longValue(), FINAL_ZERO);
							customerProductRow = (CustomerProductRow) vctcustomerProductRow
									.elementAt(FINAL_ZERO);

							if (null != customerProductRow) {

								// System.out.println("customerProductRow.lPriceSettingID : " + customerProductRow.lPriceSettingID);
								if (!(customerProductRow.lPriceSettingID == bProductDetail.lPriceSettingID
										.longValue())) {
									if (null != customerProductTable) {

										// Updating All the Values Over here
										customerProductRow.lPriceSettingID = bProductDetail.lPriceSettingID
												.longValue();

										// System.out.println("customerProductRow.lPriceSettingID after Update : " + customerProductRow.lPriceSettingID);
										// BEGIN ADD V5.96g Bill Frequency Changes
										customerProductRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;

										// END ADD V5.96g Bill Frequency Changes
										if ((customerProductRow.iStatusInDB == Record.VIEW)
												|| (customerProductRow.iStatusInDB == Record.UPDATE)) {
											customerProductRow.iStatusInDB = Record.UPDATE;
											customerProductTable
													.updateRecord(customerProductRow);
										}

										// when iStatusInDB is equal to Record.INSERT
										else {
											customerProductTable
													.updateRecord(customerProductRow);
										} // end of the if else if loop
									} // end of the if loop
								} // end of the if loop

								// Put the container back into the session
								teleSessionMgr.putTable(string_CUSTOMERPRODUCT,
										customerProductTable);
							} // end of the if loop
						} // end of the if loop

						//                      END ADD: V 3.10
						//                      Added function for fixing DEFECT id 70, Obsolete Masters
						//                      Update pricesettingid also if it is changed
						// This Product is Updated.
						for (iCtr = FINAL_ZERO; iCtr < bProductDetail.vctParameters
								.size(); iCtr++) {
							bProductParameter = new BProductParameter();
							bProductParameter = (BProductParameter) bProductDetail.vctParameters
									.elementAt(iCtr);

							if (FINAL_ONE == bProductParameter.iParameter) {
								for (int iCntr = FINAL_ZERO; iCntr < bProductParameter.vctParameterValues
										.size(); iCntr++) {
									Vector vctBPPInternal = new Vector();

									vctBPPInternal = (Vector) bProductParameter.vctParameterValues
											.elementAt(iCntr);

									if ((string_ONE).equals(String
											.valueOf(vctBPPInternal
													.elementAt(FINAL_ONE)))) {
										if (!((String.valueOf(vctBPPInternal
												.elementAt(FINAL_ZERO)))
												.equalsIgnoreCase(bProductParameter.strParamOldValue))) {

											// For all the Product Parameters Code Saving it to the CustomerProductParameter Table
											// Begin Add v7.05f
											// mailalias modify scenario is handled here
											if ((null != hsmMailAliasInContactInfo)
													&& (0 != hsmMailAliasInContactInfo
															.size())) {

												// check if ProductParameter is mailalias
												if (bProductParameter.lParameterID
														.intValue() == GAfeDescription.PRODUCTPARAMETER_EMAILADDRESS) {

													// get the value & lookup hashmap (with bProductParameter.strParamOldValue)
													if (hsmMailAliasInContactInfo
															.containsValue(bProductParameter.strParamOldValue)) {
														GLogger
																.chkpt("Mail Alias modified is:-"
																		+ bProductParameter.strParamOldValue);

														// update Hashmap with modified value
														hsmMailAliasInContactInfo
																.put(
																		bProductParameter.strParamOldValue,
																		(String
																				.valueOf(vctBPPInternal
																						.elementAt(FINAL_ZERO))));
													}
												}
											}

											// End Add v7.05f
											// Begin DEL v9.01d
											// long lngCustomerProductParameterID = 0;
											// End DEL v9.01d
											CustomerProductParameterRow customerProductParameterRow = null; // Initializing the Object Class for the Currency table

											customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
													.getTable(string_CUSTOMERPRODUCTPARAMETER); // Getting the Customer table from the session
											customerProductParameterRow = customerProductParameterTable
													.cprSearchByCustomerProductParameterValueandCustomerProductIDandObsolete(
															bProductParameter.strParamOldValue,
															bProductDetail.lCustomerProductID
																	.longValue(),
															FINAL_ZERO);

											// BEGIN ADD V5.44d
											if (null == customerProductParameterRow) {
												customerProductParameterRow = customerProductParameterTable
														.cprSearchByCustProductIDandProductParameterandObsolete(
																bProductDetail.lCustomerProductID
																		.longValue(),
																bProductParameter.lParameterID
																		.longValue(),
																FINAL_ZERO);
											}

											// END ADD V5.44d

											if (null != customerProductParameterTable) {
												if (null != customerProductParameterRow) {

													// Updating All the Values Over here
													customerProductParameterRow.strCustomerProductParameterValue = (String) vctBPPInternal
															.elementAt(FINAL_ZERO);

													if ((customerProductParameterRow.iStatusInDB == Record.VIEW)
															|| (customerProductParameterRow.iStatusInDB == Record.UPDATE)) {
														customerProductParameterRow.iStatusInDB = Record.UPDATE;
														customerProductParameterTable
																.updateRecord(customerProductParameterRow);
													}

													// when iStatusInDB is equal to Record.INSERT
													else {
														customerProductParameterTable
																.updateRecord(customerProductParameterRow);
													} // end of the if else if loop
												} // end of the if loop
											} // end of the if loop

											// Put the container back into the session
											teleSessionMgr
													.putTable(
															string_CUSTOMERPRODUCTPARAMETER,
															customerProductParameterTable);
										} // end of the if loop
									} // end of the if loop
								} // end of the for loop
							} // end of the if loop
							else if (FINAL_ZERO == bProductParameter.iParameter) {
								if (null != bProductParameter.vctParameterValues) {
									int iSizeOfvctParameterValues = 0;

									iSizeOfvctParameterValues = ((Vector) bProductParameter.vctParameterValues)
											.size();

									for (int iCntr = FINAL_ZERO; iCntr < iSizeOfvctParameterValues; iCntr++) {
										Vector vctBPPInternal = new Vector();

										vctBPPInternal = (Vector) bProductParameter.vctParameterValues
												.elementAt(iCntr);

										if ((string_ONE).equals(String
												.valueOf(vctBPPInternal
														.elementAt(FINAL_ONE)))) {
											if (!((String
													.valueOf(vctBPPInternal
															.elementAt(FINAL_ZERO)))
													.equalsIgnoreCase(bProductParameter.strParamOldValue))) {
												if (GAfePropertyLoader.DEBUG) {

													GLogger.chkpt("Inside if statement ");		// System.out.println("old login value :  " + bProductParameter.strParamOldValue);
												}

												if ((null != bInternet)
														&& (!((bInternet.strNewMasterLogin)
																.equalsIgnoreCase(bProductParameter.strParamOldValue)))) {
													if (GAfePropertyLoader.DEBUG) {

														GLogger.chkpt("Inside if statement ");		// System.out.println("Non master login :  ");
													}

													vdReleaseLoginsNotUsed(
															bProductDetailProperty,
															bProductParameter.strParamOldValue);
												}

												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if statement");
													// System.out.println("old login value after function :  " + bProductParameter.strParamOldValue);
												}

												/*
												 *  Pending
												 * Add code for identifier here
												 * Get CustomerProductIdentifierId from the CustoemrProduct table for bProductDetail.lCustomerProductID
												 *
												 * If it is internet
												 *   Get the CustoemrProductLineIdentifierID for the selected value and BProductDetailProperty.lCustomerProductLineId and obsolete
												 *   Get the CustomerProductrow for bProductDetail.lCustomerProductId
												 *   Update the CustomerProductrow.lCustomerProdcutIdentifierId with the first line CPLID
												 *
												 */
												CustomerProductRow customerProductRow = null; // Initializing the Object Class for the CustomerProduct table

												customerProductTable = (CustomerProduct) teleSessionMgr
														.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

												Vector vctobjCPInternal = new Vector();

												vctobjCPInternal = customerProductTable
														.vctSearchByCustomerProductIDandObsolete(
																bProductDetail.lCustomerProductID
																		.longValue(),
																FINAL_ZERO);

												if (null != vctobjCPInternal) {
													for (int iContr = FINAL_ZERO; iContr < vctobjCPInternal
															.size(); iContr++) {
														customerProductRow = new CustomerProductRow();
														customerProductRow = (CustomerProductRow) vctobjCPInternal
																.elementAt(iContr);

														if ((GAfeDescription
																.strGetProperty(string_PRODUCT_INTERNET))
																.equals(String
																		.valueOf(bProductDetailProperty.lProductID))) {

															// For Internet
															long lCustomerPLIdentifierID = 0;
															CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

															customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
																	.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

															Vector vctCPLISInternal = new Vector(); // Creating Object

															vctCPLISInternal = customerProductLineIdentifierTable
																	.vctSearchBystrCustomerPLIdentifierValueandlCustomerProductLineIDandObsolete(
																			bProductDetailProperty.lCustomerProductLineID
																					.longValue(),
																			String
																					.valueOf(vctBPPInternal
																							.elementAt(FINAL_ZERO)),
																			FINAL_ZERO); // Search By CustomerProductLineID

															if (null != vctCPLISInternal) {
																customerProductLineIdentifierRow = new CustomerProductLineIdentifierRow();
																customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCPLISInternal
																		.elementAt(FINAL_ZERO);
																lCustomerPLIdentifierID = customerProductLineIdentifierRow.lCustomerPLIdentifierID;
															} // end of the if loop

															if (lCustomerPLIdentifierID == FINAL_ZERO) {

																/** **************STARTING*****************TO PRINT QUERRY******************************************** */
																if (GAfePropertyLoader.DEBUG) {
																	GLogger.chkpt("Inside if statement");
																	// System.out.println("Did not get the lCustomerPLIdentifierID ");
																}

																/** **************ENDING*******************TO PRINT QUERRY******************************************** */
																customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table
																customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
																		.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

																if (null != customerProductLineIdentifierTable) {
																	customerProductLineIdentifierRow = new CustomerProductLineIdentifierRow();
																	customerProductLineIdentifierRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
																	lCustomerPLIdentifierID = customerProductLineIdentifierRow
																			.lNewNr();
																	customerProductLineIdentifierRow.lCustomerPLIdentifierID = lCustomerPLIdentifierID;
																	customerProductLineIdentifierRow.lProductLineIdentifierTypeID = GAfeDescription
																			.lGetTypeId("PRODUCTLINEIDENTIFIERTYPE_LOGIN");
																	customerProductLineIdentifierRow.lCustomerProductLineID = bProductDetailProperty.lCustomerProductLineID
																			.longValue();
																	customerProductLineIdentifierRow.strCustomerPLIdentifierValue = String
																			.valueOf(vctBPPInternal
																					.elementAt(FINAL_ZERO));
																	customerProductLineIdentifierRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
																	customerProductLineIdentifierRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
																	customerProductLineIdentifierTable
																			.addUniqueRecord(customerProductLineIdentifierRow); // Adding the Record in the CustomerPromotionTable
																} // end of the if loop

																// Put the container back into the session
																teleSessionMgr
																		.putTable(
																				string_CUSTOMERPRODUCTLINEIDENTIFIER,
																				customerProductLineIdentifierTable);
															}

															if (!(string_ZERO)
																	.equalsIgnoreCase(String
																			.valueOf(lCustomerPLIdentifierID))) {

																/** **************STARTING*****************TO PRINT QUERRY******************************************** */
																if (GAfePropertyLoader.DEBUG) {

																	GLogger.chkpt("Inside if statement ");		// System.out.println("Got the lCustomerPLIdentifierID - " + lCustomerPLIdentifierID);
																}

																/** **************ENDING*******************TO PRINT QUERRY******************************************** */
																if (null != customerProductTable) {
																	if (null != customerProductRow) {

																		// Updating All the Values Over here
																		customerProductRow.lCustomerPLIdentifierID = lCustomerPLIdentifierID;

																		// BEGIN ADD V5.96g Bill Frequency Changes
																		// if (FINAL_ONE == bProductDetail.iBillable)
																		// {
																		customerProductRow.lBillFrequencyID = bProductDetailProperty.lBillFrequencyIDNew;

																		// }
																		// END ADD V5.96g Bill Frequency Changes
																		if ((customerProductRow.iStatusInDB == Record.VIEW)
																				|| (customerProductRow.iStatusInDB == Record.UPDATE)) {
																			customerProductRow.iStatusInDB = Record.UPDATE;
																			customerProductTable
																					.updateRecord(customerProductRow);
																		}

																		// when iStatusInDB is equal to Record.INSERT
																		else {
																			customerProductTable
																					.updateRecord(customerProductRow);
																		} // end of the if else if loop
																	} // end of the if loop
																} // end of the if loop

																// Put the container back into the session
																teleSessionMgr
																		.putTable(
																				string_CUSTOMERPRODUCT,
																				customerProductTable);
															} // end of the if loop
														} // end of the else part of the if else if loop
													} // end of the for loop
												} // end of the if loop
											} // end of if loop
										} // end of if loop
									} // end of for loop
								} // end of the if loop
							} // end of the else if part of the if else if loop
						} // end of the for loop

						// BEGIN DELETE V. 6.07h
						// if ((((GAfeDescription.strGetProperty("PRODUCT_INTERNET")).equals(String.valueOf(bProductDetailProperty.lProductID))))) {
						// END DELETE V. 6.07h
						// BEGIN ADD V. 6.08a
						if ((((GAfeDescription
								.strGetProperty(string_PRODUCT_INTERNET))
								.equals(String
										.valueOf(bProductDetailProperty.lProductID))))
								|| ((GAfeDescription
										.strGetProperty(string_PRODUCT_VON))
										.equals(String
												.valueOf(bProductDetailProperty.lProductID)))) {

							// END ADD V. 6.07h
							long lComponentActionID = 0;
							CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

							customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
									.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

							Vector vctObjCProdInternal = new Vector();

							vctObjCProdInternal = customerProductStatusTable
									.vctSearchByCustomerProductIDandObslete(
											bProductDetail.lCustomerProductID
													.longValue(), FINAL_ZERO);

							if (null != vctObjCProdInternal) {
								for (int iCounterCPS = FINAL_ZERO; iCounterCPS < vctObjCProdInternal
										.size(); iCounterCPS++) {
									customerProductStatusRow = new CustomerProductStatusRow(); // Initializing the Object Class for the CustomerProduct table
									customerProductStatusRow = ((CustomerProductStatusRow) vctObjCProdInternal
											.elementAt(iCounterCPS));

									if (((GAfeDescription
											.strGetProperty(string_PRODUCT_INTERNET))
											.equals(String
													.valueOf(bProductDetailProperty.lProductID)))) {
										if (blnGetForProperty("PRODUCT_DOMAIN",
												bProductDetail.lProductID)) {
											if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											} else {
												lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_POSTINSTALLPROVISIONING");
											}
										} else if (blnGetForProperty(
												"PRODUCT_SUBDOMAIN",
												bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_EXTERNDOMAIN",
														bProductDetail.lProductID)) {
											if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											} else {
												lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											}
										} else if (blnGetForProperty(
												"PRODUCT_URL",
												bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_MAILADDRESS",
														bProductDetail.lProductID)

												// BEGIN DELETE V5.54a

												/* || blnGetForProperty("PRODUCT_DOMAINMAILSERVER", bProductDetail.lProductID) */

												// END DELETE V5.54a
												|| blnGetForProperty(
														"PRODUCT_FROMMAILADDRESS",
														bProductDetail.lProductID)
												|| blnGetForProperty(
														"PRODUCT_TOMAILADDRESS",
														bProductDetail.lProductID)) {
											if (("ADD")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											} else if (("AGE")
													.equalsIgnoreCase(bProductDetail.strProductStatus)) {
												lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_REVERT");
											} else {
												lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_POSTINSTALLPROVISIONING");
											}
										}

										// BEGIN MODIFY V5.54a
										else if (blnGetForProperty(
												"PRODUCT_MAILBOX_ALL",
												bProductDetail.lProductID))

										// END MODIFY V5.54a
										{
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("In update mode: componenet actionid for mailbox");
											}

											for (int iCtrILMM = FINAL_ZERO; iCtrILMM < bProductDetailProperty.vctGetLoginfromILMMAIL
													.size(); iCtrILMM++) {
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if statement");
													// System.out.println("Inside for loop for logins");
												}

												BChangeILogin bChangeILogin = new BChangeILogin();

												bChangeILogin = (BChangeILogin) bProductDetailProperty.vctGetLoginfromILMMAIL
														.elementAt(iCtrILMM);

												if ((strValues)
														.equalsIgnoreCase(String
																.valueOf(bChangeILogin.strLogin))) {
													if (GAfePropertyLoader.DEBUG) {

														GLogger.chkpt("Inside if statement ");	// System.out.println("Got aged login after change");
													}

													lComponentActionID = GAfeDescription
															.lGetTypeId("COMPONENTACTION_REVERT");

													break;
												} else {
													lComponentActionID = GAfeDescription
															.lGetTypeId("COMPONENTACTION_ADD");
												}
											}

											if (bProductDetailProperty.vctGetLoginfromILMMAIL
													.size() == FINAL_ZERO) {
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if statement");
													// System.out.println("No ILM logins");
												}

												lComponentActionID = GAfeDescription
														.lGetTypeId("COMPONENTACTION_ADD");
											}

											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if statement");
												// System.out.println("Component ActionId for MailBox:" + lComponentActionID);
											}
										} else {
											lComponentActionID = GAfeDescription
													.lGetTypeId("COMPONENTACTION_ADD");
										}
									}

									// BEGIN ADD V. 6.07h
									else if (((GAfeDescription
											.strGetProperty(string_PRODUCT_VON))
											.equals(String
													.valueOf(bProductDetailProperty.lProductID)))
											&& (("AGE")
													.equalsIgnoreCase(bInternet.strLoginStatusForVON))) {
										customerProductStatusRow.lComponentActionID = GAfeDescription
												.lGetTypeId("COMPONENTACTION_REVERT");
									}

									// END ADD V. 6.07h
									else {
										lComponentActionID = GAfeDescription
												.lGetTypeId("COMPONENTACTION_ADD");
									}

									if (null != customerProductStatusTable) {
										if (null != customerProductStatusRow) {

											// Updating All the Values Over here
											customerProductStatusRow.lComponentActionID = lComponentActionID;

											if ((customerProductStatusRow.iStatusInDB == Record.VIEW)
													|| (customerProductStatusRow.iStatusInDB == Record.UPDATE)) {
												customerProductStatusRow.iStatusInDB = Record.UPDATE;
												customerProductStatusTable
														.updateRecord(customerProductStatusRow);
											}

											// when iStatusInDB is equal to Record.INSERT
											else {
												customerProductStatusTable
														.updateRecord(customerProductStatusRow);
											} // end of the if else if loop
										} // end of the if loop
									} // end of the if loop

									// Put the container back into the session
									teleSessionMgr.putTable(
											string_CUSTOMERPRODUCTSTATUS,
											customerProductStatusTable);
								}
							} // end of the if loop
						} // end of the if loop

						lgCustomerParentId = bProductDetail.lCustomerProductID
								.longValue();
					} // end of the if loop

					// Begin Add v7.05f
					// putting the hashmap back into the session as this is a recursive method,
					// so one will get the updated hashmap when the method is called again.
					teleSessionMgr.putValue(GAfeConstants.CONTACTINFOMAILALIAS,
							hsmMailAliasInContactInfo);

					// End Add v7.05f
					// Begin Delete V7.06h
					// Begin Delete V7.06f
					// Call the Function Over here
					// vdMainRFncOfNewOrOldSaveOfProductLine(bProductDetailProperty, Long.valueOf(lgCustomerParentId), bProductDetail.iLevel, bProductDetail.iInstance, lProcessService, lProcessAccess, lOrderID, lNRCAccountID, dtActivationDate);
					// End Delete V7.06f
					// Begin Add V7.06f
					vdMainRFncOfNewOrOldSaveOfProductLine(
							bProductDetailProperty,
							Long.valueOf(lgCustomerParentId),
							bProductDetail.iLevel, bProductDetail.iInstance,
							lProcessService, lProcessAccess, lOrderID,
							lNRCAccountID, dtActivationDate, Long.valueOf(0));

					// End Add V7.06f
					// End Delete V7.06h
					// Begin Add V7.06h
					// lParentProductID = (bProductDetail.lProductID).longValue();
					// GLogger.chkpt("In same method lParentProductID : " + lParentProductID);
					// vdMainRFncOfNewOrOldSaveOfProductLine(bProductDetailProperty, Long.valueOf(lgCustomerParentId), bProductDetail.iLevel, bProductDetail.iInstance, lProcessService, lProcessAccess, lOrderID, lNRCAccountID, dtActivationDate,lParentProductID);
					// End Add V7.06h
				} // end of the if loop
			} // end of the for loop

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the try loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will save all the Related Infomation of the Document Table
	 *                                  back into the Session
	 *
	 *  @param          :       long OrderID, long DocumentTypeID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected boolean blnGetForProperty(String strGetValueFromProperty,
			Long lProductID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		Vector vctTempProducts = null;
		boolean bFlagtoReturn = false;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			vctTempProducts = GAfeDescription
					.vctGetAllTypeIds(strGetValueFromProperty);

			if (null != vctTempProducts) {
				if ((-1 != vctTempProducts.indexOf(lProductID.toString()))) {
					bFlagtoReturn = true;
				}
			} else {
				bFlagtoReturn = false;
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning the Value from the Fnc
		return bFlagtoReturn;
	}

	/**
	 *  DESCRIPTION :   The Function will save all the Related Infomation of the Document Table
	 *                                  back into the Session
	 *
	 *  @param          :       long OrderID, long DocumentTypeID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected void vdChangeServiceProvisioning(
			BProductDetailProperty bProductDetailProperty) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iCounter = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iCtr = 0;         //Local Varaible Declaration
		// String strValues;                                     //Local Varaible Declaration
		// End DEL v9.01d
		Vector vctProductSelected =null;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		BProductDetail bProductDetail = null;

		// Begin DEL v9.01d
		// BProductParameter bProductParameter = null;
		// End DEL v9.01d
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			vctProductSelected = bProductDetailProperty.vctProductSelected;

			for (iCounter = FINAL_ZERO; iCounter < vctProductSelected.size(); iCounter++) {
				//bProductDetail = new BProductDetail();
				bProductDetail = ((BProductDetail) vctProductSelected
						.elementAt(iCounter));

				// Case for the Products which are not provisioned.
				if ((!(("ADD")
						.equalsIgnoreCase(bProductDetail.strProductStatus)))
						&& (!(("AGE")
								.equalsIgnoreCase(bProductDetail.strProductStatus)))
						&& (FINAL_ZERO == bProductDetail.lCustomerProductID
								.longValue())) {
					if (blnGetForProperty("PRODUCT_DOMAIN",
							bProductDetail.lProductID)
							|| blnGetForProperty("PRODUCT_MAILADDRESS",
									bProductDetail.lProductID)
							|| blnGetForProperty("PRODUCT_URL",
									bProductDetail.lProductID)

					// BEGIN DELETE V5.54a

					/* || blnGetForProperty("PRODUCT_DOMAINMAILSERVER", bProductDetail.lProductID) */

					// END DELETE V5.54a
					) {

						// Begin DEL v9.01d
						// CustomerProductParameterRow customerProductParameterRow = null;               // Initializing the Object Class for the Currency table
						// End DEL v9.01d
						customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
								.getTable(string_CUSTOMERPRODUCTPARAMETER); // Getting the Customer table from the session

						Vector vctCPPInternal = null;

						vctCPPInternal = customerProductParameterTable
								.vctSearchByCustomerProductParameterValueandObsoleteandproductParameterID(
										bProductDetail.strProductStatus,
										FINAL_ZERO,
										GAfeDescription
												.lGetTypeId("PRODUCTPARAMETER_DOMAINNAME"));

						if (null != vctCPPInternal) {
							for (int iCPPCounter = FINAL_ZERO; iCPPCounter < vctCPPInternal
									.size(); iCPPCounter++) {
								long lngCustomerProductID = 0;

								lngCustomerProductID = ((CustomerProductParameterRow) vctCPPInternal
										.elementAt(iCPPCounter)).lCustomerProductID;

								// Begin DEL v9.01d
								// ProcessLinkRow processLinkRow = null;                                                                                         // Initializing the Object Class for the Vat table
								// End DEL v9.01d
								processLinkTable = (ProcessLink) teleSessionMgr
										.getTable(string_PROCESSLINK); // Getting the Vat table from the session

								Vector vctObjPLInternal = null;

								vctObjPLInternal = processLinkTable
										.vctSearchByObjectIDandObjectTypeIDandObsolete(
												lngCustomerProductID,
												GAfeDescription
														.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCT"),
												FINAL_ZERO);

								if (null != vctObjPLInternal) {
									for (int iPLSCounter = FINAL_ZERO; iPLSCounter < vctObjPLInternal
											.size(); iPLSCounter++) {
										CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

										customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
												.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

										Vector vctObjCProdInternal =null;

										vctObjCProdInternal = customerProductStatusTable
												.vctSearchByCustomerProductIDandObslete(
														bProductDetail.lCustomerProductID
																.longValue(),
														FINAL_ZERO);

										if (null != vctObjCProdInternal) {
											for (int iCProd = FINAL_ZERO; iCProd < vctObjCProdInternal
													.size(); iCProd++) {
												//customerProductStatusRow = new CustomerProductStatusRow();
												customerProductStatusRow = (CustomerProductStatusRow) (vctObjCProdInternal
														.elementAt(iCProd));

												if (null != customerProductStatusTable) {
													if (null != customerProductStatusRow) {

														// Updating All the Values Over here
														customerProductStatusRow.lProcessID = ((CustomerProductStatusRow) vctObjPLInternal
																.elementAt(iPLSCounter)).lProcessID;

														if ((customerProductStatusRow.iStatusInDB == Record.VIEW)
																|| (customerProductStatusRow.iStatusInDB == Record.UPDATE)) {
															customerProductStatusRow.iStatusInDB = Record.UPDATE;
															customerProductStatusTable
																	.updateRecord(customerProductStatusRow);
														}

														// when iStatusInDB is equal to Record.INSERT
														else {
															customerProductStatusTable
																	.updateRecord(customerProductStatusRow);
														} // end of the if else if loop
													} // end of the if loop
												} // end of the if loop

												// Put the container back into the session
												teleSessionMgr
														.putTable(
																string_CUSTOMERPRODUCTSTATUS,
																customerProductStatusTable);
											} // end of the for loop
										} // end of the if loop
									} // end of the for loop
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop
					}
				} // end of the if loop of not provisioned products
			} // end of the for loop

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will save all the Related Infomation of the Document Table
	 *                                  back into the Session
	 *
	 *  @param          :       long OrderID, long DocumentTypeID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected void vInsertInDocumentTable(long OrderID, long DocumentTypeID)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		long lngDocumentID = 0;

		// BEGIN Deleting for Ver5.96d
		// PrintHeader printHeaderTable = null;                          // PrintHeaderTable container initialisation
		// PrintHeaderRow printHeaderRow = null;                 // PrintHeaderRow object class initialisation
		// END Deleting for Ver5.96d
		// begin delete V5.61a
		// PrintBody printBodyTable                  = null;                             // PrintBodyTable container initialisation
		// PrintBodyRow printBodyRow                     = null;                 // PrintBodyRow object class initialisation
		// end delete V5.61a
		Customer customerTable = null;
		CustomerRow customerRow = null;
		ContactInfo contInfoTable = null;
		ContactInfoRow contInfoRow = null;

		// Begin DEL v9.01d
		// ObjectDescription objDescTable = null;                // ObjectDescription container initialisation
		// ObjectDescriptionRow objDescRow = null;               // ObjectDescriptionRow object class initialisation
		// long lDocId = 0;                                                      // local variable
		// long lDocTypeId = 0;                                                  // local variable
		// End DEL v9.01d
		long lContactInfoID = 0; // local variable
		long lCustLanguageId = 0;

		// Begin DEL v9.01d
		// long lDescId = 0;
		// long lPrintRequestId = 0;
		// End DEL v9.01d
		String strFirstName = new String("");
		String strLastName = new String("");
		String strEmail = new String("");
		String strFax = new String("");

		// Begin DEL v9.01d
		// String strDesc = new String("");
		// End DEL v9.01d
		String arrAddressCDM[];

		// Begin DEL v9.01d
		// SimpleDateFormat sdf = new SimpleDateFormat("yyyymmdd");
		// ParsePosition pos = new ParsePosition(0);
		// End DEL v9.01d
		// BEGIN Coding for Ver5.96d
		ApplSaveAction applSaveContainer = null;
		ApplSaveActionRow applSaveContainerRow = null;
		Vector vctApplSaveAT = null; // Vector of "ApplSaveActionRow" Database Object for given Action and Type

		// Begin DEL v9.01d
		// long lArraySize = 0;
		// End DEL v9.01d
		String strOrderID = null;
		com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo bCustomerInfo = null;
		BAddressInfo bAddressInfo = null;

		// END Coding for Ver5.96d

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			GLogger.debug(CLASS_NAME, "vInsertInDocumentTable :", "OrderID"
					+ OrderID);
			GLogger.debug(CLASS_NAME, "vInsertInDocumentTable :",
					"DocumentTypeID" + DocumentTypeID);
			// BEGIN Adding for Ver5.96d
			strOrderID = String.valueOf(OrderID);
			applSaveContainer = (ApplSaveAction) teleSessionMgr
					.getTable(string_APPLSAVEACTION);

			if (null != applSaveContainer) {
				vctApplSaveAT = applSaveContainer.vctSearchByActionType(
						Record.INSERT, String.valueOf(DocumentTypeID));

				if (null != vctApplSaveAT) {
					for (int iCnt = 0; iCnt < vctApplSaveAT.size(); iCnt++) {
						applSaveContainerRow = (ApplSaveActionRow) vctApplSaveAT
								.elementAt(iCnt);

						if (string_objCreateDocument
								.equalsIgnoreCase(applSaveContainerRow.strMethodName)
								&& strOrderID
										.equalsIgnoreCase(applSaveContainerRow.strSystem)) {
							applSaveContainer
									.deleteRecord(applSaveContainerRow.lID);
						}
					}
				}
			}

			// END Adding for Ver5.96d
			ObjectTypeRow objectTypeRow = null; // Initializing the Object Class for the Vat table

			if (null == objectTypeTable) {
				objectTypeTable = (ObjectType) teleSessionMgr
						.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
			}

			objectTypeRow = objectTypeTable
					.otrSearchBystrObjectNameandObsolete("\"ORDER\"",
							FINAL_ZERO);

			DocumentRow documentRow = null; // Initializing the Object Class for the PROCESS table

			documentTable = (Document) teleSessionMgr.getTable("DOCUMENT"); // Getting the PROCESS table from the session
			customerTable = (Customer) teleSessionMgr.getTable(string_CUSTOMER); // Getting the Customer table from the session
			contInfoTable = (ContactInfo) teleSessionMgr
					.getTable("CONTACTINFO");

			if (null != documentTable) {
				documentRow = new DocumentRow();
				documentRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
				lngDocumentID = documentRow.lNewNr(); // Auto Generation of the  Primary key
				documentRow.lDocumentID = lngDocumentID;
				documentRow.lDocumentStatusID = GAfeDescription
						.lGetTypeId("DOCUMENTSTATUS_NEW");
				documentRow.lCustomerID = bSession.lCustomerId; // Adding the Product ID of each and every row
				documentRow.lObjectTypeID = objectTypeRow.lObjectTypeID; // Adding the Product ID of each and every row
				documentRow.lObjectID = OrderID;
				documentRow.lDocumentTypeID = DocumentTypeID; // Adding the Product ID of each and every row
				documentRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
				documentRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
				documentTable.addUniqueRecord(documentRow); // Adding the Record in the CustomerPromotionTable

				// BEGIN Moved to bottom of function for Ver5.96d
				// Put the container back into the session
				// teleSessionMgr.putTable("DOCUMENT", documentTable);
				// END Moved to bottom of function for Ver5.96d
				long lAddressID = 0;
				long lUserCustomerID = 0;

				if (null != teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct)) {
					BProductRole bProductRole = new BProductRole();

					// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
					bProductRole = (BProductRole) teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct);

					// Begin DEL v9.01d
					// Vector vctGetProductConnectivityInfo = new Vector();
					// End DEL v9.01d
					lUserCustomerID = ((BProductRoleDetail) (bProductRole.vctProductRole
							.elementAt(FINAL_ZERO))).lCustomerID.longValue();
					lAddressID = ((BProductRoleDetail) (bProductRole.vctProductRole
							.elementAt(FINAL_ZERO))).lAddressID.longValue();
				} else {
					Object objbCustomerAddress = teleSessionMgr
							.getValue(GAfeConstants.BCUSTOMERADDRESS_ACCUSTADD);

					if (null != objbCustomerAddress) {
						BCustomerAddress objbCustomerAddress_fromsession = (BCustomerAddress) objbCustomerAddress;

						lUserCustomerID = objbCustomerAddress_fromsession.lCustomerId;
						lAddressID = objbCustomerAddress_fromsession.lAddressId;
					}
				}

				GLogger.debug(CLASS_NAME, "vInsertInDocumentTable :",
						"lUserCustomerID" + lUserCustomerID);
				GLogger.debug(CLASS_NAME, "vInsertInDocumentTable :",
						"lAddressID" + lAddressID);

				// getting ObjectType, Document, DocumentType and PrintHeader tables
				// BEGIN Deleting for Ver5.96d
				// printHeaderTable = (PrintHeader) teleSessionMgr.getTable("PRINTHEADER"); // still to be added into CDM
				// END Deleting for Ver5.96d
				// begin delete V5.61a
				// printBodyTable        = (PrintBody) teleSessionMgr.getTable("PRINTBODY"); // still to be added into CDM
				// end delete V5.61a

				/** STARTING*************************************************************************************** */

				/** ************** This is to populate the PrintHeader and PrintBody tables *********************** */

				/** *********************************************************************************************** */
				// getting the name and first name of the customer
				if (null != customerTable) {
					customerRow = (CustomerRow) customerTable
							.crSearchByCustID(lUserCustomerID);

					if (null != customerRow) {
						strFirstName = customerRow.strFirstName;
						strLastName = customerRow.strName;
						lContactInfoID = customerRow.lContactInfoID;
					}
				}

				if (null == strFirstName) {
					strFirstName = "";
				} // end of the if loop

				if (null == strLastName) {
					strLastName = "";
				} // end of the if loop

				// getting the email address and fax number
				if (null != contInfoTable) {
					contInfoRow = (ContactInfoRow) contInfoTable
							.cirSearchByContactInfoID(lContactInfoID);

					if (null != contInfoRow) {
						strEmail = contInfoRow.strEmail;
						strFax = contInfoRow.strFax;
						lCustLanguageId = contInfoRow.lLanguageID;
					}
				}

				if (null == strEmail) {
					strEmail = "";
				} // end of the if loop

				if (null == strFax) {
					strFax = "";
				} // end of the if loop

				// BEGIN DELETE V5.96a
				// getting the address details
				// arrAddressCDM = arrGetAddress(lAddressID);
				// END DELETE V5.96a
				// BEGIN ADD V5.96a
				arrAddressCDM = RProduct.arrGetAddressDetail(lAddressID,
						(int) lCustLanguageId);

				// END ADD V5.96a

				// getting the document type description

				/*                      if (null != objDescTable)
				 {
				 objDescRow = (ObjectDescriptionRow) objDescTable.odrSearchByDescIDAndLangID(lDescId ,bSession.lLanguageId);

				 if (null != objDescRow)
				 {
				 strDesc = objDescRow.strDescription;
				 }
				 }

				 */

				// BEGIN Deleting for Ver5.96d
				// inserting the data into PrintHeader table
				/*                              if (null != printHeaderTable)
				 {
				 printHeaderRow = new PrintHeaderRow();
				 printHeaderRow.iStatusInDB = Record.INSERT;

				 // Generate new Unique Number for a primary key
				 lPrintRequestId = printHeaderRow.lNewNr();
				 printHeaderRow.lPrintRequestID = lPrintRequestId;
				 printHeaderRow.lCompanyID = GAfeDescription.lGetTypeId("COMPANY_X");
				 printHeaderRow.lDocumentTypeID = DocumentTypeID;
				 printHeaderRow.lCustomerID = lUserCustomerID;
				 //                              printHeaderRow.strLanguageCode          = String.valueOf(lCustLanguageId);

				 //BEGIN DELETE V5.96a
				 //  printHeaderRow.strLanguageCode = String.valueOf("1");
				 //END DELETE V5.96a

				 //BEGIN ADD V5.96b
				 if (lCustLanguageId!=0)
				 {
				 printHeaderRow.strLanguageCode = String.valueOf(lCustLanguageId);
				 }
				 else
				 {
				 printHeaderRow.strLanguageCode = String.valueOf(GAfeConstants.DEFAULT_LANGUAGEID);
				 }
				 //END ADD V5.96b


				 printHeaderRow.strCustomerName = strFirstName;
				 printHeaderRow.strCustomerLastName = strLastName;
				 printHeaderRow.strStreetName = arrAddressCDM[3];
				 printHeaderRow.strHouseNumber = arrAddressCDM[0];
				 printHeaderRow.strSubHouseNumber = arrAddressCDM[1];
				 printHeaderRow.strBox = arrAddressCDM[2];
				 printHeaderRow.strZip = arrAddressCDM[5];
				 printHeaderRow.strCity = arrAddressCDM[4];
				 printHeaderRow.strCountry = arrAddressCDM[6];
				 printHeaderRow.strEmail = strEmail;
				 printHeaderRow.strFax = strFax;
				 printHeaderRow.strPRStatus = GAfeDescription.strGetProperty("PRINTHEADER_PRINTREQUESTSTATUS_REQUEST");
				 printHeaderRow.strDeliveryMechanism = GAfeDescription.strGetProperty("PRINTHEADER_CUSTOMERDELIVERYMECHANISM_PAPER");
				 printHeaderRow.strMessage = "";
				 printHeaderRow.lNoOfCopies = 1;
				 printHeaderRow.lDocumentID = lngDocumentID;

				 printHeaderTable.addUniqueRecord(printHeaderRow);

				 //BEGIN add V5.61a
				 putPrintStatusInSession(printHeaderRow.lPrintRequestID,
				 printHeaderRow.lDocumentID,
				 INSERT,
				 DocumentTypeID, lAddressID
				 );
				 //END add V5.61a


				 // Put the container back into the session
				 teleSessionMgr.putTable("PRINTHEADER", printHeaderTable);
				 }
				 //END Deleting for Ver5.96d
				 //begin delete V5.61a
				 // inserting the data into PrintBody table
				 /*
				 if(null != printBodyTable)
				 {
				 printBodyRow = new PrintBodyRow();
				 printBodyRow.iStatusInDB = Record.INSERT;

				 // Generate new Unique Number for a primary key
				 printBodyRow.lPrintRequestID    = lPrintRequestId;
				 printBodyRow.lDocumentTypeID    = DocumentTypeID;
				 printBodyRow.lCustomerID                = lUserCustomerID;
				 printBodyRow.strPRBodyNo                = "1";

				 if(GAfeDescription.lGetTypeId("DOCUMENTTYPE_INTERCEPT_O") == DocumentTypeID)
				 {
				 printBodyRow.strPRBodyText              = "Document Disconnect";
				 }
				 else
				 {
				 printBodyRow.strPRBodyText              = "Document Intercept";
				 }

				 printBodyTable.addUniqueRecord(printBodyRow);

				 // Put the container back into the session
				 teleSessionMgr.putTable("PRINTBODY",printBodyTable);
				 }
				 */

				// end delete V5.61a
				/** *********************************************************************************************** */

				/** ************** This is to populate the PrintHeader and PrintBody tables *********************** */

				/** ENDING**************************************************************************************** */
				// BEGIN Adding for Ver5.96d
				BDocumentRequest objBDocumentRequest = null;
				Epithet epithet = (Epithet) teleSessionMgr
						.getMasterTable("EPITHET");

				if (null == objectDescriptionTable) {
					objectDescriptionTable = (ObjectDescription) teleSessionMgr
							.getMasterTable(string_OBJECTDESCRIPTION);
				}

				bCustomerInfo = new com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo();
				bAddressInfo = new BAddressInfo();

				// populate the BCustomerInfo business object
				String strCountryName = arrAddressCDM[6];

				bCustomerInfo = objLoadCustomerInfo(epithet,
						objectDescriptionTable, lUserCustomerID, customerRow,
						contInfoRow, strCountryName, bSession.lLanguageId);

				// populate the BAddressInfo business object
				bAddressInfo = objLoadAddressInfo(lAddressID, arrAddressCDM);
				GLogger.debug(CLASS_NAME, "vInsertInDocumentTable :",
						"documentRow.lDocumentID" + documentRow.lDocumentID);
				objBDocumentRequest = objLoadDocumentRequest(lUserCustomerID,
						lCustLanguageId, documentRow.lDocumentTypeID,
						documentRow.lDocumentID, bSession.strUserName,
						lAddressID, bAddressInfo, bCustomerInfo, null);
				applSaveContainerRow = new ApplSaveActionRow();
				applSaveContainerRow.bPerformLast = true;
				applSaveContainerRow.strType = String.valueOf(DocumentTypeID);
				applSaveContainerRow.strValue = String
						.valueOf(documentRow.lDocumentID);
				applSaveContainerRow.iAction = Record.INSERT;
				applSaveContainerRow.strSystem = strOrderID;
				applSaveContainerRow.strMethodName = string_objCreateDocument;
				applSaveContainerRow.arrArguments = new Class[1];
				applSaveContainerRow.arrArguments[0] = BDocumentRequest.class;
				applSaveContainerRow.arrParams = new Object[1];
				applSaveContainerRow.arrParams[0] = objBDocumentRequest;
				applSaveContainer.addRecord(applSaveContainerRow);

				// END Adding for Ver5.96d
			}

			teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveContainer);

			// Put the container back into the session
			teleSessionMgr.putTable("DOCUMENT", documentTable);

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			GLogger.logException(ex);

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will save all the Related Infomation of the Process Related Table
	 *                                  back into the Session
	 *
	 *  @param          :       long CustomerProductLineID, long ProcessType, long ProcessStatusTypeID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected void vInsertInProcessTables(long CustomerProductLineID,
			long ProcessType, long ProcessStatusTypeID, long OrderID)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		long lngProcessID = 0;
		long lngProcessLinkID = 0;
		long lngProcessStatusID = 0;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			lngProcessID = 0;

			ProcessRow processRow = null; // Initializing the Object Class for the PROCESS table

			processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session

			if (null != processTable) {
				processRow = new ProcessRow();
				processRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
				lngProcessID = processRow.lNewNr(); // Auto Generation of the  Primary key
				processRow.lProcessID = lngProcessID;
				processRow.lProcessTypeID = ProcessType; // Adding the Product ID of each and every row
				processRow.lOrderID = OrderID; // Adding the Product ID of each and every row
				processRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
				processRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
				processTable.addUniqueRecord(processRow); // Adding the Record in the CustomerPromotionTable

				// Put the container back into the session
				teleSessionMgr.putTable(string_PROCESS, processTable);
			}

			// Here to Put in the Process Link Table and add to Process Status Table table with
			lngProcessLinkID = 0;

			ObjectTypeRow objectTypeRow = null; // Initializing the Object Class for the Vat table

			if (null == objectTypeTable) {
				objectTypeTable = (ObjectType) teleSessionMgr
						.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
			}

			objectTypeRow = objectTypeTable
					.otrSearchBystrObjectNameandObsolete(string_CUSTOMERPRODUCTLINE,
							FINAL_ZERO);

			ProcessLinkRow processLinkRow = null; // Initializing the Object Class for the Vat table

			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(string_PROCESSLINK); // Getting the Vat table from the session

			if (null != processLinkTable) {
				processLinkRow = new ProcessLinkRow();
				processLinkRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
				lngProcessLinkID = processLinkRow.lNewNr(); // Auto Generation of the  Primary key
				processLinkRow.lProcessLinkID = lngProcessLinkID;
				processLinkRow.lProcessID = lngProcessID;
				processLinkRow.lObjectTypeID = objectTypeRow.lObjectTypeID; // Adding the Product ID of each and every row
				processLinkRow.lObjectID = CustomerProductLineID;
				processLinkRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
				processLinkRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
				processLinkTable.addUniqueRecord(processLinkRow); // Adding the Record in the CustomerPromotionTable

				// Put the container back into the session
				teleSessionMgr.putTable(string_PROCESSLINK, processLinkTable);
			}

			lngProcessStatusID = 0;

			ProcessStatusRow processStatusRow = null; // Initializing the Object Class for the Vat table

			processStatusTable = (ProcessStatus) teleSessionMgr
					.getTable(string_PROCESSSTATUS); // Getting the Vat table from the session

			if (null != processLinkTable) {
				processStatusRow = new ProcessStatusRow();
				processStatusRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
				lngProcessStatusID = processStatusRow.lNewNr(); // Auto Generation of the  Primary key
				processStatusRow.lProcessStatusID = lngProcessStatusID;
				processStatusRow.lProcessID = lngProcessID;
				processStatusRow.lProcessStatusTypeID = ProcessStatusTypeID; // Adding the Product ID of each and every row
				processStatusRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
				processStatusRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
				processStatusTable.addUniqueRecord(processStatusRow); // Adding the Record in the CustomerPromotionTable

				// Put the container back into the session
				teleSessionMgr.putTable(string_PROCESSSTATUS, processStatusTable);
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will save all the Related Infomation of the Process Related Table
	 *                                  back into the Session
	 *
	 *  @param          :       long CustomerProductLineID, long ProcessType, long ProcessStatusTypeID
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */
	protected long lngInsertInProcessTables(long CustomerProductLineID,
			long ProcessType, long ProcessStatusTypeID, long OrderID)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		long lngProcessID = 0;
		long lngProcessLinkID = 0;
		long lngProcessStatusID = 0;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************************************MAKING OF NEXT QUERRY************************************** */
			lngProcessID = 0;

			ProcessRow processRow = null; // Initializing the Object Class for the PROCESS table

			processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session

			if (null != processTable) {
				processRow = new ProcessRow();
				processRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
				lngProcessID = processRow.lNewNr(); // Auto Generation of the  Primary key
				processRow.lProcessID = lngProcessID;
				processRow.lProcessTypeID = ProcessType; // Adding the Product ID of each and every row
				processRow.lOrderID = OrderID; // Adding the Product ID of each and every row
				processRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
				processRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
				processTable.addUniqueRecord(processRow); // Adding the Record in the CustomerPromotionTable

				// Put the container back into the session
				teleSessionMgr.putTable(string_PROCESS, processTable);
			}

			// Here to Put in the Process Link Table and add to Process Status Table table with
			lngProcessLinkID = 0;

			ObjectTypeRow objectTypeRow = null; // Initializing the Object Class for the Vat table

			if (null == objectTypeTable) {
				objectTypeTable = (ObjectType) teleSessionMgr
						.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
			}

			objectTypeRow = objectTypeTable
					.otrSearchBystrObjectNameandObsolete(string_CUSTOMERPRODUCTLINE,
							FINAL_ZERO);

			ProcessLinkRow processLinkRow = null; // Initializing the Object Class for the Vat table

			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(string_PROCESSLINK); // Getting the Vat table from the session

			if (null != processLinkTable) {
				processLinkRow = new ProcessLinkRow();
				processLinkRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
				lngProcessLinkID = processLinkRow.lNewNr(); // Auto Generation of the  Primary key
				processLinkRow.lProcessLinkID = lngProcessLinkID;
				processLinkRow.lProcessID = lngProcessID;
				processLinkRow.lObjectTypeID = objectTypeRow.lObjectTypeID; // Adding the Product ID of each and every row
				processLinkRow.lObjectID = CustomerProductLineID;
				processLinkRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
				processLinkRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
				processLinkTable.addUniqueRecord(processLinkRow); // Adding the Record in the CustomerPromotionTable

				// Put the container back into the session
				teleSessionMgr.putTable(string_PROCESSLINK, processLinkTable);
			}

			lngProcessStatusID = 0;

			ProcessStatusRow processStatusRow = null; // Initializing the Object Class for the Vat table

			processStatusTable = (ProcessStatus) teleSessionMgr
					.getTable(string_PROCESSSTATUS); // Getting the Vat table from the session

			if (null != processLinkTable) {
				processStatusRow = new ProcessStatusRow();
				processStatusRow.iStatusInDB = Record.INSERT; // Marking the Flag for insert
				lngProcessStatusID = processStatusRow.lNewNr(); // Auto Generation of the  Primary key
				processStatusRow.lProcessStatusID = lngProcessStatusID;
				processStatusRow.lProcessID = lngProcessID;
				processStatusRow.lProcessStatusTypeID = ProcessStatusTypeID; // Adding the Product ID of each and every row
				processStatusRow.strModificationUser = bSession.strUserName; // Retrieving the Modification from the BSession
				processStatusRow.strCreationUser = bSession.strUserName; // Retrieving the CreationUser from the BSession
				processStatusTable.addUniqueRecord(processStatusRow); // Adding the Record in the CustomerPromotionTable

				// Put the container back into the session
				teleSessionMgr.putTable(string_PROCESSSTATUS, processStatusTable);
			}

			/** **************************************MAKING OF NEXT QUERRY************************************** */
		} // end of the if loop
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the String
		return lngProcessID;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   The Function will find that a given product is there in the Vector of BO
	 *                                  that are passed to it.
	 *
	 *  @param          :       Vector vctProductSelected
	 *
	 *  @return         :       int     -       Returns a Integer
	 * /******************************************************************************************************************************
	 */
	protected String strFindProductInVectorSelected(Vector vctProductSelected,
			Long ProductID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		String strValues = ""; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		int iNCounter = 0; // Local Varaible Declaration
		int iSizeVector = 0; // Local Varaible Declaration
		int iSizeOVector = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		iSizeOfVector = vctProductSelected.size();

		BProductDetail bProductDetail = null;
		BProductParameter bProductParameter = null;

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if (((String.valueOf(ProductID)).equalsIgnoreCase(String
					.valueOf(((BProductDetail) vctProductSelected
							.elementAt(iCount)).lProductID)))) {
				//bProductDetail = new BProductDetail();
				bProductDetail = (BProductDetail) vctProductSelected
						.elementAt(iCount);
				iSizeVector = bProductDetail.vctParameters.size();

				for (iCounter = FINAL_ZERO; iCounter < iSizeVector; iCounter++) {
					//bProductParameter = new BProductParameter();
					bProductParameter = (BProductParameter) bProductDetail.vctParameters
							.elementAt(iCounter);

					if ((GAfeDescription
							.strGetProperty("PRODUCTPARAMETER_NUMMERBLOKKERING"))
							.equals(String
									.valueOf(bProductParameter.lParameterID))) {
						iSizeOVector = bProductParameter.vctParameterValues
								.size();

						for (iNCounter = FINAL_ZERO; iNCounter < iSizeOVector; iNCounter++) {
							if ((string_ONE)
									.equalsIgnoreCase(String
											.valueOf(((Vector) bProductParameter.vctParameterValues
													.elementAt(iNCounter))
													.elementAt(FINAL_ONE)))) {
								strValues = (String) ((Vector) bProductParameter.vctParameterValues
										.elementAt(iNCounter))
										.elementAt(FINAL_ZERO);
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop
		} // end of the for loop

		// Returning of the String
		return strValues;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function update telephony product
	 *
	 *  @param          :       BNumber bNumber
	 *
	 *  @return         :       int -   Int 1 if successfull else throws afe exception
	 */
	protected int iUpdatePLTelephone(BNumber bNumber) throws AfeException {
		int iCounter = 0; // Counter for Counting

		// Begin DEL v9.01d
		// long lComplexityCode = 0;                     //      Creating Variables for Complexity Code
		// End DEL v9.01d
		//BEGIN ADD V5.43c
		//comment:- Parameters have changed to Grouping Number and Porting id

		/*
		 long            lDueDate                                =       0;                      //      Creating Variables for Due Date
		 long            lDonorId                                        =       0;                      //      Creating Variable for Donor ID
		 */

		//      END ADD V5.43c
		// Begin DEL v9.01d
		// long lRoutingNo = 0;                  //      Creating Variable for Routing No.
		// End DEL v9.01d
		long lProduct_NP_ID = 0; // Creating Variable for Product NP
		long lCustomerIdIn = 0;
		long lAddressIdIn = 0;
		char cBlank = ' ';
		String strDN = "";
		ApplSaveAction applSaveActionTable = null;
		ApplSaveActionRow applSaveActionRow = null;
		BProductParameter bProductParameter = null;
		BProductDetailProperty bProductDetailProperty = null;
		BProductDetail bProductDetail = null;

		// BEGIN ADD V5.43c
		boolean bNewNumberIsNp = false;

		// END ADD V5.43c

		try {
			BProductRole bProductRole = null;

			if (null != teleSessionMgr.getValue(string_BProductDetailRole_aCProduct)) {
				bProductRole = (BProductRole) teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct);
			}

			if ((null != bProductRole) && (null != bProductRole.vctProductRole)) {
				for (int iCounterIn = 0; iCounterIn < bProductRole.vctProductRole
						.size(); iCounterIn++) {
					if ((null != ((BProductRoleDetail) (bProductRole.vctProductRole
							.elementAt(iCounterIn))).lRoleTypeID)
							&& (((BProductRoleDetail) (bProductRole.vctProductRole
									.elementAt(iCounterIn))).lRoleTypeID
									.longValue() == GAfeDescription
									.lGetTypeId(string_ROLETYPE_USER))) {
						lCustomerIdIn = ((BProductRoleDetail) (bProductRole.vctProductRole
								.elementAt(iCounterIn))).lCustomerID
								.longValue();
						lAddressIdIn = ((BProductRoleDetail) (bProductRole.vctProductRole
								.elementAt(iCounterIn))).lAddressID.longValue();

						break;
					}
				}
			}

			/** ************ End Code Change ******* */

			// Gets the ApplsaveAction Container/table from session
			applSaveActionRow = new ApplSaveActionRow();
			applSaveActionRow.arrArguments = new Class[3];
			applSaveActionRow.arrParams = new Object[3];
			applSaveActionTable = (ApplSaveAction) teleSessionMgr
					.getTable(string_APPLSAVEACTION);

			if (null != applSaveActionTable) {
				if (bNumber.lCustomerProductLineID == 0) {
					if ("TN".equalsIgnoreCase(bNumber.strKindOfNumber)) {

						// Insert a record in applSave container to call IAFEOUT  reserve number method
						if (GAfePropertyLoader.DEBUG) {

							GLogger.chkpt("Inside if statement ");	// System.out.println("Reserve : New telephone number");
						}

						// Setting the variables of record to entered in Appl Save container
						applSaveActionRow.iAction = Record.INSERT;
						applSaveActionRow.strType = string_TELNO;

						// BEGIN DELETE V5.37a
						// Comment: Fixed the same number already exists in DSL problem
						// applSaveActionRow.strValue            = " ";
						// END DELETE V5.37a
						// BEGIN ADD V5.37a
						// Comment: Fixed the same number already exists in DSL problem
						applSaveActionRow.strValue = bNumber.strNumber;

						// END ADD V5.37a
						applSaveActionRow.strSystem = string_IAFEOUT;
						applSaveActionRow.strMethodName = "strReserveTelNo"; // the name of the IAFEOUT Method which needs to be called
						applSaveActionRow.arrArguments[0] = String.class;
						applSaveActionRow.arrArguments[1] = String.class;
						applSaveActionRow.arrArguments[2] = String.class;
						strDN = bNumber.strNumber;

						if ((null != bNumber.strNumber)
								&& (10 > (bNumber.strNumber.length()))) {
							for (int iCnt = 0; iCnt < (10 - bNumber.strNumber
									.length()); iCnt++) {
								strDN = string_ZERO + strDN;
							}
						}

						applSaveActionRow.arrParams[0] = strDN;
						applSaveActionRow.arrParams[1] = strDN;
						applSaveActionRow.arrParams[2] = bNumber.strDNModificationDate;

						// adding the Newly created row to the ApplSaveaction Container/table
						applSaveActionTable.addRecord(applSaveActionRow);
						vdUnReserveTelNumberInCancel(strDN);

						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if statement");
							// System.out.println("");
							// System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
							// System.out.println("");
						}

						vLocalNewProdLine(bNumber, applSaveActionTable,
								lCustomerIdIn, lAddressIdIn, 1, cBlank, cBlank);
					}

					/** ***** Changed by ABhishek *** */
					else if ("NP".equalsIgnoreCase(bNumber.strKindOfNumber)) {

						//                      BEGIN ADD : V3.28
						//                      Changes done for some Integrations changes with DSL.
						vLocalNewProdLine(bNumber, applSaveActionTable,
								lCustomerIdIn, lAddressIdIn, 2, 'Y', cBlank);

						//                      END ADD : V3.28
						//                      Changes done for some Integrations changes with DSL.
					}

					/** ****** end of Change ******** */
				} else {
					if ("NP".equalsIgnoreCase(bNumber.strKindOfNumber)) {
						if ("TN".equalsIgnoreCase(bNumber.strKindOfNumberOld)) {
							applSaveActionRow = new ApplSaveActionRow();
							applSaveActionRow.arrArguments = new Class[1];
							applSaveActionRow.arrParams = new Object[1];
							applSaveActionRow.iAction = Record.INSERT;
							applSaveActionRow.strType = string_TELNO;
							applSaveActionRow.strValue = " ";
							applSaveActionRow.strSystem = string_IAFEOUT;
							applSaveActionRow.strMethodName = "strDeleteSI"; // the name of the IAFEOUT Method which needs to be called
							applSaveActionRow.arrArguments[0] = String.class;
							strDN = bNumber.strNumberOld;
							applSaveActionRow.arrParams[0] = strDN;
							applSaveActionTable.addRecord(applSaveActionRow);
							applSaveActionRow = new ApplSaveActionRow();
							applSaveActionRow.arrArguments = new Class[2];
							applSaveActionRow.arrParams = new Object[2];

							// Insert a record in applSave container to call IAFEOUT  reserve number method
							// TN-NP case
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("");
								// System.out.println("UnReserve old number : TN - Np case");
								// System.out.println("");
							}

							// Setting the variables of record to entered in Appl Save container
							applSaveActionRow.iAction = Record.INSERT;
							applSaveActionRow.strType = string_TELNO;
							applSaveActionRow.strValue = " ";
							applSaveActionRow.strSystem = string_IAFEOUT;
							applSaveActionRow.strMethodName = string_strUnreserveTelNo; // the name of the IAFEOUT Method which needs to be called
							applSaveActionRow.arrArguments[0] = String.class;
							applSaveActionRow.arrArguments[1] = String.class;
							strDN = bNumber.strNumberOld;

							if ((null != bNumber.strNumberOld)
									&& (10 > (bNumber.strNumberOld.length()))) {

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement ");	
									// System.out.println("**************************************************************************************************************");
									// System.out.println("The strNumberOld length is : " + bNumber.strNumberOld.length());
									// System.out.println("**************************************************************************************************************");
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								for (int iCnt = 0; iCnt < (10 - bNumber.strNumberOld
										.length()); iCnt++) {

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("********************before******************************************************************************************");
										// System.out.println("The strNumber is : " + strDN);
										// System.out.println("**************************************************************************************************************");
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									strDN = string_ZERO + strDN;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement");
										// System.out.println("*******************after*******************************************************************************************");
										// System.out.println("The strUnreserveTelNo Number is : " + strDN);
										// System.out.println("**************************************************************************************************************");
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}
							}

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("**************************************************************************************************************");
								// System.out.println("The strUnreserveTelNo Number is : " + strDN);
								// System.out.println("**************************************************************************************************************");
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							applSaveActionRow.arrParams[0] = strDN;
							applSaveActionRow.arrParams[1] = strDN;

							// adding the Newly created row to the ApplSaveaction Container/table
							applSaveActionTable.addRecord(applSaveActionRow);

							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement");
								// System.out.println("");
								// System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
								// System.out.println("");
							}

							//                          BEGIN ADD : V3.28
							//                          Changes done for some Integrations changes with DSL.
							// vLocalNewProdLine(bNumber,applSaveActionTable, lCustomerIdIn,lAddressIdIn,3,'N',cBlank);
							vLocalNewProdLine(bNumber, applSaveActionTable,
									lCustomerIdIn, lAddressIdIn, 3, 'Y', cBlank);

							//                          END ADD : V3.28
							//                          Changes done for some Integrations changes with DSL.
						}

						if ("NP".equalsIgnoreCase(bNumber.strKindOfNumberOld)
								&& !((bNumber.strNumber)
										.equalsIgnoreCase(bNumber.strNumberOld))) {

							// NP - NP Case
							lProduct_NP_ID = GAfeDescription
									.lGetTypeId("PRODUCT_NP"); // retieveing ProductID from Property Loader for PRODUCT_NP

							// BEGIN DELETE V5.43b
							// Comment : Chages for NP after review

							/*
							 * lComplexityCode     =       GAfeDescription.lGetTypeId("PRODUCTPARAMETER_COMPLEXITYCODE");                  // retieveing ProductParameterID from Property Loader for Complexity Code
							 * lDueDate                            =       GAfeDescription.lGetTypeId("PRODUCTPARAMETER_DUEDATE");                                                 // retieveing ProductParameterID from Property Loader for Due Date
							 * lRoutingNo                          =       GAfeDescription.lGetTypeId("PRODUCTPARAMETER_ROUTINGNO");                                               // retieveing ProductParameterID from Property Loader for Routing no.
							 * lDonorId                                    =       GAfeDescription.lGetTypeId("PRODUCTPARAMETER_DONORID");                                                 // retieveing ProductParameterID from Property Loader for Donor ID
							 */

							// END DELETE V 5.43b
							// BEGIN ADD V5.43c
							// comment:- Check if the product paramters need to be updated or not.If yes then only
							// update it
							if (bCanUpdateParameters(bNumber.strCurrentOwner,
									bNumber.strCurrentOwnerOld)) {

								// END ADD V5.43c
								if (null != teleSessionMgr
										.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

									// Vector for storing all the Data that is populated in the tablular form
									bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
											.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

									for (iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected
											.size(); iCounter++) {
										//bProductDetail = new BProductDetail();
										bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
												.elementAt(iCounter);

										if (lProduct_NP_ID == bProductDetail.lProductID
												.longValue()) {
											for (int iCounter1 = FINAL_ZERO; iCounter1 < bProductDetail.vctParameters
													.size(); iCounter1++) {
												//bProductParameter = new BProductParameter();
												bProductParameter = (BProductParameter) ((Vector) bProductDetail.vctParameters)
														.elementAt(iCounter1);

												// For Complexity Code
												// BEGIN DELETE V5.43b
												// Comment : Chages for NP after review

												/*
												 * if(lComplexityCode == bProductParameter.lParameterID.longValue())
												 * {
												 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strType, FINAL_ZERO);
												 *
												 *   if(GAfePropertyLoader.DEBUG)
												 *   {
												 *       System.out.println("");
												 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
												 *       System.out.println("");
												 *   }
												 * }
												 * //      For Routing No.
												 * else if(lRoutingNo == bProductParameter.lParameterID.longValue())
												 * {
												 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strRoutingNo,FINAL_ZERO);
												 *
												 *   if(GAfePropertyLoader.DEBUG)
												 *   {
												 *       System.out.println("");
												 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
												 *       System.out.println("");
												 *   }
												 * }
												 * //      for DonorID
												 * else if(lDonorId == bProductParameter.lParameterID.longValue())
												 * {
												 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strDonor, FINAL_ZERO);
												 *
												 *   if(GAfePropertyLoader.DEBUG)
												 *   {
												 *       System.out.println("");
												 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
												 *       System.out.println("");
												 *   }
												 * }
												 * //      for Due Date
												 * else if(lDueDate == bProductParameter.lParameterID.longValue())
												 * {
												 *   SimpleDateFormat sdf = new SimpleDateFormat ("dd-MM-yyyy"); //Making the Object of the Date Formatter Class
												 *
												 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(sdf.format(bNumber.dtDueDate), FINAL_ZERO);
												 *
												 *   if(GAfePropertyLoader.DEBUG)
												 *   {
												 *       System.out.println("\n");
												 *       System.out.println("**********************************************************************************************************************");
												 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
												 *       System.out.println("**********************************************************************************************************************");
												 *   }
												 * }
												 */

												// END DELETE V 5.43b
												// BEGIN ADD V5.43b
												// Comment : Chages for NP after review
												bProductParameter.iEditable = FINAL_ZERO;

												if (GAfeDescription.PRODUCTPARAMETER_COMPLEXTYCODE == bProductParameter.lParameterID
														.intValue()) {
													((Vector) bProductParameter.vctParameterValues
															.elementAt(FINAL_ZERO))
															.setElementAt(
																	bNumber.strType,
																	FINAL_ZERO);
												} else if (GAfeDescription.PRODUCTPARAMETER_ROUTINGNUMBER == bProductParameter.lParameterID
														.intValue()) {
													((Vector) bProductParameter.vctParameterValues
															.elementAt(FINAL_ZERO))
															.setElementAt(
																	bNumber.strRoutingNo,
																	FINAL_ZERO);
												} else if (GAfeDescription.PRODUCTPARAMETER_GROUPINGNUMBER == bProductParameter.lParameterID
														.intValue()) {
													((Vector) bProductParameter.vctParameterValues
															.elementAt(FINAL_ZERO))
															.setElementAt(
																	bNumber.strGroupingNumber,
																	FINAL_ZERO);
												} else if (GAfeDescription.PRODUCTPARAMETER_PORTINGID == bProductParameter.lParameterID
														.intValue()) {
													((Vector) bProductParameter.vctParameterValues
															.elementAt(FINAL_ZERO))
															.setElementAt(
																	bNumber.strPortingId,
																	FINAL_ZERO);
												}

												// END ADD V 5.43b
											}
										}
									}

									teleSessionMgr.putValue(
											BPRODUCTDETAILPROPERTY_ACPRODUCT,
											bProductDetailProperty); // Putting Values into Session

									//                                  BEGIN ADD : V3.28
									//                                  Changes done for some Integrations changes with DSL.

									// vLocalNewProdLine(bNumber,applSaveActionTable, lCustomerIdIn,lAddressIdIn,4,'N','N');
									// BEGIN DELETE V 5.49a
									// Comment:Rel2.1:Changes for incident 391
									// vLocalNewProdLine(bNumber,applSaveActionTable, lCustomerIdIn,lAddressIdIn,
									// 4,'Y','Y');
									// END DELETE V 5.49a
									// END ADD : V3.28
									// Changes done for some Integrations changes with DSL.
								}
							} // if the updation of the product parameter needs to be done
							else if (bCanDeleteProduct(bNumber.strCurrentOwner,
									bNumber.strCurrentOwnerOld, bNewNumberIsNp)) { // if the NP product can be deleted.

								// Delete Product
								vDeleteProduct(teleSessionMgr);
							}

							// END ADD V5.43c
							// BEGIN ADD V 5.49a
							// Comment:Rel2.1:Changes for incident 391
							vLocalNewProdLine(bNumber, applSaveActionTable,
									lCustomerIdIn, lAddressIdIn, 4, 'Y', 'Y');

							// END ADD V 5.49a
						}
					}

					if ("TN".equalsIgnoreCase(bNumber.strKindOfNumber)) {
						if ("TN".equalsIgnoreCase(bNumber.strKindOfNumberOld)) {

							// TN-TN Case
							if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
								GLogger
										.chkpt("UnReserve old number/reserve new number : TN/TN case");
							} // END MODIFY 9.00a

							if (!(bNumber.strNumber)
									.equalsIgnoreCase(bNumber.strNumberOld)) {
								applSaveActionRow = new ApplSaveActionRow();
								applSaveActionRow.arrArguments = new Class[1];
								applSaveActionRow.arrParams = new Object[1];
								applSaveActionRow.iAction = Record.INSERT;
								applSaveActionRow.strType = string_TELNO;
								applSaveActionRow.strValue = " ";
								applSaveActionRow.strSystem = string_IAFEOUT;
								applSaveActionRow.strMethodName = "strDeleteSI"; // the name of the IAFEOUT Method which needs to be called
								applSaveActionRow.arrArguments[0] = String.class;
								strDN = bNumber.strNumberOld;
								applSaveActionRow.arrParams[0] = strDN;
								applSaveActionTable
										.addRecord(applSaveActionRow);
								applSaveActionRow = new ApplSaveActionRow();
								applSaveActionRow.arrArguments = new Class[2];
								applSaveActionRow.arrParams = new Object[2];

								// Unreserving the Old Number
								applSaveActionRow.iAction = Record.INSERT;
								applSaveActionRow.strType = string_TELNO;
								applSaveActionRow.strValue = " ";
								applSaveActionRow.strSystem = string_IAFEOUT;
								applSaveActionRow.strMethodName = string_strUnreserveTelNo; // the name of the IAFEOUT Method which needs to be called
								applSaveActionRow.arrArguments[0] = String.class;
								applSaveActionRow.arrArguments[1] = String.class;
								strDN = bNumber.strNumberOld;

								if ((null != bNumber.strNumberOld)
										&& (10 > (bNumber.strNumberOld.length()))) {
									for (int iCnt = 0; iCnt < (10 - bNumber.strNumberOld
											.length()); iCnt++) {
										strDN = string_ZERO + strDN;
									}
								}

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */

								/*
								 * if (GAfePropertyLoader.DEBUG) {
								 *   System.out.println("**************************************************************************************************************");
								 *   System.out.println("The strUnreserveTelNo Number is : " + strDN);
								 *   System.out.println("**************************************************************************************************************");
								 * }
								 */

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								applSaveActionRow.arrParams[0] = strDN;
								applSaveActionRow.arrParams[1] = strDN;

								// adding the Newly created row to the ApplSaveaction Container/table
								applSaveActionTable
										.addRecord(applSaveActionRow);

								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
								}

								// BEGIN ADD V5.37a
								// Comment: Fixed the same number already exists in DSL problem
								applSaveActionRow = null;
								strDN = bNumber.strNumber;

								if ((null != bNumber.strNumber)
										&& (10 > (bNumber.strNumber.length()))) {
									for (int iCnt = 0; iCnt < (10 - bNumber.strNumber
											.length()); iCnt++) {
										strDN = string_ZERO + strDN;
									}
								}

								applSaveActionRow = applSaveActionTable
										.asarSearchByActionTypeValueMethod(1,
												string_TELNO, bNumber.strNumberOld,
												"strReserveTelNo");

								if (null == applSaveActionRow) {

									// END ADD V5.37a
									applSaveActionRow = new ApplSaveActionRow();
									applSaveActionRow.arrArguments = new Class[3];
									applSaveActionRow.arrParams = new Object[3];

									// Reserving the New Number
									applSaveActionRow.iAction = Record.INSERT;
									applSaveActionRow.strType = string_TELNO;

									// BEGIN DELETE V5.37a
									// Comment: Fixed the same number already exists in DSL problem
									// applSaveActionRow.strValue                = " ";
									// END DELETE V5.37a
									// BEGIN ADD V5.37a
									// Comment: Fixed the same number already exists in DSL problem
									applSaveActionRow.strValue = bNumber.strNumber;

									// END ADD V5.37a
									applSaveActionRow.strSystem = string_IAFEOUT;
									applSaveActionRow.strMethodName = "strReserveTelNo"; // the name of the IAFEOUT Method which needs to be called
									applSaveActionRow.arrArguments[0] = String.class;
									applSaveActionRow.arrArguments[1] = String.class;
									applSaveActionRow.arrArguments[2] = String.class;

									// BEGIN DELETE V5.37a
									// Comment: Fixed the same number already exists in DSL problem

									/*
									 * strDN       =       bNumber.strNumber;
									 *
									 * if ((null != bNumber.strNumber) && (10 > (bNumber.strNumber.length())))
									 * {
									 *   for (int iCnt=0;iCnt<(10-bNumber.strNumber.length());iCnt++)
									 *   {
									 *           strDN = "0" + strDN;
									 *   }
									 * }
									 */

									// END DELETE V5.37a
									applSaveActionRow.arrParams[0] = strDN;
									applSaveActionRow.arrParams[1] = strDN;
									applSaveActionRow.arrParams[2] = bNumber.strDNModificationDate;

									// adding the Newly created row to the ApplSaveaction Container/table
									applSaveActionTable
											.addRecord(applSaveActionRow);

									// BEGIN ADD V5.37a
									// Comment: Fixed the same number already exists in DSL problem
								} else {
									applSaveActionRow.arrParams[0] = strDN;
									applSaveActionRow.arrParams[1] = strDN;
									applSaveActionRow.arrParams[2] = bNumber.strDNModificationDate;
									applSaveActionTable
											.updateRecord(applSaveActionRow);
								}

								// END ADD V5.37a
								vdUnReserveTelNumberInCancel(strDN);

								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if statement");
									// System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
								}

								vLocalNewProdLine(bNumber, applSaveActionTable,
										lCustomerIdIn, lAddressIdIn, 5, cBlank,
										cBlank);
							}
						}

						if ("NP".equalsIgnoreCase(bNumber.strKindOfNumberOld)) {
							if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
								GLogger.chkpt("Reserve new number: NP/TN case");
							} // END MODIFY 9.00a

							// NP-TN Case
							// Reserving the Old Number

							applSaveActionRow = new ApplSaveActionRow();
							applSaveActionRow.arrArguments = new Class[3];
							applSaveActionRow.arrParams = new Object[3];
							applSaveActionRow.iAction = Record.INSERT;
							applSaveActionRow.strType = string_TELNO;

							// BEGIN DELETE V5.37a
							// Comment: Fixed the same number already exists in DSL problem
							// applSaveActionRow.strValue                = " ";
							// END DELETE V5.37a
							// BEGIN ADD V5.37a
							// Comment: Fixed the same number already exists in DSL problem
							applSaveActionRow.strValue = bNumber.strNumber;

							// END ADD V5.37a
							applSaveActionRow.strSystem = string_IAFEOUT;
							applSaveActionRow.strMethodName = "strReserveTelNo"; // the name of the IAFEOUT Method which needs to be called
							applSaveActionRow.arrArguments[0] = String.class;
							applSaveActionRow.arrArguments[1] = String.class;
							applSaveActionRow.arrArguments[2] = String.class;
							strDN = bNumber.strNumber;

							if ((null != bNumber.strNumber)
									&& (10 > (bNumber.strNumber.length()))) {
								for (int iCnt = 0; iCnt < (10 - bNumber.strNumber
										.length()); iCnt++) {
									strDN = string_ZERO + strDN;
								}
							}

							applSaveActionRow.arrParams[0] = strDN;
							applSaveActionRow.arrParams[1] = strDN;
							applSaveActionRow.arrParams[2] = bNumber.strDNModificationDate;

							// adding the Newly created row to the ApplSaveaction Container/table
							applSaveActionTable.addRecord(applSaveActionRow);
							vdUnReserveTelNumberInCancel(strDN);

							if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
								GLogger.chkpt("");
								GLogger
										.chkpt("Record added in session. the no of records in applSaveActionTable is "
												+ (applSaveActionTable
														.vctGetAll()).size());
								GLogger.chkpt("");
							} // END MODIFY 9.00a

							//                          BEGIN ADD : V3.28
							//                          Changes done for some Integrations changes with DSL.
							// vLocalNewProdLine(bNumber,applSaveActionTable,lCustomerIdIn,lAddressIdIn, 6,cBlank,'N');
							vLocalNewProdLine(bNumber, applSaveActionTable,
									lCustomerIdIn, lAddressIdIn, 6, cBlank, 'Y');

							//                          BEGIN ADD : V3.28
							//                          Changes done for some Integrations changes with DSL.

							// BEGIN DELETE V5.43c
							// comment: Recoding as per new architecture. Also Deletion should occur after
							// checking whether deletion should occur

							/*
							 * //  Removing NP Special Product
							 *
							 * lProduct_NP_ID              =       GAfeDescription.lGetTypeId("PRODUCT_NP");                                                                                                                       // retieveing ProductID from Property Loader for PRODUCT_NP
							 *
							 * if (null != teleSessionMgr.getValue("BProductDetailProperty_aCProduct"))
							 * {
							 *   //Vector for storing all the Data that is populated in the tablular form
							 *   bProductDetailProperty = (BProductDetailProperty)teleSessionMgr.getValue("BProductDetailProperty_aCProduct");
							 *
							 *   for(iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected.size() ; iCounter++ )
							 *   {
							 *       bProductDetail = new BProductDetail();
							 *       bProductDetail      =       (BProductDetail)bProductDetailProperty.vctProductSelected.elementAt(iCounter);
							 *
							 *       if(lProduct_NP_ID == bProductDetail.lProductID.longValue())
							 *       {
							 *           bProductDetailProperty.vctProductSelected.removeElementAt(iCounter);
							 *       }
							 *   }
							 *
							 *    teleSessionMgr.putValue("BProductDetailProperty_aCProduct",bProductDetailProperty);
							 * }
							 */

							// BEGIN DELETE V5.43c
							// BEGIN ADD V5.43c
							// Removing NP Special Product
							if (bCanDeleteProduct(bNumber.strCurrentOwner,
									bNumber.strCurrentOwnerOld, bNewNumberIsNp)) {

								// Delete Product
								vDeleteProduct(teleSessionMgr);
							}

							// END ADD V5.43c
						}
					}
				}

				teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveActionTable);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return (1);
	}

	public void vLocalNewProdLine(BNumber bNumber,
			ApplSaveAction applSaveActionTable, long lCustomerID,
			long lAddressID, int iCase, char cPortingFlag, char cPortingFlagOld)
			throws Exception {
		ApplSaveActionRow applSaveActionRow = null;
		LCustomer lCustomer = new LCustomer(teleSessionMgr);
		BCustomerInfo bCustomerInfo = null;

		// Begin DEL v9.01d
		// String strVATNo = null;
		// End DEL v9.01d
		String strCountryCode = "";
		Country countryTableTemp = null;
		CountryRow countryRow = null;

		countryTableTemp = (Country) teleSessionMgr.getMasterTable("COUNTRY");

		SimpleDateFormat sdf = new SimpleDateFormat(string_dateFormat1);

		// Begin DEL v9.01d
		// boolean bResult = false;
		// End DEL v9.01d

		try {

			// LCustomermethod to get customer info for particular customer
			bCustomerInfo = (BCustomerInfo) lCustomer
					.objSelectCustomerInfo(lCustomerID);

			if (null == bCustomerInfo) {
				return;
			}

			if (null != countryTableTemp) {
				countryRow = countryTableTemp
						.astrSearchByCountryID(bCustomerInfo.lCountryId);
			}

			if (null != countryRow) {
				strCountryCode = countryRow.strCountryCode;
			}

			/**
			 * INSERT THE DSL METHODs (blnDeletePhoneLine and blnNewPhoneLine) ENTRY IN APPLSAVE CONTAINER
			 */
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				if (iCase == 1) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% TN %- CASE   ******************");
				} else if (iCase == 2) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% NP %- CASE   ******************");
				} else if (iCase == 3) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% TN - NP %- CASE   ******************");
				} else if (iCase == 4) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% NP - NP %- CASE   ******************");
				} else if (iCase == 5) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% TN - TN %- CASE   ******************");
				} else if (iCase == 6) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% NP - TN %- CASE   ******************");
				}
			} // END MODIFY 9.00a

			//          BEGIN ADD V5.43c
			//          COMMENT: new function being added to modify the porting flag before sending it to DSL.
			cPortingFlag = cUpdatePortingFlag_ForDsl(bNumber, cPortingFlag);

			//          END ADD V5.43c
			if ((1 != iCase) && (2 != iCase)) {
				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
					GLogger
							.chkpt("     **************  ADDING  blnDeletePhoneLine() FOR OLD NUMBER    ******************");
					GLogger
							.chkpt("     **************  Country Code is   ******************"
									+ strCountryCode);
				} // END MODIFY 9.00a

				applSaveActionRow = new ApplSaveActionRow();
				applSaveActionRow.arrArguments = new Class[3];
				applSaveActionRow.arrParams = new Object[3];

				// Setting the variables of record to entered in Appl Save container
				applSaveActionRow.iAction = Record.INSERT;
				applSaveActionRow.strType = string_TELNO;
				applSaveActionRow.strValue = " ";
				applSaveActionRow.strSystem = string_IAFEOUT;
				applSaveActionRow.strMethodName = string_blnDeletePhoneLine; // the name of the IAFEOUT Method which needs to be called
				applSaveActionRow.arrArguments[0] = String.class;
				applSaveActionRow.arrArguments[1] = Character.class;
				applSaveActionRow.arrArguments[2] = String.class;
				applSaveActionRow.arrParams[0] = bNumber.strNumberOld;
				applSaveActionRow.arrParams[1] = Character.valueOf(cPortingFlagOld);
				applSaveActionRow.arrParams[2] = bSession.strUserName;

				// adding the Newly created row to the ApplSaveaction Container/table
				applSaveActionTable.addRecord(applSaveActionRow);

				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
					GLogger.chkpt("");
					GLogger
							.chkpt("     FUNCTION ADDED IN SESSION.  --> blnDeletePhoneLine()");
					GLogger
							.chkpt("     THE NO OF RECORDS IN APPLSAVEACTIONTABLE IS "
									+ (applSaveActionTable.vctGetAll()).size());
					GLogger.chkpt("");
				} // END MODIFY 9.00a
			}

			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger
						.chkpt(" **************  ADDING  blnNewPhoneLine() FOR NEW NUMBER    ******************");
			} // END MODIFY 9.00a

			// BEGIN ADD V5.37a
			// Comment: Fixed the same number already exists in DSL problem
			applSaveActionRow = null;
			applSaveActionRow = applSaveActionTable
					.asarSearchByActionTypeValueMethod(1, string_TELNO,
							bNumber.strNumberOld, "blnNewPhoneLine");

			if (null == applSaveActionRow) {

				// END ADD V5.37a
				applSaveActionRow = new ApplSaveActionRow();
				applSaveActionRow.arrArguments = new Class[18];
				applSaveActionRow.arrParams = new Object[18];

				// Setting the variables of record to entered in Appl Save container
				applSaveActionRow.iAction = Record.INSERT;
				applSaveActionRow.strType = string_TELNO;

				// BEGIN DELETE V5.37a
				// Comment: Fixed the same number already exists in DSL problem
				// applSaveActionRow.strValue            = " ";
				// END DELETE V5.37a
				// BEGIN ADD V5.37a
				// Comment: Fixed the same number already exists in DSL problem
				applSaveActionRow.strValue = bNumber.strNumber;

				// END ADD V5.37a
				applSaveActionRow.strSystem = string_IAFEOUT;
				applSaveActionRow.strMethodName = "blnNewPhoneLine"; // the name of the IAFEOUT Method which needs to be called
				applSaveActionRow.arrArguments[0] = String.class;
				applSaveActionRow.arrArguments[1] = String.class;
				applSaveActionRow.arrArguments[2] = Character.class;
				applSaveActionRow.arrArguments[3] = String.class;
				applSaveActionRow.arrArguments[4] = String.class;
				applSaveActionRow.arrArguments[5] = String.class;
				applSaveActionRow.arrArguments[6] = String.class;
				applSaveActionRow.arrArguments[7] = Long.class;
				applSaveActionRow.arrArguments[8] = Long.class;
				applSaveActionRow.arrArguments[9] = String.class;
				applSaveActionRow.arrArguments[10] = String.class;
				applSaveActionRow.arrArguments[11] = String.class;
				applSaveActionRow.arrArguments[12] = String.class;
				applSaveActionRow.arrArguments[13] = Long.class;
				applSaveActionRow.arrArguments[14] = Long.class;
				applSaveActionRow.arrArguments[15] = Long.class;
				applSaveActionRow.arrArguments[16] = String.class;
				applSaveActionRow.arrArguments[17] = Long.class;
				applSaveActionRow.arrParams[0] = bSession.strUserName;
				applSaveActionRow.arrParams[1] = bNumber.strNumber;
				applSaveActionRow.arrParams[2] = Character.valueOf(cPortingFlag);

				// BEGIN ADD : V3.28
				// Changes done for some Integrations changes with DSL.
				// BEGIN DELETE V 5.43a
				// Comment:Changes for the NP Related Code

				/*
				 * if ( "NP".equalsIgnoreCase(bNumber.strKindOfNumber) )
				 * {
				 *   applSaveActionRow.arrParams[3]      = bNumber.strDonor;
				 */

				// END DELETE V 5.43a
				// BEGIN ADD V 5.43a
				// Comment:Changes for the NP Related Code
				// BEGIN DELETE V 5.46a
				/*
				 * if ( (GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber)) &&
				 *   (!(GAfeConstants.TELE.equalsIgnoreCase(bNumber.strOriginalOwner))))
				 */

				// END DELETE V 5.46a
				// BGIN DELETE V 5.49b
				// Comment: Sending Current owner id to dsl in all case
				/*
				 * //BEGIN ADD V 5.46a
				 * if ( (GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber)) &&
				 *    (null != bNumber.strOriginalOwner) &&
				 *   (!(GAfeConstants.TELE.equalsIgnoreCase(bNumber.strOriginalOwner))))
				 * //END ADD V 5.46a
				 *   {
				 *           applSaveActionRow.arrParams[3]      = bNumber.strCurrentOwner;
				 * //END ADD V 5.43a
				 *   }
				 *   else
				 *   {
				 *       applSaveActionRow.arrParams[3]  = "";
				 *   }
				 * // END ADD : V3.28
				 */

				//              END DELETE V 5.49b
				// BEGIN ADD V 5.49b
				// Comment: Sending Current owner id to dsl in all case
				GLogger.debug("vLocalNewProdLine", "bNumber.strCurrentOwner",
						bNumber.strCurrentOwner);
				applSaveActionRow.arrParams[3] = bNumber.strCurrentOwner;

				// END ADD V 5.49b

				// Changes done for some Integrations changes with DSL.
				applSaveActionRow.arrParams[4] = strCountryCode;
				applSaveActionRow.arrParams[5] = "STAND";
				applSaveActionRow.arrParams[6] = "TEL";
				applSaveActionRow.arrParams[7] = Long.valueOf(lAddressID);
				applSaveActionRow.arrParams[8] = Long.valueOf(lCustomerID);

				if ((null == bCustomerInfo.strFirstName)
						|| ("".equals(bCustomerInfo.strFirstName))) {
					bCustomerInfo.strFirstName = " ";
				} // end of the if loop

				applSaveActionRow.arrParams[9] = bCustomerInfo.strFirstName;
				applSaveActionRow.arrParams[10] = bCustomerInfo.strName;

				if (null != bCustomerInfo.dtBirthDate) {
					applSaveActionRow.arrParams[11] = sdf
							.format(bCustomerInfo.dtBirthDate);
				} else {
					applSaveActionRow.arrParams[11] = null;
				}

				applSaveActionRow.arrParams[12] = bCustomerInfo.strVatNumber;
				applSaveActionRow.arrParams[13] = Long.valueOf(
						bCustomerInfo.lEpithetId);
				applSaveActionRow.arrParams[14] = Long.valueOf(
						bCustomerInfo.lSegmentId);
				applSaveActionRow.arrParams[15] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);
				applSaveActionRow.arrParams[16] = "Vermeld";
				applSaveActionRow.arrParams[17] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);

				// For Saving this at Last
				// applSaveActionRow.bPerformLast        = true;
				// adding the Newly created row to the ApplSaveaction Container/table
				applSaveActionTable.addRecord(applSaveActionRow);

				// BEGIN ADD V5.37a
				// Comment: Fixed the same number already exists in DSL problem
			} else {
				applSaveActionRow.arrParams[0] = bSession.strUserName;
				applSaveActionRow.arrParams[1] = bNumber.strNumber;
				applSaveActionRow.arrParams[2] = Character.valueOf(cPortingFlag);

				// BEGIN DELETE V 5.43a
				// Comment:Changes for the NP Related Code

				/*
				 * if ( "NP".equalsIgnoreCase(bNumber.strKindOfNumber) )
				 * {
				 *   applSaveActionRow.arrParams[3]      = bNumber.strDonor;
				 */

				// END DELETE V 5.43a
				// BEGIN ADD V 5.43a
				// Comment:Changes for the NP Related Code
				// BEGIN DELETE V 5.46a
				/*
				 * if ( (GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber))
				 *   && (!(GAfeConstants.TELE.equalsIgnoreCase(bNumber.strOriginalOwner))))
				 */

				// END DELETE V 5.46a
				// BEGIN ADD V 5.46a
				if ((GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber))
						&& (null != bNumber.strOriginalOwner)
						&& (!(GAfeConstants.TELE
								.equalsIgnoreCase(bNumber.strOriginalOwner))))

				// END ADD V 5.46a
				{
					applSaveActionRow.arrParams[3] = bNumber.strCurrentOwner;

					// END ADD V 5.43a
				} else {
					applSaveActionRow.arrParams[3] = "";
				}

				applSaveActionRow.arrParams[4] = strCountryCode;
				applSaveActionRow.arrParams[5] = "STAND";
				applSaveActionRow.arrParams[6] = "TEL";
				applSaveActionRow.arrParams[7] = Long.valueOf(lAddressID);
				applSaveActionRow.arrParams[8] = Long.valueOf(lCustomerID);

				if ((null == bCustomerInfo.strFirstName)
						|| ("".equals(bCustomerInfo.strFirstName))) {
					bCustomerInfo.strFirstName = " ";
				}

				applSaveActionRow.arrParams[9] = bCustomerInfo.strFirstName;
				applSaveActionRow.arrParams[10] = bCustomerInfo.strName;

				if (null != bCustomerInfo.dtBirthDate) {
					applSaveActionRow.arrParams[11] = sdf
							.format(bCustomerInfo.dtBirthDate);
				} else {
					applSaveActionRow.arrParams[11] = null;
				}

				applSaveActionRow.arrParams[12] = bCustomerInfo.strVatNumber;
				applSaveActionRow.arrParams[13] = Long.valueOf(
						bCustomerInfo.lEpithetId);
				applSaveActionRow.arrParams[14] = Long.valueOf(
						bCustomerInfo.lSegmentId);
				applSaveActionRow.arrParams[15] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);
				applSaveActionRow.arrParams[16] = "Vermeld";
				applSaveActionRow.arrParams[17] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);
				applSaveActionTable.updateRecord(applSaveActionRow);
			}

			// END ADD V5.37a

			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt("");
				GLogger
						.chkpt(" FUNCTION ADDED IN SESSION.  --> blnNewPhoneLine()");
				GLogger.chkpt(" THE NO OF RECORDS IN APPLSAVEACTIONTABLE IS "
						+ (applSaveActionTable.vctGetAll()).size());
				GLogger.chkpt("");
			}
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			} // END MODIFY 9.00a

			throw afee;
		} catch (Exception ex) {
			throw ex;
		}
	}

	/**
	 *  DESCRIPTION :   This function will check whether provisioning has been done for this product
	 *                          :       or not and whether any Move order is with this productline
	 *
	 *  @param          :       CustomerProductLineID
	 *
	 *  @return         :       int
	 *                                  0: Default
	 *                                  1: If CustomerProductLine is already provisioned
	 *                                  2: If there is Move order with status NEW or in INPROGRESS
	 *                  3: If Smart Card Order with status NEW or in INPROGRESS
	 */
	public int iCheckProductLine(long lCustomerProductLineId) throws Exception { // Starting Braces of the method

		/** ************ Variable Declaration Starts *************************************************** */

		// Begin DEL v9.01d
		// CustomerProductLine custProductLineTable = null;                      // CustomerProductLine container initialisation
		// CustomerProductLineRow custProductLineRow = null;                     // CustomerProductLineRow object class initialisation
		// End DEL v9.01d
		ProcessLink processLinkTable = null;

		// Begin DEL v9.01d
		// ProcessLinkRow processLinkRow = null;
		// End DEL v9.01d
		Process processTable = null;
		ProcessRow processRow = null;
		Order orderTable = null;
		OrderRow orderRow = null;
		int iResult = 0; // local variable
		//BEGIN ADD v 9.02e
		long lLineproductId = 0;
		boolean isFullMobileNPNew = false;
		int iProcessStatusType = 0;
		String strOrderParameterValue = null;
		//END ADD v 9.02e

		// Begin DEL v9.01d
		// int iObsolete = 0;            // local variable
		// Date dtActivationDate = null;         // local variable
		// End DEL v9.01d
		Vector vctProcess = null;

		// Begin DEL v9.01d
		// Vector vctOrder = new Vector(1);
		// LAfe lAfe = null;
		// End DEL v9.01d
		// Begin Add : V3.38
		// Commented after discussing with Bart

		/*
		 Vector vctCustApps = null;
		 int iSizeOfApps = 0;
		 CustomerApp2CustomerProductL ca2cpl = null;
		 CustomerApp2CustomerProductLRow CustAppRows = null;
		 CustomerAppointmentRow custAppRow = null;
		 CustomerAppointment customerAppointment = null;
		 */

		//      End Add : V3.38
		//Begin Add v9.02f
		CustomerProductLine custProductLineTable = null; // CustomerProductLine container initialisation
		CustomerProductLineRow custProductLineRow = null;
		//End Add v9.02f
		/** ************ Variable Declaration Ends ****************************************************** */

		/** ************ Main Body of Method Starts ***************************************************** */
		try {
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt("In the iCheckProductLine function.....");
				GLogger.chkpt("lCustomerProductLineId....."
						+ lCustomerProductLineId);
			} // END MODIFY 9.00a

			// getting CustomerProductLine table
			// Begin DEL v9.01d
			// custProductLineTable = (CustomerProductLine) teleSessionMgr.getTable("CUSTOMERPRODUCTLINE");
			// End DEL v9.01d
			// Begin Add : V3.38
			// Commented after discussing with Bart

			/*
			 ca2cpl = (CustomerApp2CustomerProductL) teleSessionMgr.getTable("CUSTOMERAPP2CUSTOMERPRODUCTL");
			 customerAppointment = (CustomerAppointment) teleSessionMgr.getTable("CUSTOMERAPPOINTMENT");
			 */

			//          End Add : V3.38
			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(string_PROCESSLINK);
			processTable = (Process) teleSessionMgr.getTable(string_PROCESS);
			orderTable = (Order) teleSessionMgr.getTable(string_ORDER);

			//Begin Add v9.02f
			custProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE);
			if (null != custProductLineTable) {
				custProductLineRow = custProductLineTable
						.cplrSearchByCustProductLineID(lCustomerProductLineId);
				lLineproductId = custProductLineRow.lProductID;
				GLogger.chkpt("Line productid returned :" + lLineproductId);
			}
			//End Add v9.02f
			// checking the Move order
			if (null != processLinkTable) {
				vctProcess = (Vector) processLinkTable
						.vctSearchByObjectIDandObjectTypeIDandObsolete(
								lCustomerProductLineId,
								GAfeDescription
										.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE),
								FINAL_ZERO);

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
					GLogger.chkpt("iCheckProductLine - " + vctProcess);
				} // END MODIFY 9.00a

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				if ((null != vctProcess) && (FINAL_ZERO != vctProcess.size())) {

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
						GLogger.chkpt("If Condition of iCheckProductLine");
					} // END MODIFY 9.00a

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					for (int iCounter = FINAL_ZERO; iCounter < vctProcess
							.size(); iCounter++) {

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("processTable - " +processTable);
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
						if (null != processTable) {

							/**
							 * **************STARTING*****************TO PRINT THE DATA
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("((ProcessLinkRow)vctProcess.elementAt(iCounter)).lProcessID - "+((ProcessLinkRow)vctProcess.elementAt(iCounter)).lProcessID);
							 * }
							 * /****************ENDING*******************TO PRINT THE DATA******************************************
							 */
							processRow = (ProcessRow) processTable
									.prSearchByProcessIDandObsolete(
											((ProcessLinkRow) vctProcess
													.elementAt(iCounter)).lProcessID,
											FINAL_ZERO);

							/**
							 * **************STARTING*****************TO PRINT THE DATA
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("processRow - "+processRow);
							 * }
							 * /****************ENDING*******************TO PRINT THE DATA******************************************
							 */
							if (null != processRow) {

								/**
								 * **************STARTING*****************TO PRINT THE DATA
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * System.out.println("processRow.lOrderID : " +processRow.lOrderID);
								 * }
								 * /****************ENDING*******************TO PRINT THE DATA******************************************
								 */
								orderRow = null;
								orderRow = (OrderRow) orderTable
										.orSearchByOrderIDandObsolete(
												processRow.lOrderID, FINAL_ZERO);

								if (null != orderRow) {
									 teleSessionMgr.putValue("orderIdForbfrProv",orderRow.lOrderID);
		                             teleSessionMgr.putValue("orderTypeIdForbfrProv",orderRow.lOrderTypeID);
									/**
									 * **************STARTING*****************TO PRINT THE DATA
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("orderRow.lOrderTypeID : " +orderRow.lOrderTypeID);
									 * System.out.println("orderRow.lOrderStatusTypeID : " +orderRow.lOrderStatusTypeID);
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */
									if ((orderRow.lOrderTypeID == GAfeDescription
											.lGetTypeId("ORDERTYPE_MOVE"))
											&& ((orderRow.lOrderStatusTypeID == GAfeDescription
													.lGetTypeId(string_ORDERSTATUSTYPE_NEW)) || (orderRow.lOrderStatusTypeID == GAfeDescription
													.lGetTypeId("ORDERSTATUSTYPE_INPROGRESS")))) {
										iResult = 2;

										break;
									}

									// Begin Add : V7.06g
									if (RProduct.bIsIDTVLine(
											lCustomerProductLineId, true)) {
										if (((orderRow.lOrderTypeID == GAfeDescription
												.lGetTypeId("ORDERTYPE_INSTALL"))
												&& (orderRow.lOrderStatusTypeID == GAfeDescription
														.lGetTypeId(string_ORDERSTATUSTYPE_NEW)) && (orderRow.dtActivationDate != null))) {
											iResult = 1;

											break;
										}
									}

									// End Add : V7.06g
									//BEGIN ADD v 9.02e

									String checkNP = OrderUtils
											.strGetOrderParamFromOrder(
													orderRow.lOrderID,
													CDMConstants.ORDERTYPEPARAMETER71_NUMBERTYPE);
                            
									if (GAfePropertyLoader.DEBUG) {
										GLogger.debug(CLASS_NAME,
												"iCheckProductLine",
												"lLineproductId: "
														+ lLineproductId);
										GLogger.debug(CLASS_NAME,
												"iCheckProductLine",
												"lOrderID: "
														+ orderRow.lOrderID);
									}
									if ((lLineproductId == GAfeDescription.PRODUCT_FULLMOBILE)
											&& (orderRow.lOrderTypeID == GAfeDescription.ORDERTYPE_INSTALL)
											&& checkNP != null
											&& checkNP
													.equalsIgnoreCase(GAfeDescription.NP)
											&& CDMConstants.PROCESSSTATUSTYPE_NEW != (int) LOrder
													.lGetProcessStatusTypeId(processRow.lProcessID)
											&& CDMConstants.PROCESSSTATUSTYPE_COMPLETED != (int) LOrder
													.lGetProcessStatusTypeId(processRow.lProcessID))

									{
										//strOrderParameterValue=ROrder.strGetOrderParamFromOrder(orderRow.lOrderTypeID, CDMConstants.ORDERTYPEPARAMETER71_NUMBERTYPE);
										if (GAfePropertyLoader.DEBUG) {
											GLogger
													.debug(
															CLASS_NAME,
															"iCheckProductLine",
															"strOrderParameterValue..."
																	+ strOrderParameterValue);
										}

										// if (strOrderParameterValue != null && strOrderParameterValue.equalsIgnoreCase(GAfeDescription.NP) && CDMConstants.PROCESSSTATUSTYPE_NEW !=(int)LOrder.lGetProcessStatusTypeId(processRow.lProcessID))
										//{
										//setting flag to true to avoid to follow the  normal cancellation logic.
										isFullMobileNPNew = true;
										iProcessStatusType = (int) LOrder
												.lGetProcessStatusTypeId(processRow.lProcessID);
										if (GAfePropertyLoader.DEBUG) {
											GLogger
													.debug(
															CLASS_NAME,
															"iCheckProductLine",
															"iProcessStatusType: "
																	+ iProcessStatusType);
										}
										/*if (CDMConstants.PROCESSSTATUSTYPE_NEW==iProcessStatusType)
										{
										     //Normal flow to be followed if the process is in new.
										    isFullMobileNPNew=false;
										}  */
										iResult = OrderUtils
												.getNPCancelType(iProcessStatusType);
										break;
										//}
									}
									if (GAfePropertyLoader.DEBUG) {
										GLogger.debug(CLASS_NAME,
												"iCheckProductLine",
												"iResult: " + iResult);
										GLogger.debug(CLASS_NAME,
												"iCheckProductLine",
												"isFullMobileNPNew: "
														+ isFullMobileNPNew);
									}

									if ((orderRow.lOrderTypeID == GAfeDescription.ORDERTYPE_INSTALL)
											&& orderRow.lOrderStatusTypeID == GAfeDescription.ORDERSTATUSTYPE_COMPLETED) {
										iResult = FINAL_ONE;
										break;
									}
									//END ADD v 9.02e

									//BEGIN MODIFY V 9.02e

									if (null == checkNP) {
										checkNP = "";
									}
									if ((orderRow.lOrderTypeID == GAfeDescription
											.lGetTypeId("ORDERTYPE_INSTALL"))
											&& !(orderRow.lOrderStatusTypeID == GAfeDescription
													.lGetTypeId(string_ORDERSTATUSTYPE_NEW))
											&& !(checkNP
													.equalsIgnoreCase(GAfeDescription.NP))) {
										//END MODIFY V 9.02e

										//                                      Begin Add : V3.38
										//                                      Commented after discussing with Bart

										/*                                                                      vctCustApps =  ca2cpl.vctSearchByCustProdLineID(lCustomerProductLineId);
										 iSizeOfApps = vctCustApps.size();
										 if (iSizeOfApps != 0)
										 {
										 for (int iApps = 0;iApps < iSizeOfApps;iApps++)
										 {
										 CustAppRows = (CustomerApp2CustomerProductLRow)vctCustApps.elementAt(iApps);
										 custAppRow = customerAppointment.carSearchByCustApptIDandObsolete(CustAppRows.lCustomerAppointmentID,FINAL_ZERO);
										 if (null != custAppRow && !(custAppRow.lAppointmentStatusID == 7 || custAppRow.lAppointmentStatusID == 6))
										 {
										 */

										//                                      End Add : V3.38
										iResult = 1;

										//                                      Begin Add : V3.38
										//                                      Commented after discussing with Bart

										/*
										 }
										 }
										 }
										 */

										//                                      End Add : V3.38
										break;
									} // todo prad

									// BEGIN ADD V7.06k
									if ((orderRow.lOrderTypeID == GAfeDescription
											.lGetTypeId("ORDERTYPE_MOVE"))
											&& (orderRow.lOrderStatusTypeID == GAfeDescription
													.lGetTypeId("ORDERSTATUSTYPE_COMPLETED"))
											&& (orderRow.dtActivationDate != null)) {
										iResult = 1;

										break;
									}

									// END ADD V7.06k
									// BEGIN ADD V6.20a
									if (((orderRow.lOrderTypeID == CDMConstants.ORDERTYPE_SCSTBACTIVATION)
											|| (orderRow.lOrderTypeID == CDMConstants.ORDERTYPE_SCSTBDEACTIVATION) || (orderRow.lOrderTypeID == CDMConstants.ORDERTYPE_SCSTBMODIFICATION))
											&& (orderRow.lOrderStatusTypeID != GAfeDescription.ORDERSTATUSTYPE_COMPLETED)) {
										iResult = 3;

										break;
									}

									// END ADD V6.20a
								} else {

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
										GLogger
												.chkpt("Migrated Data Problem is Occurring- ");
									} // END MODIFY 9.00a

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									iResult = 1;
								}
							}
						}
					}
				}

				// BEGIN DELETE : VER 2.4
				// else
				// {
				// END DELETE : VER 2.4

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
					GLogger.chkpt("Else Condition of iCheckProductLine");
				} // END MODIFY 9.00a

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				GLogger.chkpt("Check 1");
				// check the productline for creation user migration
				CustomerProductLineRow customerProductLineRow = null;

				customerProductLineTable = (CustomerProductLine) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session

				GLogger.chkpt("Check 2");

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("iCheckProductLine customerProductLineTable - "+customerProductLineTable);
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
				customerProductLineRow = new CustomerProductLineRow();
				if (null != customerProductLineTable)
				{
				customerProductLineRow = customerProductLineTable
						.cplrSearchByCustProductLineIDandObsolete(
								lCustomerProductLineId, FINAL_ZERO);
				}

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("iCheckProductLine customerProductLineRow - "+customerProductLineRow);
				 * System.out.println("iCheckProductLine customerProductLineRow.strCreationUser - "+customerProductLineRow.strCreationUser);
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */

				// begin delete v6.07b
				// if ((null != customerProductLineRow.strCreationUser) && (("MIGRATION").equalsIgnoreCase(String.valueOf(customerProductLineRow.strCreationUser)))) {
				// end delete v6.07b
				// begin add v6.07b
				GLogger.chkpt("Before Null check");
				if(null != customerProductLineRow){

				if ((null != customerProductLineRow.strCreationUser)
						&& ((StringUtils.bCompareStringMigration(customerProductLineRow.strCreationUser)) || ("FULLMVNOMIGRATION"
								.equalsIgnoreCase(customerProductLineRow.strCreationUser)))) {

					// end add v6.07b

					/**
					 * **************STARTING*****************TO PRINT THE DATA
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * System.out.println("customerProductLineRow.dtActivationDate - "+customerProductLineRow.dtActivationDate);
					 * }
					 * /****************ENDING*******************TO PRINT THE DATA******************************************
					 */
					if (null != customerProductLineRow.dtActivationDate) {
						GLogger.chkpt("Inside deact check");

						iResult = 1;

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("Setting iResult = 1");
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
					}
				}

				// BEGIN DELETE : VER 2.4
				// }
				// END DELETE : VER 2.4
			}

			}


			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger
						.chkpt("Function iCheckProductLine Returns : "
								+ iResult);
			} // END MODIFY 9.00a

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		}

		return iResult; // Returning of the business object

		/** ************ Main Body of Method Ends ***************************************************** */
	} // Closing Brace of the method

	//  BEGIN DELETE V 5.43e
	//  Now all the logic will be handled in manager

	/*
	 protected int iChangeNPcase(long lCustomerAppointmentId,long lInputCustomerProductLineId, String strNumberOld,int iInputFlag) throws AfeException
	 {
	 CustomerAppointment custAppTable                                                = null;
	 CustomerAppointmentRow custAppRow                                               = null;
	 CustomerAppointmentRow custAppRowNew                                    = new CustomerAppointmentRow();

	 CustomerAppointment2Order custApp2OrdTable                              = null;
	 CustomerAppointment2OrderRow custApp2OrdRow                             = null;
	 CustomerAppointment2OrderRow custApp2OrdRowNew                  = new CustomerAppointment2OrderRow();

	 CustomerApp2CustomerProductL custApp2CustProdTable              = null;
	 CustomerApp2CustomerProductLRow custApp2CustProdRow             = null;
	 CustomerApp2CustomerProductLRow custApp2CustProdRowNew = new CustomerApp2CustomerProductLRow();

	 ProcessType proTypeTable                                                                = null;
	 ProcessTypeRow  proTypeRow                                                              = new ProcessTypeRow();

	 ProcessLink proLinkTable                                                                = null;
	 ProcessLinkRow proLinkRow                                                               = null;
	 ProcessLinkRow proLinkRowNew                                                    = new ProcessLinkRow();

	 ProcessStatus proStatTable                                                              = null;
	 ProcessStatusRow proStatRow                                                             = new ProcessStatusRow();

	 com.fullgc.afe.db.Process processTable                                  = null;
	 ProcessRow processRow                                                                   = null;
	 ProcessRow processRowNew                                                                = new ProcessRow();

	 Order order                                                                                             = null;
	 OrderRow orderRow                                                                               = null;

	 CustomerLink custLinkTable                                                              = null;
	 CustomerLinkRow custLinkRow                                                             = null;

	 long lOldCustomerAppointmentID                                                  = 0;
	 long lNewCustomerAppointmentID                                                  = 0;
	 long lCustomerLinkId                                                                    = 0;
	 long lCustomerProductLineId                                                             = 0;
	 long lOrderId                                                                                   = 0;
	 long iOtherProductsAttached                                                             = 0;

	 final   int     FINAL_CHANGE                                                            = 1;
	 final   int     FINAL_DELETE                                                            = 0;
	 final   int     FINAL_NP_TN                                                                     = 2;
	 Vector vctcustApp2Order                                                                 = new Vector();
	 Vector vctCustApp2CustProd                                                              = new Vector();
	 Vector vctCustomerProductLineID                                                 = new Vector();
	 int iFlag                                                                                               = 0;
	 Vector vctTemp                                                                                  = new Vector();
	 Vector vctAddress                                                                               = new Vector();
	 Vector vctProcessLink                                                                   = new Vector();
	 Vector vctOrder                                                                                 = new Vector();
	 BCustomerAddress bCustomerAddress                                               = new BCustomerAddress();
	 LCustomer lCustomer                                                                             = new LCustomer(teleSessionMgr);
	 NPRequest npRequest                                                                             = new NPRequest();
	 LAppointment lAppointment                                                               = new LAppointment(teleSessionMgr);
	 Range aRanges[] = null;



	 //    intializing the variables
	 ApplSaveAction  applSaveActionTable     = null;
	 ApplSaveActionRow applSaveActionRow     = null;

	 applSaveActionRow = new ApplSaveActionRow();
	 applSaveActionRow.arrArguments = new Class [1];
	 applSaveActionRow.arrParams = new Object [1] ;

	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("-----------------First Line of the iChangeNPcase---------------");
	 System.out.println("-----lCustomerAppointmentId ---------------"+lCustomerAppointmentId);
	 System.out.println("-----lInputCustomerProductLineId ---------------"+lInputCustomerProductLineId);
	 }
	 try
	 {
	 if(makeAFEConnection())
	 {
	 lOldCustomerAppointmentID=lCustomerAppointmentId;

	 //    getting the customerAppointment Table from session
	 custAppTable=(CustomerAppointment)teleSessionMgr.getTable("CUSTOMERAPPOINTMENT");
	 custApp2OrdTable=(CustomerAppointment2Order)teleSessionMgr.getTable("CUSTOMERAPPOINTMENT2ORDER");
	 custApp2CustProdTable=(CustomerApp2CustomerProductL)teleSessionMgr.getTable("CUSTOMERAPP2CUSTOMERPRODUCTL");
	 custLinkTable=(CustomerLink)teleSessionMgr.getTable("CUSTOMERLINK");
	 proTypeTable=(ProcessType)teleSessionMgr.getMasterTable("PROCESSTYPE");
	 proLinkTable=(ProcessLink)teleSessionMgr.getTable("PROCESSLINK");
	 order           =       (Order) teleSessionMgr.getTable("ORDER");
	 processTable = (com.fullgc.afe.db.Process)teleSessionMgr.getTable("PROCESS");
	 proStatTable=(ProcessStatus)teleSessionMgr.getTable("PROCESSSTATUS");

	 //    Gets the ApplsaveAction Container/table from session
	 applSaveActionTable=(ApplSaveAction) teleSessionMgr.getTable("APPLSAVEACTION");


	 if(null!=custAppTable && null!=custApp2OrdTable && null!=custApp2CustProdTable && null!=custLinkTable && null!=applSaveActionTable && null!= proTypeTable && null!=proLinkTable && null!=proStatTable )
	 {
	 //    searching the customerAppointment table by CustomerAppointmentId
	 custAppRow=custAppTable.carSearchByCustApptID(lOldCustomerAppointmentID);

	 if(null!=custAppRow)
	 {
	 //    Creating a new record that is to be added in customerAppointment table
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Data Changed/Added for the Appointment Module Starts---------------");

	 //    setting the variable lCustomerLinkID to be used latter
	 lCustomerLinkId                                         =       custAppRow.lCustomerLinkID;

	 //    searching the table customerApp2CustomerProductL table according to old customerAppointmentID
	 vctCustApp2CustProd     =       custApp2CustProdTable.vctSearchByCustApptID(lOldCustomerAppointmentID);

	 if(iInputFlag != FINAL_DELETE || (iInputFlag == FINAL_DELETE && null != vctCustApp2CustProd && vctCustApp2CustProd.size() > 1 ) )
	 {
	 custAppRowNew.lWfmAppointmentID         =       custAppRow.lWfmAppointmentID;
	 custAppRowNew.lCustomerLinkID           =       custAppRow.lCustomerLinkID;

	 custAppRowNew.lAppointmentStatusID      =       custAppRow.lAppointmentStatusID;
	 custAppRowNew.lAppointmentTypeID        =       custAppRow.lAppointmentTypeID;
	 custAppRowNew.lAppointmentSubtypeID     =       custAppRow.lAppointmentSubtypeID;

	 custAppRowNew.lOrderID                          =       custAppRow.lOrderID;
	 custAppRowNew.strCaseNumber                     =       custAppRow.strCaseNumber;

	 custAppRowNew.tmWindowBegin                     =       custAppRow.tmWindowBegin;
	 custAppRowNew.tmWindowEnd                       =       custAppRow.tmWindowEnd;

	 custAppRowNew.strModificationUser       =       bSession.strUserName;
	 custAppRowNew.strCreationUser           =       bSession.strUserName;


	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Data Changed/Added for the Appointment Module Middle---------------");

	 //    setting the remaining variables of new record created
	 custAppRowNew.iStatusInDB                       =       CustomerAppointmentRow.INSERT;
	 lNewCustomerAppointmentID                       =       CustomerAppointmentRow.lNewNr();
	 custAppRowNew.lCustomerAppointmentID=   lNewCustomerAppointmentID;

	 //    inserting that record in customerAppointment table
	 custAppTable.addRecord(custAppRowNew);

	 long lOrderIDPrev       = 0;
	 ProcessLinkRow  processLinkTemp = null;
	 processLinkTemp = proLinkTable.plrSearchByObjectTypeIDNObjectID(GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCTLINE"),lInputCustomerProductLineId);
	 if(null != processLinkTemp && processLinkTemp.iObsolete==0)
	 {
	 processRow              =       processTable.prSearchByProcessID(processLinkTemp.lProcessID);
	 lOrderIDPrev    =       processRow.lOrderID;
	 }

	 //    search the table customerAppointment2order according to old customerAppointmentID
	 vctcustApp2Order=custApp2OrdTable.vctSearchByCustomerAppointmentID(lOldCustomerAppointmentID);

	 //    traversing through all the records obtained from customerAppointment2order
	 for (int iIndex=0;iIndex<vctcustApp2Order.size();iIndex++ )
	 {
	 custApp2OrdRow  =       (CustomerAppointment2OrderRow)vctcustApp2Order.elementAt(iIndex);
	 if(null!=custApp2OrdRow )
	 {
	 if((iInputFlag == FINAL_DELETE &&  lOrderIDPrev == custApp2OrdRow.lOrderID ) )
	 {
	 continue;
	 }
	 else
	 {
	 //    Creating new records in customerAppointment2order table with same ordeId and new customerAppointmentID
	 custApp2OrdRowNew                                                       =       new CustomerAppointment2OrderRow();
	 custApp2OrdRowNew.lOrderID                                      =       custApp2OrdRow.lOrderID;
	 custApp2OrdRowNew.lCustomerAppointmentID        =       lNewCustomerAppointmentID;
	 custApp2OrdRowNew.iStatusInDB                           =       Record.INSERT;
	 custApp2OrdTable.addRecord(custApp2OrdRowNew);
	 }
	 }
	 }
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Data Changed/Added for the Appointment Module Middle 2---------------");


	 //    traversing through all the records obtained from customerApp2customerProductL
	 for (int iIndex=0;iIndex<vctCustApp2CustProd.size();iIndex++)
	 {
	 custApp2CustProdRow     =       (CustomerApp2CustomerProductLRow)vctCustApp2CustProd.elementAt(iIndex);

	 if(null!=custApp2CustProdRow )
	 {
	 vctCustomerProductLineID.addElement(Long.valueOf(custApp2CustProdRow.lCustomerProductLineID) );
	 if((iInputFlag == FINAL_DELETE &&  lInputCustomerProductLineId == custApp2CustProdRow.lCustomerProductLineID ) )
	 {
	 continue;
	 }
	 else
	 {
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Customer Product Line Added ---------------"+custApp2CustProdRow.lCustomerProductLineID);
	 //    creating new Records in customerApp2customerProductL table for new customerAppointmentID
	 custApp2CustProdRowNew                                                  =       new CustomerApp2CustomerProductLRow();
	 custApp2CustProdRowNew.iStatusInDB                              =       Record.INSERT;
	 custApp2CustProdRowNew.lCustomerAppointmentID   =       lNewCustomerAppointmentID;
	 custApp2CustProdRowNew.lCustomerProductLineID   =       custApp2CustProdRow.lCustomerProductLineID;
	 //    storing all the CustomerProductLineID in a vector which is used latter
	 custApp2CustProdRowNew.lCustomerProductLineStatusID=custApp2CustProdRow.lCustomerProductLineStatusID;
	 custApp2CustProdTable.addRecord(custApp2CustProdRowNew);

	 }
	 }
	 }
	 }
	 else
	 {
	 //    traversing through all the records obtained from customerApp2customerProductL
	 for (int iIndex=0;iIndex<vctCustApp2CustProd.size();iIndex++)
	 {
	 custApp2CustProdRow     =       (CustomerApp2CustomerProductLRow)vctCustApp2CustProd.elementAt(iIndex);

	 if(null!=custApp2CustProdRow)
	 {
	 vctCustomerProductLineID.addElement(Long.valueOf(custApp2CustProdRow.lCustomerProductLineID) );
	 }
	 }

	 lNewCustomerAppointmentID       =       lOldCustomerAppointmentID;
	 }

	 //******************************************************
	 Till here we have Related all the orders/productlines to
	 the New Appointment     if its the case of ChangeNSA
	 ******************************************************


	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Data Changed/Added for the Appointment Module Middle 3---------------");

	 //    Getting the Address
	 custLinkRow     =       custLinkTable.clrSearchByCustLinkID(lCustomerLinkId);

	 if(null !=      custLinkRow && makeAFEConnection())
	 {
	 bCustomerAddress=lCustomer.objSelectCustomerAddress(custLinkRow.lAddressID,gConnectAfe);
	 vctAddress.addElement(Long.valueOf(custLinkRow.lAddressID));
	 vctAddress.addElement(bCustomerAddress.strHouseNumber);
	 vctAddress.addElement(bCustomerAddress.strSubHouseNumber);
	 vctAddress.addElement(bCustomerAddress.strBox);
	 vctAddress.addElement(bCustomerAddress.strStreet);
	 vctAddress.addElement(bCustomerAddress.strPostCode);
	 vctAddress.addElement(bCustomerAddress.strCity);
	 }

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Data Changed/Added for the Appointment Module Middle 4---------------");



	 //    Now we need to send NP cancel for all the NP productLine attached to the old CustomerAppointmentID.
	 for (int iIndex=0;iIndex<vctCustomerProductLineID.size();iIndex++)
	 {
	 //    ReSetting the flag to 0
	 iFlag   =       0;

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Inside NPCancel Request---------------");

	 lCustomerProductLineId=((Long)vctCustomerProductLineID.elementAt(iIndex)).longValue();

	 //***********************************************************
	 Making the process CANCELLED for the Line For which we are
	 sending NP Cancel
	 ***********************************************************
	 Vector vctTempProcess   =   (Vector)processLinkTable.vctSearchByObjectIDandObjectTypeIDandObsolete(lCustomerProductLineId, GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCTLINE"), FINAL_ZERO);
	 long lProcessID         = 0;
	 ProcessRow                      processRowIn    = null;
	 ProcessStatusRow        processStatusRowTemp = null;
	 if(null == vctTempProcess)
	 vctTempProcess = new Vector();

	 for (int iCounterTempProcess = 0;iCounterTempProcess< vctTempProcess.size() ; iCounterTempProcess++)
	 {
	 processRowIn = (ProcessRow) processTable.prSearchByProcessID(((ProcessLinkRow)vctTempProcess.elementAt(iCounterTempProcess)).lProcessID);

	 if(null != processRowIn &&  processRowIn.lProcessTypeID == GAfeDescription.lGetTypeId("PROCESSTYPE_NP"))
	 {
	 processStatusRowTemp = (ProcessStatusRow)proStatTable.psrSearchByProcessID(processRowIn.lProcessID);
	 //    BEGIN DELETE V5.21a
	 //    comment : to add an additional chk
	 //    if(null !=    processStatusRowTemp)
	 //    END DELETE V5.21a

	 //    BEGIN ADD V5.21a
	 //    comment: to add chk for status type not cancel
	 if(null !=      processStatusRowTemp && processStatusRowTemp.lProcessStatusTypeID != GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NP_CANCELLED"))
	 //    END ADD V5.21a
	 {
	 //    BEGIN DELETE V5.21a
	 //    comment : only insert to be in process status
	 //************
	 processStatusRowTemp.strModificationUser = bSession.strUserName;
	 processStatusRowTemp.iStatusInDB = Record.UPDATE;
	 processStatusRowTemp.lProcessStatusTypeID = GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NP_CANCELLED");
	 proStatTable.updateRecord(processStatusRowTemp);

	 **********************************
	 //    END DELETE V5.21a

	 //    BEGIN ADD V5.21a
	 //    comment: inserting in process status table for status type cancel

	 //    Inserting a Record in Process Status table
	 processStatusRowTemp = null;

	 processStatusRowTemp    = new ProcessStatusRow();
	 processStatusRowTemp.iStatusInDB=Record.INSERT;
	 processStatusRowTemp.lProcessStatusID=processStatusRowTemp.lNewNr();
	 processStatusRowTemp.lProcessID=processRowIn.lProcessID;
	 processStatusRowTemp.lProcessStatusTypeID=GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NP_CANCELLED");
	 processStatusRowTemp.strCreationUser=bSession.strUserName;
	 processStatusRowTemp.strModificationUser=bSession.strUserName;

	 proStatTable.addUniqueRecord(processStatusRowTemp);

	 //    END ADD V5.21a
	 }
	 }
	 }

	 //**********************
	 END BLOCK
	 ***********************

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------           lCustomerProductLineId          "+lCustomerProductLineId);
	 BNumber bNumberTemp = (BNumber)teleSessionMgr.getValue("BNumber_aCTel");
	 //    BEGIN DELETE V5.43b
	 //    Comment : Chages for NP after review
	 //    if ((lInputCustomerProductLineId == lCustomerProductLineId) && (bNumberTemp != null) && bNumberTemp.strDonorOld != null && !(bNumberTemp.strDonorOld).equalsIgnoreCase(GAfeDescription.strGetProperty("DONORID_X")) )
	 //    END DELETE V 5.43b
	 //    BEGIN ADD V5.43b
	 //    Comment : Chages for NP after review
	 if ((lInputCustomerProductLineId == lCustomerProductLineId)
	 && (bNumberTemp != null)
	 && !(bNumberTemp.strCurrentOwner).equalsIgnoreCase(GAfeConstants.TELE) )
	 //    END ADD V 5.43b
	 {
	 iFlag   =       FINAL_ONE;
	 }
	 else
	 {
	 iFlag = lAppointment.iCheckNP(lCustomerProductLineId);
	 if(iFlag == FINAL_ONE && FINAL_ONE == iCheckToSendNPROrNot(lCustomerProductLineId))
	 {
	 iFlag = FINAL_ONE;
	 }
	 }

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------           iFlag           "+iFlag);

	 //    Changed for the NP - Aging Number Flow


	 //    goto the customerproduct get cust prodparam fullgc wala parameter if fullgc dont do any thing in if loop
	 //    for np

	 //    NP productLine
	 if((iFlag       ==      FINAL_ONE) )
	 {
	 //    adding lCustomerProductLineId to temporary vector
	 vctTemp.clear();
	 vctTemp.addElement(String.valueOf(lCustomerProductLineId));
	 npRequest=lAppointment.objPopulateNP(vctTemp,lOldCustomerAppointmentID,(custAppRow.tmWindowBegin).toString(),vctAddress);

	 npRequest.setField ("INSTALL_ADDRESS_ZIP_CODE",String.valueOf(vctAddress.elementAt(5)));

	 if( lInputCustomerProductLineId == lCustomerProductLineId)
	 {
	 Range   objRange                                                        =        new Range();
	 BNumber bNumber         =       new BNumber();
	 bNumber         =       (BNumber)teleSessionMgr.getValue("BNumber_aCTel");
	 aRanges = npRequest.getRanges();
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------           STARTING_NUMBER         "+strNumberOld);
	 objRange = aRanges[0];
	 objRange.setField("STARTING_NUMBER" ,strNumberOld);
	 objRange.setField("ENDING_NUMBER" , strNumberOld);
	 if(iInputFlag != FINAL_DELETE)
	 {
	 objRange.setField("COMPLEXITY_CODE",bNumber.strTypeOld);
	 objRange.setField("ROUTING_NUMBER", bNumber.strRoutingNoOld);
	 //    BEGIN DELETE V5.43b
	 //    Comment : Chages for NP after review
	 //    npRequest.setField ("CURRENT_DONOR_ID", bNumber.strDonorOld);
	 //    END DELETE V 5.43b
	 //    BEGIN ADD V5.43b
	 //    Comment : Chages for NP after review
	 npRequest.setField ("CURRENT_DONOR_ID", bNumber.strCurrentOwner);
	 //    END ADD V 5.43b
	 }
	 npRequest.setRanges(aRanges);
	 }

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------           npRequest               "+npRequest);

	 //     Setting the values of various variable in ApplSaveAction Row

	 applSaveActionRow = new ApplSaveActionRow();
	 applSaveActionRow.arrArguments = new Class [1];
	 applSaveActionRow.arrParams = new Object [1] ;
	 applSaveActionRow.iAction               = Record.INSERT;
	 applSaveActionRow.strType               = "NPREQUEST";
	 applSaveActionRow.strValue              = " ";
	 applSaveActionRow.strSystem             = "IAFEOUT";
	 applSaveActionRow.strMethodName = "sendNPCancel";       //the name of the IAFEOUT Method which needs to be called

	 applSaveActionRow.arrArguments[0]       = NPRequest.class;
	 applSaveActionRow.arrParams[0]          = npRequest;

	 //    adding the Newly created row to the ApplSaveaction Container/table
	 applSaveActionTable.addRecord(applSaveActionRow);

	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size() );

	 }
	 }
	 }

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------           vctCustomerProductLineID Cleared Here   ");

	 //    BEGIN DELETE V5.21a
	 //    comment :the obsolete of customerProduct is redundant as it is handled earlier in the flow also
	 /*
	 if(iInputFlag == FINAL_NP_TN)
	 {
	 //    Set the Flag in CustomerProductLineTable
	 CustomerProductRow customerProductRowTemp       =       new CustomerProductRow();
	 customerProductTable    =       (CustomerProduct)teleSessionMgr.getTable("CUSTOMERPRODUCT");    // Getting the CustomerProduct table from the session
	 Vector vctCustomerProductTemp   = new Vector();
	 if(null != customerProductTable)
	 {
	 vctCustomerProductTemp  =       customerProductTable.vctSearchByCustomerProductLineIDandObsolete(lInputCustomerProductLineId, FINAL_ZERO);
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------  Vector vctCustomerProductTemp ---------------"+vctCustomerProductTemp);
	 if (null != vctCustomerProductTemp && vctCustomerProductTemp.size()!= FINAL_ZERO)
	 {
	 for (int iCounterTemp = 0; iCounterTemp <  vctCustomerProductTemp.size() ; iCounterTemp++)
	 {
	 customerProductRowTemp = (CustomerProductRow) vctCustomerProductTemp.elementAt(iCounterTemp);

	 if(null != customerProductRowTemp && customerProductRowTemp.lProductID == GAfeDescription.lGetTypeId("PRODUCT_NP"))
	 {
	 //    Updating All the Values Over here
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------  NP Product Deleted ---------------"+customerProductRowTemp.lCustomerProductID);
	 customerProductRowTemp.iObsolete        =       NOTEXISTS;
	 customerProductRowTemp.strModificationUser      = bSession.strUserName;

	 if(customerProductRowTemp.iStatusInDB == Record.VIEW || customerProductRowTemp.iStatusInDB == Record.UPDATE)
	 {
	 customerProductRowTemp.iStatusInDB = Record.UPDATE;
	 customerProductTable.updateRecord(customerProductRowTemp);
	 }
	 //    when iStatusInDB is equal to Record.INSERT
	 else
	 {
	 customerProductRowTemp.iStatusInDB = Record.DELETE;
	 customerProductTable.deleteRecord(customerProductRowTemp.lCustomerProductID);
	 }
	 }
	 }
	 }
	 teleSessionMgr.putTable("CUSTOMERPRODUCT" ,customerProductTable);

	 }//end of the if loop
	 }

	 //    END DELETE V5.21a

	 lAppointment    = new LAppointment(teleSessionMgr);

	 //    Removing all elements the vector
	 vctCustomerProductLineID.clear();

	 //    searching the table customerApp2CustomerProductL table according to New customerAppointmentID
	 vctCustApp2CustProd     =       custApp2CustProdTable.vctSearchByCustApptID(lNewCustomerAppointmentID);

	 //    traversing through all the records obtained from customerApp2customerProductL
	 for (int iIndex=0;iIndex< vctCustApp2CustProd.size();iIndex++)
	 {
	 custApp2CustProdRow=(CustomerApp2CustomerProductLRow)vctCustApp2CustProd.elementAt(iIndex);
	 if(null!=custApp2CustProdRow )
	 {
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------custApp2CustProdRow.lCustomerProductLineID "+custApp2CustProdRow.lCustomerProductLineID);
	 //    ReSetting the flag to 0
	 iFlag   =       FINAL_ZERO ;

	 if((iInputFlag == FINAL_DELETE &&  lInputCustomerProductLineId == custApp2CustProdRow.lCustomerProductLineID))
	 {
	 continue;
	 }
	 else
	 {
	 iFlag = lAppointment.iCheckNP(custApp2CustProdRow.lCustomerProductLineID);
	 }


	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------iFlag              "+iFlag);

	 //    same condition as above if tele net then dont go inside

	 //    NP ProductLine
	 if((iFlag       ==      FINAL_ONE) && (FINAL_ONE == iCheckToSendNPROrNot(custApp2CustProdRow.lCustomerProductLineID)))
	 {
	 //    search in processLink table with ObjectTypeId as customerproductline and objectId as  customerproductlineId
	 vctProcessLink  =       proLinkTable.vctSearchByObjectTypeIDNObjectID(GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCTLINE"),custApp2CustProdRow.lCustomerProductLineID);


	 for (int iIndex01=0;iIndex01<vctProcessLink.size();iIndex01++ )
	 {
	 proLinkRow=(ProcessLinkRow)vctProcessLink.elementAt(iIndex01);

	 if(proLinkRow.iObsolete==0)
	 {
	 processRow      =       processTable.prSearchByProcessID(proLinkRow.lProcessID);
	 lOrderId        =       processRow.lOrderID;
	 orderRow        =       order.orSearchByOrderID(processRow.lOrderID);

	 if(orderRow.lOrderTypeID==GAfeDescription.lGetTypeId("ORDERTYPE_INSTALL")&& orderRow.iObsolete==0 )
	 {
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------processRow.lOrderID                "+processRow.lOrderID);
	 break;
	 }
	 }
	 }

	 //    Inserting a Record in process table
	 processRowNew   = new ProcessRow();
	 processRowNew.iStatusInDB=Record.INSERT;
	 processRowNew.lProcessID=processRowNew.lNewNr();
	 processRowNew.lProcessTypeID=GAfeDescription.lGetTypeId("PROCESSTYPE_NP");
	 processRowNew.lOrderID=lOrderId;
	 processRowNew.strCreationUser=bSession.strUserName;
	 processRowNew.strModificationUser=bSession.strUserName;

	 processTable.addRecord(processRowNew);
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------processTable.addRecord             ");

	 //    Inserting a Record in Process Link table
	 proLinkRowNew   = new ProcessLinkRow();
	 proLinkRowNew.iStatusInDB=Record.INSERT;
	 proLinkRowNew.lProcessLinkID=proLinkRowNew.lNewNr();
	 proLinkRowNew.lProcessID=processRowNew.lProcessID;
	 proLinkRowNew.lObjectTypeID=GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCTLINE");
	 proLinkRowNew.lObjectID=custApp2CustProdRow.lCustomerProductLineID;
	 proLinkRowNew.strCreationUser=bSession.strUserName;
	 proLinkRowNew.strModificationUser=bSession.strUserName;

	 proLinkTable.addRecord(proLinkRowNew);

	 //    Inserting a Record in Process Status table
	 proStatRow      = new ProcessStatusRow();
	 proStatRow.iStatusInDB=Record.INSERT;
	 proStatRow.lProcessStatusID=proStatRow.lNewNr();
	 proStatRow.lProcessID=processRowNew.lProcessID;
	 proStatRow.lProcessStatusTypeID=GAfeDescription.lGetTypeId("PROCESSSTATUSTYPE_NEW");
	 proStatRow.strCreationUser=bSession.strUserName;
	 proStatRow.strModificationUser=bSession.strUserName;

	 proStatTable.addRecord(proStatRow);

	 //    Inserting a record in Process Link table
	 proLinkRowNew   = new ProcessLinkRow();
	 proLinkRowNew.iStatusInDB=Record.INSERT;
	 proLinkRowNew.lProcessLinkID=proLinkRowNew.lNewNr();
	 proLinkRowNew.lProcessID=processRowNew.lProcessID;
	 proLinkRowNew.lObjectTypeID=GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERAPPOINTMENT");
	 proLinkRowNew.lObjectID=lNewCustomerAppointmentID;
	 proLinkRowNew.strCreationUser=bSession.strUserName;
	 proLinkRowNew.strModificationUser=bSession.strUserName;

	 proLinkTable.addRecord(proLinkRowNew);

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------proLinkTable.addRecord             ");
	 //    if( !(iFlag == FINAL_DELETE && lInputCustomerProductLineId == lCustomerProductLineId) )
	 vctCustomerProductLineID.addElement(String.valueOf(custApp2CustProdRow.lCustomerProductLineID));
	 }
	 }
	 }

	 if (!vctCustomerProductLineID.isEmpty())
	 {
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------In side sendNPR            ");

	 npRequest=lAppointment.objPopulateNP(vctCustomerProductLineID,lNewCustomerAppointmentID,(custAppRow.tmWindowBegin).toString(),vctAddress);
	 npRequest.setField ("INSTALL_ADDRESS_ZIP_CODE",String.valueOf(vctAddress.elementAt(5)));


	 //     Setting the values of various variable in ApplSaveAction Row

	 applSaveActionRow = new ApplSaveActionRow();
	 applSaveActionRow.arrArguments = new Class [1];
	 applSaveActionRow.arrParams = new Object [1] ;
	 applSaveActionRow.iAction               = Record.INSERT;
	 applSaveActionRow.strType               = "NPREQUEST";
	 applSaveActionRow.strValue              = " ";
	 applSaveActionRow.strSystem             = "IAFEOUT";
	 applSaveActionRow.strMethodName = "sendNPR";    //the name of the IAFEOUT Method which needs to be called

	 applSaveActionRow.arrArguments[0]       = NPRequest.class;
	 applSaveActionRow.arrParams[0]          = npRequest;

	 //    adding the Newly created row to the ApplSaveaction Container/table
	 applSaveActionTable.addRecord(applSaveActionRow);

	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size() );

	 }
	 }
	 }

	 //    searching the customerAppointment table by CustomerAppointmentId
	 custAppRow=custAppTable.carSearchByCustApptID(lOldCustomerAppointmentID);
	 //    Setting the obsolete flag=0 of the oldCustomerAppointmentId
	 custAppRow.iObsolete                            =       1;
	 custAppRow.strModificationUser          =       bSession.strUserName;

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Data Changed/Added for the Appointment Module Middle---------------");
	 //    Deleting the record corresponding to oldCustomerAppointmentId
	 if(null != custAppRow)
	 {
	 if(custAppRow.iStatusInDB == Record.VIEW || custAppRow.iStatusInDB == Record.UPDATE)
	 {
	 custAppRow.iStatusInDB = Record.UPDATE;
	 custAppTable.updateRecord(custAppRow);
	 }
	 //    when iStatusInDB is equal to Record.INSERT
	 else
	 {
	 custAppRow.iStatusInDB = Record.DELETE;
	 custAppTable.deleteRecord(custAppRow.lCustomerAppointmentID);
	 }
	 }

	 teleSessionMgr.putTable("CUSTOMERAPPOINTMENT",custAppTable);
	 teleSessionMgr.putTable("CUSTOMERAPPOINTMENT2ORDER",custApp2OrdTable);
	 teleSessionMgr.putTable("CUSTOMERAPP2CUSTOMERPRODUCTL",custApp2CustProdTable);
	 teleSessionMgr.putTable("CUSTOMERLINK",custLinkTable);
	 teleSessionMgr.putTable("PROCESS",processTable);
	 teleSessionMgr.putTable("PROCESSLINK",proLinkTable);
	 teleSessionMgr.putTable("PROCESSSTATUS",proStatTable);
	 teleSessionMgr.putTable("APPLSAVEACTION",applSaveActionTable);
	 }
	 }

	 }
	 catch (SQLException sqle)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 sqle.printStackTrace();
	 }
	 AfeException afe = new AfeException("ERRCOM_00001" , sqle.getMessage());                //DataBase Error
	 throw afe;
	 }
	 catch (Exception ex)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 ex.printStackTrace();
	 }
	 AfeException afe = new AfeException("ERRCOM_00002",ex.getMessage());            //UnKnown Exception
	 throw afe;
	 }
	 finally
	 {
	 //    closeAFEConnection(); //closing the connection
	 }

	 return(1);
	 }
	 */

	//  END  DELETE V 5.43e
	/**
	 *  DESCRIPTION :   The Function will Remove all the Forbidden Products from
	 *                                  The upper Grid
	 *
	 *  @param          :       BProductDetailProperty bProductDetailProperty, Vector vctProductSelected, Vector vctProductNonSelected
	 *
	 *  @return         :       Void    -       Does Not Return Anything
	 * /******************************************************************************************************************************
	 */

	/*
	 public Vector vctValidateSCheckProductLine(BProductDetailProperty bProductDetailProperty) throws Exception
	 { //Starting Braces of the Function

	 String  strObjectDesc   =       "";                             //Local Varaible Declaration
	 String  strIZero                =       "0";                    //Local Varaible Declaration
	 String  strIOne                 =       "1";                    //Local Varaible Declaration

	 int iNumberOfTimesPID = 0;              //Local Varaible Declaration
	 int iSizeOfVector       =       0;              //Local Varaible Declaration
	 int iCount = 0;                                 //Local Varaible Declaration
	 int     iCounter        =       0;                      //Local Varaible Declaration

	 Vector  vctProductSelected      = new Vector();
	 Vector  vctValidateSecondCheckProductLine       = new Vector();

	 try
	 {
	 StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry

	 /****************************************    MAKING OF NEXT QUERRY****************************************/

	/*              vctProductSelected      =       bProductDetailProperty.vctProductSelected;

	 iSizeOfVector   =       vctProductSelected.size();

	 for(iCount = FINAL_ZERO ; iCount < iSizeOfVector ; iCount++)
	 {
	 /****************STARTING*****************TO PRINT THE DATA********************************************/

	/*                      if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Hi there in the second check ----> " +((BProductDetail)vctProductSelected.elementAt(iCount)).lProductID);
	 }
	 /****************ENDING*******************TO PRINT THE DATA*******************************************/

	/*                      ProductRow      productRow              = null;                                                                 // Initializing the Object Class for the Vat table
	 productTable    =       (Product)teleSessionMgr.getMasterTable("PRODUCT");      // Getting the Vat table from the session

	 productRow      =   (ProductRow)productTable.prSearchByProductIDandObsolete((((BProductDetail)vctProductSelected.elementAt(iCount)).lProductID).longValue(), FINAL_ZERO);

	 iCounter        =       iFindProductInVector(vctProductSelected, Long.valueOf(productRow.lProductID));

	 /****************STARTING*****************TO PRINT THE DATA********************************************/

	/*                      if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Hi there sachin iCounter = " +iCounter);
	 System.out.println("Hi there sachin iCounter = " +productRow.iMinSelectable);
	 System.out.println("Hi there sachin iCounter = " +productRow.iMaxSelectable);
	 }
	 /****************ENDING*******************TO PRINT THE DATA*******************************************/

	/*                          if((iCounter < productRow.iMinSelectable))
	 {
	 strObjectDesc   =       strFindDescription(productRow.lDescription1ID);

	 vctValidateSecondCheckProductLine.addElement(strObjectDesc);
	 vctValidateSecondCheckProductLine.addElement(strIZero);

	 }//end of the if loop
	 if((iCounter > productRow.iMaxSelectable))
	 {
	 strObjectDesc   =       strFindDescription(productRow.lDescription1ID);

	 vctValidateSecondCheckProductLine.addElement(strObjectDesc);
	 vctValidateSecondCheckProductLine.addElement(strIOne);

	 }//end of the if loop

	 }//end of the for loop


	 }//end of the try loop
	 catch (Exception e)
	 {
	 throw e;
	 }
	 finally
	 {

	 }

	 //    Returning of the String
	 return vctValidateSecondCheckProductLine;

	 } //Closing Brace of the function
	 */

	/**
	 *  DESCRIPTION :   The Function will give that how many times the Product is there in the
	 *                                  the passed Vector
	 *
	 *  @param          :       Vector vctFindProductInVector, Long lOptionProductID
	 *
	 *  @return         :       int     -       Returns a Integer
	 * /******************************************************************************************************************************
	 */
	protected int iFindProductInSelectedVector(Vector vctFindProductInVector,
			Long lOptionProductID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iNumberOfTimesOPID = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		iSizeOfVector = vctFindProductInVector.size();

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if ((String.valueOf(lOptionProductID)).equals(String
					.valueOf(((BProductDetail) vctFindProductInVector
							.elementAt(iCount)).lOptionProductID))) {
				iNumberOfTimesOPID++;
			} // end of the if loop
		} // end of the for loop

		// Returning of the String
		return iNumberOfTimesOPID;
	} // Closing Brace of the function

	public long iValidateAccount(long lCustomerProductLineId)
			throws AfeException {
		CustomerChargeType custChargeType = null;
		CustomerChargeTypeRow custChargeTypeRow = null;
		Vector vctCustChargeType = null;
		long lCustomerAccountId = 0;

		// Begin DEL v9.01d
		// long lCustomerAccountTempId = 0;
		// End DEL v9.01d

		try {

			// Getting the customerChargeType table from session
			custChargeType = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);

			if (null != custChargeType) {

				// searching the CustomerChargeType table according to given customerProductLineId and obsolete=0
				vctCustChargeType = custChargeType
						.vctSearchByCustomerProductLineIDandObsolete(
								lCustomerProductLineId, 0);

				if (null != vctCustChargeType) {
					for (int iCounter = FINAL_ZERO; iCounter < vctCustChargeType
							.size(); iCounter++) {
						custChargeTypeRow = (CustomerChargeTypeRow) vctCustChargeType
								.elementAt(iCounter);

						if (iCounter == FINAL_ZERO) {
							lCustomerAccountId = custChargeTypeRow.lCustomerAccountID;
						} else {
							custChargeTypeRow = (CustomerChargeTypeRow) vctCustChargeType
									.elementAt(iCounter);

							if (lCustomerAccountId != custChargeTypeRow.lCustomerAccountID) {
								throw new AfeException("ERRAFE_00477");
							}
						}
					}
				}
			}
		} // try block ends
		catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
			} // END MODIFY 9.00a

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// return CustomerAccountId
		return (lCustomerAccountId);
	}

	/** *************************************************************************************************************************** */

	/** ************************************************PRODUCT PROPERTY SCREEN FUNCTIONS****************************************** */

	/** *************************************************************************************************************************** */

	/**
	 *  DESCRIPTION :   This function will all the details related to Internet product from session.
	 *
	 *  @param          :       Long CustomerProductLine Id,long lCustomerId,long lproductId
	 *
	 *  @return         :       BInternet Object-containing all details for Internet product
	 */
	protected BInternet objInternetDetail(long lCustomerProductLineId,
			long lCustomerId, long lproductId) throws AfeException {

		// Variable Intialization
		CustomerProductLineIdentifier custProdLIdenTable = null;
		CustomerProductLineIdentifierRow custProdLIdenRow = null;
		CustomerProduct custProdTable = null;
		CustomerProductRow custProdRow = null;
		long lCustomerPLIdentifierID = 0;
		Vector vctCustProdLine = null;
		Vector vctTemp = null;
		BInternet bInternet = new BInternet();

		// Assigning the values to the BInternet Object variables
		bInternet.vctInternetDetail = new Vector();
		bInternet.lCustomerId = lCustomerId;
		bInternet.lCustomerProductLineId = lCustomerProductLineId;

		if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
			GLogger.chkpt("reached function objInternetDetail..");
		} // END MODIFY 9.00a

		try {

			// Getting the CustomerProductLineIdentifier and customerProduct tables from session
			custProdLIdenTable = (CustomerProductLineIdentifier) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);
			custProdTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT);

			if ((null != custProdTable) && (null != custProdLIdenTable)) {

				// Getting the master Login
				// searching the rows in customer product by CustomerProductLine Id and ProductId in CustomerProduct
				if (lproductId == GAfeDescription.lGetTypeId(string_PRODUCT_VON)) {

					// BEGIN DELETE V7.05e: packageId cannot be hard coded as now 2 packages possible
					// lproductId = GAfeDescription.lGetTypeId("PRODUCT_NETPHONE");
					// END DELETE V7.05e
					// BEGIN ADD V7.05e
					lproductId = ProductUtils
							.lGetPackageProduct(lCustomerProductLineId);

					// END ADD V7.05e
				}

				custProdRow = custProdTable
						.cprSearchByCustProductLineIDAndProductID(
								lCustomerProductLineId, lproductId);

				if (null != custProdRow) {
					lCustomerPLIdentifierID = custProdRow.lCustomerPLIdentifierID;

					// searching the row in customerproductlineIdentifier by CustomerProductLineIdentifierId in CustomerProductLineIdentifierId
					custProdLIdenRow = custProdLIdenTable
							.cplirSearchByCustProductIdentifierIDandObsolete(
									lCustomerPLIdentifierID, FINAL_ZERO);

					if (null != custProdLIdenRow) {
						vctTemp = new Vector(); // Creating Temporaray vector
						vctTemp
								.addElement(custProdLIdenRow.strCustomerPLIdentifierValue); // adding the Login Id

						// Modify V7.05e - If line is Von, login is called not Master hence value 0
						// if (lproductId == GAfeDescription.lGetTypeId("PRODUCT_NETPHONE"))
						if (GAfeDescription.bCheckInLongList(lproductId,
								GAfeDescription.VON_PACKAGE_PRODUCTID))

						// Modift V7.05e
						{
							vctTemp.addElement(Integer.valueOf(0)); // addind Interger object containing 0 to indicate  it as NON- Master Login
						} else {
							vctTemp.addElement(Integer.valueOf(1)); // addind Interger object containing 1 to indicate  it as Master Login
						}

						bInternet.strOldMasterLogin = custProdLIdenRow.strCustomerPLIdentifierValue;
						bInternet.strNewMasterLogin = custProdLIdenRow.strCustomerPLIdentifierValue;
						bInternet.vctInternetDetail.addElement(vctTemp); // adding the Tempory Vector to the buisness object
					}
				}

				// getting the child logins
				// searching the rows by CustomerProductLine Id in CustomerProduct
				vctCustProdLine = custProdLIdenTable
						.vctSearchByCustProdLineIDandObsolete(
								lCustomerProductLineId, FINAL_ZERO);

				if (null != vctCustProdLine) {
					for (int iIndex = 0; iIndex < vctCustProdLine.size(); iIndex++) {
						custProdLIdenRow = (CustomerProductLineIdentifierRow) vctCustProdLine
								.elementAt(iIndex);

						if (null != custProdLIdenRow) {

							// This if condition checks for customerProductlineIdentifier value equal to master login's customerProductlineIdentifierid
							if ((custProdLIdenRow.lCustomerPLIdentifierID != lCustomerPLIdentifierID)
									&& (custProdLIdenRow.lProductLineIdentifierTypeID == GAfeDescription.PRODUCTLINEIDENTIFIERTYPE_LOGIN)) {
								vctTemp = new Vector(2); // Creating Temporaray vector
								vctTemp
										.addElement(custProdLIdenRow.strCustomerPLIdentifierValue); // adding the Login Id
								vctTemp.addElement(Integer.valueOf(0)); // addind Interger object containing 0 to indicate it as Child Login
								bInternet.vctInternetDetail.addElement(vctTemp); // adding the Tempory Vector to the buisness object
							}
						}
					}
				}

				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
					GLogger.chkpt("bInternet.vctInternetDetail size.."
							+ bInternet.vctInternetDetail.size());
				} // END MODIFY 9.00a

				teleSessionMgr.putTable(string_CUSTOMERPRODUCTLINEIDENTIFIER,
						custProdLIdenTable); // Putting the table back into session
				teleSessionMgr.putTable(string_CUSTOMERPRODUCT, custProdTable);
			}
		} catch (Exception ex) // catch block
		{
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return bInternet; // Returing the populated BInternet Object
	}

	/** *********************************************************************************************************************** */

	/** *********************************************************************************************************************** */

	/**
	 *  DESCRIPTION :   This function will get all details about CPS screen
	 *
	 *  @param          :       CustomerProductLineID, CustomerID, ProductID
	 *
	 *  @return         :       BIntro - business object
	 */
	public BIntro objLoadProductIntro(long lCustomerProductLineId,
			long lCustomerId, long lProductId) throws Exception { // Starting Braces of the method

		/** ************ Variable Declaration Starts *************************************************** */
		BIntro bIntro = null; // variable for BIntro class
		CustomerProduct custProductTable = null; // CustomerProduct container initialisation
		CustomerProductRow custProductRow = null; // CustomerProductRow object class initialisation
		CustomerProductLineIdentifier custPLIdentifierTable = null; // CustomerProductLineIdentifier container initialisation
		CustomerProductLineIdentifierRow custPLIdentifierRow = null; // CustomerProductLineIdentifierRow object class initialisation
		CustomerProductParameter custProductParameterTable = null; // CustomerProductParameter container initialisation
		CustomerProductParameterRow custProductParameterRow = null; // CustomerProductParameterRow object class initialisation
		long lCPSProductID = 0; // local variable for storing CPS product id
		long lDonor = 0; // local variable for storing Donor id
		long lDonorKlantNo = 0; // local variable for storing klant donor no
		long lRemarks = 0; // local variable for storing Remarks description id
		int iCounter = 0; // local variable for for loop
		Vector vctRecords = null; // local vector

		/** ************ Variable Declaration Ends ****************************************************** */

		/** ************ Main Body of Method Starts ***************************************************** */
		try {

			// getting the CPS Detail product id, donor id, klant donor no and remarks from property file
			if (null != GAfeDescription.strGetProperty("PRODUCT_CPSDETAIL")) {
				lCPSProductID = Long.valueOf(GAfeDescription
						.strGetProperty("PRODUCT_CPSDETAIL")).longValue();
			}

			if (null != GAfeDescription
					.strGetProperty("PRODUCTPARAMETER_CPSDONOR")) {
				lDonor = Long.valueOf(GAfeDescription
						.strGetProperty("PRODUCTPARAMETER_CPSDONOR"))
						.longValue();
			}

			if (null != GAfeDescription
					.strGetProperty("PRODUCTPARAMETER_DONORKLANTNO")) {
				lDonorKlantNo = Long.valueOf(GAfeDescription
						.strGetProperty("PRODUCTPARAMETER_DONORKLANTNO"))
						.longValue();
			}

			if (null != GAfeDescription
					.strGetProperty("PRODUCTPARAMETER_CPSREMARKS")) {
				lRemarks = Long.valueOf(GAfeDescription
						.strGetProperty("PRODUCTPARAMETER_CPSREMARKS"))
						.longValue();
			}

			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger
						.chkpt("************************************************");
				GLogger.chkpt("lCPSProductID : " + lCPSProductID);
				GLogger.chkpt("lDonor : " + lDonor);
				GLogger.chkpt("lDonorKlantNo : " + lDonorKlantNo);
				GLogger.chkpt("lRemarks : " + lRemarks);
				GLogger
						.chkpt("************************************************");
			} // END MODIFY 9.00a

			// instantiating the business object class
			bIntro = new BIntro();
			bIntro.lCustomerProductLineID = lCustomerProductLineId;

			// getting CustomerProduct, CustomerProductLineIdentifier and CustomerProductParameter tables
			custProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT);
			custPLIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);
			custProductParameterTable = (CustomerProductParameter) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTPARAMETER);

			if (null != custProductTable) {

				// get record from the CustomerProduct table for given CustomerProductLineId and product id
				custProductRow = (CustomerProductRow) custProductTable
						.cprSearchByCustProductLineIDAndProductID(
								lCustomerProductLineId, lProductId);

				if (null != custPLIdentifierTable) {
					if (null != custProductRow) {

						// get record from the CustomerProductLineIdentifier table for given CustomerProductLineIdentifierId
						custPLIdentifierRow = (CustomerProductLineIdentifierRow) custPLIdentifierTable
								.cplirSearchByCustProductIdentifierIDandObsolete(
										custProductRow.lCustomerPLIdentifierID,
										FINAL_ZERO);

						if (null != custPLIdentifierRow) {
							bIntro.strNumber = String
									.valueOf(custPLIdentifierRow.strCustomerPLIdentifierValue);
							bIntro.strOldNumber = String
									.valueOf(custPLIdentifierRow.strCustomerPLIdentifierValue);
						}

						if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
							GLogger.chkpt("bIntro.strNumber : "
									+ bIntro.strNumber);
						} // END MODIFY 9.00a
					}
				}

				// initialising
				custProductRow = null;

				// get record from the CustomerProduct table for given CustomerProductLineId and CPS Detail product id
				custProductRow = (CustomerProductRow) custProductTable
						.cprSearchByCustProductLineIDAndProductID(
								lCustomerProductLineId, lCPSProductID);

				if (null != custProductRow) {
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
						GLogger.chkpt("" + custProductRow.lCustomerProductID);
					} // END MODIFY 9.00a

					if (null != custProductParameterTable) {

						// get record from the CustomerProductParameter table for given CustomerProductId
						vctRecords = (Vector) custProductParameterTable
								.vctSearchByCustomerProductID(custProductRow.lCustomerProductID);

						if ((null != vctRecords)
								&& (FINAL_ZERO != vctRecords.size())) {
							if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
								GLogger.chkpt("vctRecords.size():"
										+ vctRecords.size());
							} // END MODIFY 9.00a

							for (iCounter = FINAL_ZERO; iCounter < vctRecords
									.size(); iCounter++) {
								custProductParameterRow = (CustomerProductParameterRow) vctRecords
										.elementAt(iCounter);

								if (null != custProductParameterRow) {
									if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
										GLogger
												.chkpt("custProductParameterRow.lProductParameterID:"
														+ custProductParameterRow.lProductParameterID);
									} // END MODIFY 9.00a

									if (lDonor == custProductParameterRow.lProductParameterID) {

										// get the donor name
										bIntro.strDonor = custProductParameterRow.strCustomerProductParameterValue;
										bIntro.strOldDonor = custProductParameterRow.strCustomerProductParameterValue;
									}

									if (lDonorKlantNo == custProductParameterRow.lProductParameterID) {

										// get the customer donor id
										bIntro.strDonorCustomerID = custProductParameterRow.strCustomerProductParameterValue;
										bIntro.strOldDonorCustomerID = custProductParameterRow.strCustomerProductParameterValue;
									}

									if (lRemarks == custProductParameterRow.lProductParameterID) {

										// get the remarks
										bIntro.strRemarks = custProductParameterRow.strCustomerProductParameterValue;
										bIntro.strOldRemarks = custProductParameterRow.strCustomerProductParameterValue;
									}
								}
							}

							if ("belgacom".equalsIgnoreCase(bIntro.strDonor)) {
								bIntro.lDonorCustomerID = (Long.valueOf(
										bIntro.strDonorCustomerID.substring(0,
												9))).longValue();
								bIntro.lOldDonorCustomerID = (Long.valueOf(
										bIntro.strOldDonorCustomerID.substring(
												0, 9))).longValue();
							} // BEGIN MODIFY 9.00a

							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("bIntro.strDonor : "
										+ bIntro.strDonor);
							}

							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("bIntro.strDonorCustomerID : "
										+ bIntro.strDonorCustomerID);
							}

							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("bIntro.strRemarks : "
										+ bIntro.strRemarks);
							} // END MODIFY 9.00a
						}
					}
				}
			}
		} catch (AfeException afee) {
			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		}

		return bIntro; // Returning of the business object

		/** ************ Main Body of Method Ends ***************************************************** */
	} // Closing Brace of the method

	/**
	 *  DESCRIPTION :   This function will send print request
	 *
	 *  @param          :       BProductDetailProperty
	 *
	 *  @return         :       int
	 */
	public int iSendLOA(BProductDetailProperty bProductDetailProperty)
			throws Exception { // Starting Braces of the method

		/** ************ Variable Declaration Starts *************************************************** */
		Document docTable = null; // Document container initialisation
		DocumentRow docRow = null; // DocumentRow object class initialisation
		DocumentType docTypeTable = null; // DocumentType container initialisation

		// Begin DEL v9.01d
		// DocumentTypeRow docTypeRow = null;                    // DocumentTypeRow object class initialisation
		// End DEL v9.01d

		// BEGIN Commenting for Ver5.96d
		// PrintHeader printHeaderTable = null;                          // PrintHeaderTable container initialisation
		// PrintHeaderRow printHeaderRow = null;                 // PrintHeaderRow object class initialisation
		// END Commenting for Ver5.96d
		// begin delete V5.61a
		// PrintBody printBodyTable                  = null;                             // PrintBodyTable container initialisation
		// PrintBodyRow printBodyRow                     = null;                 // PrintBodyRow object class initialisation
		// end delete V5.61a
		ObjectType objTypeTable = null; // ObjectTypeTable container initialisation
		ObjectTypeRow objTypeRow = null; // ObjectTypeRow object class initialisation
		Customer customerTable = null;
		CustomerRow customerRow = null;
		ContactInfo contInfoTable = null;
		ContactInfoRow contInfoRow = null;

		// Begin DEL v9.01d
		// ObjectDescription objDescTable = null;                // ObjectDescription container initialisation
		// ObjectDescriptionRow objDescRow = null;               // ObjectDescriptionRow object class initialisation
		// End DEL v9.01d
		long lDocId = 0; // local variable
		long lDocTypeId = 0; // local variable
		long lObjectTypeId = 0; // local variable
		long lContactInfoID = 0; // local variable
		long lCustLanguageId = 0;

		// Begin DEL v9.01d
		// long lDescId = 0;
		// long lPrintRequestId = 0;
		// String strFirstName = new String("");
		// String strLastName = new String("");
		// String strEmail = new String("");
		// String strFax = new String("");
		// String strDesc = new String("");
		// End DEL v9.01d
		String arrAddressCDM[];

		// Begin DEL v9.01d
		// SimpleDateFormat sdf = new SimpleDateFormat("yyyymmdd");
		// ParsePosition pos = new ParsePosition(0);
		// End DEL v9.01d
		int iResult = 0;

		// BEGIN Coding for Ver5.96d
		ApplSaveAction applSaveContainer = null;
		ApplSaveActionRow applSaveContainerRow = null;
		Vector vctApplSaveAT = null; // Vector of "ApplSaveActionRow" Database Object for given Action and Type

		// Begin DEL v9.01d
		// long lArraySize = 0;
		// End DEL v9.01d
		String strCustomerProductLineID = null;

		// String strOrderID = null;
		com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo objBCustomerInfo = null;
		BAddressInfo objBAddressInfo = null;
		BProductLine objBProductLine = null;

		// END Coding for Ver5.96d

		/** ************ Variable Declaration Ends ****************************************************** */

		/** ************ Main Body of Method Starts ***************************************************** */
		try {

			// getting ObjectType, Document, DocumentType and PrintHeader tables
			objTypeTable = (ObjectType) teleSessionMgr
					.getMasterTable(string_OBJECTTYPE);
			docTable = (Document) teleSessionMgr.getTable("DOCUMENT");
			docTypeTable = (DocumentType) teleSessionMgr
					.getMasterTable("DOCUMENTTYPE");

			// BEGIN Commenting for Ver5.96d
			// printHeaderTable = (PrintHeader) teleSessionMgr.getTable("PRINTHEADER"); // still to be added into CDM
			// END Commenting for Ver5.96d
			// begin delete V5.61a
			// printBodyTable        = (PrintBody) teleSessionMgr.getTable("PRINTBODY"); // still to be added into CDM
			// end delete V5.61a
			customerTable = (Customer) teleSessionMgr.getTable(string_CUSTOMER);
			contInfoTable = (ContactInfo) teleSessionMgr
					.getTable("CONTACTINFO");

			// Begin DEL v9.01d
			// objDescTable = (ObjectDescription) teleSessionMgr.getMasterTable("OBJECTDESCRIPTION");
			// End DEL v9.01d

			/** *********************************************************************************************** */

			/** ************** This is to populate the PrintHeader and PrintBody tables *********************** */

			/** *********************************************************************************************** */
			long lUserCustomerID = 0;
			long lAddressID = 0;

			if (null != teleSessionMgr.getValue(string_BProductDetailRole_aCProduct)) {
				BProductRole bProductRole = new BProductRole();

				// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
				bProductRole = (BProductRole) teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct);

				// Begin DEL v9.01d
				// Vector vctGetProductConnectivityInfo = new Vector();
				// End DEL v9.01d
				lUserCustomerID = ((BProductRoleDetail) (bProductRole.vctProductRole
						.elementAt(FINAL_ZERO))).lCustomerID.longValue();
				lAddressID = ((BProductRoleDetail) (bProductRole.vctProductRole
						.elementAt(FINAL_ZERO))).lAddressID.longValue();
			}

			// getting the name and first name of the customer
			if (null != customerTable) {
				customerRow = (CustomerRow) customerTable
						.crSearchByCustID(lUserCustomerID);

				if (null != customerRow) {

					// Begin DEL v9.01d
					// strFirstName = customerRow.strFirstName;
					// strLastName = customerRow.strName;
					// End DEL v9.01d
					lContactInfoID = customerRow.lContactInfoID;
				}
			}

			// getting the email address and fax number
			if (null != contInfoTable) {
				contInfoRow = (ContactInfoRow) contInfoTable
						.cirSearchByContactInfoID(lContactInfoID);

				if (null != contInfoRow) {

					// Begin DEL v9.01d
					// strEmail = contInfoRow.strEmail;
					// strFax = contInfoRow.strFax;
					// End DEL v9.01d
					lCustLanguageId = contInfoRow.lLanguageID;
				}
			}

			// BEGIN DELETE V5.96q
			// getting the address details
			// arrAddressCDM = arrGetAddress(lAddressID);
			// END DELETE V5.96q

			// BEGIN ADD V5.96q
			arrAddressCDM = RProduct.arrGetAddressDetail(lAddressID,
					(int) lCustLanguageId);

			// END ADD V5.96q

			/** *********************************************************************************************** */

			// getting the ObjectTypeId
			if (null != objTypeTable) {
				objTypeRow = (ObjectTypeRow) objTypeTable
						.otrSearchByObjectName(string_CUSTOMERPRODUCTLINE);

				if (null != objTypeRow) {
					lObjectTypeId = objTypeRow.lObjectTypeID;
				}
			}

			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt("lObjectTypeId....." + lObjectTypeId);
			}

			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("docTable.vctGetAll().size()....."
						+ docTable.vctGetAll().size());
			}

			// ********************
			// getting the DocumentTypeId
			if (null != docTypeTable) {
				if (GAfePropertyLoader.DEBUG) {
					GLogger
							.chkpt("************************************************");
					GLogger.chkpt("..."
							+ GAfeDescription.lGetTypeId("DOCUMENTTYPE_LOA"));
				}

				lDocTypeId = GAfeDescription.lGetTypeId("DOCUMENTTYPE_LOA");

				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("lDocTypeId....." + lDocTypeId);
					GLogger
							.chkpt("************************************************");
				} // END MODIFY 9.00a
			}

			/** *********************************************************************************************** */

			/** ************** This is to populate the PrintHeader and PrintBody tables *********************** */

			/** *********************************************************************************************** */

			// getting the document type description
			/*                      if (null != objDescTable)
			 {
			 objDescRow = (ObjectDescriptionRow) objDescTable.odrSearchByDescIDAndLangID(lDescId ,bSession.lLanguageId);
			 if (null != objDescRow)
			 {
			 strDesc = objDescRow.strDescription;
			 }
			 }
			 */

			// inserting the data into Document table
			if (null != docTable) {
				docRow = new DocumentRow();
				docRow.iStatusInDB = Record.INSERT;

				// Generate new Unique Number for a primary key
				lDocId = docRow.lNewNr();

				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
					GLogger.chkpt("The CustomerProductLineID is : "
							+ bProductDetailProperty.lCustomerProductLineID);
					GLogger.chkpt("lDocId...." + lDocId);
				} // END MODIFY 9.00a

				docRow.lDocumentID = lDocId;
				docRow.lDocumentTypeID = lDocTypeId;
				docRow.lCustomerID = lUserCustomerID;
				docRow.lObjectID = bProductDetailProperty.lCustomerProductLineID
						.longValue();
				docRow.lObjectTypeID = lObjectTypeId;
				docRow.lDocumentStatusID = GAfeDescription
						.lGetTypeId("DOCUMENTSTATUS_NEW");
				docRow.strRemarks = "";
				docRow.strCreationUser = bSession.strUserName;
				docRow.strModificationUser = bSession.strUserName;
				docTable.addUniqueRecord(docRow);

				// Put the container back into the session
				teleSessionMgr.putTable("DOCUMENT", docTable);
				iResult = 1;
			}

			// BEGIN Adding for Ver5.96d
			// strCustomerProductLineID = String.valueOf(lObjectTypeId);
			strCustomerProductLineID = String
					.valueOf(bProductDetailProperty.lCustomerProductLineID
							.longValue());
			applSaveContainer = (ApplSaveAction) teleSessionMgr
					.getTable(string_APPLSAVEACTION);

			if (null != applSaveContainer) {
				vctApplSaveAT = applSaveContainer.vctSearchByActionType(
						Record.INSERT, String.valueOf(lDocTypeId));

				if (null != vctApplSaveAT) {
					for (int iCnt = 0; iCnt < vctApplSaveAT.size(); iCnt++) {
						applSaveContainerRow = (ApplSaveActionRow) vctApplSaveAT
								.elementAt(iCnt);

						if (string_objCreateDocument
								.equalsIgnoreCase(applSaveContainerRow.strMethodName)
								&& strCustomerProductLineID
										.equalsIgnoreCase(applSaveContainerRow.strSystem)) {
							applSaveContainer
									.deleteRecord(applSaveContainerRow.lID);
						}
					}
				}
			}

			BDocumentRequest objBDocumentRequest = null;
			Epithet epithet = (Epithet) teleSessionMgr
					.getMasterTable("EPITHET");

			if (null == objectDescriptionTable) {
				objectDescriptionTable = (ObjectDescription) teleSessionMgr
						.getMasterTable(string_OBJECTDESCRIPTION);
			}

			objBCustomerInfo = new com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo();
			objBAddressInfo = new BAddressInfo();

			// populate the BCustomerInfo business object
			String strCountryName = arrAddressCDM[6];

			objBCustomerInfo = objLoadCustomerInfo(epithet,
					objectDescriptionTable, lUserCustomerID, customerRow,
					contInfoRow, strCountryName, bSession.lLanguageId);

			// populate the BAddressInfo business object
			objBAddressInfo = objLoadAddressInfo(lAddressID, arrAddressCDM);
			objBProductLine = (BProductLine) objLoadProductLine(
					docRow.lDocumentID, teleSessionMgr); // Taken docRow.lDocumentID instead of lDummyDocumentID:Check
			objBDocumentRequest = objLoadDocumentRequest(lUserCustomerID,
					lCustLanguageId, docRow.lDocumentTypeID,
					docRow.lDocumentID, bSession.strUserName, lAddressID,
					objBAddressInfo, objBCustomerInfo, objBProductLine);
			applSaveContainerRow = new ApplSaveActionRow();
			applSaveContainerRow.bPerformLast = true;
			applSaveContainerRow.strType = String.valueOf(lDocTypeId);
			applSaveContainerRow.strValue = String.valueOf(docRow.lDocumentID);
			applSaveContainerRow.iAction = Record.INSERT;
			applSaveContainerRow.strSystem = strCustomerProductLineID;
			applSaveContainerRow.strMethodName = string_objCreateDocument;
			applSaveContainerRow.arrArguments = new Class[1];
			applSaveContainerRow.arrArguments[0] = BDocumentRequest.class;
			applSaveContainerRow.arrParams = new Object[1];
			applSaveContainerRow.arrParams[0] = objBDocumentRequest;
			applSaveContainer.addRecord(applSaveContainerRow);
			teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveContainer);

			// END Adding for Ver5.96d

			/** *********************************************************************************************** */

			/** ************** This is to insert the data into the PrintHeader and PrintBody tables *********** */

			/** *********************************************************************************************** */

			// BEGIN Commenting for Ver5.96d
			// inserting the data into PrintHeader table
			/**
			 * if (null != printHeaderTable)
			 * {
			 *       printHeaderRow = new PrintHeaderRow();
			 *       printHeaderRow.iStatusInDB = Record.INSERT;
			 *
			 *       // Generate new Unique Number for a primary key
			 *       lPrintRequestId = printHeaderRow.lNewNr();
			 *       printHeaderRow.lPrintRequestID = lPrintRequestId;
			 *       printHeaderRow.lCompanyID = GAfeDescription.lGetTypeId("COMPANY_X");
			 *       printHeaderRow.lDocumentTypeID = GAfeDescription.lGetTypeId("DOCUMENTTYPE_LOA");
			 *       printHeaderRow.lCustomerID = lUserCustomerID;
			 *       printHeaderRow.strLanguageCode = String.valueOf(lCustLanguageId);
			 *       printHeaderRow.strCustomerName = strFirstName;
			 *       printHeaderRow.strCustomerLastName = strLastName;
			 *       printHeaderRow.strStreetName = arrAddressCDM[3];
			 *       printHeaderRow.strHouseNumber = arrAddressCDM[0];
			 *       printHeaderRow.strSubHouseNumber = arrAddressCDM[1];
			 *       printHeaderRow.strBox = arrAddressCDM[2];
			 *       printHeaderRow.strZip = arrAddressCDM[5];
			 *       printHeaderRow.strCity = arrAddressCDM[4];
			 *       printHeaderRow.strCountry = arrAddressCDM[6];
			 *       printHeaderRow.strEmail = strEmail;
			 *       printHeaderRow.strFax = strFax;
			 *
			 *       printHeaderRow.strPRStatus = GAfeDescription.strGetProperty("PRINTHEADER_PRINTREQUESTSTATUS_REQUEST");
			 *       printHeaderRow.strDeliveryMechanism = GAfeDescription.strGetProperty("PRINTHEADER_CUSTOMERDELIVERYMECHANISM_PAPER");
			 *
			 *       printHeaderRow.strMessage = "";
			 *
			 *       printHeaderRow.lNoOfCopies = 1;
			 *       printHeaderRow.lDocumentID = lDocId;
			 *
			 *       //begin add V5.61a
			 *       if (null != teleSessionMgr.getValue("BIntro_aCProduct"))
			 *       {
			 *               BIntro bIntro = new BIntro();
			 *               bIntro = (BIntro) teleSessionMgr.getValue("BIntro_aCProduct");
			 *
			 *               printHeaderRow.strDonorCustomerId = bIntro.strDonorCustomerID;
			 *               printHeaderRow.strIntroNumber = bIntro.strNumber;
			 *               printHeaderRow.strProductType = INTRO;
			 *       }
			 *       else
			 *       {
			 *               printHeaderRow.strDonorCustomerId = "";
			 *               printHeaderRow.strIntroNumber = "";
			 *               printHeaderRow.strProductType = "";
			 *       }
			 *
			 *       //BEGIN add V5.61a
			 *       putPrintStatusInSession(printHeaderRow.lPrintRequestID,
			 *                               printHeaderRow.lDocumentID,
			 *                               INSERT,
			 *                               GAfeDescription.DOCUMENTTYPE_LOA,
			 *                               lAddressID
			 *       );
			 *       //END add V5.61a
			 *
			 *       //end add V5.61a
			 *
			 *       printHeaderTable.addUniqueRecord(printHeaderRow);
			 *
			 *       // Put the container back into the session
			 *       teleSessionMgr.putTable("PRINTHEADER", printHeaderTable);
			 * }
			 */
			// END Commenting for Ver5.96d
			// begin delete V5.61a
			// inserting the data into PrintBody table
			/*
			 * if(null != printBodyTable)
			 * {
			 *       printBodyRow = new PrintBodyRow();
			 *       printBodyRow.iStatusInDB = Record.INSERT;
			 *
			 *       // PrintRequestid should be same as printheader table.
			 *
			 *       printBodyRow.lPrintRequestID    = lPrintRequestId;
			 *       printBodyRow.lDocumentTypeID    = GAfeDescription.lGetTypeId("DOCUMENTTYPE_LOA");
			 *       printBodyRow.lCustomerID                = lUserCustomerID;
			 *
			 *       //Confirm with daxesh hardcoding done
			 *       printBodyRow.strPRBodyNo                = "1";
			 *
			 *       if (null != teleSessionMgr.getValue("BIntro_aCProduct"))
			 *       {
			 *               BIntro  bIntro          =       new BIntro();
			 *               bIntro  =       (BIntro)teleSessionMgr.getValue("BIntro_aCProduct");
			 *
			 *               printBodyRow.strPRBodyText              = bIntro.strNumber + bIntro.strDonorCustomerID + "INTRO";
			 *       }
			 *       else
			 *       {
			 *               printBodyRow.strPRBodyText              = "";
			 *       }
			 *
			 *       printBodyTable.addUniqueRecord(printBodyRow);
			 *
			 *       // Put the container back into the session
			 *       teleSessionMgr.putTable("PRINTBODY",printBodyTable);
			 * }
			 */

			// end delete V5.61a
			/** *********************************************************************************************** */

			/** *********************************************************************************************** */
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GLogger.logException(ex);
				
				//ex.printStackTrace(System.out);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		}

		return iResult; // Returning of the business object

		/** ************ Main Body of Method Ends ***************************************************** */
	} // Closing Brace of the method

	/**
	 *  DESCRIPTION :   This function will cancel print request
	 *
	 *  @param          :       BProductDetailProperty
	 *
	 *  @return         :       int
	 */
	public int iCancelLOA(BProductDetailProperty bProductDetailProperty)
			throws Exception { // Starting Braces of the method

		/** ************ Variable Declaration Starts *************************************************** */
		Document docTable = null; // Document container initialisation
		DocumentRow docRow = null; // DocumentRow object class initialisation

		// Begin DEL v9.01d
		// DocumentType docTypeTable = null;                     // DocumentType container initialisation
		// DocumentTypeRow docTypeRow = null;                    // DocumentTypeRow object class initialisation
		// End DEL v9.01d

		// BEGIN Commenting for Ver5.96d
		// PrintHeader printHeaderTable = null;                  // PrintHeaderTable container initialisation
		// PrintHeaderRow printHeaderRow = null;                 // PrintHeaderRow object class initialisation
		// END Commenting for Ver5.96d
		// begin delete V5.61a
		// PrintBody printBodyTable                      = null;                 // PrintBodyTable container initialisation
		// PrintBodyRow printBodyRow                     = null;                 // PrintBodyRow object class initialisation
		// end delete V5.61a
		ObjectType objTypeTable = null; // ObjectTypeTable container initialisation
		ObjectTypeRow objTypeRow = null; // ObjectTypeRow object class initialisation
		long lObjectTypeId = 0; // local variable\
		long lDocId = 0; // local variable\
		int iResult = 0;

		// Begin DEL v9.01d
		// long lPrintRequestId = 0;                                                     // local variable\
		// End DEL v9.01d

		// BEGIN Coding for Ver5.96d
		ApplSaveAction applSaveContainer = null;
		ApplSaveActionRow applSaveContainerRow = null;
		Vector vctApplSaveAT = null; // Vector of "ApplSaveActionRow" Database Object for given Action and Type

		// Begin DEL v9.01d
		// BCustomerOutDocuments[] arrCustomerOutDocuments = null;       //to get the list of all the Documents for the customer
		// BCustomerOutDocuments bCustomerOutDocuments = null;
		// long lArraySize = 0;
		// End DEL v9.01d
		String strCustomerProductLineID = null;
		long lDocTypeId = 0;

		// END Coding for Ver5.96d

		/** ************ Variable Declaration Ends ****************************************************** */

		/** ************ Main Body of Method Starts ***************************************************** */
		try {

			// getting ObjectType, Document, DocumentType and PrintHeader tables
			objTypeTable = (ObjectType) teleSessionMgr
					.getMasterTable(string_OBJECTTYPE);
			docTable = (Document) teleSessionMgr.getTable("DOCUMENT");

			// BEGIN Commenting for Ver5.96d
			// printHeaderTable = (PrintHeader) teleSessionMgr.getTable("PRINTHEADER"); // still to be added into CDM
			// END Commenting for Ver5.96d
			// begin delete V5.61a
			// printBodyTable        = (PrintBody) teleSessionMgr.getTable("PRINTBODY"); // still to be added into CDM
			// end delete V5.61a
			// Begin DEL v9.01d
			// long lUserCustomerID = 0;
			// End DEL v9.01d
			// begin add V5.61a

			// end add V5.61a
			if (null != teleSessionMgr.getValue(string_BProductDetailRole_aCProduct)) {
				BProductRole bProductRole = new BProductRole();

				// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
				bProductRole = (BProductRole) teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct);

				// Begin DEL v9.01d
				// Vector vctGetProductConnectivityInfo = new Vector();
				// lUserCustomerID = ((BProductRoleDetail) (bProductRole.vctProductRole.elementAt(FINAL_ZERO))).lCustomerID.longValue();
				// End DEL v9.01d
				// begin add V5.61a
				/*((BProductRoleDetail) (bProductRole.vctProductRole
						.elementAt(FINAL_ZERO))).lAddressID.longValue();
*/
				// end add V5.61a
			}

			// getting the ObjectTypeId
			if (null != objTypeTable) {
				objTypeRow = (ObjectTypeRow) objTypeTable
						.otrSearchByObjectName(string_CUSTOMERPRODUCTLINE);

				if (null != objTypeRow) {
					lObjectTypeId = objTypeRow.lObjectTypeID;

					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
						GLogger.chkpt("lObjectTypeId....." + lObjectTypeId);
					} // END MODIFY 9.00a
				}
			}

			// updating the Document table
			if (null != docTable) {
				docRow = (DocumentRow) docTable
						.docSearchByObjTypeIdAndObjIdAndObsolete(lObjectTypeId,
								(bProductDetailProperty.lCustomerProductLineID)
										.longValue(), FINAL_ZERO);

				// BEGIN DELETE V4.10i
				// comment:old check did not include the document status " NEW "
				// if(null != docRow)
				// END DELETE V4.10i
				// BEGIN ADD V4.10i
				// comment: new check for status "NEW"
				if ((null != docRow)
						&& (docRow.lDocumentStatusID == GAfeDescription
								.lGetTypeId("DOCUMENTSTATUS_NEW")))

				// END ADD V4.10i
				{
					lDocId = docRow.lDocumentID;

					if (docRow.iStatusInDB == Record.INSERT) {
						docRow.iStatusInDB = Record.DELETE;

						// BEGIN DELETE V 5.96r
						// docRow.iObsolete = 1;
						// END DELETE V 5.96r
						docTable.deleteRecord(docRow.lDocumentID);

						if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
							GLogger.chkpt("Record.INSERT:");
						} // END MODIFY 9.00a

						iResult = 1;
					}

					// BEGIN DELETE V 5.96r

					/*
					 *  Documents should be closed only by a call to cancel document to document handling application
					 * else if (docRow.iStatusInDB == Record.UPDATE)
					 * {
					 *       docRow.iStatusInDB = Record.UPDATE;
					 *       docRow.iObsolete = 1;
					 *       docTable.updateRecord(docRow);
					 *       if (GAfePropertyLoader.DEBUG)
					 *       {
					 *               System.out.println("Record.UPDATE:");
					 *       }
					 *       iResult = 1;
					 * }
					 * else if (docRow.iStatusInDB == Record.VIEW)
					 * {
					 *       docRow.iStatusInDB = Record.UPDATE;
					 *       docRow.iObsolete = 1;
					 *       docTable.updateRecord(docRow);
					 *       if (GAfePropertyLoader.DEBUG)
					 *       {
					 *               System.out.println("Record.VIEW:");
					 *       }
					 *       iResult = 1;
					 * }
					 */

					// END DELETE V 5.96r
				}
			}

			// Put the container back into the session
			teleSessionMgr.putTable("DOCUMENT", docTable);

			// BEGIN Code for Ver5.96d
			// getting the DocumentTypeId
			// BEGIN :Deleted System.out.printlns
			// END: Deleted System.out.printlns
			lDocTypeId = GAfeDescription.lGetTypeId("DOCUMENTTYPE_LOA");

			// strCustomerProductLineID = String.valueOf(lObjectTypeId);
			strCustomerProductLineID = String
					.valueOf(bProductDetailProperty.lCustomerProductLineID
							.longValue());
			applSaveContainer = (ApplSaveAction) teleSessionMgr
					.getTable(string_APPLSAVEACTION);

			if (null != applSaveContainer) {
				vctApplSaveAT = applSaveContainer.vctSearchByActionType(
						Record.INSERT, String.valueOf(lDocTypeId));

				if (null != vctApplSaveAT) {
					for (int iCnt = 0; iCnt < vctApplSaveAT.size(); iCnt++) {
						applSaveContainerRow = (ApplSaveActionRow) vctApplSaveAT
								.elementAt(iCnt);

						if (string_objCreateDocument
								.equalsIgnoreCase(applSaveContainerRow.strMethodName)
								&& strCustomerProductLineID
										.equalsIgnoreCase(applSaveContainerRow.strSystem)) {
							applSaveContainer
									.deleteRecord(applSaveContainerRow.lID);
						}
					}
				}

				// BEGIN ADD V 5.96r
				if (lDocId > 0) {

					// END ADD V 5.96r
					BCustomerOutDocuments objBCustomreOutDocuments = IAFEOUT
							.objGetDocument(lDocId, bSession.lLanguageId);

					if (null != objBCustomreOutDocuments) {

						// if("REQUESTED".equalsIgnoreCase(objBCustomreOutDocuments.getPrintRequestStatus()))
						if ("REQUESTED"
								.equalsIgnoreCase(objBCustomreOutDocuments
										.getPrintRequestStatus())
								|| (GAfeDescription
										.lGetTypeId("DOCUMENTSTATUS_NEW") == objBCustomreOutDocuments
										.getDocumentStatusId())) {
							applSaveContainerRow = new ApplSaveActionRow();
							applSaveContainerRow.bPerformLast = true;
							applSaveContainerRow.strType = String
									.valueOf(lDocTypeId);
							applSaveContainerRow.strValue = String
									.valueOf(lDocId);
							applSaveContainerRow.iAction = Record.DELETE; // Delete
							applSaveContainerRow.strSystem = strCustomerProductLineID;
							applSaveContainerRow.strMethodName = "cancelRequest";
							applSaveContainerRow.arrArguments = new Class[2];
							applSaveContainerRow.arrArguments[0] = Long.class;
							applSaveContainerRow.arrArguments[1] = String.class;
							applSaveContainerRow.arrParams = new Object[2];
							applSaveContainerRow.arrParams[0] = Long.valueOf(
									objBCustomreOutDocuments
											.getPrintRequestId());
							applSaveContainerRow.arrParams[1] = bSession.strUserName;
							applSaveContainer.addRecord(applSaveContainerRow);
						}
					}

					// BEGIN ADD V 5.96r
				}

				// END ADD V 5.96r
				teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveContainer);
			}

			// END Code for Ver5.96da

			/** *********************************************************************************************** */

			/** ***********Updating the PrintHeader and PrintBody tables*************************************** */

			/** *********************************************************************************************** */

			// BEGIN Commenting for Ver5.96d
			// updating the PrintHeader table
			/**
			 * if (null != printHeaderTable)
			 * {
			 *       if (lDocId != 0)
			 *       {
			 *               //BEGIN DELETE V4.10i
			 *               //comment: Old call was paasing DocumentTypeID instead of DocID
			 *               //printHeaderRow = (PrintHeaderRow) printHeaderTable.searchByDocIdAndCustomerID(GAfeDescription.lGetTypeId("DOCUMENTTYPE_LOA"), lUserCustomerID);
			 *               //END DELETE V4.10i
			 *
			 *               //BEGIN ADD V4.10i
			 *               //comment: new call with DocID
			 *               printHeaderRow = (PrintHeaderRow) printHeaderTable.searchByDocIdAndCustomerID(lDocId, lUserCustomerID);
			 *               //END ADD V4.10i
			 *
			 *               if (null != printHeaderRow)
			 *               {
			 *                       lPrintRequestId = printHeaderRow.lPrintRequestID;
			 *
			 *                       if (printHeaderRow.iStatusInDB == Record.INSERT)
			 *                       {
			 *                               printHeaderRow.iStatusInDB = Record.DELETE;
			 *
			 *                               //BEGIN add V5.61a
			 *                               putPrintStatusInSession(printHeaderRow.lPrintRequestID,
			 *                                                       printHeaderRow.lDocumentID,
			 *                                                       DELETE,
			 *                                                       GAfeDescription.DOCUMENTTYPE_LOA,
			 *                                                       lAddressID
			 *                               );
			 *                               //END add V5.61a
			 *
			 *                               printHeaderTable.deleteRecord(printHeaderRow.lPrintRequestID);
			 *
			 *                               if (GAfePropertyLoader.DEBUG)
			 *                               {
			 *                                       System.out.println("Record.INSERT:");
			 *                               }
			 *                               iResult = 1;
			 *                       }
			 *                       else if (printHeaderRow.iStatusInDB == Record.UPDATE)
			 *                       {
			 *
			 *                               printHeaderRow.iStatusInDB = Record.DELETE;
			 *                               //BEGIN add V5.61a
			 *                               putPrintStatusInSession(printHeaderRow.lPrintRequestID,
			 *                                                       printHeaderRow.lDocumentID,
			 *                                                       DELETE,
			 *                                                       GAfeDescription.DOCUMENTTYPE_LOA,
			 *                                                       lAddressID
			 *                               );
			 *                               //END add V5.61a
			 *
			 *                               printHeaderTable.updateRecord(printHeaderRow);
			 *                               if (GAfePropertyLoader.DEBUG)
			 *                               {
			 *                                       System.out.println("Record.UPDATE:");
			 *                               }
			 *                               iResult = 1;
			 *                       }
			 *                       else if (printHeaderRow.iStatusInDB == Record.VIEW)
			 *                       {
			 *                               printHeaderRow.iStatusInDB = Record.DELETE;
			 *
			 *                               //BEGIN add V5.61a
			 *                               putPrintStatusInSession(printHeaderRow.lPrintRequestID,
			 *                                                       printHeaderRow.lDocumentID,
			 *                                                       DELETE,
			 *                                                       GAfeDescription.DOCUMENTTYPE_LOA,
			 *                                                       lAddressID
			 *                               );
			 *                               //END add V5.61a
			 *
			 *                               printHeaderTable.updateRecord(printHeaderRow);
			 *                               if (GAfePropertyLoader.DEBUG)
			 *                               {
			 *                                       System.out.println("Record.VIEW:");
			 *                               }
			 *                               iResult = 1;
			 *                       }
			 *
			 *
			 *                       //BEGIN ADD V4.10i
			 *                       //comment: putting the table intro container
			 *                       teleSessionMgr.putTable("PRINTHEADER", printHeaderTable);
			 *                       //END ADD V4.10i
			 *               }
			 *       }
			 * }
			 * //END Commenting for Ver5.96d
			 * //begin delete V5.61a
			 * // updating the PrintBody table
			 * //              if(null != printBodyTable)
			 * //              {
			 * //System.out.println("came here 8");
			 * //                      if (lDocId != 0)
			 * //                      {
			 * //BEGIN DELETE V4.10i
			 * //comment: Deleted because there can be more than one entry in PrintBody table for a PrintRequestID
			 * //printBodyRow = (PrintBodyRow) printBodyTable.phrSearchByPrintRequestID(lPrintRequestId);
			 * //END DELETE V4.10i
			 *
			 * //BEGIN ADD V4.10i
			 * //comment: Code added to take care of all the entries in the PrintBody table for a PrintRequestID
			 * //                              Vector vctPrintBody = null;
			 * //                              vctPrintBody = printBodyTable.vctSearchByPrintRequestID(lPrintRequestId); //Get all the related records from PrintBody table
			 *
			 * //                              if(null != vctPrintBody)
			 * //                              {
			 * //System.out.println("came here 9");
			 * //                                      for(int iCountOnPrintBody = 0;iCountOnPrintBody < vctPrintBody.size();iCountOnPrintBody++)
			 * //                                      {
			 * //                                              printBodyRow = (PrintBodyRow)vctPrintBody.elementAt(iCountOnPrintBody);
			 * //END ADD V4.10i
			 * //                                              if(null != printBodyRow)
			 * //                                              {
			 * //                                                      if(printBodyRow.iStatusInDB == Record.INSERT)
			 * //                                                      {
			 * //                                                              printBodyRow.iStatusInDB = Record.DELETE;
			 * //                                                              printBodyTable.deleteRecord(printBodyRow.lPrintRequestID);
			 *
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("Record.INSERT:");
			 * }
			 */
			// iResult = 1;
			// }
			// else if(printBodyRow.iStatusInDB == Record.UPDATE)
			// {
			// printBodyRow.iStatusInDB = Record.DELETE;
			// printBodyTable.updateRecord(printBodyRow);
			/**
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("Record.UPDATE:");
			 * }
			 */
			// iResult = 1;
			// }
			// else if (printBodyRow.iStatusInDB == Record.VIEW)
			// {
			// printBodyRow.iStatusInDB = Record.DELETE;
			// printBodyTable.updateRecord(printBodyRow);
			/**
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("Record.VIEW:");
			 * }
			 */
			// iResult = 1;
			// }
			// }
			// BEGIN ADD V4.10i
			// Comment: Closing braces of for and if statements
			// }
			// }
			// END ADD V41.0i
			// }
			// BEGIN ADD V4.10i
			// comment: putting back into container
			// teleSessionMgr.putTable("PRINTBODY",printBodyTable);
			// END ADD V4.10i
			// }
			// end delete V5.61a
			/** *********************************************************************************************** */

			/** *********************************************************************************************** */
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		}

		return iResult; // Returning of the business object

		/** ************ Main Body of Method Ends ***************************************************** */
	} // Closing Brace of the method

	/**
	 *  DESCRIPTION :   This function will check whether provisioning has been done for this product
	 *                          :       or not
	 *
	 *  @param          :       CustomerProductLineID
	 *
	 *  @return         :       boolean
	 */
	public boolean bProdCheckProvision(long lCustomerProductLineId)
			throws Exception { // Starting Braces of the method

		/** ************ Variable Declaration Starts *************************************************** */
		CustomerProductLine custProductLineTable = null; // CustomerProductLine container initialisation
		CustomerProductLineRow custProductLineRow = null; // CustomerProductLineRow object class initialisation
		boolean bIsProvisioned = false; // local variable
		int iObsolete = 0; // local variable
		Date dtActivationDate = null; // local variable

		/** ************ Variable Declaration Ends ****************************************************** */

		/** ************ Main Body of Method Starts ***************************************************** */
		try {
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt("lCustomerProductLineId....."
						+ lCustomerProductLineId);
			} // END MODIFY 9.00a

			// getting CustomerProductLine table
			custProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE);

			// getting the Activation date and obsolete
			if (null != custProductLineTable) {
				custProductLineRow = (CustomerProductLineRow) custProductLineTable
						.cplrSearchByCustProductLineID(lCustomerProductLineId);

				if (null != custProductLineRow) {
					dtActivationDate = custProductLineRow.dtActivationDate;
					iObsolete = custProductLineRow.iObsolete;
				}

				if (GAfePropertyLoader.DEBUG) {

					// BEGIN MODIFY 9.00a
					GLogger.chkpt("dtActivationDate:" + dtActivationDate);
					GLogger.chkpt("CurrentDate:" + new Date());
				}

				if ((new Date()).after(dtActivationDate)
						&& (iObsolete == FINAL_ZERO)) {
					bIsProvisioned = true;

					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("" + bIsProvisioned);
					}
				} else {
					bIsProvisioned = false;

					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("" + bIsProvisioned);
					} // END MODIFY 9.00a
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		}

		return bIsProvisioned; // Returning of the business object

		/** ************ Main Body of Method Ends ***************************************************** */
	} // Closing Brace of the method

	/**
	 *  DESCRIPTION :   This function will check whether provisioning has been done for this product
	 *                          :       or not
	 *
	 *  @param          :       CustomerProductLineID
	 *
	 *  @return         :  Array of string containing the following elements
	 *                          0 = House number
	 *                          1 = sub house number
	 *                          2 = Box
	 *                          3 = Streetname
	 *                          4 = City
	 *                          5 = Zip
	 *                          6 = Country
	 */
	public String[] arrGetAddress(long lAddressID) throws Exception { // Starting Braces of the method

		/** ************ Variable Declaration Starts *************************************************** */
		Address addressTable = null; // CustomerProductLine container initialisation
		AddressRow addressRow = null; // CustomerProductLineRow object class initialisation
		ManualAddress manualAddTable = null; // CustomerProductLine container initialisation
		ManualAddressRow manualAddRow = null; // CustomerProductLineRow object class initialisation
		Country countryTable = null; // Country container initialisation
		CountryRow countryRow = null; // CountryRow object class initialisation
		ObjectDescription objDescTable = null; // ObjectDescription container initialisation
		ObjectDescriptionRow objDescRow = null; // ObjectDescriptionRow object class initialisation
		String[] arrAddress = new String[10];

		// BEGIN DELETE v5.71d
		// ResultSet rsGetData = null;   // Making an Object of the ResultSet
		// CallableStatement csStmt = null;
		// GConnectCatsap gConnect = null;       // Making a variable of connection class of Afe
		// boolean bFlag = false;
		// END DELETE v5.71d
		// BEGIN ADD v5.71d
		AfeNinasOut objAfeNinasOut = null;
		BSAPDetailsFromCATSAP objBsapDetailsFromCATSAP = null;

		// END ADD v5.71d

		/** ************ Variable Declaration Ends ****************************************************** */

		/** ************ Main Body of Method Starts ***************************************************** */
		try {

			// getting Address table
			addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS);

			if (null != addressTable) {
				addressRow = (AddressRow) addressTable
						.adSearchByAddressID(lAddressID);

				if (null != addressRow) {

					// getting the country name
					if (null == countryTable) {
						countryTable = (Country) teleSessionMgr
								.getMasterTable("COUNTRY");
					}

					if (null != countryTable) {
						countryRow = (CountryRow) countryTable
								.astrSearchByCountryID(addressRow.lCountryID);

						if (null != countryRow) {
							objDescTable = (ObjectDescription) teleSessionMgr
									.getMasterTable(string_OBJECTDESCRIPTION);

							if (null != objDescTable) {
								objDescRow = (ObjectDescriptionRow) objDescTable
										.odrSearchByDescIDAndLangID(
												countryRow.lDescriptionID,
												bSession.lLanguageId);

								if (null != objDescRow) {
									arrAddress[6] = (objDescRow.strDescription)
											.trim();
								}
							}
						}
					}

					if (0 != addressRow.lServiceAddressID) {

						// BEGIN ADD v5.71d
						objAfeNinasOut = new AfeNinasOut();
						objBsapDetailsFromCATSAP = objAfeNinasOut
								.objSearchSapDetailBySap(addressRow.lServiceAddressID);

						if (objBsapDetailsFromCATSAP != null) {
							arrAddress[0] = objBsapDetailsFromCATSAP
									.getHouseNo();
							arrAddress[1] = objBsapDetailsFromCATSAP
									.getSubHouseNo();
							arrAddress[2] = objBsapDetailsFromCATSAP.getBox();
							arrAddress[3] = objBsapDetailsFromCATSAP
									.getStreetName();
							arrAddress[4] = objBsapDetailsFromCATSAP.getCity();
							arrAddress[5] = objBsapDetailsFromCATSAP.getZip();
						}

						// END ADD v5.71d
						// BEGIN DELETE v5.71d
						//                        gConnect = new GConnectCatsap(this);  //Establishing Connection
						//                                              bFlag = gConnect.bIsCatsapConnected();
						//                                              if (bFlag)              //If the Connection is made
						//                                              {
						//                                                      // calling the CS_ADDR_CHECK_BY_ADDRESS stored procedure to get the data from Catsap Db
						//                                                      csStmt = gConnect.csPrepareCall("{CALL CS_ADDR_CHECK_BY_SAP(?)}");
						//
						//                                                      if (GAfePropertyLoader.DEBUG)
						//                                                      {
						//                                                              System.out.println("csStmt....... " + csStmt);
						//                                                      }
						//
						//                                                      //Setting IN parameters values
						//                                                      csStmt.setLong(1, addressRow.lServiceAddressID);
						//
						//                                                      // executing the callable statement
						//                                                      rsGetData = csStmt.executeQuery();
						//
						//                                                      if (GAfePropertyLoader.DEBUG)
						//                                                      {
						//                                                              System.out.println("rsGetData : " + rsGetData);
						//                                                      }
						//                                                      if (null != rsGetData)
						//                                                      {
						//                                                              while (rsGetData.next())
						//                                                              {
						//                                                                      arrAddress[5] = (Long.valueOf(rsGetData.getLong("ZIP"))).toString();
						//                                                                      arrAddress[4] = (String) (rsGetData.getString("CITY"));
						//                                                                      arrAddress[3] = (String) (rsGetData.getString("STREETNAME"));
						//                                                                      arrAddress[0] = (String) (rsGetData.getString("HOUSENUMBER"));
						//                                                                      arrAddress[1] = (String) (rsGetData.getString("SUB_HOUSENUMBER"));
						//                                                                      arrAddress[2] = (String) (rsGetData.getString("BOX"));
						//                                                              }
						//
						//                                                              //BEGIN ADD V5.10a
						//                                                              //comment: closing resultset and statement
						//                                                              rsGetData.close();
						//                                                              rsGetData = null;
						//                                                              csStmt.close();
						//                                                              csStmt = null;
						//                                                              //END ADD V5.10a
						//                                                      }
						//                                              }
						// END DELETE v5.71d
					} else if (0 != addressRow.lReferenceAddressID) {
						arrAddress[0] = addressRow.strHouseNumber;
						arrAddress[1] = addressRow.strSubHouseNumber;
						arrAddress[2] = addressRow.strBox;

						// BEGING DELETE V5.95a
						// LN2206- LOA Document not created for Intro Product
						// if (null != addressRow.strHouseNumber && ("").equalsIgnoreCase(addressRow.strHouseNumber.trim()))
						// BEGING DELETE V5.95a
						// BEGING ADD V5.95a
						// LN2206- LOA Document not created for Intro Product
						if ((null != addressRow.strHouseNumber)
								&& (!("")
										.equalsIgnoreCase(addressRow.strHouseNumber
												.trim())))

						// BEGING ADD V5.95a
						{
							LCustomer lCustomer = new LCustomer(teleSessionMgr);
							BCatsapAddress bCatsapAddress = null;

							bCatsapAddress = lCustomer
									.objGetAddressFromSopresIdAndHouseNo(
											addressRow.lReferenceAddressID,
											addressRow.strHouseNumber);
							arrAddress[3] = bCatsapAddress.strStreet;
							arrAddress[4] = bCatsapAddress.strCity;
							arrAddress[5] = bCatsapAddress.strPostcode;
						}
					} else if (0 != addressRow.lManualAddressID) {
						arrAddress[0] = addressRow.strHouseNumber;
						arrAddress[1] = addressRow.strSubHouseNumber;
						arrAddress[2] = addressRow.strBox;
						manualAddTable = (ManualAddress) teleSessionMgr
								.getTable(string_MANUALADDRESS);

						if (null != manualAddTable) {
							manualAddRow = (ManualAddressRow) manualAddTable
									.marSearchByManualAddressID(addressRow.lManualAddressID);

							if (null != manualAddRow) {
								arrAddress[3] = manualAddRow.strStreetName;
								arrAddress[4] = manualAddRow.strCity;
								arrAddress[5] = manualAddRow.strZip;
							}
						}
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		}

		// BEGIN DELETE v5.71d
		//              finally
		//              {
		//                      //BEGIN V5.10a
		//                      //comment: finally closing in case of exception
		//                      try
		//                      {
		//                              if (null != rsGetData)
		//                              {
		//                                      rsGetData.close();
		//                                      rsGetData.getStatement().close();
		//                                      rsGetData = null;
		//                              }
		//                              if (null != csStmt)
		//                              {
		//                                      csStmt.close();
		//                                      csStmt = null;
		//                              }
		//                              if (null != gConnect)
		//                              {
		//                                      gConnect.bClose();
		//                                      gConnect = null;
		//                              }
		//                      }
		//                      catch (Exception e)
		//                      {
		//                              //consume it
		//                      }
		//                      //END ADD V5.10a
		//
		////            gConnect.bClose();      //closing the connection
		//              }
		// END DELETE v5.71d
		return arrAddress;
	}

	/** *********************************************************************************************************************** */

	/** *********************************************************************************************************************** */
	public BAccount objGetAccount(long lCustomerAccountID) throws AfeException {
		CustomerAccount customerAccount = null; // Creating reference of CustomerAccount
		CustomerAccountRow customerAccountRow = null; // Creating reference of CustomerAccountRow
		BAccount bAccount = null; // Creating reference of BAccount
		BSession bSession = null; // Creating reference of BSession

		try {
			if (null != teleSessionMgr.getTable("CUSTOMERACCOUNT")) {
				customerAccount = (CustomerAccount) teleSessionMgr
						.getTable("CUSTOMERACCOUNT");
				customerAccountRow = customerAccount
						.crSearchByCustomerAccountID(lCustomerAccountID);

				if (null != customerAccountRow) {
					bAccount = new BAccount(); // Creating new Object of type BAccount
					bSession = new BSession(); // Creating new Object of type BSession

					if (null != teleSessionMgr.getValue("BSession_Afe")) {
						bSession = (BSession) teleSessionMgr
								.getValue("BSession_Afe");
					} else {
						throw new AfeException(string_ERRCOM_00002);
					}

					bAccount.lCustomerAccountID = customerAccountRow.lCustomerAccountID; // Assigning Value of CustomerAccountID
					bAccount.lCustomerLinkID = customerAccountRow.lCustomerLinkID; // Assigning Value of CustomerLinkID
					bAccount.lCustomerID = bSession.lCustomerId; // Assigning Value of CustomerID
					bAccount.lCurrencyID = customerAccountRow.lCurrencyID;
					bAccount.lPaymentMethodId = customerAccountRow.lPaymentMethodID;
					bAccount.lAccountNo = customerAccountRow.lAccountNumber;
					//11.3 changed for CR 131712 -- get the service segment of the customer
					bAccount.setServiceSegmentId(CustomerUtils.lGetServiceSegmentId(bSession.lCustomerId));

					int iCheckAccountExistence = 0;
					MBillingDetail mBillingDetail = new MBillingDetail(
							teleSessionMgr);

					iCheckAccountExistence = mBillingDetail
							.iCheckAccountExistence(bAccount);

					if (FINAL_ONE == iCheckAccountExistence) {
						bAccount.bArborAccount = true;
					} else {
						bAccount.bArborAccount = false;
					}
				}
			}
		} catch (AfeException afe) {
			if (GAfePropertyLoader.DEBUG) {
				//afe.printStackTrace(System.out);
				GLogger.logException(afe);
			}

			throw afe;
		} catch (Exception e) {
			if (GAfePropertyLoader.DEBUG) {
				//e.printStackTrace(System.out);
				GLogger.logException(e);
			}

			throw new AfeException(string_ERRCOM_00002, e.getMessage());
		}

		return bAccount;
	}

	/**
	 *  DESCRIPTION :   This function closes DB connection.
	 *
	 *  @param          :       none
	 *
	 *  @return         :       Removes the Connection with the db Returns Nothing
	 */
	protected final void closeAFEConnection() throws Exception {
		try {

			// Closes Or Destroys the Connection that has already been
			// established
			if (null != gConnectAfe) {

				// This funciton of gConnectAfe Closes the DB Connection
				gConnectAfe.bClose();
				gConnectAfe = null;
				bConnect = false;
			} else {
				GLogger.chkpt("Inside ELSE statement ");	
				// Do nothing as the main aim of the function has already been meant
			}
		} catch (Exception ex) {
			GLogger.logException(ex);
		}
	}

	/**
	 *  DESCRIPTION :   This function closes DB connection.
	 *
	 *  @param          :       none
	 *
	 *  @return         :       Makes the Connection with the db Returns true is it has been made
	 *                                  Otherwise it returns false
	 */
	protected final boolean makeAFEConnection() throws AfeException {
		boolean bConnected = false;

		try {

			// Make the Connection if the Connection is Not Made
			// This Function has been Specially written for the Connection Handling in case
			// of various Recuresive functions written in this class file the main aim of
			// writting this function is that connection should only be established when the
			// Connection is not there and if the connection is already has been established
			// do not make the connection and continue with the same prior connection.
			if (null == gConnectAfe) {

				// Establishing Connection
				gConnectAfe = new GConnectAfe(this);

				// Making the Connection
				// Connection is made in the GConnectAfe file in the method called bIsConnected
				if (gConnectAfe.bIsConnected()) {

					// Connection has been made Successfully
					bConnected = true;
					bConnect = true;
				} else {
					bConnected = false;
					bConnect = false;

					throw new AfeException("ERRCOM_00012");
				}
			} else {

				// Connection is already Made Do Nothing
				bConnected = true;
			}
		} catch (SQLException sqle) // catch block starts to catch exceptions
		{
			bConnected = false;

			if (GAfePropertyLoader.DEBUG) {
				//sqle.printStackTrace(System.out);
				GLogger.logException(sqle);
			}

			throw new AfeException("ERRCOM_00001", sqle.getMessage()); // Database error occured;
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			bConnected = false;

			if (GAfePropertyLoader.DEBUG) {
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			bConnected = false;
			gConnectAfe = null;

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // Database error occured

			throw afee;
		}

		return bConnected;
	}

	/**
	 *  DESCRIPTION :   This method will get the customer name from CDM.
	 *
	 *  @param          :       CustomerID
	 *
	 *  @return         :       String Customer Name
	 */
	public String strGetCustomerName(long lCustomerID) throws SQLException,
			Exception { // Starting Braces of the method

		/** ************ Variable Declaration Starts *************************************************** */
		ResultSet rsGetData = null; // Making an Object of the ResultSet
		String strCustomerName = null;

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b

		/** ************ Variable Declaration Ends ****************************************************** */

		/** ************ Main Body of Method Starts ***************************************************** */
		try {
			if (makeAFEConnection()) // If the Connection is made
			{
				StringBuffer sbfSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				sbfSql.setLength(0); // Initialising

				// BEGIN DELETE V 5.70b
				// /* Making the Querry Statement */
				// sbfSql.append("SELECT FirstName, Name FROM Customer WHERE obsolete = 0 AND customerid = ").append(lCustomerID);
				// /* Printing out the Querry made prior to its firing */
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println("The Querry is : " + sbfSql.toString());
				// }
				// /* Firing the Querry and taking the Result as a ResultSet */
				// rsGetData = gConnectAfe.rsQuery(sbfSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				sbfSql
						.append("SELECT FirstName, Name FROM Customer WHERE obsolete = 0 AND customerid = ?");
				psSelect = gConnectAfe.psPrepareStatement(sbfSql.toString());
				psSelect.setLong(1, lCustomerID);
				rsGetData = psSelect.executeQuery();

				// END ADD V 5.70b

				/*
				 *       Making a WHILE Loop that moves from the first Record to the Last Record
				 *   and in which we add all the result's to a local internal vector which
				 *   further adds the record to the external vector that is returned.
				 *   Each Record in the External Vector is added as a Row of all the Records
				 *   that are fetched from the ResultSet's each Row
				 */
				if (null != rsGetData) {
					while (rsGetData.next()) {
						strCustomerName = rsGetData.getString("FirstName");
						strCustomerName = strCustomerName + " "
								+ rsGetData.getString("Name");
					}

					// BEGIN ADD V5.10a
					// comment: closing the open resultset
					if (null != rsGetData) {
						rsGetData.close();

						// BEGIN DELETE V 5.70b
						// rsGetData.getStatement().close();
						// END DELETE V 5.70b
						rsGetData = null;
					}

					// END ADD V5.10a
				}
			}
		} catch (SQLException sqle) {
			AfeException afe = new AfeException("ERRCOM_00008", sqle
					.getMessage()); // Unable to translate query Database access unsuccessful

			throw afe;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);z
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		} finally {
			try {

				// BEGIN ADD V5.10a
				// comment: closing the open resultset
				if (null != rsGetData) {
					rsGetData.close();

					// BEGIN DELETE V 5.70b
					// rsGetData.getStatement().close();
					// END DELETE V 5.70b
					rsGetData = null;
				}

				// END ADD V5.10a

				// BEGIN ADD V 5.70b
				if (null != psSelect) {
					psSelect.close();
					psSelect = null;
				}

				// END ADD V 5.70b

				closeAFEConnection(); // closing the connection
			} catch (Exception ex) {
				AfeException afe = new AfeException("ERRCOM_00001", ex
						.getMessage()); // Database error occured

				throw afe;
			}
		}

		return strCustomerName;

		/** ************ Main Body of Method Ends ***************************************************** */
	} // Closing Brace of the method

	/**
	 *  DESCRIPTION :   This method will get the ServiceAddressID from CDM.
	 *
	 *  @param          :       AddressID
	 *
	 *  @return         :       long lServiceAddressID
	 */
	public long lGetServiceAddressID(long lAddressID) throws SQLException,
			Exception { // Starting Braces of the method

		/** ************ Variable Declaration Starts *************************************************** */
		ResultSet rsGetData = null; // Making an Object of the ResultSet
		long lServiceAddressID = 0;

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b

		/** ************ Variable Declaration Ends ****************************************************** */

		/** ************ Main Body of Method Starts ***************************************************** */
		try {
			if (makeAFEConnection()) // If the Connection is made
			{
				StringBuffer sbfSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				sbfSql.setLength(0); // Initialising

				// BEGIN DELETE V 5.70b
				// /* Making the Querry Statement */
				// sbfSql.append("SELECT ServiceAddressID FROM Address WHERE addressid = ").append(lAddressID);
				// /* Printing out the Querry made prior to its firing */
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println("The Querry is : " + sbfSql.toString());
				// }
				// /* Firing the Querry and taking the Result as a ResultSet */
				// rsGetData = gConnectAfe.rsQuery(sbfSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				sbfSql
						.append("SELECT ServiceAddressID FROM Address WHERE addressid = ?");
				psSelect = gConnectAfe.psPrepareStatement(sbfSql.toString());
				psSelect.setLong(1, lAddressID);
				rsGetData = psSelect.executeQuery();

				// END ADD V 5.70b

				/*
				 *       Making a WHILE Loop that moves from the first Record to the Last Record
				 *   and in which we add all the result's to a local internal vector which
				 *   further adds the record to the external vector that is returned.
				 *   Each Record in the External Vector is added as a Row of all the Records
				 *   that are fetched from the ResultSet's each Row
				 */
				if (null != rsGetData) {
					while (rsGetData.next()) {
						lServiceAddressID = rsGetData
								.getLong("ServiceAddressID");
					}

					// BEGIN ADD V5.10a
					// comment: closing the open resultset
					if (null != rsGetData) {
						rsGetData.close();

						// BEGIN DELETE V 5.70b
						// rsGetData.getStatement().close();
						// END DELETE V 5.70b
						rsGetData = null;
					}

					// END ADD V5.10a
				}
			}
		} catch (SQLException sqle) {
			AfeException afe = new AfeException("ERRCOM_00008", sqle
					.getMessage()); // Unable to translate query Database access unsuccessful

			throw afe;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		} finally {
			try {

				// BEGIN ADD V5.10a
				// comment: closing the open resultset
				if (null != rsGetData) {
					rsGetData.close();

					// BEGIN DELETE V 5.70b
					// rsGetData.getStatement().close();
					// END DELETE V 5.70b
					rsGetData = null;
				}

				// END ADD V5.10a
				// BEGIN ADD V 5.70b
				if (null != psSelect) {
					psSelect.close();
					psSelect = null;
				}

				// END ADD V 5.70b

				closeAFEConnection(); // closing the connection
			} catch (Exception ex) {
				AfeException afe = new AfeException("ERRCOM_00001", ex
						.getMessage()); // Database error occured

				throw afe;
			}
		}

		return lServiceAddressID;

		/** ************ Main Body of Method Ends ***************************************************** */
	} // Closing Brace of the method

	//  BEGIN ADD V4.10j
	//  Comment: Function added to get customerLink, name, first name and Epithet for contact creation in clarify
	protected Vector vctGetRemainingInfoForContactCreation(Long lAddressId,
			Long lCustomerId) throws AfeException {
		Vector vctRemainingInfo = new Vector(1);
		CustomerLink custLinkTable = null;
		CustomerLinkRow custLinkRow = null;
		Customer custTable = null;
		CustomerRow CustRow = null;
		Epithet epithetTable = null;
		EpithetRow epithetRow = null;
		String strEpithet = null;
		BSession bSession = null;

		try {
			custLinkTable = (CustomerLink) GConnectMemoryDB
					.getTable(GAfeConstants.CUSTOMERLINK);
			custTable = (Customer) GConnectMemoryDB
					.getTable(GAfeConstants.CUSTOMER);
			epithetTable = (Epithet) GConnectMemoryDB
					.getMasterTable(GAfeConstants.EPITHET);

			if ((null != custTable) && (null != custLinkTable)) {
				custLinkRow = custLinkTable.clrSearchByCustIDNAddID(lCustomerId
						.longValue(), lAddressId.longValue());

				if ((null != custLinkRow) && (custLinkRow.iObsolete == 0)) {
					vctRemainingInfo.addElement(Long.valueOf(
							custLinkRow.lCustomerLinkID));
					CustRow = custTable.crSearchByCustID(lCustomerId
							.longValue());

					if (null != CustRow) {
						vctRemainingInfo.addElement(CustRow.strFirstName);
						vctRemainingInfo.addElement(CustRow.strName);
						bSession = (BSession) teleSessionMgr
								.getValue(GAfeConstants.BSESSION_AFE);

						if ((null != epithetTable) && (null != bSession)) {
							epithetRow = epithetTable
									.astrSearchByEpithetID(CustRow.lEpithetID);

							if (null != epithetRow) {
								strEpithet = strGetDescription(
										bSession.lLanguageId,
										epithetRow.lDescriptionID);
							} else {
								strEpithet = "";
							}
						}

						vctRemainingInfo.addElement(strEpithet);
					}
				}
			}
		} catch (Exception ex) {
			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return vctRemainingInfo;
	}

	//  END ADD V4.10j

	//  Clarify Calls Function
	//  BEGIN DELETE V4.10b
	//  Comment: For changes of 891
	//  protected int iCreateContactInClfy(Long lCustomerLinkId, Long lCustomerId, Long lSapId, String strFirstName, String strLastName, String strCity,  String strPostCode, String strStreet, String strHouseNumber, String strSubHouseNumber) throws AfeException
	//  END DELETE V4.10b
	//  BEGIN DELETE V5.71e
	//  BEGIN ADD V4.10b
	//  Comment: For changes of 891
	//  protected int iCreateContactInClfy (Long lCustomerLinkId, Long lCustomerId, Long lSapId, String strFirstName, String strLastName, String strCity, String strPostCode, String strStreet, String strHouseNumber, String strSubHouseNumber, String strEpithet) throws AfeException
	//  END ADD V4.10b
	//  END DELETE v5.71e
	//  BEGIN ADD V5.71e
	protected int iCreateContactInClfy(Long lCustomerLinkId, Long lCustomerId,
			Long lSapId, String strFirstName, String strLastName,
			String strCity, String strPostCode, String strStreet,
			String strHouseNumber, String strSubHouseNumber, String strEpithet,
			String strBox) throws AfeException

	//  END ADD V5.71e
	{

		// intializing the variables
		ApplSaveAction applSaveActionTable = null;
		ApplSaveActionRow applSaveActionRow = null;

		// BEGIN DELETE V5.48a
		// Comment: Modified for CRPR 1450
		// applSaveActionRow = new ApplSaveActionRow();
		// END DELETE V5.48a
		try {

			// getting the ApplSaveAction container/table from session
			applSaveActionTable = (ApplSaveAction) teleSessionMgr
					.getTable(string_APPLSAVEACTION);

			if (null != applSaveActionTable) {

				// BEGIN ADD V5.48a
				// Comment: Modified for CRPR 1450
				applSaveActionRow = (ApplSaveActionRow) applSaveActionTable
						.asarSearchByActionTypeValueMethod(Record.INSERT,
								"CREATECONTACT", String
										.valueOf(lCustomerLinkId),
								"iCreateContact");

				if (null != applSaveActionRow) {
					applSaveActionRow.arrParams[0] = lCustomerLinkId;
					applSaveActionRow.arrParams[1] = lCustomerId;
					applSaveActionRow.arrParams[2] = lSapId;
					applSaveActionRow.arrParams[3] = strFirstName;
					applSaveActionRow.arrParams[4] = strLastName;
					applSaveActionRow.arrParams[5] = strCity;
					applSaveActionRow.arrParams[6] = strPostCode;
					applSaveActionRow.arrParams[7] = strStreet;
					applSaveActionRow.arrParams[8] = strHouseNumber;
					applSaveActionRow.arrParams[9] = strSubHouseNumber;
					applSaveActionRow.arrParams[10] = strEpithet;

					// BEGIN ADD V5.71e
					applSaveActionRow.arrParams[11] = strBox;

					// END ADD V5.71e

					// adding the Newly craeted row to the ApplSaveaction Container/table
					applSaveActionTable.updateRecord(applSaveActionRow);
				} else {
					applSaveActionRow = new ApplSaveActionRow();

					// END ADD V5.48a

					// Setting the values of various variable in ApplSaveAction Row
					applSaveActionRow.iAction = Record.INSERT;
					applSaveActionRow.strType = "CREATECONTACT";
					applSaveActionRow.strValue = String
							.valueOf(lCustomerLinkId);
					applSaveActionRow.strSystem = string_IAFEOUT;
					applSaveActionRow.strMethodName = "iCreateContact"; // the name of the IAFEOUT Method which needs to be called
					applSaveActionRow.bPerformLast = true;

					// BEGIN DELETE V4.10b
					// Comment: Changes for Incident 891
					// applSaveActionRow.arrArguments = new Class [10];
					// END DELETE V4.10b
					// BEGIN DELETE V5.71e
					// BEGIN ADD V4.10b
					// Comment: Changes for Incident 891
					// applSaveActionRow.arrArguments = new Class[11];
					// END ADD V4.10b
					// END DELETE V5.71a
					// BEGIN ADD V5.71e
					applSaveActionRow.arrArguments = new Class[12];

					// END ADD V5.71e
					applSaveActionRow.arrArguments[0] = Long.class;
					applSaveActionRow.arrArguments[1] = Long.class;
					applSaveActionRow.arrArguments[2] = Long.class;
					applSaveActionRow.arrArguments[3] = String.class;
					applSaveActionRow.arrArguments[4] = String.class;
					applSaveActionRow.arrArguments[5] = String.class;
					applSaveActionRow.arrArguments[6] = String.class;
					applSaveActionRow.arrArguments[7] = String.class;
					applSaveActionRow.arrArguments[8] = String.class;
					applSaveActionRow.arrArguments[9] = String.class;

					// BEGIN ADD V4.10b
					// Comment: For changes of 891
					applSaveActionRow.arrArguments[10] = String.class;

					// END ADD V4.10b

					// BEGIN ADD V5.71e
					applSaveActionRow.arrArguments[11] = String.class;

					// END ADD V5.71e

					// BEGIN DELETE V4.10b
					// Comment: Changes for Incident 891
					// applSaveActionRow.arrParams = new Object [10] ;
					// END DELETE V4.10b
					// BEGIN DELETE V5.71e
					// BEGIN ADD V4.10b
					// Comment: Changes for Incident 891
					// applSaveActionRow.arrParams = new Object[11];
					// END ADD V4.10b
					// END DELETE V5.71e
					// BEGIN ADD V5.71e
					applSaveActionRow.arrParams = new Object[12];

					// END ADD V5.71e
					applSaveActionRow.arrParams[0] = lCustomerLinkId;
					applSaveActionRow.arrParams[1] = lCustomerId;
					applSaveActionRow.arrParams[2] = lSapId;
					applSaveActionRow.arrParams[3] = strFirstName;
					applSaveActionRow.arrParams[4] = strLastName;
					applSaveActionRow.arrParams[5] = strCity;
					applSaveActionRow.arrParams[6] = strPostCode;
					applSaveActionRow.arrParams[7] = strStreet;
					applSaveActionRow.arrParams[8] = strHouseNumber;
					applSaveActionRow.arrParams[9] = strSubHouseNumber;

					// BEGIN ADD V4.10b
					// Comment: For changes of 891
					applSaveActionRow.arrParams[10] = strEpithet;

					// END ADD V4.10b

					// BEGIN ADD V5.71e
					applSaveActionRow.arrParams[11] = strBox;

					// END ADD V5.71e

					// For Saving this at Last
					applSaveActionRow.bPerformLast = true;

					// adding the Newly craeted row to the ApplSaveaction Container/table
					applSaveActionTable.addRecord(applSaveActionRow);

					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
						GLogger
								.chkpt("Record added in session. the no of records in applSaveActionTable is "
										+ (applSaveActionTable.vctGetAll())
												.size());
					} // END MODIFY 9.00a

					// BEGIN ADD V5.48a
					// Comment: Modified for CRPR 1450
				}

				// END ADD V5.48a
				// Putting the table back in the Session
				teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveActionTable);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return (1);
	}

	/**
	 * DESCRIPTION       :       This function sets the CustomerAccountId as Obsolete for a given CustomerProoductLineid if nothing else is coonected to that product
	 * @param            :       long lCustomerAccountID , long lCustomerProductLineID
	 * s1 *@return                :       none
	 * @throws           :       none
	 */
	protected final void vDeleteCustomerAccount(long lCustomerAccountID,
			long lCustomerProductLineID) throws Exception {
		Vector vctCustomerChargeType = null;
		CustomerAccountRow custAccountRow = null;
		int iFlag = 0;

		try {
			customerAccountTable = (CustomerAccount) teleSessionMgr
					.getTable("CUSTOMERACCOUNT");
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);
			vctCustomerChargeType = customerChargeTypeTable
					.vctSearchByCustomerAccountID(lCustomerAccountID,
							FINAL_ZERO);

			if (null == vctCustomerChargeType) {
				vctCustomerChargeType = new Vector();

				for (int iCount = 0; iCount < vctCustomerChargeType.size(); iCount++) {
					if (((CustomerChargeTypeRow) (vctCustomerChargeType
							.elementAt(iCount))).lCustomerProductLineID != lCustomerProductLineID) {
						iFlag = FINAL_ONE;

						break;
					}
				}
			}

			if (iFlag == FINAL_ZERO) {
				custAccountRow = customerAccountTable
						.crSearchByCustomerAccountID(lCustomerAccountID);

				if (null != custAccountRow) {
					custAccountRow.iObsolete = FINAL_ONE;
					custAccountRow.strModificationUser = bSession.strUserName;

					if ((custAccountRow.iStatusInDB == Record.VIEW)
							|| (custAccountRow.iStatusInDB == Record.UPDATE)) {
						custAccountRow.iStatusInDB = Record.UPDATE;
						customerAccountTable.updateRecord(custAccountRow);
					} else if (custAccountRow.iStatusInDB == Record.INSERT) {
						custAccountRow.iStatusInDB = Record.DELETE;
						customerAccountTable
								.deleteRecord(custAccountRow.lCustomerAccountID);
					}

					teleSessionMgr.putTable("CUSTOMERACCOUNT",
							customerAccountTable);
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException("ERRCOM_00001", ex
					.getMessage()); // Database error occured

			throw afee;
		}
	}

	public int iCheckIdentifierInTheDatabaseAndSession(String strNumber)
			throws AfeException { // Starting Braces of the Function
		int iStatus = 0; // Integer initialization of the status
		Vector vctTemp = null;
		ResultSet rsGetAllData = null;

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b
		// BEGIN ADD V4.06i
		int iCount = 0;
		CustomerProductLineIdentifierRow cplirObj = null;
		long lCPLId = 0;
		boolean bIsMobile = false;

		// END ADD V4.06i

		try {

			// Object of BRelation for making the business object
			if (makeAFEConnection()) // If the Connection is made
			{
				StringBuffer sbfSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				sbfSql.setLength(0); // Initialising

				// BEGIN DELETE V 5.70b
				// /* Making the Querry Statement */
				// sbfSql.append("SELECT * FROM CUSTOMERPRODUCTLINEIDENTIFIER WHERE OBSOLETE = 0 AND CUSTOMERPLIDENTIFIERVALUE = '").append(strNumber).append("'");
				// /* Printing out the Querry made prior to its firing */
				// if(GAfePropertyLoader.DEBUG)
				// System.out.println("The Querry is : " + sbfSql.toString());
				// /* Firing the Querry and taking the Result as a ResultSet */
				// rsGetAllData  =       gConnectAfe.rsQuery(sbfSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				sbfSql.append(" SELECT * FROM CUSTOMERPRODUCTLINEIDENTIFIER");
				sbfSql
						.append(" WHERE OBSOLETE = 0 AND CUSTOMERPLIDENTIFIERVALUE = ?");
				psSelect = gConnectAfe.psPrepareStatement(sbfSql.toString());
				psSelect.setString(1, strNumber);
				rsGetAllData = psSelect.executeQuery();

				// END ADD V 5.70b

				if ((null != rsGetAllData) && rsGetAllData.next()) {
					if (null != rsGetAllData
							.getString("CUSTOMERPLIDENTIFIERVALUE")) {
						iStatus = FINAL_ONE;
					} else {
						iStatus = FINAL_ZERO;
					}

					// BEGIN ADD V5.10a
					// comment: closing the open resultset
					rsGetAllData.close();

					// BEGIN DELETE V 5.70b
					// rsGetAllData.getStatement().close();
					// END DELETE V 5.70b
					rsGetAllData = null;

					// END ADD V5.10a
				} else {
					iStatus = FINAL_ZERO;
				}
			}

			if (FINAL_ONE == iStatus) {

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("THE ERROR IS - ERRAFE_00629 - This Number is Already In the Request State.");
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
				throw new AfeException("ERRAFE_00629");
			}

			if (iStatus == FINAL_ZERO) {
				customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the Customer table from the session
				vctTemp = (Vector) customerProductLineIdentifierTable
						.vctSearchBystrCustomerPLIdentifierValueandObsolete(
								strNumber, FINAL_ZERO);

				if ((null != vctTemp) && (vctTemp.size() != FINAL_ZERO))

				// BEGIN ADD V4.06i
				{
					iCount = vctTemp.size();
					GLogger.chkpt("The vector size is " + iCount);

					// Loop over the vector to check whether the line is mobile line or not.
					for (int iCounter = 0; iCounter < iCount; iCounter++) {
						cplirObj = (CustomerProductLineIdentifierRow) vctTemp
								.elementAt(iCounter);
						lCPLId = cplirObj.lCustomerProductLineID;
						GLogger.chkpt("Customer product line id is " + lCPLId);
						bIsMobile = ProductUtils.bCheckMobileProduct(lCPLId, true);
						GLogger.chkpt("Rproduct method returned: " + bIsMobile);

						if (bIsMobile) {
							break;
						}
					}

					if (bIsMobile) {
						GLogger.chkpt("Setting the status 2");
						iStatus = FINAL_TWO; // Store the temp. status to throw the specific message.
					} else {
						iStatus = FINAL_ONE;
					}
				}

				// END ADD V4.06i
			}

			if (FINAL_ONE == iStatus) {

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("THE ERROR IS - ERRAFE_00630 - Fatal Error - Data Inconsistent in CDM and Dinoman. Please Check the Status of the Number in CDM and Dinoman.");
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
				throw new AfeException("ERRAFE_00630");
			}

			// BEGIN ADD V4.06i
			else if (FINAL_TWO == iStatus) {
				iStatus = FINAL_ONE; // Restore the failure status

				throw new AfeException("ERRAFE_10690");
			}

			// END ADD V4.06i
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());

				// END MODIFY 9.00a
			//	afee.printStackTrace(System.out);
			}

			throw afee;
		} catch (SQLException sqle) {
			iStatus = 0;

			AfeException afe = new AfeException("ERRCOM_00001", sqle
					.getMessage());

			throw afe;
		} catch (Exception ex) {
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage());

			throw afe;
		}

		// BEGIN ADD V5.10a
		// comment: adding finally block to close open connection and resultset
		finally {
			try {
				if (null != rsGetAllData) {
					rsGetAllData.close();

					// BEGIN DELETE V 5.70b
					// rsGetAllData.getStatement().close();
					// END DELETE V 5.70b
					rsGetAllData = null;
				}

				// BEGIN ADD V 5.70b
				if (null != psSelect) {
					psSelect.close();
					psSelect = null;
				}

				// END ADD V 5.70b

				closeAFEConnection(); // closing the connection
			} catch (Exception ex) {
				AfeException afe = new AfeException("ERRCOM_00001", ex
						.getMessage()); // Database error occured

				throw afe;
			}
		}

		// END ADD V5.10a

		// Returning of the Vector
		return iStatus;
	} // Closing Brace of the function

	// 2.72    Begin Insert
	// CR108 for CPS Upgrade

	/**
	 *  DESCRIPTION     :       This Method checks whether the CPS - UpGrade is Possible else throws Exception
	 *  @param                  :       String strNumber
	 *  @return                         :       Void
	 *  @Author                 :       Lalit
	 *  @Throws                 :       AfeException
	 */
	public final void iCheckIdentifierInDatabaseAndSessionForNP(String strNumber)
			throws AfeException { // Starting Braces of the Method
		boolean bCPSinDB = false;
		int iStatus = 0;
		long lProduct_CPS = 0;
		long lProduct_CPS_FPF = 0;
		long lRoleTypeID_User = 0;
		String strParam = null;
		Vector vctTemp = null;
		ResultSet rsNumber = null;
		ResultSet rsProductID = null;
		StringBuffer sbfSql = null;
		CustomerProductLineIdentifierRow cplir = null;
		CustomerProductLineRow cplr = null;

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect1 = null;
		PreparedStatement psSelect2 = null;

		// END ADD V 5.70b

		try {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric
						.println(
								"In LProduct : iCheckIdentifierInDatabaseAndSessionForNP()",
								GGeneric.iDebugLevelSeven, this);
			}

			lProduct_CPS_FPF = GAfeDescription.lGetTypeId(string_PRODUCT_CPS);
			lRoleTypeID_User = GAfeDescription.lGetTypeId(string_ROLETYPE_USER);
			sbfSql = new StringBuffer(); // Defining a String Buffer to make the Sql querry
			gConnectAfe = new GConnectAfe(this);

			if (gConnectAfe.bIsConnected()) // If the Connected
			{

				// BEGIN DELETE V 5.70b
				// sbfSql.append(" SELECT CUSTOMERPLIDENTIFIERVALUE ");
				// sbfSql.append(" FROM CUSTOMERPRODUCTLINEIDENTIFIER ");
				// sbfSql.append(" WHERE OBSOLETE = 0 ");
				// sbfSql.append(" AND CUSTOMERPLIDENTIFIERVALUE = '");
				// sbfSql.append(strNumber);
				// sbfSql.append("'");
				// if(GAfePropertyLoader.DEBUG)
				// {
				// GGeneric.println("The Querry is : " + sbfSql.toString(),GGeneric.iDebugLevelSeven,this);
				// }
				// rsNumber      =       gConnectAfe.rsQuery(sbfSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				sbfSql.append(" SELECT CUSTOMERPLIDENTIFIERVALUE ");
				sbfSql.append(" FROM CUSTOMERPRODUCTLINEIDENTIFIER ");
				sbfSql.append(" WHERE OBSOLETE = 0 ");
				sbfSql.append(" AND CUSTOMERPLIDENTIFIERVALUE = ?");
				psSelect1 = gConnectAfe.psPrepareStatement(sbfSql.toString());
				psSelect1.setString(1, strNumber);
				rsNumber = psSelect1.executeQuery();

				// END ADD V 5.70b

				while (rsNumber.next()) {
					strParam = rsNumber.getString("CUSTOMERPLIDENTIFIERVALUE");

					if (null != strParam) {
						iStatus++;
						strParam = null;
					}
				}

				if (null != rsNumber) {

					// BEGIN ADD V5.10a
					// comment: resultset is closed as well as statement
					rsNumber.close();

					// END ADD V5.10a
					// BEGIN DELETE V 5.70b
					// rsNumber.getStatement().close();
					// END DELETE V 5.70b

					// BEGIN ADD V5.10a
					// comment: resultset is set to null
					rsNumber = null;

					// END ADD V5.10a
				}

				if (GAfePropertyLoader.DEBUG) {
					GGeneric.println("The Value of  iStatus : " + iStatus,
							GGeneric.iDebugLevelSeven, this);
					GGeneric.println("The Value of : bCPSinDB : " + bCPSinDB,
							GGeneric.iDebugLevelSeven, this);
				}

				if (iStatus == FINAL_ONE) {
					sbfSql.setLength(0);

					// BEGIN DELETE V 5.70b
					// sbfSql.append(" SELECT PRODUCTID,CPL.CUSTOMERPRODUCTLINEID ");
					// sbfSql.append(" FROM CUSTOMERPRODUCTLINE CPL, ");
					// sbfSql.append(" CUSTOMERPRODUCTLINEIDENTIFIER CPLI ");
					// sbfSql.append(" WHERE CUSTOMERPLIDENTIFIERVALUE = '");
					// sbfSql.append(strNumber);
					// sbfSql.append("' AND CPLI.CUSTOMERPRODUCTLINEID = CPL.CUSTOMERPRODUCTLINEID ");
					// sbfSql.append(" AND CPLI.OBSOLETE = 0 ");
					// sbfSql.append(" AND CPL.OBSOLETE = 0 ");
					// if(GAfePropertyLoader.DEBUG)
					// {
					// GGeneric.println("The Querry is : " + sbfSql.toString(),GGeneric.iDebugLevelSeven,this);
					// }
					// rsProductID       =       gConnectAfe.rsQuery(sbfSql.toString());
					// END DELETE V 5.70b
					// BEGIN ADD V 5.70b
					sbfSql
							.append(" SELECT PRODUCTID,CPL.CUSTOMERPRODUCTLINEID ");
					sbfSql.append(" FROM CUSTOMERPRODUCTLINE CPL, ");
					sbfSql.append(" CUSTOMERPRODUCTLINEIDENTIFIER CPLI ");
					sbfSql.append(" WHERE CUSTOMERPLIDENTIFIERVALUE = ?");
					sbfSql
							.append(" AND CPLI.CUSTOMERPRODUCTLINEID = CPL.CUSTOMERPRODUCTLINEID ");
					sbfSql.append(" AND CPLI.OBSOLETE = 0 ");
					sbfSql.append(" AND CPL.OBSOLETE = 0 ");
					psSelect2 = gConnectAfe.psPrepareStatement(sbfSql
							.toString());
					psSelect2.setString(1, strNumber);
					rsProductID = psSelect2.executeQuery();

					// END ADD V 5.70b

					if (rsProductID.next()) {
						lProduct_CPS = rsProductID.getLong("PRODUCTID"); // Retrieving ProductID from CustomerProductLine related to the Number

						if (lProduct_CPS != lProduct_CPS_FPF) // If the Product Line is NOT the CPS/INTRO throw exception.
						{
							throw new AfeException("ERRAFE_00629"); // ERRAFE_00629 - This Number is Already In the Request State
						} else {
							CheckCPSUpGradeUserInDB(rsProductID
									.getLong("CUSTOMERPRODUCTLINEID"),
									lRoleTypeID_User);
							bCPSinDB = true; // Explicitely forcing to check values in Session
						}
					}

					if (null != rsProductID) {

						// BEGIN ADD V5.10a
						// comment: resultset is closed as well as statement
						rsProductID.close();

						// END ADD V5.10a
						// BEGIN DELETE V 5.70b
						// rsProductID.getStatement().close();
						// END DELETE V 5.70b

						// BEGIN ADD V5.10a
						// comment: resultset is set to null
						rsProductID = null;

						// END ADD V5.10a
					}
				}
			}

			if (iStatus >= FINAL_TWO) {
				if (GAfePropertyLoader.DEBUG) {
					GGeneric.println("if(iStatus  >=  FINAL_TWO) : iStatus : "
							+ iStatus, GGeneric.iDebugLevelSeven, this);
					GGeneric.println("if(iStatus  >=  FINAL_TWO) : bCPSinDB : "
							+ bCPSinDB, GGeneric.iDebugLevelSeven, this);
				}

				throw new AfeException("ERRAFE_00629"); // ERRAFE_00629 - This Number is Already In the Request State
			}

			if (bCPSinDB) // if 1 line found in DB, forcefully search in session
			{
				iStatus = FINAL_ZERO;

				if (GAfePropertyLoader.DEBUG) {
					GGeneric.println("if (bCPSinDB) : iStatus : " + iStatus,
							GGeneric.iDebugLevelSeven, this);
					GGeneric.println("if (bCPSinDB)) : bCPSinDB : " + bCPSinDB,
							GGeneric.iDebugLevelSeven, this);
				}
			}

			if (iStatus == FINAL_ZERO) {
				customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);

				if (null != customerProductLineIdentifierTable) {
					vctTemp = customerProductLineIdentifierTable
							.vctSearchBystrCustomerPLIdentifierValueandObsolete(
									strNumber, FINAL_ZERO);

					if ((null != vctTemp) && (vctTemp.size() != FINAL_ZERO)) {
						iStatus = vctTemp.size();

						if (GAfePropertyLoader.DEBUG) {
							GGeneric.println(
									"  if(iStatus == FINAL_ZERO): iStatus"
											+ iStatus,
									GGeneric.iDebugLevelSeven, this);
							GGeneric.println(
									"  if(iStatus == FINAL_ZERO) : bCPSinDB : "
											+ bCPSinDB,
									GGeneric.iDebugLevelSeven, this);
						}

						// If there is One Number already Existing in Session.     Check the ProductLine. If ProductLine != CPS, then throw Exception
						if (iStatus == FINAL_ONE) {
							cplir = (CustomerProductLineIdentifierRow) vctTemp
									.elementAt(FINAL_ZERO); // Retrieve CustomerProductLineIdentifier Row

							if (null != cplir) // Check for Null
							{
								customerProductLineTable = (CustomerProductLine) teleSessionMgr
										.getTable(string_CUSTOMERPRODUCTLINE); // Retrieve table from Session

								if (null != customerProductLineTable) // If table is NOT Null
								{
									cplr = (CustomerProductLineRow) customerProductLineTable
											.cplrSearchByCustProductLineID(cplir.lCustomerProductLineID); // Search by CustomerProductLineID

									if (null != cplr) // Check for Null
									{

										// If The ProductLine in the Session is NOT CPS then throw Exception
										if (cplr.lProductID != lProduct_CPS_FPF) // If condition
										{
											throw new AfeException(
													"ERRAFE_00629"); // ERRAFE_00629 - This Number is Already In the Request State
										}
									}
								}
							}
						}
					}
				}

				if (iStatus >= FINAL_TWO) // If 2 or more ProductLines already Exists in Session for Same Number, then throw Exceptions
				{
					if (GAfePropertyLoader.DEBUG) {
						GGeneric.println(
								"if(iStatus  >=  FINAL_TWO) : iStatus : "
										+ iStatus, GGeneric.iDebugLevelSeven,
								this);
						GGeneric.println(
								"if(iStatus  >=  FINAL_TWO) : bCPSinDB : "
										+ bCPSinDB, GGeneric.iDebugLevelSeven,
								this);
					}

					throw new AfeException("ERRAFE_00629"); // ERRAFE_00629 - This Number is Already In the Request State
				}
			}
		} catch (AfeException afe) // Catch Block for AfeException
		{
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(afe, GGeneric.iDebugLevelFour, this);
			}

			throw afe;
		} catch (SQLException sqle) // Catch Block for SQLException
		{
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(sqle, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException("ERRCOM_00001", sqle.getMessage());
		} catch (Exception e) // Catch Block for Exception
		{
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(e, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, e.getMessage());
		} finally {
			try {
				if (null != rsProductID) {
					rsProductID.close();

					// BEGIN ADD V5.10a
					// comment: closing the statement
					// BEGIN DELETE V 5.70b
					// rsProductID.getStatement().close();
					// END DELETE V 5.70b
					rsProductID = null;

					// END ADD V5.10a
				}

				if (null != rsNumber) {
					rsNumber.close();

					// BEGIN ADD V5.10a
					// comment: closing the statement
					// BEGIN DELETE V 5.70b
					// rsNumber.getStatement().close();
					// END DELETE V 5.70b
					rsNumber = null;

					// END ADD V5.10a
				}

				// BEGIN ADD V 5.70b
				if (null != psSelect1) {
					psSelect1.close();
					psSelect1 = null;
				}

				if (null != psSelect2) {
					psSelect2.close();
					psSelect2 = null;
				}

				// END ADD V 5.70b

				if (null != gConnectAfe) {
					gConnectAfe.bClose();
				}
			} catch (Exception e) {

				// Consume This Exception
				if (GAfePropertyLoader.DEBUG) {
					GGeneric
							.printStackTrace(e, GGeneric.iDebugLevelThree, this);
				}
			}
		}
	} // Closing Brace of the Method

	/**
	 *  DESCRIPTION     :       This Method checks the case of CPS - UpGrad, the actual User in CPS is the same or different from the current one.
	 *  @param                  :       long    lCustomerProductLineID
	 *  @return                         :       Void
	 *  @Author                 :       Lalit
	 */
	public final void CheckCPSUpGradeUserInDB(long lCustomerProductLineID,
			long lRoleTypeID_User) throws AfeException {
		StringBuffer sbfSql = null;
		ResultSet rsCustomerID = null;

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b

		try {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.println("In LProduct : CheckCPSUpGradeUserInDB() ",
						GGeneric.iDebugLevelSeven, this);
			}

			sbfSql = new StringBuffer();
			gConnectAfe = new GConnectAfe(this);

			if (gConnectAfe.bIsConnected()) // If the Connected
			{

				// BEGIN DELETE V 5.70b
				// sbfSql.append(" SELECT CUSTOMERID ");
				// sbfSql.append(" FROM CUSTOMERLINK CL, ");
				// sbfSql.append(" CUSTOMERLINKROLE CLR, ");
				// sbfSql.append(" CUSTOMERLR2CUSTOMERPRODUCT CLR2CP ");
				// sbfSql.append(" WHERE ");
				// sbfSql.append(" CL.CustomerLinkID =   CLR.CustomerLinkID ");
				// sbfSql.append(" AND CLR.RoleTypeID = ");
				// sbfSql.append(lRoleTypeID_User);
				// sbfSql.append(" AND CLR.CustomerLinkRoleID =  CLR2CP.CustomerLinkRoleID ");
				// sbfSql.append(" AND CLR2CP.CustomerProductLineID = ");
				// sbfSql.append(lCustomerProductLineID);
				// sbfSql.append(" AND CL.Obsolete = 0 ");
				// sbfSql.append(" AND CLR.Obsolete = 0 ");
				// if(GAfePropertyLoader.DEBUG)
				// {
				// GGeneric.println("The Querry is : " + sbfSql.toString(),GGeneric.iDebugLevelSeven,this);
				// }
				// rsCustomerID  =       gConnectAfe.rsQuery(sbfSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				sbfSql.append(" SELECT CUSTOMERID ");
				sbfSql.append(" FROM CUSTOMERLINK CL, ");
				sbfSql.append(" CUSTOMERLINKROLE CLR, ");
				sbfSql.append(" CUSTOMERLR2CUSTOMERPRODUCT CLR2CP ");
				sbfSql.append(" WHERE ");
				sbfSql.append(" CL.CustomerLinkID =     CLR.CustomerLinkID ");
				sbfSql.append(" AND CLR.RoleTypeID = ?");
				sbfSql
						.append(" AND CLR.CustomerLinkRoleID =    CLR2CP.CustomerLinkRoleID ");
				sbfSql.append(" AND CLR2CP.CustomerProductLineID = ?");
				sbfSql.append(" AND CL.Obsolete = 0 ");
				sbfSql.append(" AND CLR.Obsolete = 0 ");
				psSelect = gConnectAfe.psPrepareStatement(sbfSql.toString());
				psSelect.setLong(1, lRoleTypeID_User);
				psSelect.setLong(2, lCustomerProductLineID);
				rsCustomerID = psSelect.executeQuery();

				// END ADD V 5.70b

				while (rsCustomerID.next()) {
					if (bSession.lCustomerId != rsCustomerID
							.getLong("CUSTOMERID")) {
						throw new AfeException("ERRAFE_00629"); // ERRAFE_00629 - This Number is Already In the Request State
					}
				}

				if (null != rsCustomerID) {

					// BEGIN ADD V5.10a
					// comment: to close the resultset
					rsCustomerID.close();

					// END ADD V5.10a
					// BEGIN DELETE V 5.70b
					// rsCustomerID.getStatement().close();
					// END DELETE V 5.70b

					// BEGIN ADD V5.10a
					// comment: to close the resultset
					rsCustomerID = null;

					// END ADD V5.10a
				}
			}
		} catch (AfeException afe) // Catch Block for AfeException
		{
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(afe, GGeneric.iDebugLevelFour, this);
			}

			throw afe;
		} catch (SQLException sqle) // Catch Block for SQLException
		{
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(sqle, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException("ERRCOM_00001", sqle.getMessage());
		} catch (Exception e) // Catch Block for Exception
		{
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(e, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, e.getMessage());
		} finally {
			try {
				if (null != rsCustomerID) {
					rsCustomerID.close();

					// BEGIN ADD V5.10a
					// comment: to close the statement
					// BEGIN DELETE V 5.70b
					// rsCustomerID.getStatement().close();
					// END DELETE V 5.70b
					rsCustomerID = null;

					// END ADD V5.10a
				}

				// BEGIN ADD V 5.70b
				if (null != psSelect) {
					psSelect.close();
					psSelect = null;
				}

				// END ADD V 5.70b
				if (null != gConnectAfe) {
					gConnectAfe.bClose();
				}
			} catch (Exception e) {

				// Consume This Exception
				if (GAfePropertyLoader.DEBUG) {
					GGeneric
							.printStackTrace(e, GGeneric.iDebugLevelThree, this);
				}
			}
		}
	}

	// CR108 for CPS Upgrade
	// 2.72    End     Insert
	//BEGIN DELETE V4.10f
	//comment: The method is re-written with same signature, hence commented

	/*
	 protected int iCheckGlobalForbiddenProduct(BProductDetail bProductDetail, long lCustomerProductLineID) throws AfeException
	 {
	 BProductRole                                    bProductRoleTemp                = null;
	 Long                                                    lCustomerID                             = null;
	 Vector                                                  vctCustomerLink                 = null;                                         // Initialization of variable vector
	 Vector                                                  vctCustomerLinkRole             = null;                                         // Initialization of variable vector
	 Vector                                                  vctCustomerRoleProduct  = null;                                         // Initialization of variable vector
	 Vector                                                  vctCustomerProduct              = null;                                         // Initialization of variable vector
	 Vector                                                  vctForbiddenProduct             = null;                                         // internal local vector
	 CustomerLinkRow                                 custLinkRow                             = null;                                         // Initializing the Object Class for the CustomerLink table
	 CustomerLR2CustomerProductRow   custLR2ProdRow                  = null;                                         // Initializing the Object Class for the CustomerLR2CustomerProductRow table
	 CustomerLinkRoleRow                             custLinkRoleRow                 = null;         // Initializing the Object Class for the CustomerLinkRole table
	 ForbiddenProductRow                             forbProdRow                             = null;                                         // Initialization of ForbiddenProduct Row
	 int                                                             iCounter1                               = 0;                                            // Initialization of counter
	 int                                                             iCounter2                               = 0;                                            // Initialization of counter
	 int                                                             iCounter3                               = 0;                                            // Initialization of counter
	 int                                                             iCounter4                               = 0;                                            // Initialization of counter
	 int                                                             iStatus                                 = 0;
	 Vector                                                  vctCustomerProductTemp  = new Vector(4);

	 try
	 {
	 //    if(null != teleSessionMgr.getValue("BProductDetailRole_aCProduct"))
	 bProductRoleTemp                                =       (BProductRole) teleSessionMgr.getValue("BProductDetailRole_aCProduct");

	 if(null == customerLinkTable)
	 {
	 customerLinkTable                               =       (CustomerLink)teleSessionMgr.getTable("CUSTOMERLINK");          // Getting the Customer table from the session
	 }
	 if(null != customerLinkTable)
	 {
	 vctCustomerLink = customerLinkTable.vctGetAll();                                // Getting the Vector of CustomerLink Records
	 }

	 if(null == customerLinkRoleTable)
	 {
	 customerLinkRoleTable                   =       (CustomerLinkRole)teleSessionMgr.getTable("CUSTOMERLINKROLE");          // Getting the Customer table from the session
	 }
	 if(null != customerLinkRoleTable)
	 {
	 vctCustomerLinkRole                             =       customerLinkRoleTable.vctGetAll();                                      // Getting the Vector of CustomerLinkRole Records
	 }

	 if(null == customerLR2CustomerProductTable)
	 {
	 customerLR2CustomerProductTable =       (CustomerLR2CustomerProduct)teleSessionMgr.getTable("CUSTOMERLR2CUSTOMERPRODUCT");              // Getting the Customer table from the session
	 }
	 if(null != customerLR2CustomerProductTable)
	 {
	 vctCustomerRoleProduct                  =   customerLR2CustomerProductTable.vctGetAll();                                                        // Getting the Vector of CustomerLR2Product Records
	 }

	 if(null == customerProductTable)
	 {
	 customerProductTable                    =       (CustomerProduct)teleSessionMgr.getTable("CUSTOMERPRODUCT");    // Getting the CustomerProduct table from the session
	 }
	 if(null != customerProductTable)
	 {
	 vctCustomerProduct      =       customerProductTable.vctGetAll();
	 }

	 if(null == forbiddenProductTable)
	 {
	 forbiddenProductTable = (ForbiddenProduct)teleSessionMgr.getMasterTable("FORBIDDENPRODUCT");            // Getting the OptionGroup table from the session
	 }
	 if(null != forbiddenProductTable)
	 {
	 vctForbiddenProduct = forbiddenProductTable.vctGetAll();
	 }

	 //****************    STARTING*****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Input the Global Forbidden fnc is : " +bProductDetail);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************/

	// BEGIN DELETE V4.10f
	// comment: commenting the entire function
	/*
	 * long ROLETYPE_USER = GAfeDescription.lGetTypeId("ROLETYPE_USER");
	 *
	 * if( null != bProductRoleTemp && null != bProductRoleTemp.vctProductRole)
	 * {
	 *   BProductRoleDetail bProductRoleDetailTemp = null;
	 *   for (int iCount= 0; iCount < bProductRoleTemp.vctProductRole.size();iCount++ )
	 *   {
	 *       bProductRoleDetailTemp = (BProductRoleDetail) bProductRoleTemp.vctProductRole.elementAt(iCount);
	 *       if( bProductRoleDetailTemp.lRoleTypeID.longValue() ==  ROLETYPE_USER)
	 *       {
	 *           lCustomerID = bProductRoleDetailTemp.lCustomerID;
	 *           break;
	 *       }
	 *   }
	 * }
	 */

	// END DELETE V4.10f
	/**
	 * **************STARTING*****************TO PRINT THE DATA
	 * if(GAfePropertyLoader.DEBUG)
	 * {
	 * System.out.println("Global Forbidden fnc : lCustomerID : " +lCustomerID);
	 * System.out.println("Global Forbidden fnc : vctCustomerLink : " +vctCustomerLink);
	 * System.out.println("Global Forbidden fnc : vctCustomerLinkRole : " +vctCustomerLinkRole);
	 * System.out.println("Global Forbidden fnc : vctCustomerRoleProduct : " +vctCustomerRoleProduct);
	 * }
	 * /****************ENDING*******************TO PRINT THE DATA******************************************
	 */
	// BEGIN DELETE V4.10f
	// comment: commenting the entire function
	/*
	 * if (null != lCustomerID && null != vctCustomerLink && null != vctCustomerLinkRole && null != vctCustomerRoleProduct)
	 * {
	 *   //for each  record in the vector of CustomerLink Records
	 *   for (iCounter1 = 0;iCounter1 < vctCustomerLink.size();iCounter1++)
	 *   {
	 *       custLinkRow = (CustomerLinkRow) vctCustomerLink.elementAt(iCounter1);
	 *
	 *       /****************STARTING*****************TO PRINT THE DATA
	 *       if(GAfePropertyLoader.DEBUG)
	 *       {
	 *           System.out.println("Global Forbidden fnc : custLinkRow : " +custLinkRow);
	 *           System.out.println("Global Forbidden fnc : custLinkRow.lCustomerID : " +custLinkRow.lCustomerID);
	 *       }
	 *       /****************ENDING*******************TO PRINT THE DATA******************************************
	 */

	// END DELETE V4.10f
	// BEGIN DELETE V4.10f
	// comment: commenting the entire function
	/*
	 *       if(custLinkRow.lCustomerID  ==      lCustomerID.longValue() && custLinkRow.iObsolete == FINAL_ZERO)
	 *       {
	 *           //for each  record in the vector of CustomerLinkRole Records                                                                                    // if the Customer is the Same Customer
	 *           for (iCounter2 = 0;iCounter2< vctCustomerLinkRole.size();iCounter2++)
	 *           {
	 *               custLinkRoleRow                             =               (CustomerLinkRoleRow)vctCustomerLinkRole.elementAt(iCounter2);
	 *
	 *               /****************STARTING*****************TO PRINT THE DATA
	 *               if(GAfePropertyLoader.DEBUG)
	 *               {
	 *                   System.out.println("Global Forbidden fnc : custLinkRoleRow : " +custLinkRoleRow);
	 *                   System.out.println("Global Forbidden fnc : custLinkRoleRow.lCustomerLinkID : " +custLinkRoleRow.lCustomerLinkID);
	 *               }
	 *               /****************ENDING*******************TO PRINT THE DATA******************************************
	 */

	// if the Customer is related to the CustomerLinkID
	// END DELETE V4.10f
	// BEGIN DELETE V4.10f
	// comment: commenting the entire function
	/*
	 * if(custLinkRoleRow.lCustomerLinkID == custLinkRow.lCustomerLinkID && custLinkRoleRow.iObsolete == FINAL_ZERO)
	 * {
	 *   //for each  record in the vector of CustomerLR2CustomerProductRow elements
	 *   for (iCounter3 = 0;iCounter3< vctCustomerRoleProduct.size();iCounter3++)
	 *   {
	 *       custLR2ProdRow      = (CustomerLR2CustomerProductRow)vctCustomerRoleProduct.elementAt(iCounter3);
	 *
	 *       /****************STARTING*****************TO PRINT THE DATA
	 *       if(GAfePropertyLoader.DEBUG)
	 *       {
	 *           System.out.println("Global Forbidden fnc : custLR2ProdRow : " +custLR2ProdRow);
	 *           System.out.println("Global Forbidden fnc : custLR2ProdRow.lCustomerLinkID : " +custLR2ProdRow.lCustomerLinkRoleID);
	 *       }
	 *       /****************ENDING*******************TO PRINT THE DATA******************************************
	 */

	/**
	 * **************STARTING*****************TO PRINT THE DATA
	 * if(GAfePropertyLoader.DEBUG)
	 * {
	 * System.out.println("bProductDetailProperty.lProductID - " +lCustomerProductLineID);
	 * System.out.println("custLR2ProdRow.lCustomerProductLineID - " +custLR2ProdRow.lCustomerProductLineID);
	 * }
	 * /****************ENDING*******************TO PRINT THE DATA******************************************
	 */

	// END DELETE V4.10f
	// BEGIN DELETE V4.10f
	// comment: commenting the entire function
	/*
	 * if(custLR2ProdRow.lCustomerLinkRoleID == custLinkRoleRow.lCustomerLinkRoleID && custLR2ProdRow.lCustomerProductLineID != lCustomerProductLineID && -1 == vctCustomerProductTemp.indexOf(Long.valueOf(custLR2ProdRow.lCustomerProductLineID)))
	 * {
	 *   vctCustomerProductTemp.addElement(Long.valueOf(custLR2ProdRow.lCustomerProductLineID));
	 * /                                                                      vctCustomerProduct      =       customerProductTable.vctSearchByCustomerProductLineIDandObsolete(custLR2ProdRow.lCustomerProductLineID,FINAL_ZERO);
	 *
	 * /                                                                      vctForbiddenProduct = forbiddenProductTable.vctSearchByProductIDandObsolete(bProductDetail.lProductID.longValue(),FINAL_ZERO);
	 *
	 *   /****************STARTING*****************TO PRINT THE DATA
	 *   if(GAfePropertyLoader.DEBUG)
	 *   {
	 *       System.out.println("Global Forbidden fnc : vctForbiddenProduct : " +vctForbiddenProduct);
	 *   }
	 *   /****************ENDING*******************TO PRINT THE DATA******************************************
	 */

	// END DELETE V4.10f
	// BEGIN DELETE V4.10f
	// comment: commenting the entire function
	/*
	 *
	 * if(null != vctForbiddenProduct && null != vctCustomerProduct)
	 * {
	 *   ForbiddenProductRow forbiddenProductRowTemp = null;
	 *   for(iCounter4 = FINAL_ZERO; iCounter4 < vctForbiddenProduct.size() ; iCounter4++)
	 *   {
	 *       forbiddenProductRowTemp = (ForbiddenProductRow) vctForbiddenProduct.elementAt(iCounter4);
	 *       if(forbiddenProductRowTemp.lProductID == bProductDetail.lProductID.longValue() && forbiddenProductRowTemp.iObsolete == FINAL_ZERO)
	 *       {
	 *           CustomerProductRow customerProductRowTemp = null;
	 *           for(int iCounter5 = FINAL_ZERO; iCounter5 < vctCustomerProduct.size(); iCounter5++)
	 *           {
	 *               customerProductRowTemp = (CustomerProductRow) vctCustomerProduct.elementAt(iCounter5);
	 *               /****************STARTING*****************TO PRINT THE DATA
	 *               if(GAfePropertyLoader.DEBUG)
	 *               {
	 *                   System.out.println("Global Forbidden fnc : lForbProductID : " +((ForbiddenProductRow)(vctForbiddenProduct.elementAt(iCounter4))).lForbProductID);
	 *                   System.out.println("Global Forbidden fnc : lForbProductID : " +((CustomerProductRow)(vctCustomerProduct.elementAt(iCounter5))).lProductID);
	 *                   System.out.println("Global Forbidden fnc : lForbProductID : " +((ForbiddenProductRow)(vctForbiddenProduct.elementAt(iCounter4))).iLevel);
	 *               }
	 *               /****************ENDING*******************TO PRINT THE DATA******************************************
	 */

	// END DELETE V4.10f
	// BEGIN DELETE V4.10f
	// comment: commenting the entire function
	/*
	 * if(customerProductRowTemp.lCustomerProductLineID == custLR2ProdRow.lCustomerProductLineID && customerProductRowTemp.iObsolete == FINAL_ZERO)
	 * {
	 *   if((forbiddenProductRowTemp.lForbProductID == customerProductRowTemp.lProductID) && (FINAL_ONE == forbiddenProductRowTemp.iLevel))
	 *   {
	 *       iStatus             = FINAL_ONE;
	 *       throw new AfeException("ERRAFE_00635");
	 *   }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * }
	 * catch (AfeException afee)                       //catch block starts to catch exceptions
	 * {
	 * if(GAfePropertyLoader.DEBUG)
	 * {
	 * System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
	 * afee.printStackTrace(System.out);
	 * }
	 *
	 * throw afee;
	 * }
	 * catch (Exception ex)
	 * {
	 * if(GAfePropertyLoader.DEBUG)
	 * {
	 * ex.printStackTrace(System.out);
	 * }
	 * throw new AfeException("ERRCOM_00002",ex.getMessage());//unknown exception occurred
	 * }
	 *
	 * return iStatus;
	 * }
	 *
	 */

	//  END DELETE V4.10f
	//  BEGIN DELETE V 5.43e
	//  HANDLED IN MANAGER
	/*
	 protected int iSendNPRForComplexityCode(long lInputCustomerProductLineId) throws AfeException
	 {
	 CustomerAppointment custAppTable                                                = null;
	 CustomerAppointmentRow custAppRow                                               = null;
	 CustomerAppointmentRow custAppRowNew                                    = new CustomerAppointmentRow();


	 CustomerApp2CustomerProductL custApp2CustProdTable              = null;
	 CustomerApp2CustomerProductLRow custApp2CustProdRow             = null;
	 CustomerApp2CustomerProductLRow custApp2CustProdRowNew = new CustomerApp2CustomerProductLRow();


	 CustomerLink custLinkTable                                                              = null;
	 CustomerLinkRow custLinkRow                                                             = null;

	 long lOldCustomerAppointmentID                                                  = 0;
	 long lNewCustomerAppointmentID                                                  = 0;
	 long lCustomerLinkId                                                                    = 0;
	 long lCustomerProductLineId                                                             = 0;
	 long lOrderId                                                                                   = 0;
	 long iOtherProductsAttached                                                             = 0;

	 Vector vctCustApp2CustProd                                                              = new Vector();
	 Vector vctCustomerProductLineID                                                 = new Vector();
	 int iFlag                                                                                               = 0;
	 Vector vctTemp                                                                                  = new Vector();
	 Vector vctAddress                                                                               = new Vector();
	 BCustomerAddress bCustomerAddress                                               = new BCustomerAddress();
	 LCustomer lCustomer                                                                             = new LCustomer(teleSessionMgr);
	 NPRequest npRequest                                                                             = new NPRequest();
	 LAppointment lAppointment                                                               = new LAppointment(teleSessionMgr);
	 int             iAppointmentExist               = 0;


	 //    intializing the variables
	 ApplSaveAction  applSaveActionTable     = null;
	 ApplSaveActionRow applSaveActionRow     = null;

	 applSaveActionRow = new ApplSaveActionRow();
	 applSaveActionRow.arrArguments = new Class [1];
	 applSaveActionRow.arrParams = new Object [1] ;

	 try
	 {

	 //                  lOldCustomerAppointmentID=lCustomerAppointmentId;

	 //    getting the customerAppointment Table from session
	 custAppTable=   (CustomerAppointment)teleSessionMgr.getTable("CUSTOMERAPPOINTMENT");
	 custApp2CustProdTable=(CustomerApp2CustomerProductL)teleSessionMgr.getTable("CUSTOMERAPP2CUSTOMERPRODUCTL");
	 custLinkTable=(CustomerLink)teleSessionMgr.getTable("CUSTOMERLINK");

	 //    Gets the ApplsaveAction Container/table from session
	 applSaveActionTable=(ApplSaveAction) teleSessionMgr.getTable("APPLSAVEACTION");

	 vctCustApp2CustProd             =               custApp2CustProdTable.vctSearchByCustProdLineID(lInputCustomerProductLineId);

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------In side the send NPR for Complexity Code");
	 if(null != vctCustApp2CustProd && vctCustApp2CustProd.size() != FINAL_ZERO)
	 {
	 int ivctCustApp2CustProd        =       0;

	 ivctCustApp2CustProd    =       vctCustApp2CustProd.size();
	 for (int iCounter = FINAL_ZERO; iCounter < ivctCustApp2CustProd; iCounter++ )
	 {
	 custAppRow              = (CustomerAppointmentRow)custAppTable.carSearchByCustApptIDandObsolete(((CustomerApp2CustomerProductLRow)(vctCustApp2CustProd.elementAt(iCounter))).lCustomerAppointmentID, FINAL_ZERO);
	 if(custAppRow != null && custAppRow.lAppointmentTypeID == GAfeDescription.lGetTypeId("APPOINTMENTTYPE_INSTALLATION"))
	 {
	 iAppointmentExist       =       FINAL_ONE;
	 lOldCustomerAppointmentID       =       custAppRow.lCustomerAppointmentID;
	 break;
	 }
	 }
	 }

	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------In side the send NPR for Complexity Code lOldCustomerAppointmentID "+lOldCustomerAppointmentID     );
	 if(iAppointmentExist == FINAL_ZERO)
	 return FINAL_ZERO;

	 if(null!=custAppTable && null!=custApp2CustProdTable && null!=custLinkTable && null!=applSaveActionTable )
	 {
	 //    searching the customerAppointment table by CustomerAppointmentId
	 custAppRow=custAppTable.carSearchByCustApptID(lOldCustomerAppointmentID);

	 if(null!=custAppRow )
	 {
	 //    Creating a new record that is to be added in customerAppointment table
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------Data Changed/Added for the Appointment Module Starts---------------");

	 //    setting the variable lCustomerLinkID to be used latter
	 lCustomerLinkId                                         =       custAppRow.lCustomerLinkID;

	 //    Getting the Address
	 custLinkRow     =       custLinkTable.clrSearchByCustLinkID(lCustomerLinkId);

	 if(null !=      custLinkRow && makeAFEConnection())
	 {
	 bCustomerAddress=lCustomer.objSelectCustomerAddress(custLinkRow.lAddressID,gConnectAfe);
	 vctAddress.addElement(Long.valueOf(custLinkRow.lAddressID));
	 vctAddress.addElement(bCustomerAddress.strHouseNumber);
	 vctAddress.addElement(bCustomerAddress.strSubHouseNumber);
	 vctAddress.addElement(bCustomerAddress.strBox);
	 vctAddress.addElement(bCustomerAddress.strStreet);
	 vctAddress.addElement(bCustomerAddress.strPostCode);
	 vctAddress.addElement(bCustomerAddress.strCity);
	 }

	 iFlag = lAppointment.iCheckNP(lInputCustomerProductLineId);

	 //    Extra Condition

	 //    BEGIN DELETE V 5.43e
	 //    ONLY IfLAG == IfINAL oNE IS REQUIRED
	 //    if ((iFlag == FINAL_ONE) && (FINAL_ONE == iCheckToSendNPROrNot(lInputCustomerProductLineId)))
	 //    END DELETE V 5.43e
	 //    BEGIN ADD V 5.43e
	 if (iFlag == FINAL_ONE)
	 //    END ADD V 5.43e
	 {
	 vctCustomerProductLineID.addElement(String.valueOf(lInputCustomerProductLineId));
	 if(GAfePropertyLoader.DEBUG)
	 System.out.println("-----------------In side sendNPR            ");
	 npRequest=lAppointment.objPopulateNP(vctCustomerProductLineID,lOldCustomerAppointmentID,(custAppRow.tmWindowBegin).toString(),vctAddress);
	 npRequest.setField ("INSTALL_ADDRESS_ZIP_CODE",String.valueOf(vctAddress.elementAt(5)));


	 //     Setting the values of various variable in ApplSaveAction Row

	 applSaveActionRow = new ApplSaveActionRow();
	 applSaveActionRow.arrArguments = new Class [1];
	 applSaveActionRow.arrParams = new Object [1] ;
	 applSaveActionRow.iAction               = Record.INSERT;
	 applSaveActionRow.strType               = "NPREQUEST";
	 applSaveActionRow.strValue              = " ";
	 applSaveActionRow.strSystem             = "IAFEOUT";
	 applSaveActionRow.strMethodName = "sendNPR";    //the name of the IAFEOUT Method which needs to be called

	 applSaveActionRow.arrArguments[0]       = NPRequest.class;
	 applSaveActionRow.arrParams[0]          = npRequest;

	 //    adding the Newly created row to the ApplSaveaction Container/table
	 applSaveActionTable.addRecord(applSaveActionRow);

	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size() );

	 }
	 }

	 }

	 teleSessionMgr.putTable("CUSTOMERAPPOINTMENT",custAppTable);
	 teleSessionMgr.putTable("CUSTOMERAPP2CUSTOMERPRODUCTL",custApp2CustProdTable);
	 teleSessionMgr.putTable("CUSTOMERLINK",custLinkTable);
	 teleSessionMgr.putTable("APPLSAVEACTION",applSaveActionTable);
	 }

	 }
	 catch (SQLException sqle)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 sqle.printStackTrace();
	 }
	 AfeException afe = new AfeException("ERRCOM_00001" , sqle.getMessage());                //DataBase Error
	 throw afe;
	 }
	 catch (Exception ex)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 ex.printStackTrace();
	 }
	 AfeException afe = new AfeException("ERRCOM_00002",ex.getMessage());            //UnKnown Exception
	 throw afe;
	 }
	 finally
	 {
	 //                  closeAFEConnection();   //closing the connection
	 }

	 return(1);
	 }
	 */
	protected int iAppointmentExists(Long lCustomerProductLineID)
			throws AfeException {
		int iAppointmentExist = 0;
		Vector vctCustApp2CustProd = null;

		try {

			//          CustomerProductLineRow  customerProductLineRow  =       null;
			//          customerProductLineTable                                =       (CustomerProductLine)teleSessionMgr.getTable("CUSTOMERPRODUCTLINE");                                                    // Getting the Customer table from the session
			//          customerProductLineRow          =       customerProductLineTable.cplrSearchByCustProductLineID(lCustomerProductLineID.longValue());

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("The customerProductLineRow is : " +customerProductLineRow);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			CustomerAppointmentRow custAppRow = null;

			customerApp2CustomerProductLTable = (CustomerApp2CustomerProductL) teleSessionMgr
					.getTable("CUSTOMERAPP2CUSTOMERPRODUCTL"); // Getting the Customer table from the session
			customerAppointmentTable = (CustomerAppointment) teleSessionMgr
					.getTable(string_CUSTOMERAPPOINTMENT);

			if (null != customerApp2CustomerProductLTable) {
				vctCustApp2CustProd = customerApp2CustomerProductLTable
						.vctSearchByCustProdLineID(lCustomerProductLineID
								.longValue());
			}

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt("The vctCustApp2CustProd : "
						+ vctCustApp2CustProd);
			} // END MODIFY 9.00a

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			if ((null != vctCustApp2CustProd)
					&& (vctCustApp2CustProd.size() != FINAL_ZERO)) {
				for (int iCounter = FINAL_ZERO; iCounter < vctCustApp2CustProd
						.size(); iCounter++) {
					custAppRow = (CustomerAppointmentRow) customerAppointmentTable
							.carSearchByCustApptIDandObsolete(
									((CustomerApp2CustomerProductLRow) (vctCustApp2CustProd
											.elementAt(iCounter))).lCustomerAppointmentID,
									FINAL_ZERO);

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
						GLogger.chkpt("The custAppRow : " + custAppRow);
					} // END MODIFY 9.00a

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					if ((custAppRow != null)
							&& (custAppRow.lAppointmentTypeID == GAfeDescription
									.lGetTypeId("APPOINTMENTTYPE_INSTALLATION"))) {
						iAppointmentExist = FINAL_ONE;
					}
				}
			}

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt("IAppointmentExist. " + iAppointmentExist);
			} // END MODIFY 9.00a

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());

				// END MODIFY 9.00a
				//afee.printStackTrace(System.out);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return iAppointmentExist;
	}

	protected void vdReleaseLoginsNotUsed(
			BProductDetailProperty bProductDetailProperty, String strOldLogin)
			throws AfeException {
		boolean bIsLoginAttached = false;

		try {

			// BEGIN ADD V. 6.07h
			// if( bProductDetailProperty.lProductID.longValue() != GAfeDescription.lGetTypeId("PRODUCT_VON"))
			// {
			// END ADD V. 6.07h

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			// BEGIN MODIFY 9.00a
			GLogger.chkpt("The strOldLogin is : " + strOldLogin);

			// END MODIFY 9.00a

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			int iSizeOfvctProductSelected = 0;

			iSizeOfvctProductSelected = bProductDetailProperty.vctProductSelected
					.size();

			for (int iCounterVS = FINAL_ZERO; iCounterVS < iSizeOfvctProductSelected; iCounterVS++) {
				BProductDetail bProductDetail = new BProductDetail();

				bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(iCounterVS);
				bIsLoginAttached = false;

				BProductParameter bProductParameter = null;
				int iSizeOfvctParameters = 0;

				iSizeOfvctParameters = bProductDetail.vctParameters.size();

				for (int iCounterBPM = FINAL_ZERO; iCounterBPM < iSizeOfvctParameters; iCounterBPM++) {
					//bProductParameter = new BProductParameter();
					bProductParameter = (BProductParameter) ((Vector) bProductDetail.vctParameters)
							.elementAt(iCounterBPM);

					if (((GAfeDescription
							.strGetProperty("PRODUCTLINEIDENTIFIERTYPE_LOGIN"))
							.equals(String
									.valueOf(bProductParameter.lParameterID)))) {
						Vector vctParameterValuesBPM = null;

						vctParameterValuesBPM = (Vector) bProductParameter.vctParameterValues;

						int ivctParamValues = 0;

						ivctParamValues = vctParameterValuesBPM.size();

						for (int iCounterForParam = FINAL_ZERO; iCounterForParam < ivctParamValues; iCounterForParam++) {
							Vector vctInternalBPP = null;

							vctInternalBPP = (Vector) vctParameterValuesBPM
									.elementAt(iCounterForParam);

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */

							// BEGIN MODIFY 9.00a
							GLogger.chkpt("The vctInternalBPP is  : "
									+ vctInternalBPP);

							// END MODIFY 9.00a

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							if (((string_ONE).equalsIgnoreCase(String
									.valueOf(vctInternalBPP
											.elementAt(FINAL_ONE))))
									&& ((strOldLogin).equalsIgnoreCase(String
											.valueOf(vctInternalBPP
													.elementAt(FINAL_ZERO))))) {
								bIsLoginAttached = true;

								break;
							}
						}
					}

					if (bIsLoginAttached) {
						break;
					}
				}

				if (bIsLoginAttached) {
					break;
				}
			} // end of the for loop

			// BEGIN MODIFY 9.00a
			GLogger.chkpt(" login is attached to some other service flag "
					+ bIsLoginAttached);

			// END MODIFY 9.00a
			if (!bIsLoginAttached) {
				CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null; // Initializing the Object Class for the CustomerProductLineIdentifierRow table

				customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER); // Getting the customerProductLineIdentifier table from the session

				Vector vctcustomerProductLineIdentifier = new Vector();

				vctcustomerProductLineIdentifier = customerProductLineIdentifierTable
						.vctSearchBystrCustomerPLIdentifierValueandlCustomerProductLineIDandObsolete(
								bProductDetailProperty.lCustomerProductLineID
										.longValue(), strOldLogin, FINAL_ZERO);
				customerProductLineIdentifierRow = null;

				if (null != vctcustomerProductLineIdentifier) {
					customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctcustomerProductLineIdentifier
							.elementAt(FINAL_ZERO);
				}

				if (null != customerProductLineIdentifierTable) {
					if (null != customerProductLineIdentifierRow) {

						// Updating All the Values Over here
						// BEGIN DELETE V. 6.10d

						/*
						 * //customerProductLineIdentifierRow.iObsolete = NOTEXISTS;
						 */

						// END DELETE V. 6.10d
						// BEGIN ADD V. 6.10d
						// BEGIN DELETE V6.20d
						// if((bProductDetailProperty.lProductID).longValue() == GAfeDescription.PRODUCT_VON )
						// END DELETE V6.20d
						// BEGIN ADD V6.20d
						if (((bProductDetailProperty.lProductID).longValue() == GAfeDescription.PRODUCT_VON)
								|| (bProductDetailProperty.lProductID
										.longValue() == GAfeDescription.PRODUCT_DIGITALTV))

						// END ADD V6.20d
						{
							customerProductLineIdentifierRow.strModificationUser = bSession.strUserName;
							customerProductLineIdentifierRow.iObsolete = NOTEXISTS;

							if ((customerProductLineIdentifierRow.iStatusInDB == Record.VIEW)
									|| (customerProductLineIdentifierRow.iStatusInDB == Record.UPDATE)) {
								customerProductLineIdentifierRow.iStatusInDB = Record.UPDATE;
								customerProductLineIdentifierTable
										.updateRecord(customerProductLineIdentifierRow);
							}

							// when iStatusInDB is equal to Record.INSERT
							else {
								customerProductLineIdentifierRow.iStatusInDB = Record.DELETE;
								customerProductLineIdentifierTable
										.deleteRecord(customerProductLineIdentifierRow.lCustomerPLIdentifierID);
							}
						} else {
							customerProductLineIdentifierRow.iObsolete = FINAL_ZERO;

							// END ADD V. 6.10d
							customerProductLineIdentifierRow.strModificationUser = bSession.strUserName;

							if ((customerProductLineIdentifierRow.iStatusInDB == Record.VIEW)
									|| (customerProductLineIdentifierRow.iStatusInDB == Record.UPDATE)) {
								customerProductLineIdentifierRow.iStatusInDB = Record.UPDATE;
								customerProductLineIdentifierTable
										.updateRecord(customerProductLineIdentifierRow);
							}

							// when iStatusInDB is equal to Record.INSERT

							/*
							 * else
							 * {
							 *       customerProductLineIdentifierRow.iStatusInDB = Record.DELETE;
							 *       customerProductLineIdentifierTable.deleteRecord(customerProductLineIdentifierRow.lCustomerPLIdentifierID);
							 * }
							 */
						}
					} // end of the if loop
				} // end of the if loop

				// Put the container back into the session
				teleSessionMgr.putTable("CUSTOMERPRODUCTLINEIDENTIFIER",
						customerProductLineIdentifierTable);
			}

			// }
		} catch (AfeException afee) // catch block starts to catch exceptions
		{

			// BEGIN MODIFY 9.00a
			GLogger.chkpt(afee.strGetErrCode() + " ----------   "
					+ afee.strGetErrMsg());

			// END MODIFY 9.00a
			//afee.printStackTrace(System.out);

			throw afee;
		} catch (Exception ex) {
			//ex.printStackTrace(System.out);
			GLogger.logException(ex);
			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}
	}

	/**
	 *  DESCRIPTION :   This function replaces the special characters in the default logic string
	 *
	 *  @param          :       Long CustomerID, String strDefaultLogic, String strFinalString, int iStartFrom
	 *
	 *  @return         :       String  -       It Returns the final String of the Default Logic
	 * /******************************************************************************************************************************
	 */
	public String strChangeSpecialChar(String strDefaultLogic, Long lParameterID)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		String strFinalString = "";

		// Begin DEL v9.01d
		// String strLastString = "";
		// End DEL v9.01d
		int iStrLength = 0;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger
						.chkpt("In the Function strChangeSpecialChar the strDefaultLogic is : "
								+ strDefaultLogic);
			} // END MODIFY 9.00a

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			iStrLength = strDefaultLogic.length();

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt("The Default Logic strFinalString length: "
						+ iStrLength);
			} // END MODIFY 9.00a

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			for (int iCounter = FINAL_ZERO; iCounter < iStrLength; iCounter++) {
				char chElement = ' ';

				chElement = strDefaultLogic.charAt(iCounter);

				if (blnGetForProperty("PRODUCTPARAMETER_DEFAULTLOGIC_INTERNET",
						lParameterID)) {
					if ((224 == chElement) || (225 == chElement)
							|| (226 == chElement) || (227 == chElement)
							|| (228 == chElement) || (229 == chElement)) {
						chElement = 'a';
					} else if ((249 == chElement) || (250 == chElement)
							|| (251 == chElement) || (252 == chElement)) {
						chElement = 'u';
					} else if ((242 == chElement) || (243 == chElement)
							|| (244 == chElement) || (245 == chElement)
							|| (246 == chElement)) {
						chElement = 'o';
					} else if ((236 == chElement) || (237 == chElement)
							|| (238 == chElement) || (239 == chElement)) {
						chElement = 'i';
					} else if ((232 == chElement) || (233 == chElement)
							|| (234 == chElement) || (235 == chElement)) {
						chElement = 'e';
					} else if ((231 == chElement) || (233 == chElement)
							|| (234 == chElement) || (235 == chElement)) {
						chElement = 'c';
					} else if ((192 == chElement) || (193 == chElement)
							|| (194 == chElement) || (195 == chElement)
							|| (196 == chElement) || (197 == chElement)) {
						chElement = 'A';
					} else if ((217 == chElement) || (218 == chElement)
							|| (219 == chElement) || (220 == chElement)) {
						chElement = 'U';
					} else if ((210 == chElement) || (211 == chElement)
							|| (212 == chElement) || (213 == chElement)
							|| (214 == chElement)) {
						chElement = 'O';
					} else if ((204 == chElement) || (205 == chElement)
							|| (206 == chElement) || (207 == chElement)) {
						chElement = 'I';
					} else if ((200 == chElement) || (201 == chElement)
							|| (202 == chElement) || (203 == chElement)) {
						chElement = 'E';
					} else if ((199 == chElement)) {
						chElement = 'C';
					} else if (' ' == chElement) {

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("strFinalString     is space replacing by dot");
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
						chElement = '.';
					}

					// BEGIN ADD V5.35a
					// comment: Code added for LN 1342 to remove . in the begining e.g. .test@pandora.be
					else if (('.' == chElement) && (FINAL_ZERO == iCounter)) {
						chElement = ' ';
					}

					// END ADD V5.35a
				} else if (blnGetForProperty(
						"PRODUCTPARAMETER_DEFAULTLOGIC_CLI", lParameterID)) {
					if ((224 == chElement) || (225 == chElement)
							|| (226 == chElement) || (227 == chElement)
							|| (228 == chElement) || (229 == chElement)) {
						chElement = 'a';
					} else if ((249 == chElement) || (250 == chElement)
							|| (251 == chElement) || (252 == chElement)) {
						chElement = 'u';
					} else if ((242 == chElement) || (243 == chElement)
							|| (244 == chElement) || (245 == chElement)
							|| (246 == chElement)) {
						chElement = 'o';
					} else if ((236 == chElement) || (237 == chElement)
							|| (238 == chElement) || (239 == chElement)) {
						chElement = 'i';
					} else if ((232 == chElement) || (233 == chElement)
							|| (234 == chElement) || (235 == chElement)) {
						chElement = 'e';
					} else if ((231 == chElement) || (233 == chElement)
							|| (234 == chElement) || (235 == chElement)) {
						chElement = 'c';
					} else if ((192 == chElement) || (193 == chElement)
							|| (194 == chElement) || (195 == chElement)
							|| (196 == chElement) || (197 == chElement)) {
						chElement = 'A';
					} else if ((217 == chElement) || (218 == chElement)
							|| (219 == chElement) || (220 == chElement)) {
						chElement = 'U';
					} else if ((210 == chElement) || (211 == chElement)
							|| (212 == chElement) || (213 == chElement)
							|| (214 == chElement)) {
						chElement = 'O';
					} else if ((204 == chElement) || (205 == chElement)
							|| (206 == chElement) || (207 == chElement)) {
						chElement = 'I';
					} else if ((200 == chElement) || (201 == chElement)
							|| (202 == chElement) || (203 == chElement)) {
						chElement = 'E';
					} else if ((199 == chElement)) {
						chElement = 'C';
					}

					// Ignore In Case of Space Or Dot - 46
					else if ((' ' == chElement) || (46 == chElement)) {
						GLogger.chkpt("Inside else if statement ");	
						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("strFinalString     is space replacing by dot");
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
					}
				} // end of the if loop

				if (' ' != chElement) {
					strFinalString = strFinalString + chElement;
				}

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("strFinalString     : " +strFinalString);
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
			} // end of the for loop

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger
						.chkpt("In the Function strChangeSpecialChar the strFinalString is : "
								+ strFinalString);
			} // END MODIFY 9.00a

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
		} catch (Exception e) {
			throw e;
		}

		// Returning of the String
		return strFinalString;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function UnReserves the Number and Puts it into the session Vector
	 *
	 *  @param          :
	 *
	 *  @return         :       void    -       Returns Nothing
	 * /******************************************************************************************************************************
	 */
	protected void vdUnReserveTelNumberInCancel(String strNumber)
			throws Exception { // Starting Braces of the Function
		ApplCancelAction applCancelActionTable = null;
		ApplCancelActionRow applCancelActionRow = null;

		if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
			GLogger
					.chkpt("Reached function vdUnReserveTelNumberInCancel for strNumber - "
							+ strNumber);
		} // END MODIFY 9.00a

		try {

			// getting the ApplCancelAction container/table from session
			applCancelActionTable = (ApplCancelAction) teleSessionMgr
					.getTable("APPLCANCELACTION");

			if (null != applCancelActionTable) {
				applCancelActionRow = new ApplCancelActionRow();
				applCancelActionRow.iAction = Record.INSERT;
				applCancelActionRow.strType = string_TELNO;
				applCancelActionRow.strValue = " ";
				applCancelActionRow.strSystem = string_IAFEOUT;
				applCancelActionRow.strMethodName = string_strUnreserveTelNo;
				applCancelActionRow.arrArguments = new Class[2];
				applCancelActionRow.arrArguments[0] = String.class;
				applCancelActionRow.arrArguments[1] = String.class;

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
					GLogger
							.chkpt("**************************************************************************************************************");
					GLogger
							.chkpt("The for Appl cancel strUnreserveTelNo Number is : "
									+ strNumber);
					GLogger
							.chkpt("**************************************************************************************************************");
				} // END MODIFY 9.00a

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				applCancelActionRow.arrParams = new Object[2];
				applCancelActionRow.arrParams[0] = strNumber;
				applCancelActionRow.arrParams[1] = strNumber;
				applCancelActionTable.addRecord(applCancelActionRow);

				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
					GLogger
							.chkpt("Record added in session. the no of records in applCancelActionTable is "
									+ (applCancelActionTable.vctGetAll())
											.size());
				} // END MODIFY 9.00a

				teleSessionMgr.putTable("APPLCANCELACTION",
						applCancelActionTable);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function UnReserves the Number and Puts it into the session Vector
	 *
	 *  @param          :
	 *
	 *  @return         :       void    -       Returns Nothing
	 * /******************************************************************************************************************************
	 */
	protected void vdLPUnReserveTelNumbers(Vector vctTelNoTobeReleased)
			throws Exception { // Starting Braces of the Function

		// intializing the variables
		String strNumber = "";
		String strDN = "";

		// Gets the ApplsaveAction Container/table from session
		ApplSaveAction applSaveActionTable = null;
		ApplSaveActionRow applSaveActionRow = null;

		//applSaveActionRow = new ApplSaveActionRow();
		applSaveActionTable = (ApplSaveAction) teleSessionMgr
				.getTable(string_APPLSAVEACTION);

		if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
			GLogger
					.chkpt("Reached function vdLPUnReserveTelNumbers for vctTelNoTobeReleased - "
							+ vctTelNoTobeReleased);
		} // END MODIFY 9.00a

		try {
			int ivctTelNoTobeReleased = 0;

			ivctTelNoTobeReleased = vctTelNoTobeReleased.size();

			for (int iCounter = FINAL_ZERO; iCounter < ivctTelNoTobeReleased; iCounter++) {
				strDN = "";
				strNumber = String.valueOf(vctTelNoTobeReleased
						.elementAt(iCounter));
				strDN = strNumber;

				if ((null != strNumber) && (10 > (strNumber.length()))) {
					for (int iCnt = 0; iCnt < (10 - strNumber.length()); iCnt++) {
						strDN = string_ZERO + strDN;
					}
				}

				// Setting the variables of record to entered in Appl Save container
				applSaveActionRow = new ApplSaveActionRow();
				applSaveActionRow.arrArguments = new Class[1];
				applSaveActionRow.arrParams = new Object[1];
				applSaveActionRow.iAction = Record.INSERT;
				applSaveActionRow.strType = string_TELNO;
				applSaveActionRow.strValue = " ";
				applSaveActionRow.strSystem = string_IAFEOUT;
				applSaveActionRow.strMethodName = "strUnGetList"; // the name of the IAFEOUT Method which needs to be called
				applSaveActionRow.arrArguments[0] = String.class;
				applSaveActionRow.arrParams[0] = strDN;

				// adding the Newly created row to the ApplSaveaction Container/table
				applSaveActionTable.addRecord(applSaveActionRow);
			}

			teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveActionTable);
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function UnReserves the Number and Puts it into the session Vector
	 *
	 *  @param          :
	 *
	 *  @return         :       void    -       Returns Nothing
	 * /******************************************************************************************************************************
	 */
	protected String strHouseNumberFormatting(String strHouseNumber)
			throws Exception { // Starting Braces of the Function
		int iStrLength = 0;
		String strHouseNumberRet = "";
		char chElement = ' ';

		try {
			strHouseNumber = strHouseNumber.trim();
			iStrLength = strHouseNumber.length();

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("The House Number Formatting Input is : " +strHouseNumber);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			for (int iCounter = FINAL_ZERO; iCounter < iStrLength; iCounter++) {
				chElement = ' ';
				chElement = strHouseNumber.charAt(iCounter);

				if ((chElement >= 48) && (chElement <= 57)) {
					strHouseNumberRet = strHouseNumberRet
							+ String.valueOf(chElement);
				}
			}

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("The House Number Formatting Output is : " +strHouseNumberRet);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return strHouseNumberRet;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function UnReserves the Number and Puts it into the session Vector
	 *
	 *  @param          :       Long lAddressID
	 *
	 *  @return         :       void    -       Returns Nothing
	 * /******************************************************************************************************************************
	 */
	protected long lGetSAPIDForNeighboursManualAddressID(long lAddressID)
			throws Exception { // Starting Braces of the Function

		// intializing the variables
		// Begin DEL v9.01d
		// boolean bIsEven = false;
		// End DEL v9.01d
		long lServiceAddressID = 0;

		// Begin DEL v9.01d
		// int iHouseNumber = 0;
		// String strNodeID = "";
		// End DEL v9.01d
		// Connection Object of Connection to CasSap set to null
		// BEGIN DELETE v5.71d
		// GConnectCatsap gConnect = null;
		// Initialising CallableStatement.
		// CallableStatement csStmt1 = null;             //Callable      statement object
		// Initialising the ResultSet
		// ResultSet rsGetData = null;                           //Making an Object of the ResultSet
		// END DELETE v5.71d
		// BEGIN ADD v5.71d
		AfeNinasOut objAfeNinasOut = null;

		// Begin DEL v9.01d
		// BSAPDetailsFromCATSAP[] arrBsapDetailsFromCATSAP = null;
		// End DEL v9.01d
		BSAPDetailsFromCATSAP objSapDetails = null;

		// END ADD v5.71d

		try {

			// Making an Object of Customer Loader
			// Begin DEL v9.01d
			// LCustomer lCustomer = new LCustomer(teleSessionMgr);
			// End DEL v9.01d
			addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session
			actionTable = (Action) teleSessionMgr.getTable(string_ACTION); // Getting the Vat table from the session
			manualAddressTable = (ManualAddress) teleSessionMgr
					.getTable(string_MANUALADDRESS); // Getting the Customer table from the session

			AddressRow addressRow = null;
			Vector vctAddressInternal = null;

			vctAddressInternal = addressTable.vctSearchByAddressIDandObsolete(
					lAddressID, FINAL_ZERO);

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("vctAddressInternal - "+vctAddressInternal);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			if ((null == vctAddressInternal)
					|| (FINAL_ZERO == vctAddressInternal.size())) {

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("THE ERROR IS - ERRAFE_00512 - There Should be Atleast one Address for the Customer for - ");
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
				throw new AfeException(string_ERRAFE_00512);
			} else if (null != vctAddressInternal) {

				// Check Whether there is a Open Action of the Type Address Request against it.
				addressRow = null;
				addressRow = (AddressRow) vctAddressInternal
						.elementAt(FINAL_ZERO);

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("addressRow - "+addressRow);
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */

				// Begin DEL v9.01d
				/*
				 * try {
				 *   iHouseNumber = 0;
				 *   iHouseNumber = Integer.parseInt(strHouseNumberFormatting(addressRow.strHouseNumber));
				 *
				 *   if (FINAL_ZERO == (iHouseNumber % 2)) {
				 *       //The House Number is Even
				 *       bIsEven = true;
				 *   } else {
				 *       //The House Number is Odd
				 *       bIsEven = false;
				 *   }
				 *
				 * } catch (NumberFormatException nfe) {
				 *   throw nfe;
				 * }
				 */

				// End DEL v9.01d
				// No SapID Available move for the Manual Address ID
				if (FINAL_ZERO != addressRow.lManualAddressID) {
					ManualAddressRow manualAddressRow = null;

					manualAddressRow = manualAddressTable
							.marSearchByManualAddressID(addressRow.lManualAddressID);

					if (null != manualAddressRow) {

						// Got the Manual Address ID
						// BEGIN ADD v5.71d
						String strHouseNr = (addressRow.strHouseNumber).trim();

						if (strHouseNr.length() > 5) {
							strHouseNr = strHouseNr.substring(0, 5);
						}

						objAfeNinasOut = new AfeNinasOut();

						//                      BEGIN DELETE: ver 5.85a

						/*
						 arrBsapDetailsFromCATSAP =
						 objAfeNinasOut.arrSearchSapDetailByAddress(null,
						 (manualAddressRow.strZip).trim(),
						 (manualAddressRow.strCity).trim(),
						 (manualAddressRow.strStreetName).trim(),
						 strHouseNr, null, null);

						 if (arrBsapDetailsFromCATSAP != null && arrBsapDetailsFromCATSAP.length > 0)
						 {
						 lServiceAddressID =
						 Long.parseLong(arrBsapDetailsFromCATSAP[0].getServiceAddId());
						 }
						 else
						 {
						 */

						//                      END DELETE: ver 5.85a
						//                      BEGIN DELETE: ver 5.81a
						/*
						 objSapDetails = objAfeNinasOut.objGetSapInfoByAddress(null,
						 (manualAddressRow.strZip).trim(),
						 (manualAddressRow.strCity).trim(),
						 (manualAddressRow.strStreetName).trim(),
						 null, null, null); //Pass house number as null to get neighbours Info
						 */

						//                      END DELETE: ver 5.81a
						// BEGIN DELETE v5.86a
						/*
						 * / BEGIN ADD: Ver 5.81a
						 * objSapDetails = objAfeNinasOut.objGetSapInfoByAddress(null,
						 * (manualAddressRow.strZip).trim(),
						 * (manualAddressRow.strCity).trim(),
						 * (manualAddressRow.strStreetName).trim(),
						 * null, null, null, true);
						 *
						 *           //Pass true as bNeighbourinfo to get neighbours Info
						 * / END ADD: ver 5.81a
						 */

						// END DELETE v5.86a
						// BEGIN ADD v5.86a
						objSapDetails = objAfeNinasOut.objGetSapInfoByAddress(
								null, (manualAddressRow.strZip).trim(),
								(manualAddressRow.strCity).trim(),
								(manualAddressRow.strStreetName).trim(),
								strHouseNr, null, null, true);

						// END ADD v5.86a
						if (objSapDetails != null) {
							lServiceAddressID = Long.parseLong(objSapDetails
									.getServiceAddId());
						}

						//                      BEGIN DELETE: ver 5.85a
						// }
						//                      END DELETE: ver 5.85a
						// END ADD v5.71d
						// BEGIN DELETE v5.71d
						//                                             gConnect = new GConnectCatsap(this);
						//
						//                                                                   if (gConnect.bIsCatsapConnected())
						//                                                                   {
						//                                                                           //calling the Stored Proc
						//                                                                           csStmt1 = gConnect.csPrepareCall("{CALL CS_ADDR_CHECK_BY_ADDRESS(?,?,?,?)}");
						//
						//                                                                           csStmt1.setLong(1, Long.parseLong((manualAddressRow.strZip).trim()));
						//                                                                           csStmt1.setString(2, (manualAddressRow.strCity).trim());
						//                                                                           csStmt1.setString(3, (manualAddressRow.strStreetName).trim());
						//
						//                                                                           String strHouseNr = (addressRow.strHouseNumber).trim();
						//
						//                                                                           if (strHouseNr.length() > 5)
						//                                                                           {
						//                                                                                   strHouseNr = strHouseNr.substring(0, 5);
						//                                                                           }
						//
						//                                                                           csStmt1.setString(4, strHouseNr);
						//
						//                                                                           if (GAfePropertyLoader.DEBUG)
						//                                                                           {
						//                                                                                   System.out.println("manualAddressRow.strZip     =       " + manualAddressRow.strZip);
						//                                                                                   System.out.println("manualAddressRow.strCity            =       " + manualAddressRow.strCity);
						//                                                                                   System.out.println("manualAddressRow.strStreetName      =       " + manualAddressRow.strStreetName);
						//                                                                                   System.out.println("strHouseNr                                          =       " + strHouseNr);
						//                                                                           }
						//
						//                                                                           csStmt1.execute();
						//                                                                           rsGetData = csStmt1.getResultSet();
						//
						//                                                                           if (null != rsGetData && rsGetData.next())
						//                                                                           {
						//                                                                                   if (GAfePropertyLoader.DEBUG)
						//                                                                                   {
						//                                                                                           System.out.println("Got the Resultset..");
						//                                                                                   }
						//
						//                                                                                   lServiceAddressID = (long) (rsGetData.getLong("SAP"));
						//
						//                                                                                   if (GAfePropertyLoader.DEBUG)
						//                                                                                   {
						//                                                                                           System.out.println("lServiceAddressID   =       " + lServiceAddressID);
						//                                                                                   }
						//
						//                                                                           }
						//                                                                           else
						//                                                                           {
						//                                                                                   if (csStmt1.getMoreResults())
						//                                                                                   {
						//                                                                                           rsGetData = csStmt1.getResultSet();
						//                                                                                           if (GAfePropertyLoader.DEBUG)
						//                                                                                           {
						//                                                                                                   System.out.println("Got the resultset...Second time..");
						//                                                                                           }
						//
						//                                                                                           strNodeID = "";
						//
						//                                                                                           while (null != rsGetData && rsGetData.next())
						//                                                                                           {
						//                                                                                                   if (GAfePropertyLoader.DEBUG)
						//                                                                                                   {
						//                                                                                                           System.out.println("House No    =       " + rsGetData.getObject("HOUSENUMBER").toString());
						//                                                                                                           System.out.println("strNodeID   =       " + strNodeID);
						//                                                                                                   }
						//
						//                                                                                                   try
						//                                                                                                   {
						//                                                                                                           iHouseNumber = 0;
						//                                                                                                           iHouseNumber = Integer.parseInt(strHouseNumberFormatting(rsGetData.getObject("HOUSENUMBER").toString()));
						//
						//                                                                                                           if (FINAL_ZERO == (iHouseNumber % 2))
						//                                                                                                           {
						//                                                                                                                   if (bIsEven)
						//                                                                                                                   {
						//                                                                                                                           //The House Number is Even
						//                                                                                                                           lServiceAddressID = (long) (rsGetData.getLong("SAP"));
						//                                                                                                                           ;
						//                                                                                                                           break;
						//                                                                                                                   }
						//                                                                                                                   else
						//                                                                                                                   {
						//                                                                                                                           continue;
						//                                                                                                                   }
						//                                                                                                           }
						//                                                                                                           else if (FINAL_ZERO != (iHouseNumber % 2))
						//                                                                                                           {
						//                                                                                                                   if (!bIsEven)
						//                                                                                                                   {
						//                                                                                                                           //The House Number is Even
						//                                                                                                                           lServiceAddressID = (long) (rsGetData.getLong("SAP"));
						//                                                                                                                           break;
						//                                                                                                                   }
						//                                                                                                                   else
						//                                                                                                                   {
						//                                                                                                                           continue;
						//                                                                                                                   }
						//                                                                                                           }
						//                                                                                                   }
						//                                                                                                   catch (NumberFormatException nfe)
						//                                                                                                   {
						//                                                                                                           throw nfe;
						//                                                                                                   }
						//                                                                                           }
						//                                                                                   }
						//                                                                           }
						//
						//                                                                           //BEGIN ADD V5.10a
						//                                                                           //comment: closing the resultset and statement
						//                                                                           if (null != rsGetData)
						//                                                                           {
						//                                                                                   rsGetData.close();
						//                                                                                   rsGetData = null;
						//                                                                           }
						//                                                                           if (null != csStmt1)
						//                                                                           {
						//                                                                                   csStmt1.close();
						//                                                                                   csStmt1 = null;
						//                                                                           }
						//                                                                           //END ADD V5.10a
						//
						//
						//                                                                           if (GAfePropertyLoader.DEBUG)
						//                                                                           {
						//                                                                                   System.out.println("The lServiceAddressID is - " + lServiceAddressID);
						//                                                                           }
						//
						//                                                                   }//end of the if loop
						// END DELETE v5.71d
					} // end of the if loop
				} else {

					// Did Not Got the Manual Address ID

					/**
					 * **************STARTING*****************TO PRINT THE DATA
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * System.out.println("THE ERROR IS - ERRAFE_00686 - No SAPID and Manual AddressID Available");
					 * }
					 * /****************ENDING*******************TO PRINT THE DATA******************************************
					 */
					throw new AfeException(string_ERRAFE_00686);
				} // end of the if else if loop
			} // end of the if loop
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
				
			} // END MODIFY 9.00a

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// BEGIN ADD V5.10a
		// comment added finally block
		// BEGIN DELETE v5.71d
		//        finally
		//              {
		//                      try
		//                      {
		//                              //comment: closing the resultset and statement
		//                              if (null != rsGetData)
		//                              {
		//                                      rsGetData.close();
		//                                      rsGetData = null;
		//                              }
		//                              if (null != csStmt1)
		//                              {
		//                                      csStmt1.close();
		//                                      csStmt1 = null;
		//                              }
		//                              if (null != gConnect)
		//                              {
		//                                      gConnect.bClose();
		//                              }
		//                      }
		//                      catch (Exception e)
		//                      {
		//                              //consume the exception
		//                      }
		//              }
		// END DELETE v5.71d
		return lServiceAddressID;
	}

	/**
	 *  DESCRIPTION :   This function UnReserves the Number and Puts it into the session Vector
	 *
	 *  @param          :       Long lAddressID
	 *
	 *  @return         :       void    -       Returns Nothing
	 * /******************************************************************************************************************************
	 */
	protected String strGetZoneIDForNeighboursManualAddressID(long lAddressID)
			throws Exception { // Starting Braces of the Function

		// intializing the variables
		// Begin DEL v9.01d
		// boolean bIsEven = false;
		// End DEL v9.01d
		String strZoneID = "";

		// Begin DEL v9.01d
		// String strNodeID = "";
		// int iHouseNumber = 0;
		// End DEL v9.01d
		long lSapID = 0;
		boolean bSession = false;
		boolean bDatabase = false;

		// BEGIN DELETE V5.71d
		// Connection Object of Connection to CasSap set to null
		// GConnectCatsap gConnect = null;
		// Initialising CallableStatement.
		// CallableStatement csStmt1 = null;             //Callable      statement object
		// Initialising the ResultSet
		// ResultSet rsGetData = null;
		// END DELETE v5.71d
		// BEGIN ADD V5.71d
		AfeNinasOut objAfeNinasOut = null;

		// Begin DEL v9.01d
		// BSAPDetailsFromCATSAP[] arrBsapDetailsFromCATSAP = null;
		// End DEL v9.01d
		BSAPDetailsFromCATSAP objSapDetails = null;

		// END ADD v5.71d

		// BEGIN ADD V5.10a
		// comment: declaring here to increase scope
		ResultSet rsRetrieve = null;

		// END ADD V5.10a

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect1 = null;
		PreparedStatement psSelect2 = null;

		// END ADD V 5.70b

		if (makeAFEConnection()) // if connection is made
		{
			try {

				// Making an Object of Customer Loader
				// Begin DEL v9.01d
				// LCustomer lCustomer = new LCustomer(teleSessionMgr);
				// End DEL v9.01d
				String strSql = null;

				// BEGIN DELETE V5.10a
				// comment: already declared
				// ResultSet rsRetrieve = null;
				// END DELETE V5.10a

				addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session
				actionTable = (Action) teleSessionMgr.getTable(string_ACTION); // Getting the Vat table from the session
				manualAddressTable = (ManualAddress) teleSessionMgr
						.getTable(string_MANUALADDRESS); // Getting the Customer table from the session

				AddressRow addressRow = null;
				Vector vctAddressInternal =null;

				vctAddressInternal = addressTable
						.vctSearchByAddressIDandObsolete(lAddressID, FINAL_ZERO);

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("vctAddressInternal - "+vctAddressInternal);
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
				if ((null == vctAddressInternal)
						|| (FINAL_ZERO == vctAddressInternal.size())) {

					// BEGIN DELETE V 5.70b
					// strSql    =       "";
					// strSql    =       "SELECT * FROM ADDRESS WHERE ADDRESSID= " + lAddressID + " AND OBSOLETE = 0";
					// /****************STARTING****************TO PRINT THE DATA********************************************
					// if(GAfePropertyLoader.DEBUG)
					// {
					// System.out.println("The Querry is " +strSql);
					// }
					// /****************ENDING*******************TO PRINT THE DATA*******************************************/
					// rsRetrieve = gConnectAfe.rsQuery(strSql);
					// END DELETE V 5.70b
					// BEGIN ADD V 5.70b
					strSql = "";
					strSql = "SELECT * FROM ADDRESS WHERE ADDRESSID= ? AND OBSOLETE = 0";
					psSelect1 = gConnectAfe.psPrepareStatement(strSql);
					psSelect1.setLong(1, lAddressID);
					rsRetrieve = psSelect1.executeQuery();

					// END ADD V 5.70b

					if (null != rsRetrieve) {
						bDatabase = true;
					} else {

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("THE ERROR IS - ERRAFE_00512 - There Should be Atleast one Address for the Customer for - ");
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
						throw new AfeException(string_ERRAFE_00512);
					}
				} else {
					bSession = true;
				}

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("bSession - " +bSession);
				 * System.out.println("BEGIN DELETE V 5.46aatabase - " +BEGIN DELETE V 5.46aatabase);
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
				if (bSession
						|| (bDatabase && (null != rsRetrieve) && rsRetrieve
								.next())) {

					// Check Whether there is a Open Action of the Type Address Request against it.
					if (bSession) {
						addressRow = null;
						addressRow = (AddressRow) vctAddressInternal
								.elementAt(FINAL_ZERO);

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("addressRow - "+addressRow);
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
					}

					// Begin DEL v9.01d

					/*
					 * try {
					 *   iHouseNumber = 0;
					 *
					 *   if (bSession) {
					 *       iHouseNumber = Integer.parseInt(strHouseNumberFormatting(addressRow.strHouseNumber));
					 *   } else if (bDatabase) {
					 *       iHouseNumber = Integer.parseInt(strHouseNumberFormatting(rsRetrieve.getString("HOUSENUMBER")));
					 *   }
					 *   if (FINAL_ZERO == (iHouseNumber % 2)) {
					 *       //The House Number is Even
					 *       bIsEven = true;
					 *   } else {
					 *       //The House Number is Odd
					 *       bIsEven = false;
					 *   }
					 * } catch (NumberFormatException nfe) {
					 *   throw nfe;
					 * }
					 */

					// End DEL v9.01d
					lSapID = 0;

					long lManualAddressID = 0;

					if (bSession) {

						// Got the SapID
						lSapID = addressRow.lServiceAddressID;
					} else if (bDatabase) {
						lSapID = rsRetrieve.getLong("SERVICEADDRESSID");
					}

					if (FINAL_ZERO == lSapID) {
						if (bSession) {

							// Got the SapID
							lManualAddressID = addressRow.lManualAddressID;
						} else if (bDatabase) {
							lManualAddressID = rsRetrieve
									.getLong("MANUALADDRESSID");
						}
					}

					// BEGIN ADD V5.10a
					// comment: closing resultset
					if (null != rsRetrieve) {
						rsRetrieve.close();

						// BEGIN DELETE V 5.70b
						// rsRetrieve.getStatement().close();
						// END DELETE V 5.70b
						rsRetrieve = null;
					}

					// END ADD V5.10a
					if (FINAL_ZERO != lSapID) {

						// Got the SapID Continue with the Original Flow
						// BEGIN DELETE V 5.71d

						/*
						 * IAFEOUT iAfeOut = new IAFEOUT();
						 *
						 * strZoneID = iAfeOut.strGetZone(lSapID);
						 * strZoneID = FINAL_ZERO + strZoneID;             //      Appending one Zero for Business Logic
						 */

						// END DELETE V 5.71d
						// BEGIN ADD V 5.71d
						objAfeNinasOut = new AfeNinasOut();
						objSapDetails = objAfeNinasOut
								.objSearchSapDetailBySap(lSapID);

						if (objSapDetails != null) {
							strZoneID = FINAL_ZERO + ""
									+ objSapDetails.getUserZone();
						}

						// END ADD V 5.71d
					}

					// No SapID Available move for the Manual Address ID
					else if (FINAL_ZERO != lManualAddressID) {

						// BEGIN DELETE V 5.70b
						// strSql        =       "";
						// strSql        =       "SELECT * FROM MANUALADDRESS WHERE MANUALADDRESSID = " + lManualAddressID + " AND OBSOLETE = 0";
						// /****************STARTING****************TO PRINT THE DATA********************************************
						// if(GAfePropertyLoader.DEBUG)
						// {
						// System.out.println("The Querry is " +strSql);
						// }
						// /****************ENDING*******************TO PRINT THE DATA*******************************************/
						// rsRetrieve = gConnectAfe.rsQuery(strSql);
						// END DELETE V 5.70b
						// BEGIN ADD V 5.70b
						strSql = "";
						strSql = "SELECT * FROM MANUALADDRESS WHERE MANUALADDRESSID = ? AND OBSOLETE = 0";
						psSelect2 = gConnectAfe.psPrepareStatement(strSql);
						psSelect2.setLong(1, lManualAddressID);
						rsRetrieve = psSelect2.executeQuery();

						// END ADD V 5.70b

						if ((null != rsRetrieve) && rsRetrieve.next()) {

							// Got the Manual Address ID
							// BEGIN ADD V5.71D
							String strHouseNr = "";

							if (bSession) {
								strHouseNr = (addressRow.strHouseNumber).trim();
							} else if (bDatabase) {
								strHouseNr = rsRetrieve
										.getString("HOUSENUMBER");
							}

							if (strHouseNr.length() > 5) {
								strHouseNr = strHouseNr.substring(0, 5);
							}

							objAfeNinasOut = new AfeNinasOut();

							//                          BEGIN DELETE: ver 5.85a

							/*
							 arrBsapDetailsFromCATSAP = objAfeNinasOut.arrSearchSapDetailByAddress
							 (null, rsRetrieve.getString("ZIP"), rsRetrieve.getString("CITY"),
							 rsRetrieve.getString("STREETNAME"), strHouseNr, null, null);

							 if (arrBsapDetailsFromCATSAP != null)
							 {
							 strZoneID = "" + arrBsapDetailsFromCATSAP[0].getUserZone();
							 }
							 else
							 {
							 */

							//                          END DELETE: ver 5.85a
							//                          BEGIN DELETE: ver 5.81a
							/*
							 objSapDetails = objAfeNinasOut.objGetSapInfoByAddress(null,
							 rsRetrieve.getString("ZIP"), rsRetrieve.getString("CITY"),
							 rsRetrieve.getString("STREETNAME"), null, null, null);
							 //Pass house number as null to get neighbours Info

							 */

							//                          END DELETE: ver 5.81a
							// BEGIN DELETE v5.86a
							/*
							 * / BEGIN ADD: Ver 5.81a
							 * objSapDetails = objAfeNinasOut.objGetSapInfoByAddress(null,
							 * rsRetrieve.getString("ZIP"), rsRetrieve.getString("CITY"),
							 * rsRetrieve.getString("STREETNAME"), null, null, null, true);
							 *
							 * /Pass true as bNeighbourInfo to get neighbours Info
							 *
							 * / END ADD: ver 5.81a
							 */

							// END DELETE v5.86a
							// BEGIN ADD v5.86a
							objSapDetails = objAfeNinasOut
									.objGetSapInfoByAddress(null, rsRetrieve
											.getString("ZIP"), rsRetrieve
											.getString("CITY"), rsRetrieve
											.getString("STREETNAME"),
											strHouseNr, null, null, true);

							// END ADD v5.86a
							if (objSapDetails != null) {
								strZoneID = "" + objSapDetails.getUserZone();
							}

							//                          BEGIN DELETE: ver 5.85a
							// }
							//                          END DELETE: ver 5.85a

							// END ADD v5.71d
							// BEGIN DELETE v5.71d
							//                            gConnect = new GConnectCatsap(this);
							//
							//                                                      if (gConnect.bIsCatsapConnected())
							//                                                      {
							//                                                              //calling the Stored Proc
							//                                                              csStmt1 = gConnect.csPrepareCall("{CALL CS_ADDR_CHECK_BY_ADDRESS(?,?,?,?)}");
							//
							//                                                              csStmt1.setLong(1, rsRetrieve.getLong("ZIP"));
							//                                                              csStmt1.setString(2, rsRetrieve.getString("CITY"));
							//                                                              csStmt1.setString(3, rsRetrieve.getString("STREETNAME"));
							//
							//                                                              String strHouseNr = "";
							//
							//                                                              if (bSession)
							//                                                              {
							//                                                                      //Got the SapID
							//                                                                      strHouseNr = (addressRow.strHouseNumber).trim();
							//                                                              }
							//                                                              else if (bDatabase)
							//                                                              {
							//                                                                      strHouseNr = rsRetrieve.getString("HOUSENUMBER");
							//                                                              }
							//
							//
							//                                                              if (strHouseNr.length() > 5)
							//                                                              {
							//                                                                      strHouseNr = strHouseNr.substring(0, 5);
							//                                                              }
							//
							//                                                              csStmt1.setString(4, strHouseNr);
							//
							//                                                              csStmt1.execute();
							//                                                              rsGetData = csStmt1.getResultSet();
							//
							//                                                              if (null != rsGetData && rsGetData.next())
							//                                                              {
							//                                                                      if (GAfePropertyLoader.DEBUG)
							//                                                                      {
							//                                                                              System.out.println("Got the Resultset..");
							//                                                                      }
							//
							//                                                                      strZoneID = rsGetData.getString("USED_ZONE");
							//
							//                                                                      if (GAfePropertyLoader.DEBUG)
							//                                                                      {
							//                                                                              System.out.println("strZoneID   =       " + strZoneID);
							//                                                                      }
							//
							//                                                              }
							//                                                              else
							//                                                              {
							//                                                                      if (csStmt1.getMoreResults())
							//                                                                      {
							//                                                                              rsGetData = csStmt1.getResultSet();
							//                                                                              if (GAfePropertyLoader.DEBUG)
							//                                                                              {
							//                                                                                      System.out.println("Got the resultset...Second time..");
							//                                                                              }
							//
							//                                                                              strNodeID = "";
							//
							//                                                                              while (null != rsGetData && rsGetData.next())
							//                                                                              {
							//                                                                                      if (GAfePropertyLoader.DEBUG)
							//                                                                                      {
							//                                                                                              System.out.println("House No    =       " + rsGetData.getObject("HOUSENUMBER").toString());
							//                                                                                              System.out.println("strNodeID   =       " + strNodeID);
							//                                                                                      }
							//
							//                                                                                      try
							//                                                                                      {
							//                                                                                              iHouseNumber = 0;
							//                                                                                              iHouseNumber = Integer.parseInt(strHouseNumberFormatting(rsGetData.getObject("HOUSENUMBER").toString()));
							//
							//                                                                                              if (FINAL_ZERO == (iHouseNumber % 2))
							//                                                                                              {
							//                                                                                                      if (bIsEven)
							//                                                                                                      {
							//                                                                                                              //The House Number is Even
							//                                                                                                              strZoneID = rsGetData.getString("USED_ZONE");
							//                                                                                                              break;
							//                                                                                                      }
							//                                                                                                      else
							//                                                                                                      {
							//                                                                                                              continue;
							//                                                                                                      }
							//                                                                                              }
							//                                                                                              else if (FINAL_ZERO != (iHouseNumber % 2))
							//                                                                                              {
							//                                                                                                      if (!bIsEven)
							//                                                                                                      {
							//                                                                                                              //The House Number is Even
							//                                                                                                              strZoneID = rsGetData.getString("USED_ZONE");
							//                                                                                                              break;
							//                                                                                                      }
							//                                                                                                      else
							//                                                                                                      {
							//                                                                                                              continue;
							//                                                                                                      }
							//                                                                                              }
							//                                                                                      }
							//                                                                                      catch (NumberFormatException nfe)
							//                                                                                      {
							//                                                                                              throw nfe;
							//                                                                                      }
							//                                                                              }
							//                                                                      }
							//                                                              }
							//
							//                                                              //BEGIN ADD V5.10a
							//                                                              //comment: closing resultset and statement
							//                                                              if (null != rsGetData)
							//                                                              {
							//                                                                      rsGetData.close();
							//                                                                      rsGetData = null;
							//
							//                                                              }
							//                                                              if (null != csStmt1)
							//                                                              {
							//                                                                      csStmt1.close();
							//                                                                      csStmt1 = null;
							//                                                              }
							//                                                              //END ADD V5.10a
							//
							//                                                              if (GAfePropertyLoader.DEBUG)
							//                                                              {
							//                                                                      System.out.println("The strZoneID is - " + strZoneID);
							//                                                              }
							//
							//                                                      }//end of the if loop
							// END DELETE v5.71d
						} // end of the if loop

						// BEGIN ADD V5.10a
						// comment: closing resultset
						if (null != rsRetrieve) {
							rsRetrieve.close();

							// BEGIN DELETE V 5.70b
							// rsRetrieve.getStatement().close();
							// END DELETE V 5.70b
							rsRetrieve = null;
						}

						// END ADD V5.10a
					} else {

						// Did Not Got the Manual Address ID

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("THE ERROR IS - ERRAFE_00686 - No SAPID and Manual AddressID Available");
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
						throw new AfeException(string_ERRAFE_00686);
					} // end of the if else if loop
				} // end of the if loop
			} catch (Exception ex) {
				if (GAfePropertyLoader.DEBUG) {
					//ex.printStackTrace(System.out);
					GLogger.logException(ex);
				}

				AfeException afee = new AfeException(string_ERRCOM_00002, ex
						.getMessage()); // unknown exception occurred

				throw afee;
			} finally {
				try {

					// BEGIN ADD V5.10a
					// comment: closing resultset and statement
					if (null != rsRetrieve) {
						rsRetrieve.close();

						// BEGIN DELETE V 5.70b
						// rsRetrieve.getStatement().close();
						// END DELETE V 5.70b
						rsRetrieve = null;
					}

					// BEGIN DELETE v5.71d
					//                                      if (null != rsGetData)
					//                                      {
					//                                              rsGetData.close();
					//                                              rsGetData = null;
					//
					//                                      }
					//                                      if (null != csStmt1)
					//                                      {
					//                                              csStmt1.close();
					//                                              csStmt1 = null;
					//                                      }
					// END DELETE v5.71d
					// BEGIN ADD V 5.70b
					if (null != psSelect1) {
						psSelect1.close();
						psSelect1 = null;
					}

					if (null != psSelect2) {
						psSelect2.close();
						psSelect2 = null;
					}

					// END ADD V 5.70b
					// BEGIN DELETE v5.71d
					// Close the CatSap connection
					//                                      if (null != gConnect)
					//                                              gConnect.bClose();
					// END DELETE v5.71d
					// END ADD V5.10a

					closeAFEConnection(); // closing the connection
				} catch (Exception ex) {
					AfeException afee = new AfeException("ERRCOM_00001", ex
							.getMessage()); // Database error occured

					throw afee;
				}
			}
		}

		return strZoneID;
	}

	/**
	 *  DESCRIPTION :   This function will validate whether not more than 2 accounts are linked
	 *                                  with this ProductLines that are Purchased by the Customer
	 *
	 *  @param          :
	 *
	 *  @return         :       void    -       Returns Nothing
	 * /******************************************************************************************************************************
	 */
	protected long iValidateProductLineAccountFnc(
			BProductDetailProperty bProductDetailProperty) throws Exception { // Starting Braces of the Function

		/** ******************************************************************************************************** */

		// intializing the variables
		int iMainFlag = 0;
		boolean bToThrowException = false;

		/** ******************************************************************************************************** */

		// intializing OF Group variables
		long lCustomerLink1ID = 0;

		// Begin DEL v9.01d
		// long lAddress1ID = 0;
		// End DEL v9.01d
		long lPayMeth1ID = 0;
		long lCustomerLink2ID = 0;

		// Begin DEL v9.01d
		// long lAddress2ID = 0;
		// End DEL v9.01d
		long lPayMeth2ID = 0;
		long lCustomerLink3ID = 0;

		// Begin DEL v9.01d
		// long lAddress3ID = 0;
		// End DEL v9.01d
		long lPayMeth3ID = 0;

		// intializing OF Group variables

		/** ******************************************************************************************************** */
		try {
			if (null != teleSessionMgr
					.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

				// Vector for storing all the Data that is populated in the tablular form
				bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

				if (null != teleSessionMgr
						.getValue("BProductDetailRole_aCProduct")) {
					BProductRole bProductRole = null;

					// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
					bProductRole = (BProductRole) teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct);

					BProductRoleDetail bProductRoleDetail = null;

					for (int iCounter = FINAL_ZERO; iCounter < bProductRole.vctProductRole
							.size(); iCounter++) {
						//bProductRoleDetail = new BProductRoleDetail();
						bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
								.elementAt(iCounter);

						if (GAfeDescription.lGetTypeId(string_ROLETYPE_USAGE) == bProductRoleDetail.lRoleTypeID
								.longValue()) {

							// Changes Done as the Validation of the Accounts was failing the Proff Companies
							// giving user roles to there employees
							// lCustomer1ID              =       bProductRoleDetail.lCustomerID.longValue();
							// lAddress1ID               =       bProductRoleDetail.lAddressID.longValue();
							// lPayMeth1ID               =       bProductDetailProperty.lPaymentMethodUsage.longValue();
							// Begin DEL v9.01d
							// CustomerLinkRow customerLinkRow = null;
							// End DEL v9.01d
							customerLinkTable = (CustomerLink) teleSessionMgr
									.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

							Vector vctObjCLInternal = null;

							vctObjCLInternal = customerLinkTable
									.vctSearchByCustomerIDandObsolete(
											bProductRoleDetail.lCustomerID
													.longValue(), FINAL_ZERO);
							lCustomerLink1ID = ((CustomerLinkRow) vctObjCLInternal
									.elementAt(FINAL_ZERO)).lCustomerLinkID;

							// Begin DEL v9.01d
							// lAddress1ID = bProductRoleDetail.lAddressID.longValue();
							// End DEL v9.01d
							lPayMeth1ID = bProductDetailProperty.lPaymentMethodUsage
									.longValue();
						} else if (GAfeDescription.lGetTypeId(string_ROLETYPE_RC) == bProductRoleDetail.lRoleTypeID
								.longValue()) {

							// Changes Done as the Validation of the Accounts was failing the Proff Companies
							// giving user roles to there employees
							// lCustomer2ID              =       bProductRoleDetail.lCustomerID.longValue();
							// lAddress2ID               =       bProductRoleDetail.lAddressID.longValue();
							// lPayMeth2ID               =       bProductDetailProperty.lPaymentMethodRC.longValue();
							// Begin DEL v9.01d
							// CustomerLinkRow customerLinkRow = null;
							// End DEL v9.01d
							customerLinkTable = (CustomerLink) teleSessionMgr
									.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

							Vector vctObjCLInternal = null;

							vctObjCLInternal = customerLinkTable
									.vctSearchByCustomerIDandObsolete(
											bProductRoleDetail.lCustomerID
													.longValue(), FINAL_ZERO);
							lCustomerLink2ID = ((CustomerLinkRow) vctObjCLInternal
									.elementAt(FINAL_ZERO)).lCustomerLinkID;

							// Begin DEL v9.01d
							// lAddress2ID = bProductRoleDetail.lAddressID.longValue();
							// End DEL v9.01d
							lPayMeth2ID = bProductDetailProperty.lPaymentMethodRC
									.longValue();
						} else if (GAfeDescription.lGetTypeId(string_ROLETYPE_NRC) == bProductRoleDetail.lRoleTypeID
								.longValue()) {

							// Changes Done as the Validation of the Accounts was failing the Proff Companies
							// giving user roles to there employees
							// lCustomer3ID              =       bProductRoleDetail.lCustomerID.longValue();
							// lAddress3ID               =       bProductRoleDetail.lAddressID.longValue();
							// lPayMeth3ID               =       bProductDetailProperty.lPaymentMethodNRC.longValue();
							// Begin DEL v9.01d
							// CustomerLinkRow customerLinkRow = null;
							// End DEL v9.01d
							customerLinkTable = (CustomerLink) teleSessionMgr
									.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

							Vector vctObjCLInternal = null;

							vctObjCLInternal = customerLinkTable
									.vctSearchByCustomerIDandObsolete(
											bProductRoleDetail.lCustomerID
													.longValue(), FINAL_ZERO);

							// BEGIN DELETE V4.10l
							// comment: CustomerLinkID is begin set to CustomerID so deleted.
							// lCustomerLink3ID  =       bProductRoleDetail.lCustomerID.longValue();
							// END DELETE V4.10l
							// BEGIN ADD V4.10l
							// comment: CustomerLinkID for NRC type is begin set
							lCustomerLink3ID = ((CustomerLinkRow) vctObjCLInternal
									.elementAt(FINAL_ZERO)).lCustomerLinkID;

							// END ADD V4.10l
							// Begin DEL v9.01d
							// lAddress3ID = bProductRoleDetail.lAddressID.longValue();
							// End DEL v9.01d
							lPayMeth3ID = bProductDetailProperty.lPaymentMethodNRC
									.longValue();
						} // end of the if else if loop
					} // end of the for loop

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */

					/**
					 * if(GAfePropertyLoader.DEBUG)
					 * {
					 * System.out.println("lCustomerLink1ID - " +lCustomerLink1ID);
					 * System.out.println("lCustomerLink2ID - " +lCustomerLink2ID);
					 * System.out.println("lCustomerLink3ID - " +lCustomerLink3ID);
					 *
					 * System.out.println("lAddress1ID - " +lAddress1ID);
					 * System.out.println("lAddress2ID - " +lAddress2ID);
					 * System.out.println("lAddress3ID - " +lAddress3ID);
					 *
					 * System.out.println("lPayMeth1ID - " +lPayMeth1ID);
					 * System.out.println("lPayMeth2ID - " +lPayMeth2ID);
					 * System.out.println("lPayMeth3ID - " +lPayMeth3ID);
					 * }
					 */

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */

					// BEGIN DELETE V5.31a
					// comment: condition needs to be modified to check for only one payer customer account
					/**
					 * if (!(((lCustomerLink1ID == lCustomerLink2ID) && (lAddress1ID == lAddress2ID) && (lPayMeth1ID == lPayMeth2ID)) ||
					 * ((lCustomerLink1ID == lCustomerLink3ID) && (lAddress1ID == lAddress3ID) && (lPayMeth1ID == lPayMeth3ID)) ||
					 * ((lCustomerLink2ID == lCustomerLink3ID) && (lAddress2ID == lAddress3ID) && (lPayMeth2ID == lPayMeth3ID))  ) )
					 * {
					 * bToThrowException  =       true;
					 * }
					 */
					// END DELETE V5.31a
					// BEGIN ADD V5.31a
					// comment: check that only one payer customer account is linked to the line
					if (!(((lCustomerLink1ID == lCustomerLink2ID) && (lPayMeth1ID == lPayMeth2ID))
							&& ((lCustomerLink1ID == lCustomerLink3ID) && (lPayMeth1ID == lPayMeth3ID)) && ((lCustomerLink2ID == lCustomerLink3ID) && (lPayMeth2ID == lPayMeth3ID)))) {
						bToThrowException = true;
					}

					// END ADD V5.31a

					/**
					 * This Code is Written to find out all the Number of Unique Accounts for the Given Unique CustomerID
					 * AddressID and PaymentMethodID
					 */
					if (bToThrowException) {
						throw new AfeException("ERRAFE_00478"); // throws AfeException is case number of account attached to productline are more than 2
					} // end of the if loop
				} // end of the if loop
			} // end of the if loop
		} // end of the try block
		catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				// System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			GLogger.logException(afee);

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			GLogger.logException(ex);

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return Flag
		return iMainFlag;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function will validate whether not more than 2 accounts are linked
	 *                                  with this ProductLines that are Purchased by the Customer
	 *
	 *  @param          :
	 *
	 *  @return         :       void    -       Returns Nothing
	 * /******************************************************************************************************************************
	 */
	protected boolean bValidateSameCustAddandPayMeth(
			BProductDetailProperty bProductDetailProperty,
			BProductRoleDetail bProductRoleDetail, long lCustomerID,
			long lAddressID, long lPayMethID) throws Exception { // Starting Braces of the Function

		// intializing the variables
		boolean bMainFlag = false;

		try {

			// If the customerid and the address id is same as the before one
			if ((lCustomerID == bProductRoleDetail.lCustomerID.longValue())
					&& ((lAddressID == bProductRoleDetail.lAddressID
							.longValue()))) {

				// check if the paymentmethodid is also same as the earlier one
				if (GAfeDescription.lGetTypeId(string_ROLETYPE_USAGE) == bProductRoleDetail.lRoleTypeID
						.longValue()) {
					if (lPayMethID == bProductDetailProperty.lPaymentMethodUsage
							.longValue()) {

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("Campared for ROLETYPE_USAGE");
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
						bMainFlag = true;
					}
				} else if (GAfeDescription.lGetTypeId(string_ROLETYPE_RC) == bProductRoleDetail.lRoleTypeID
						.longValue()) {
					if (lPayMethID == bProductDetailProperty.lPaymentMethodRC
							.longValue()) {

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("Campared for ROLETYPE_RC");
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
						bMainFlag = true;
					}
				} else if (GAfeDescription.lGetTypeId(string_ROLETYPE_NRC) == bProductRoleDetail.lRoleTypeID
						.longValue()) {
					if (lPayMethID == bProductDetailProperty.lPaymentMethodNRC
							.longValue()) {

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("Campared for ROLETYPE_NRC");
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
						bMainFlag = true;
					}
				} // end of the if else if loop
				else {

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
						GLogger.chkpt("Not Campared");
					} // END MODIFY 9.00a

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				}
			} // end of the if loop
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
			} // END MODIFY 9.00a

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return BO
		return bMainFlag;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function will validate whether not more than 2 accounts are linked
	 *                                  with this ProductLines that are Purchased by the Customer
	 *
	 *  @param          :
	 *
	 *  @return         :       void    -       Returns Nothing
	 * /******************************************************************************************************************************
	 */
	protected int iValidateProductLineAccountMainFnc(
			BProductDetailProperty bProductDetailProperty) throws Exception { // Starting Braces of the Function

		// intializing the variables
		int iMainFlag = 0;
		long lCustomerLinkID = 0;
		long lPaymentMethodID = 0;
		Vector vctOfCustomerAccount = new Vector();
		Vector vctMainOfProductLines = new Vector();
		Vector vctMainOfAccounts = new Vector();
		Vector vctMainCustAddress = new Vector();
		Vector vctInternal = null;

		// BEGIN ADD V5.10a
		// comment: removed from body and declared here
		ResultSet rsGetPLData = null; // Making an Object of the ResultSet
		ResultSet rsGetChTypeData = null; // Making an Object of the ResultSet
		ResultSet rsGetData = null; // Making an Object of the ResultSet

		// END ADD V5.10a

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect1 = null;
		PreparedStatement psSelect2 = null;
		PreparedStatement psSelect3 = null;

		// END ADD V 5.70b

		try {
			if (makeAFEConnection()) // if connection is made
			{
				StringBuffer strSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				customerLinkTable = (CustomerLink) teleSessionMgr
						.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session
				customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
						.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session
				customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session
				customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
						.getTable(string_CUSTOMERCHARGETYPE); // Getting the Customer table from the session
				customerAccountTable = (CustomerAccount) teleSessionMgr
						.getTable("CUSTOMERACCOUNT"); // Getting the Customer table from the session

				if (null != teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

					// Vector for storing all the Data that is populated in the tablular form
					bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
							.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

					if (null != teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct)) {
						BProductRole bProductRole =null;

						// Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
						bProductRole = (BProductRole) teleSessionMgr
								.getValue(string_BProductDetailRole_aCProduct);

						BProductRoleDetail bProductRoleDetail = null;

						for (int iCounter = FINAL_ZERO; iCounter < bProductRole.vctProductRole
								.size(); iCounter++) {
							bProductRoleDetail = new BProductRoleDetail();
							bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
									.elementAt(iCounter);

							if (GAfeDescription.lGetTypeId(string_ROLETYPE_USAGE) == bProductRoleDetail.lRoleTypeID
									.longValue()) {

								/**
								 * **************STARTING*****************TO PRINT THE DATA
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * System.out.println("The BProductRoleDetail for the User Role is " +bProductRoleDetail);
								 * }
								 * /****************ENDING*******************TO PRINT THE DATA******************************************
								 */

								/**
								 * This Code is Written to find out whether all the accounts that are linked to this customerid and
								 * AddressID
								 */
								lPaymentMethodID = bProductDetailProperty.lPaymentMethodUsage
										.longValue();

								/** *********Storing all the CustomerAccounts into the Vector from the Session *********** */
								Vector vctObjCLInternal = new Vector();

								vctObjCLInternal = customerLinkTable
										.clrSearchByCustIDAddIDandObsolete(
												bProductRoleDetail.lCustomerID
														.longValue(),
												bProductRoleDetail.lAddressID
														.longValue(),
												FINAL_ZERO);

								/**
								 * **************STARTING*****************TO PRINT THE DATA
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * System.out.println("bProductRoleDetail.lCustomerID " +bProductRoleDetail.lCustomerID);
								 * System.out.println("bProductRoleDetail.lAddressID  " +bProductRoleDetail.lAddressID);
								 * }
								 * /****************ENDING*******************TO PRINT THE DATA******************************************
								 */
								if ((null != vctObjCLInternal)
										&& (FINAL_ZERO != vctObjCLInternal
												.size())) {
									CustomerLinkRow customerLinkRow = null;

									customerLinkRow = (CustomerLinkRow) vctObjCLInternal
											.elementAt(FINAL_ZERO);
									lCustomerLinkID = customerLinkRow.lCustomerLinkID;

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
										GLogger.chkpt("lPaymentMethodID "
												+ lPaymentMethodID);
									} // END MODIFY 9.00a

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
										GLogger.chkpt("lCustomerLinkID "
												+ lCustomerLinkID);
									} // END MODIFY 9.00a

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									Vector vctCustomerAccount = new Vector(); // Initializing the Object Class for the Currency table

									vctCustomerAccount = customerAccountTable
											.vctSearchByCustomerLinkIDandPayMethIDandObsolete(
													lCustomerLinkID,
													lPaymentMethodID,
													FINAL_ZERO);

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
										GLogger.chkpt("vctCustomerAccount "
												+ vctCustomerAccount);
									} // END MODIFY 9.00a

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									if (null != vctCustomerAccount) {
										for (int iCACounter = FINAL_ZERO; iCACounter < vctCustomerAccount
												.size(); iCACounter++) {
											CustomerAccountRow customerAccountRow = null; // Initializing the Object Class for the Currency table

											customerAccountRow = (CustomerAccountRow) vctCustomerAccount
													.elementAt(iCACounter);

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */
											if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY 9.00a
												GLogger
														.chkpt("lCustomerAccountID "
																+ customerAccountRow.lCustomerAccountID);
											} // END MODIFY 9.00a

											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
											vctOfCustomerAccount
													.addElement(Long.valueOf(
															customerAccountRow.lCustomerAccountID));
										} // end of the for loop
									} // end of the if loop
								} // end of the if loop

								// If you find one account then don't go to CDM for account
								if (FINAL_ZERO == vctOfCustomerAccount.size()) {

									/** *********Storing all the CustomerAccounts into the Vector from the CDM *********** */

									/* Making the Querry Statement */

									// BEGIN DELETE V5.10a
									// comment: declared in declaration segment of the fnction
									// ResultSet rsGetData               = null;                         // Making an Object of the ResultSet
									// END DELETE V5.10a
									// BEGIN DELETE V 5.70b
									// strSql.setLength(0);                                              //Initialising
									// //Query change
									// strSql.append("SELECT * FROM CUSTOMERACCOUNT WHERE CUSTOMERLINKID IN ( ");
									// strSql.append("SELECT CUSTOMERLINKID FROM CUSTOMERLINK WHERE CUSTOMERID = ").append(bProductRoleDetail.lCustomerID).append(" AND ADDRESSID = ").append(bProductRoleDetail.lAddressID).append(" AND OBSOLETE = 0 ");
									// strSql.append(" ) ").append(" AND PAYMENTMETHODID = ").append(lPaymentMethodID).append(" AND OBSOLETE = 0 ");
									// /* Printing out the Querry made prior to its firing */
									// /****************STARTING****************TO PRINT THE DATA********************************************/
									// if(GAfePropertyLoader.DEBUG)
									// {
									// System.out.println("The Querry is : " + strSql);
									// }
									// /****************ENDING*******************TO PRINT THE DATA*******************************************/
									// /* Firing the Querry and taking the Result as a ResultSet */
									// rsGetData = gConnectAfe.rsQuery(strSql.toString());
									// END DELETE V 5.70b
									// BEGIN ADD V 5.70b
									strSql.setLength(0); // Initialising
									strSql
											.append("SELECT * FROM CUSTOMERACCOUNT WHERE CUSTOMERLINKID IN (");
									strSql
											.append(" SELECT CUSTOMERLINKID FROM CUSTOMERLINK");
									strSql.append(" WHERE CUSTOMERID = ?");
									strSql
											.append(" AND ADDRESSID = ? AND OBSOLETE = 0 ) ");
									strSql
											.append(" AND PAYMENTMETHODID = ? AND OBSOLETE = 0 ");
									psSelect1 = gConnectAfe
											.psPrepareStatement(strSql
													.toString());
									psSelect1.setLong(1,
											(bProductRoleDetail.lCustomerID)
													.longValue());
									psSelect1.setLong(2,
											(bProductRoleDetail.lAddressID)
													.longValue());
									psSelect1.setLong(3, lPaymentMethodID);
									rsGetData = psSelect1.executeQuery();

									// END ADD V 5.70b

									/*
									 *   Making a WHILE Loop that moves from the first Record to the Last Record
									 *   and in which we add all the result's to a local internal vector which
									 *   further adds the record to the external vector that is returned.
									 *   Each Record in the External Vector is added as a Row of all the Records
									 *   that are fetched from the ResultSet's each Row
									 */
									if (null != rsGetData) {
										while (rsGetData.next()) {
											if (-1 == vctOfCustomerAccount
													.indexOf(Long.valueOf(
															rsGetData
																	.getLong("CUSTOMERACCOUNTID")))) {
												vctOfCustomerAccount
														.addElement(Long.valueOf(
																rsGetData
																		.getLong("CUSTOMERACCOUNTID")));
											}
										} // end of the if loop
									} // end of the if loop

									// Ended Making the Vector of CustomerAccount both from the session and the cdm
									// BEGIN ADD V5.10a
									// comment: closing the open resultset
									if (null != rsGetData) {
										rsGetData.close();

										// BEGIN DELETE V 5.70b
										// rsGetData.getStatement().close();
										// END DELETE V 5.70b
										rsGetData = null;
									}

									// END ADD V5.10a
								} // end of the if loop

								/**
								 * **************STARTING****************TO PRINT THE DATA
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * System.out.println("The vctOfCustomerAccount is : " +vctOfCustomerAccount);
								 * }
								 * /****************ENDING*******************TO PRINT THE DATA******************************************
								 */

								// Started Making the Vector of all the ProductLine's that are linked to the Customer Account
								if ((null != vctOfCustomerAccount)
										&& (FINAL_ZERO != vctOfCustomerAccount
												.size())) {
									for (int iMPLCounter = FINAL_ZERO; iMPLCounter < vctOfCustomerAccount
											.size(); iMPLCounter++) {

										// Making the Vector of all the Product Lines from the Session
										CustomerChargeTypeRow customerChargeTypeRow = null; // Initializing the Object Class for the Currency table
										Vector vctObjCPLID = new Vector();

										vctObjCPLID = customerChargeTypeTable
												.vctSearchByCustomerAccountID(
														((Long) vctOfCustomerAccount
																.elementAt(iMPLCounter))
																.longValue(),
														FINAL_ZERO);

										if (null != vctObjCPLID) {
											for (int iCTYCounter = FINAL_ZERO; iCTYCounter < vctObjCPLID
													.size(); iCTYCounter++) {
												customerChargeTypeRow = new CustomerChargeTypeRow();
												customerChargeTypeRow = (CustomerChargeTypeRow) vctObjCPLID
														.elementAt(iCTYCounter);

												if (-1 == vctMainOfProductLines
														.indexOf(Long.valueOf(
																customerChargeTypeRow.lCustomerProductLineID))) {
													vctMainOfProductLines
															.addElement(Long.valueOf(
																	customerChargeTypeRow.lCustomerProductLineID));
												} // end of the if loop
											} // end of the for loop
										} // end of the if loop

										// Making the Vector of all the Product Lines from the CDM

										/* Making the Querry Statement */

										// BEGIN DELETE V5.10a
										// comment: declared in declaration segment
										// ResultSet rsGetChTypeData             = null;                         // Making an Object of the ResultSet
										// END DELETE V5.10a
										// BEGIN DELETE V 5.70b
										// strSql.setLength(0);                                          //Initialising
										// strSql.append("SELECT * FROM CUSTOMERCHARGETYPE WHERE CUSTOMERACCOUNTID = ").append(((Long)vctOfCustomerAccount.elementAt(iMPLCounter)).longValue()).append(" AND OBSOLETE = 0");
										// /* Printing out the Querry made prior to its firing */
										// /****************STARTING****************TO PRINT THE DATA********************************************
										// if(GAfePropertyLoader.DEBUG)
										// {
										// System.out.println("The Querry is : " + strSql);
										// }
										// /****************ENDING*******************TO PRINT THE DATA*******************************************/
										// /* Firing the Querry and taking the Result as a ResultSet */
										// rsGetChTypeData = gConnectAfe.rsQuery(strSql.toString());
										// END DELETE V 5.70b
										// BEGIN ADD V 5.70b
										strSql.setLength(0); // Initialising
										strSql
												.append(" SELECT * FROM CUSTOMERCHARGETYPE");
										strSql
												.append(" WHERE CUSTOMERACCOUNTID = ? AND OBSOLETE = 0");
										psSelect2 = gConnectAfe
												.psPrepareStatement(strSql
														.toString());
										psSelect2
												.setLong(
														1,
														((Long) vctOfCustomerAccount
																.elementAt(iMPLCounter))
																.longValue());
										rsGetChTypeData = psSelect2
												.executeQuery();

										// END ADD V 5.70b

										/*
										 *       Making a WHILE Loop that moves from the first Record to the Last Record
										 *   and in which we add all the result's to a local internal vector which
										 *   further adds the record to the external vector that is returned.
										 *   Each Record in the External Vector is added as a Row of all the Records
										 *   that are fetched from the ResultSet's each Row
										 */
										if (null != rsGetChTypeData) {
											while (rsGetChTypeData.next()) {
												if (-1 == vctMainOfProductLines
														.indexOf(Long.valueOf(
																rsGetChTypeData
																		.getLong("CUSTOMERPRODUCTLINEID")))) {
													vctMainOfProductLines
															.addElement(Long.valueOf(
																	rsGetChTypeData
																			.getLong("CUSTOMERPRODUCTLINEID")));
												}
											} // end of the if loop
										} // end of the if loop

										// BEGIN ADD V5.10a
										// comment: closing the open resultset
										if (null != rsGetChTypeData) {
											rsGetChTypeData.close();

											// BEGIN DELETE V 5.70b
											// rsGetChTypeData.getStatement().close();
											// END DELETE V 5.70b
											rsGetChTypeData = null;
										}

										// END ADD V5.10a
									} // end of the for loop

									/**
									 * **************STARTING****************TO PRINT THE DATA
									 * if(GAfePropertyLoader.DEBUG)
									 * {
									 * System.out.println("The vctMainOfProductLines is : " +vctMainOfProductLines);
									 * }
									 * /****************ENDING*******************TO PRINT THE DATA******************************************
									 */
									if ((null != vctMainOfProductLines)
											&& (FINAL_ZERO != vctMainOfProductLines
													.size())) {
										for (int iPLVctCounter = FINAL_ZERO; iPLVctCounter < vctMainOfProductLines
												.size(); iPLVctCounter++) {
											CustomerChargeTypeRow customerChargeTypeRow = null; // Initializing the Object Class for the Currency table
											Vector vctObjCPLID = new Vector();

											vctObjCPLID = customerChargeTypeTable
													.vctSearchByCustomerProductLineIDandObsolete(
															((Long) vctMainOfProductLines
																	.elementAt(iPLVctCounter))
																	.longValue(),
															FINAL_ZERO);

											if (null != vctObjCPLID) {
												for (int iChTypeCounter = FINAL_ZERO; iChTypeCounter < vctObjCPLID
														.size(); iChTypeCounter++) {
													customerChargeTypeRow = new CustomerChargeTypeRow();
													customerChargeTypeRow = (CustomerChargeTypeRow) vctObjCPLID
															.elementAt(iChTypeCounter);

													if (-1 == vctMainOfAccounts
															.indexOf(Long.valueOf(
																	customerChargeTypeRow.lCustomerAccountID))) {
														vctMainOfAccounts
																.addElement(Long.valueOf(
																		customerChargeTypeRow.lCustomerAccountID));
													} // end of the if loop
												} // end of the for loop
											} // end of the if loop

											/* Making the Querry Statement */

											// BEGIN DELETE V5.10a
											// comment: to  be declared in declaration segment
											// ResultSet rsGetPLData             = null;                         // Making an Object of the ResultSet
											// END DELETE V5.10a
											// BEGIN DELETE V 5.70b
											// strSql.setLength(0);                                              //Initialising
											// strSql.append("SELECT * FROM CUSTOMERCHARGETYPE WHERE CUSTOMERPRODUCTLINEID = ").append(((Long)vctMainOfProductLines.elementAt(iPLVctCounter)).longValue()).append(" AND OBSOLETE = 0");
											// /* Printing out the Querry made prior to its firing */
											// /****************STARTING****************TO PRINT THE DATA********************************************
											// if(GAfePropertyLoader.DEBUG)
											// {
											// System.out.println("The Querry is : " + strSql);
											// }
											// /****************ENDING*******************TO PRINT THE DATA*******************************************/
											// /* Firing the Querry and taking the Result as a ResultSet */
											// rsGetPLData = gConnectAfe.rsQuery(strSql.toString());
											// END DELETE V 5.70b
											// BEGIN ADD V 5.70b
											strSql.setLength(0); // Initialising
											strSql
													.append(" SELECT * FROM CUSTOMERCHARGETYPE");
											strSql
													.append(" WHERE CUSTOMERPRODUCTLINEID = ? AND OBSOLETE = 0");
											psSelect3 = gConnectAfe
													.psPrepareStatement(strSql
															.toString());
											psSelect3
													.setLong(
															1,
															((Long) vctMainOfProductLines
																	.elementAt(iPLVctCounter))
																	.longValue());
											rsGetPLData = psSelect3
													.executeQuery();

											// END ADD V 5.70b

											/*
											 *   Making a WHILE Loop that moves from the first Record to the Last Record
											 *   and in which we add all the result's to a local internal vector which
											 *   further adds the record to the external vector that is returned.
											 *   Each Record in the External Vector is added as a Row of all the Records
											 *   that are fetched from the ResultSet's each Row
											 */
											if (null != rsGetPLData) {
												while (rsGetPLData.next()) {
													if (-1 == vctMainOfAccounts
															.indexOf(Long.valueOf(
																	rsGetPLData
																			.getLong("CUSTOMERACCOUNTID")))) {
														vctMainOfAccounts
																.addElement(Long.valueOf(
																		rsGetPLData
																				.getLong("CUSTOMERACCOUNTID")));
													} // end of the if loop
												} // end of the if loop
											} // end of the if loop

											// BEGIN ADD V5.10a
											// comment: closing the open resultset
											if (null != rsGetPLData) {
												rsGetPLData.close();

												// BEGIN DELETE V 5.70b
												// rsGetPLData.getStatement().close();
												// END DELETE V 5.70b
												rsGetPLData = null;
											}

											// END ADD V5.10a
										} // end of the for loop
									} // end of the if loop
								} // end of the if loop

								/**
								 * **************STARTING****************TO PRINT THE DATA
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * System.out.println("Before Checking the Size vctMainOfAccounts is : " +vctMainOfAccounts);
								 * }
								 * /****************ENDING*******************TO PRINT THE DATA******************************************
								 */
								if (2 < vctMainOfAccounts.size()) {
									throw new AfeException("ERRAFE_00478"); // throws AfeException is case number of account attached to productline are more than 2
								} // end of the if loop

								long lCustomerAccountID = 0;

								if ((null != vctMainOfAccounts)
										&& (FINAL_ZERO != vctMainOfAccounts
												.size())) {
									for (int iCount = FINAL_ZERO; iCount < vctMainOfAccounts
											.size(); iCount++) {
										lCustomerAccountID = 0;
										lCustomerAccountID = ((Long) vctMainOfAccounts
												.elementAt(iCount)).longValue();

										Vector vctCustomerAccount = new Vector(); // Initializing the Object Class for the Currency table

										vctCustomerAccount = customerAccountTable
												.vctSearchByCustomerAccountID(lCustomerAccountID);

										/**
										 * **************STARTING****************TO PRINT THE DATA
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("vctCustomerAccount: " +vctCustomerAccount);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
										if (null != vctCustomerAccount) {
											for (int iCLkCounter = FINAL_ZERO; iCLkCounter < vctCustomerAccount
													.size(); iCLkCounter++) {
												CustomerAccountRow customerAccountRow =null;

												customerAccountRow = (CustomerAccountRow) vctCustomerAccount
														.elementAt(iCLkCounter);

												/**
												 * **************STARTING****************TO PRINT THE DATA
												 * if(GAfePropertyLoader.DEBUG)
												 * {
												 * System.out.println("customerAccountRow.iObsolete: " +customerAccountRow.iObsolete);
												 * }
												 * /****************ENDING*******************TO PRINT THE DATA******************************************
												 */
												if (FINAL_ZERO == customerAccountRow.iObsolete) {
													Vector vctObjCLRowInternal = null;

													vctObjCLRowInternal = customerLinkTable
															.vctSearchByCustomerLinkIDandObsolete(
																	customerAccountRow.lCustomerLinkID,
																	FINAL_ZERO);

													if (null != vctObjCLRowInternal) {
														for (int iCLinkCount = FINAL_ZERO; iCLinkCount < vctObjCLRowInternal
																.size(); iCLinkCount++) {
															CustomerLinkRow customerLinkRow =null;

															customerLinkRow = (CustomerLinkRow) vctObjCLRowInternal
																	.elementAt(iCLinkCount);
															vctInternal = new Vector();
															vctInternal
																	.addElement(Long.valueOf(
																			customerLinkRow.lCustomerID));
															vctInternal
																	.addElement(Long.valueOf(
																			customerLinkRow.lAddressID));
															vctInternal
																	.addElement(Long.valueOf(
																			customerAccountRow.lPaymentMethodID));

															/**
															 * **************STARTING****************TO PRINT THE DATA
															 * if(GAfePropertyLoader.DEBUG)
															 * {
															 * System.out.println("Adding to vctMainCustAddress vctInternal: " +vctInternal);
															 * }
															 * /****************ENDING*******************TO PRINT THE DATA******************************************
															 */
															vctMainCustAddress
																	.addElement(vctInternal);
														} // end of the for loop
													} // end of the if loop
												} // end of the if loop
											} // end of the for loop
										} // end of the if loop
									} // end of the for loop
								} // end of the if loop

								// Ended Making the Vector of all the ProductLine's that are linked to the Customer Account

								/**
								 * This Code is Written to find out whether all the accounts that are linked to this customerid and
								 * AddressID
								 */
							} // end of the if loop
						} // end of the for loop

						/**
						 * **************STARTING****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("The vctMainCustAddress is : " +vctMainCustAddress);
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */

						// Begin DEL v9.01d
						// boolean bThrowException = false;
						boolean bComparedFirst = false;
						boolean bComparedSecond = false;

						// boolean bComparedThird = false;
						// End DEL v9.01d
						if ((null != vctMainOfAccounts)
								&& (2 == vctMainOfAccounts.size())) {
							bComparedFirst = false;
							bComparedSecond = false;

							// Begin DEL v9.01d
							// bComparedThird = false;
							// long lPayMethID = 0;
							// End DEL v9.01d
							bProductRoleDetail = null;

							for (int iCounter = FINAL_ZERO; iCounter < bProductRole.vctProductRole
									.size(); iCounter++) {
								bProductRoleDetail = new BProductRoleDetail();
								bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
										.elementAt(iCounter);

								if ((GAfeDescription.lGetTypeId(string_ROLETYPE_NRC) == bProductRoleDetail.lRoleTypeID
										.longValue())
										|| (GAfeDescription
												.lGetTypeId(string_ROLETYPE_RC) == bProductRoleDetail.lRoleTypeID
												.longValue())) {
									if ((null != vctMainCustAddress)
											&& (FINAL_ZERO != vctMainCustAddress
													.size())) {

										// Begin DEL v9.01d
										// lPayMethID = 0;
										// End DEL v9.01d
										for (int iVCounter = FINAL_ZERO; iVCounter < vctMainCustAddress
												.size(); iVCounter++) {
											vctInternal = new Vector();
											vctInternal = (Vector) vctMainCustAddress
													.elementAt(iVCounter);

											if (GAfeDescription
													.lGetTypeId(string_ROLETYPE_NRC) == bProductRoleDetail.lRoleTypeID
													.longValue()) {
												bComparedFirst = bValidateSameCustAddandPayMeth(
														bProductDetailProperty,
														bProductRoleDetail,
														((Long) vctInternal
																.elementAt(FINAL_ZERO))
																.longValue(),
														((Long) vctInternal
																.elementAt(FINAL_ONE))
																.longValue(),
														((Long) vctInternal
																.elementAt(2))
																.longValue());

												/**
												 * **************STARTING****************TO PRINT THE DATA
												 * if(GAfePropertyLoader.DEBUG)
												 * {
												 * System.out.println("The bProductRoleDetail.lCustomerID is : " +bProductRoleDetail.lCustomerID);
												 * System.out.println("The bProductRoleDetail.lAddressID is : " +bProductRoleDetail.lAddressID);
												 * System.out.println("The bProductDetailProperty.lPaymentMethodID is : " +bProductDetailProperty.lPaymentMethodNRC);
												 *
												 * System.out.println("The before Break bComparedFirst is : " +bComparedFirst);
												 * }
												 * /****************ENDING*******************TO PRINT THE DATA******************************************
												 */
												if (bComparedFirst) {
													break;
												}
											}

											if (GAfeDescription
													.lGetTypeId(string_ROLETYPE_RC) == bProductRoleDetail.lRoleTypeID
													.longValue()) {
												bComparedSecond = bValidateSameCustAddandPayMeth(
														bProductDetailProperty,
														bProductRoleDetail,
														((Long) vctInternal
																.elementAt(FINAL_ZERO))
																.longValue(),
														((Long) vctInternal
																.elementAt(FINAL_ONE))
																.longValue(),
														((Long) vctInternal
																.elementAt(2))
																.longValue());

												/**
												 * **************STARTING****************TO PRINT THE DATA
												 * if(GAfePropertyLoader.DEBUG)
												 * {
												 * System.out.println("The bProductRoleDetail.lCustomerID is : " +bProductRoleDetail.lCustomerID);
												 * System.out.println("The bProductRoleDetail.lAddressID is : " +bProductRoleDetail.lAddressID);
												 * System.out.println("The bProductDetailProperty.lPaymentMethodID is : " +bProductDetailProperty.lPaymentMethodRC);
												 *
												 * System.out.println("The before Break bComparedSecond is : " +bComparedSecond);
												 * }
												 * /****************ENDING*******************TO PRINT THE DATA******************************************
												 */
												if (bComparedSecond) {
													break;
												}
											}
										} // end of the for loop

										/**
										 * **************STARTING****************TO PRINT THE DATA
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("The After bComparedFirst is : " +bComparedFirst);
										 * System.out.println("The After bComparedSecond is : " +bComparedSecond);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
										if ((!bComparedFirst)
												&& (GAfeDescription
														.lGetTypeId(string_ROLETYPE_NRC) == bProductRoleDetail.lRoleTypeID
														.longValue())) {
											throw new AfeException(
													"ERRAFE_00478"); // throws AfeException is case number of account attached to productline are more than 2
										} // end of the if loop

										if ((!bComparedSecond)
												&& (GAfeDescription
														.lGetTypeId(string_ROLETYPE_RC) == bProductRoleDetail.lRoleTypeID
														.longValue())) {
											throw new AfeException(
													"ERRAFE_00478"); // throws AfeException is case number of account attached to productline are more than 2
										} // end of the if loop
									} // end of the if loop
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop
					} // end of the if loop
				} // end of the if loop
			}
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());
				//afee.printStackTrace(System.out);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		} finally {
			try {

				// BEGIN ADD V5.10a
				// comment: closing resultset and statement
				if (null != rsGetPLData) {
					rsGetPLData.close();

					// BEGIN DELETE V 5.70b
					// rsGetPLData.getStatement().close();
					// END DELETE V 5.70b
					rsGetPLData = null;
				}

				if (null != rsGetChTypeData) {
					rsGetChTypeData.close();

					// BEGIN DELETE V 5.70b
					// rsGetChTypeData.getStatement().close();
					// END DELETE V 5.70b
					rsGetChTypeData = null;
				}

				if (null != rsGetData) {
					rsGetData.close();

					// BEGIN DELETE V 5.70b
					// rsGetData.getStatement().close();
					// END DELETE V 5.70b
					rsGetData = null;
				}

				// END ADD V5.10a

				// BEGIN ADD V 5.70b
				if (null != psSelect1) {
					psSelect1.close();
					psSelect1 = null;
				}

				if (null != psSelect2) {
					psSelect2.close();
					psSelect2 = null;
				}

				if (null != psSelect3) {
					psSelect3.close();
					psSelect3 = null;
				}

				// END ADD V 5.70b

				closeAFEConnection(); // closing the connection
			} catch (Exception ex) {
				AfeException afee = new AfeException("ERRCOM_00001", ex
						.getMessage()); // Database error occured

				throw afee;
			}
		}

		// Return BO
		return iMainFlag;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This function will return a boolean true if an only if the product is
	 *                                  hidden
	 *
	 *  @param          :       Long lProductID
	 *
	 *  @return         :       boolean Returns True if the product is hidden else false
	 * /******************************************************************************************************************************
	 */
	protected boolean bCheckProductHidden(Long lProductID) throws Exception { // Starting Braces of the Function

		// intializing the variables
		boolean bMainFlag = false;

		try {
			ProductRow productRow = null; // Initializing the Object Class for the Vat table

			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
			}

			productRow = (ProductRow) productTable
					.prSearchByProductID(lProductID.longValue());

			if (FINAL_ZERO == productRow.iObsolete) {
				if (FINAL_ONE == productRow.iHidden) {
					bMainFlag = true;
				}
			} // end of the if loop
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return BO
		return bMainFlag;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This Function will Delete the Old Phone Line from DSL and Insert the New Phone Line
	 *                                  in DSL for any change in the Customer or Address
	 *
	 *  @param          :       Long lProductID
	 *
	 *  @return         :       boolean Returns True if the product is hidden else false
	 * /******************************************************************************************************************************
	 */
	protected boolean blnDeleteAndInsertPhoneInDSL_CaseTelephone_ForChangedCustomerOrAddress(
			Long lCustomerID, Long lAddressID) throws Exception { // Starting Braces of the Function

		// intializing the variables
		boolean bMainFlag = false;
		String strDN = "";
		String strNumber = "";
		String strCountryCode = "";

		// Begin DEL v9.01d
		// char cBlank = ' ';
		// End DEL v9.01d
		BCustomerInfo bCustomerInfo = null;

		try {
			LCustomer lCustomer = new LCustomer(teleSessionMgr);
			SimpleDateFormat sdf = new SimpleDateFormat(string_dateFormat1); // Making the Object of the Date Formatter Class
			CountryRow countryRow = null;

			if (null == countryTable) {
				countryTable = (Country) teleSessionMgr
						.getMasterTable("COUNTRY");
			}

			// LCustomermethod to get customer info for particular customer
			bCustomerInfo = (BCustomerInfo) lCustomer
					.objSelectCustomerInfoDB(lCustomerID.longValue());

			if (null == bCustomerInfo) {
				return bMainFlag;
			}

			if (null != countryTable) {
				countryRow = countryTable
						.astrSearchByCountryID(bCustomerInfo.lCountryId);
			}

			if (null != countryRow) {
				strCountryCode = countryRow.strCountryCode;
			}

			/**
			 * **************STARTING****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("Fnc blnDeleteAndInsertPhoneInDSL_CaseTelephone_ForChangedCustomerOrAddress");
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			BNumber bNumber = null;

			if (null != teleSessionMgr.getValue("BNumber_aCTel")) {
				//bNumber = new BNumber();
				bNumber = (BNumber) teleSessionMgr.getValue("BNumber_aCTel");

				ApplSaveAction applSaveActionTable = null;

				applSaveActionTable = (ApplSaveAction) teleSessionMgr
						.getTable(string_APPLSAVEACTION);

				ApplSaveActionRow applSaveActionRow = new ApplSaveActionRow();

				applSaveActionRow.arrArguments = new Class[3];
				applSaveActionRow.arrParams = new Object[3];

				// Setting the variables of record to entered in Appl Save container
				applSaveActionRow.iAction = Record.INSERT;
				applSaveActionRow.strType = string_TELNO;
				applSaveActionRow.strValue = " ";
				applSaveActionRow.strSystem = string_IAFEOUT;
				applSaveActionRow.strMethodName = string_blnDeletePhoneLine; // the name of the IAFEOUT Method which needs to be called
				applSaveActionRow.arrArguments[0] = String.class;
				applSaveActionRow.arrArguments[1] = Character.class;
				applSaveActionRow.arrArguments[2] = String.class;

				if ((bNumber.strNumber.trim())
						.equalsIgnoreCase(bNumber.strNumberOld.trim())) {
					strNumber = bNumber.strNumber;
				} else {
					strNumber = bNumber.strNumberOld;
				}

				strDN = "";
				strDN = strNumber;

				if ((null != strNumber) && (10 > (strNumber.length()))) {
					for (int iCnt = 0; iCnt < (10 - strNumber.length()); iCnt++) {
						strDN = string_ZERO + strDN;
					}
				}

				applSaveActionRow.arrParams[0] = strNumber;
				applSaveActionRow.arrParams[1] = Character.valueOf('N');
				applSaveActionRow.arrParams[2] = bSession.strUserName;

				// adding the Newly created row to the ApplSaveaction Container/table
				applSaveActionTable.addRecord(applSaveActionRow);

				/**
				 * **************STARTING****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * if(null != applSaveActionTable.vctGetAll())
				 * {
				 * System.out.println("THE NO OF RECORDS IN APPLSAVEACTIONTABLE IS " + (applSaveActionTable.vctGetAll()).size() );
				 * }
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
				applSaveActionRow = new ApplSaveActionRow();
				applSaveActionRow.arrArguments = new Class[18];
				applSaveActionRow.arrParams = new Object[18];

				// Setting the variables of record to entered in Appl Save container
				applSaveActionRow.iAction = Record.INSERT;
				applSaveActionRow.strType = string_TELNO;
				applSaveActionRow.strValue = " ";
				applSaveActionRow.strSystem = string_IAFEOUT;
				applSaveActionRow.strMethodName = "blnNewPhoneLine"; // the name of the IAFEOUT Method which needs to be called
				applSaveActionRow.arrArguments[0] = String.class;
				applSaveActionRow.arrArguments[1] = String.class;
				applSaveActionRow.arrArguments[2] = Character.class;
				applSaveActionRow.arrArguments[3] = String.class;
				applSaveActionRow.arrArguments[4] = String.class;
				applSaveActionRow.arrArguments[5] = String.class;
				applSaveActionRow.arrArguments[6] = String.class;
				applSaveActionRow.arrArguments[7] = Long.class;
				applSaveActionRow.arrArguments[8] = Long.class;
				applSaveActionRow.arrArguments[9] = String.class;
				applSaveActionRow.arrArguments[10] = String.class;
				applSaveActionRow.arrArguments[11] = String.class;
				applSaveActionRow.arrArguments[12] = String.class;
				applSaveActionRow.arrArguments[13] = Long.class;
				applSaveActionRow.arrArguments[14] = Long.class;
				applSaveActionRow.arrArguments[15] = Long.class;
				applSaveActionRow.arrArguments[16] = String.class;
				applSaveActionRow.arrArguments[17] = Long.class;
				applSaveActionRow.arrParams[0] = bSession.strUserName;
				applSaveActionRow.arrParams[1] = bNumber.strNumber;

				//              BEGIN DELETE V 5.43a
				//              Comment:Changes for the NP Related Code
				//               BEGIN ADD : V3.28
				//               Changes done for some Integrations changes with DSL.

				/*
				 if ( "NP".equalsIgnoreCase(bNumber.strKindOfNumber) )
				 {
				 applSaveActionRow.arrParams[2]  = new Character('Y');
				 }
				 else
				 {
				 applSaveActionRow.arrParams[2]  = new Character(' ');
				 }
				 //              END ADD : V3.28
				 //              Changes done for some Integrations changes with DSL.


				 //              BEGIN ADD : V3.28
				 //              Changes done for some Integrations changes with DSL.

				 if ( "NP".equalsIgnoreCase(bNumber.strKindOfNumber) )
				 {
				 applSaveActionRow.arrParams[3]  = bNumber.strDonor;
				 }
				 else
				 {
				 applSaveActionRow.arrParams[3]  = "";
				 }
				 //              END ADD : V3.28
				 */

				//              END DELETE V 5.43a
				//              BEGIN ADD V 5.43a
				//              Comment:Changes for the NP Related Code
				// BEGIN DELETE V 5.46a
				/*
				 * if ( (GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber))
				 *   && (!(GAfeConstants.TELE.equalsIgnoreCase(bNumber.strOriginalOwner))) )
				 */

				// END DELETE V 5.46a
				// BEGIN ADD V 5.46a
				if ((GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber))
						&& (null != bNumber.strOriginalOwner)
						&& (!(GAfeConstants.TELE
								.equalsIgnoreCase(bNumber.strOriginalOwner))))

				// END ADD V 5.46a
				{
					applSaveActionRow.arrParams[2] = Character.valueOf('Y');
					applSaveActionRow.arrParams[3] = bNumber.strCurrentOwner;
				} else {
					applSaveActionRow.arrParams[2] = Character.valueOf(' ');
					applSaveActionRow.arrParams[3] = "";
				}

				//              END ADD V 5.43a
				//               Changes done for some Integrations changes with DSL.

				applSaveActionRow.arrParams[4] = strCountryCode;
				applSaveActionRow.arrParams[5] = "STAND";
				applSaveActionRow.arrParams[6] = "TEL";
				applSaveActionRow.arrParams[7] = lAddressID;
				applSaveActionRow.arrParams[8] = lCustomerID;

				if ((null == bCustomerInfo.strFirstName)
						|| ("".equals(bCustomerInfo.strFirstName))) {
					bCustomerInfo.strFirstName = " ";
				}

				applSaveActionRow.arrParams[9] = bCustomerInfo.strFirstName;
				applSaveActionRow.arrParams[10] = bCustomerInfo.strName;

				if (null != bCustomerInfo.dtBirthDate) {
					applSaveActionRow.arrParams[11] = sdf
							.format(bCustomerInfo.dtBirthDate);
				} else {
					applSaveActionRow.arrParams[11] = null;
				}

				applSaveActionRow.arrParams[12] = bCustomerInfo.strVatNumber;
				applSaveActionRow.arrParams[13] = Long.valueOf(
						bCustomerInfo.lEpithetId);
				applSaveActionRow.arrParams[14] = Long.valueOf(
						bCustomerInfo.lSegmentId);
				applSaveActionRow.arrParams[15] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);
				applSaveActionRow.arrParams[16] = "Vermeld";
				applSaveActionRow.arrParams[17] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);

				// adding the Newly created row to the ApplSaveaction Container/table
				applSaveActionTable.addRecord(applSaveActionRow);
				teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveActionTable);

				/**
				 * **************STARTING****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * if(null != applSaveActionTable.vctGetAll())
				 * {
				 * System.out.println("   FUNCTION ADDED IN SESSION.  --> blnNewPhoneLine()" );
				 * System.out.println("   THE NO OF RECORDS IN APPLSAVEACTIONTABLE IS " + (applSaveActionTable.vctGetAll()).size() );
				 * }
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
			} // end of the if loop
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return BO
		return bMainFlag;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This Function will Load all the CustomerRelated Data for change of the Customer on
	 *                                  the Role Screen.
	 *
	 *  @param          :       Long lCustomerID
	 *
	 *  @return         :       boolean Returns True if the all the Data is Successfully Loaded in the Session
	 * /******************************************************************************************************************************
	 */

	//  BEGIN DELETE VER 5.23a
	//  Comment 5.23a:This method deleted and new method introduced
	/*    protected void vdlnLoadCustomerRelatedData_InSession(Long lCustomerID) throws Exception
	 { //Starting Braces of the Function

	 try
	 {
	 if (makeAFEConnection())// if connection is made
	 {

	 StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Function Called - blnLoadCustomerRelatedData_InSession");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading Customer Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 ResultSet rsRetrieve = null;
	 ResultSet rsRetrieveTemp = null;

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CUSTOMER WHERE CUSTOMERID = ").append(lCustomerID);

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The Querry is " +strSql);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CUSTOMER"))
	 {
	 customerTable = (Customer)teleSessionMgr.getTable("CUSTOMER");
	 }

	 CustomerRow     customerRow                             = null;

	 if(rsRetrieve.next())
	 {
	 customerRow                     = new CustomerRow();
	 customerRow.lCustomerID                 = rsRetrieve.getLong("CUSTOMERID");
	 customerRow.lCustomerNumber             = rsRetrieve.getLong("CUSTOMERNUMBER");
	 customerRow.strName                             = rsRetrieve.getString("NAME");
	 customerRow.strFirstName                = rsRetrieve.getString("FIRSTNAME");
	 customerRow.lEpithetID                  = rsRetrieve.getLong("EPITHETID");
	 customerRow.lContactInfoID              = rsRetrieve.getLong("CONTACTINFOID");
	 customerRow.iVatCompliant               = rsRetrieve.getInt("VATCOMPLIANT");
	 customerRow.lCompanyID                  = rsRetrieve.getLong("COMPANYID");
	 customerRow.lNationality                = rsRetrieve.getLong("NATIONALITY");
	 customerRow.strPassportNumber   = rsRetrieve.getString("PASSPORTNUMBER");
	 customerRow.dtDateOfBirth               = rsRetrieve.getDate("DATEOFBIRTH");
	 customerRow.strPlaceOfBirth             = rsRetrieve.getString("PLACEOFBIRTH");
	 customerRow.strVatNumber                = rsRetrieve.getString("VATNUMBER");
	 customerRow.iBadPayer                   = rsRetrieve.getInt("BADPAYER");
	 customerRow.dtCreationDate              = rsRetrieve.getTimestamp("CREATIONDATE");
	 customerRow.strCreationUser             = rsRetrieve.getString("CREATIONUSER");
	 customerRow.dtModificationDate  = rsRetrieve.getTimestamp("MODIFICATIONDATE");
	 customerRow.strModificationUser = rsRetrieve.getString("MODIFICATIONUSER");
	 customerRow.iObsolete                   = rsRetrieve.getInt("OBSOLETE");

	 customerTable.addUniqueRecord(customerRow);
	 }

	 teleSessionMgr.putTable("CUSTOMER",customerTable);
	 rsRetrieve.getStatement().close();


	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading ContactInfo Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 if(null != customerRow)
	 {
	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CONTACTINFO WHERE CONTACTINFOID = ").append(customerRow.lContactInfoID);

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The Querry is " +strSql);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CONTACTINFO"))
	 {
	 contactInfoTable = (ContactInfo) teleSessionMgr.getTable("CONTACTINFO");
	 }

	 ContactInfoRow  contactInfoRow  =       null;

	 while(rsRetrieve.next())
	 {
	 contactInfoRow          = new ContactInfoRow();
	 contactInfoRow.lContactInfoID           = rsRetrieve.getLong("CONTACTINFOID");
	 contactInfoRow.lLanguageID                      = rsRetrieve.getLong("LANGUAGEID");
	 contactInfoRow.strPhoneDay                      = rsRetrieve.getString("PHONEDAY");
	 contactInfoRow.strPhoneEvening          = rsRetrieve.getString("PHONEEVENING");
	 contactInfoRow.strPhoneMobile           = rsRetrieve.getString("PHONEMOBILE");
	 contactInfoRow.strFax                           = rsRetrieve.getString("FAX");
	 contactInfoRow.strEmail                         = rsRetrieve.getString("EMAIL");
	 contactInfoRow.strWebsite                       = rsRetrieve.getString("WEBSITE");
	 contactInfoRow.strComments                      = rsRetrieve.getString("COMMENTS");
	 contactInfoRow.iMail                            = rsRetrieve.getInt("MAIL");
	 contactInfoRow.iCalls                           = rsRetrieve.getInt("CALLS");
	 contactInfoRow.iEmails                          = rsRetrieve.getInt("EMAILS");
	 contactInfoRow.lPreferredContactID      = rsRetrieve.getLong("PREFERREDCONTACTID");
	 contactInfoRow.dtCreationDate           = rsRetrieve.getTimestamp("CREATIONDATE");
	 contactInfoRow.strCreationUser          = rsRetrieve.getString("CREATIONUSER");
	 contactInfoRow.dtModificationDate       = rsRetrieve.getTimestamp("MODIFICATIONDATE");
	 contactInfoRow.strModificationUser      = rsRetrieve.getString("MODIFICATIONUSER");
	 contactInfoRow.iObsolete                        = rsRetrieve.getInt("OBSOLETE");

	 contactInfoTable.addUniqueRecord(contactInfoRow);
	 }

	 teleSessionMgr.putTable("CONTACTINFO",contactInfoTable);
	 rsRetrieve.getStatement().close();
	 }


	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading CustomerProfile Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CUSTOMERPROFILE WHERE CUSTOMERID = ").append(lCustomerID);

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The Querry is " +strSql);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CUSTOMERPROFILE"))
	 {
	 customerProfileTable = (CustomerProfile) teleSessionMgr.getTable("CUSTOMERPROFILE");
	 }

	 CustomerProfileRow      customerProfileRow      =       null;

	 while(rsRetrieve.next())
	 {
	 customerProfileRow                                              = new CustomerProfileRow();
	 customerProfileRow.lCustomerProfileID   = rsRetrieve.getLong("CUSTOMERPROFILEID");
	 customerProfileRow.lSegmentID                   = rsRetrieve.getLong("SEGMENTID");
	 customerProfileRow.iResaleOfInfo                = rsRetrieve.getInt("RESALEOFINFO");
	 customerProfileRow.lPriorityID                  = rsRetrieve.getLong("PRIORITYID");
	 customerProfileRow.lCustomerID                  = rsRetrieve.getLong("CUSTOMERID");
	 customerProfileRow.lVipCodeID                   = rsRetrieve.getLong("VIPCODEID");
	 customerProfileRow.dtCreationDate               = rsRetrieve.getTimestamp("CREATIONDATE");
	 customerProfileRow.strCreationUser              = rsRetrieve.getString("CREATIONUSER");
	 customerProfileRow.dtModificationDate   = rsRetrieve.getTimestamp("MODIFICATIONDATE");
	 customerProfileRow.strModificationUser  = rsRetrieve.getString("MODIFICATIONUSER");
	 customerProfileRow.iObsolete                    = rsRetrieve.getInt("OBSOLETE");

	 customerProfileTable.addUniqueRecord(customerProfileRow);
	 }

	 teleSessionMgr.putTable("CUSTOMERPROFILE",customerProfileTable);
	 rsRetrieve.getStatement().close();

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading CustomerLink Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CUSTOMERLINK WHERE CUSTOMERID = ").append(lCustomerID);

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The Querry is " +strSql);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CUSTOMERLINK"))
	 {
	 customerLinkTable = (CustomerLink) teleSessionMgr.getTable("CUSTOMERLINK");
	 }

	 CustomerLinkRow         customerLinkRow         =       null;

	 while(rsRetrieve.next())
	 {
	 customerLinkRow                                         = new CustomerLinkRow();
	 customerLinkRow.lCustomerLinkID         = rsRetrieve.getLong("CUSTOMERLINKID");
	 customerLinkRow.lCustomerID                     = rsRetrieve.getLong("CUSTOMERID");
	 customerLinkRow.lAddressID                      = rsRetrieve.getLong("ADDRESSID");
	 customerLinkRow.iObsolete                       = rsRetrieve.getInt("OBSOLETE");
	 customerLinkRow.dtCreationDate          = rsRetrieve.getTimestamp("CREATIONDATE");
	 customerLinkRow.strCreationUser         = rsRetrieve.getString("CREATIONUSER");
	 customerLinkRow.dtModificationDate      = rsRetrieve.getTimestamp("MODIFICATIONDATE");
	 customerLinkRow.strModificationUser = rsRetrieve.getString("MODIFICATIONUSER");
	 //    BEGIN ADD : Ver 1.0
	 //    Changes made for change Request No 36 for Correspondence Address
	 customerLinkRow.iCorrespondenceAddress  = rsRetrieve.getInt("CORRESPONDENCEADDRESS");
	 //    Changes made for change Request No 36 for Correspondence Address
	 //    BEGIN ADD : Ver 1.0

	 customerLinkTable.addUniqueRecord(customerLinkRow);

	 rsRetrieveTemp = null;

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM ADDRESS WHERE ADDRESSID = ").append(customerLinkRow.lAddressID).append(" AND OBSOLETE = 0");

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("strSql - " +strSql);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 rsRetrieveTemp = gConnectAfe.rsQuery(strSql.toString());

	 AddressRow      addressRow      =       null;
	 addressTable    =       (Address)teleSessionMgr.getTable("ADDRESS");            // Getting the Customer table from the session

	 if(null != rsRetrieveTemp)
	 {
	 if(rsRetrieveTemp.next())
	 {
	 addressRow      =       new AddressRow();
	 addressRow.lAddressID                           = rsRetrieveTemp.getLong("ADDRESSID");
	 addressRow.lServiceAddressID            = rsRetrieveTemp.getLong("SERVICEADDRESSID");
	 addressRow.lReferenceAddressID          = rsRetrieveTemp.getLong("REFERENCEADDRESSID");
	 addressRow.lCountryID                           = rsRetrieveTemp.getLong("COUNTRYID");
	 addressRow.strHouseNumber                       = rsRetrieveTemp.getString("HOUSENUMBER");
	 addressRow.strSubHouseNumber            = rsRetrieveTemp.getString("SUBHOUSENUMBER");
	 addressRow.strBox                                       = rsRetrieveTemp.getString("BOX");
	 //    BEGIN DELETE : Ver 1.0
	 //    Changes made for change Request No 36 for Correspondence Address
	 //    addressRow.iCorrespondenceAddress     = rsRetrieveTemp.getInt("CORRESPONDENCEADDRESS");
	 //    Changes made for change Request No 36 for Correspondence Address
	 //    BEGIN DELETE : Ver 1.0
	 addressRow.dtCreationDate                       = rsRetrieveTemp.getTimestamp("CREATIONDATE");
	 addressRow.strCreationUser                      = rsRetrieveTemp.getString("CREATIONUSER");
	 addressRow.dtModificationDate           = rsRetrieveTemp.getTimestamp("MODIFICATIONDATE");
	 addressRow.strModificationUser          = rsRetrieveTemp.getString("MODIFICATIONUSER");
	 addressRow.iObsolete                            = rsRetrieveTemp.getInt("OBSOLETE");
	 addressRow.iCableAvailable                      = rsRetrieveTemp.getInt("CABLEAVAILABLE");
	 addressRow.lAddressTypeID                       = rsRetrieveTemp.getLong("ADDRESSTYPEID");

	 addressTable.addUniqueRecord(addressRow);
	 }

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading ADDRESS Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************
	 }
	 else
	 {
	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Not Loaded ADDRESS Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************
	 }

	 }//end of the while loop

	 teleSessionMgr.putTable("ADDRESS",addressTable);
	 teleSessionMgr.putTable("CUSTOMERLINK",customerLinkTable);

	 rsRetrieveTemp.getStatement().close();
	 rsRetrieve.getStatement().close();

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading CustomerAccount Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CUSTOMERACCOUNT WHERE CUSTOMERLINKID IN (SELECT CUSTOMERLINKID FROM CUSTOMERLINK WHERE CUSTOMERID = ").append(lCustomerID).append(")");

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CUSTOMERACCOUNT"))
	 {
	 customerAccountTable = (CustomerAccount) teleSessionMgr.getTable("CUSTOMERACCOUNT");
	 }

	 CustomerAccountRow      customerAccountRow                      =       null;

	 while(rsRetrieve.next())
	 {
	 customerAccountRow                                                      = new CustomerAccountRow();
	 customerAccountRow.lCustomerAccountID           = rsRetrieve.getLong("CUSTOMERACCOUNTID");
	 customerAccountRow.lCustomerLinkID                      = rsRetrieve.getLong("CUSTOMERLINKID");
	 customerAccountRow.lAccountNumber                       = rsRetrieve.getLong("ACCOUNTNUMBER");
	 customerAccountRow.lParentAccountID                     = rsRetrieve.getLong("PARENTACCOUNTID");
	 customerAccountRow.iMinimumService                      = rsRetrieve.getInt("MINIMUMSERVICE");
	 customerAccountRow.lPaymentMethodID                     = rsRetrieve.getLong("PAYMENTMETHODID");
	 customerAccountRow.lCurrencyID                          = rsRetrieve.getLong("CURRENCYID");
	 customerAccountRow.lBankID                                      = rsRetrieve.getLong("BANKID");
	 customerAccountRow.strBankAccountNumber         = rsRetrieve.getString("BANKACCOUNTNUMBER");
	 customerAccountRow.lBillCycleID                         = rsRetrieve.getLong("BILLCYCLEID");
	 customerAccountRow.lRecurringTypeID                     = rsRetrieve.getLong("RECURRINGTYPEID");
	 customerAccountRow.lBillFormatID                        = rsRetrieve.getLong("BILLFORMATID");
	 customerAccountRow.lDisplayMethodID                     = rsRetrieve.getLong("DISPLAYMETHODID");
	 customerAccountRow.strDirectDebitNumber         = rsRetrieve.getString("DIRECTDEBITNUMBER");
	 customerAccountRow.iSuspendInvoice                      = rsRetrieve.getInt("SUSPENDINVOICE");
	 customerAccountRow.strPayerName                         = rsRetrieve.getString("PAYERNAME");
	 customerAccountRow.strPayerAddress                      = rsRetrieve.getString("PAYERADDRESS");
	 customerAccountRow.strCreditardNumber           = rsRetrieve.getString("CREDITCARDNUMBER");
	 customerAccountRow.strCreditcardService         = rsRetrieve.getString("CREDITCARDSERVICE");
	 customerAccountRow.dtCreationDate                       = rsRetrieve.getTimestamp("CREATIONDATE");
	 customerAccountRow.strCreationUser                      = rsRetrieve.getString("CREATIONUSER");
	 customerAccountRow.dtModificationDate           = rsRetrieve.getTimestamp("MODIFICATIONDATE");
	 customerAccountRow.strModificationUser          = rsRetrieve.getString("MODIFICATIONUSER");
	 customerAccountRow.iObsolete                            = rsRetrieve.getInt("OBSOLETE");
	 customerAccountRow.dtActivationDate                     = rsRetrieve.getDate("ACTIVATIONDATE");
	 customerAccountRow.dtDeactivationDate           = rsRetrieve.getDate("DEACTIVATIONDATE");
	 customerAccountRow.dtDDStatusModifiedDate       = rsRetrieve.getDate("DDSTATUSMODIFIEDDATE");
	 customerAccountRow.lDirectDebitStatusID         = rsRetrieve.getLong("DIRECTDEBITSTATUSID");

	 customerAccountTable.addUniqueRecord(customerAccountRow);
	 }

	 teleSessionMgr.putTable("CUSTOMERACCOUNT", customerAccountTable);
	 rsRetrieve.getStatement().close();


	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading CustomerLinkRole Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CUSTOMERLINKROLE WHERE CUSTOMERLINKID IN (SELECT CUSTOMERLINKID FROM CUSTOMERLINK WHERE CUSTOMERID = ").append(lCustomerID).append(")");

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The Querry is " +strSql);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CUSTOMERLINKROLE"))
	 {
	 customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr.getTable("CUSTOMERLINKROLE");
	 }

	 CustomerLinkRoleRow             customerLinkRoleRow     =       null;

	 while(rsRetrieve.next())
	 {
	 customerLinkRoleRow                                             = new CustomerLinkRoleRow();
	 customerLinkRoleRow.lCustomerLinkRoleID = rsRetrieve.getLong("CUSTOMERLINKROLEID");
	 customerLinkRoleRow.lCustomerLinkID             = rsRetrieve.getLong("CUSTOMERLINKID");
	 customerLinkRoleRow.lRoleTypeID                 = rsRetrieve.getLong("ROLETYPEID");
	 customerLinkRoleRow.dtCreationDate              = rsRetrieve.getTimestamp("CREATIONDATE");
	 customerLinkRoleRow.strCreationUser             = rsRetrieve.getString("CREATIONUSER");
	 customerLinkRoleRow.dtModificationDate  = rsRetrieve.getTimestamp("MODIFICATIONDATE");
	 customerLinkRoleRow.strModificationUser = rsRetrieve.getString("MODIFICATIONUSER");
	 customerLinkRoleRow.iObsolete                   = rsRetrieve.getInt("OBSOLETE");

	 customerLinkRoleTable.addUniqueRecord(customerLinkRoleRow);
	 }

	 teleSessionMgr.putTable("CUSTOMERLINKROLE",customerLinkRoleTable);
	 rsRetrieve.getStatement().close();


	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading CustomerLR2CustomerProduct Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CUSTOMERLR2CUSTOMERPRODUCT WHERE CUSTOMERLINKROLEID IN (SELECT CUSTOMERLINKROLEID FROM CUSTOMERLINKROLE WHERE CUSTOMERLINKID IN (SELECT CUSTOMERLINKID FROM CUSTOMERLINK WHERE CUSTOMERID = ").append(lCustomerID).append("))");

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The Querry is " +strSql);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CUSTOMERLR2CUSTOMERPRODUCT"))
	 {
	 customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr.getTable("CUSTOMERLR2CUSTOMERPRODUCT");
	 }

	 CustomerLR2CustomerProductRow   customerLR2CustomerProductRow   =       null;

	 while(rsRetrieve.next())
	 {
	 customerLR2CustomerProductRow                                                   = new CustomerLR2CustomerProductRow();
	 customerLR2CustomerProductRow.lCustomerLinkRoleID               = rsRetrieve.getLong("CUSTOMERLINKROLEID");
	 customerLR2CustomerProductRow.lCustomerProductID                = rsRetrieve.getLong("CUSTOMERPRODUCTID");
	 customerLR2CustomerProductRow.lCustomerProductLineID    = rsRetrieve.getLong("CUSTOMERPRODUCTLINEID");

	 customerLR2CustomerProductTable.addUniqueRecord(customerLR2CustomerProductRow);
	 }

	 teleSessionMgr.putTable("CUSTOMERLR2CUSTOMERPRODUCT",customerLR2CustomerProductTable);
	 rsRetrieve.getStatement().close();


	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading CustomreProductLine Table in Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CUSTOMERPRODUCTLINE WHERE CUSTOMERPRODUCTLINEID IN (SELECT CUSTOMERPRODUCTLINEID FROM CUSTOMERLR2CUSTOMERPRODUCT WHERE CUSTOMERLINKROLEID IN (SELECT CUSTOMERLINKROLEID FROM CUSTOMERLINKROLE WHERE CUSTOMERLINKID IN (SELECT CUSTOMERLINKID FROM CUSTOMERLINK WHERE CUSTOMERID = ").append(lCustomerID).append(")))");

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The Querry is " +strSql);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CUSTOMERPRODUCTLINE"))
	 {
	 customerProductLineTable = (CustomerProductLine) teleSessionMgr.getTable("CUSTOMERPRODUCTLINE");
	 }

	 CustomerProductLineRow  customerProductLineRow  =       null;

	 while(rsRetrieve.next())
	 {
	 customerProductLineRow                                                  = new CustomerProductLineRow();
	 customerProductLineRow.lCustomerProductLineID   = rsRetrieve.getLong("CUSTOMERPRODUCTLINEID");
	 customerProductLineRow.lProductID                               = rsRetrieve.getLong("PRODUCTID");
	 customerProductLineRow.dtActivationDate                 = rsRetrieve.getDate("ACTIVATIONDATE");
	 customerProductLineRow.dtDeactivationDate               = rsRetrieve.getDate("DEACTIVATIONDATE");
	 customerProductLineRow.iEncossStatus                    = rsRetrieve.getInt("ENCOSSTATUS");
	 customerProductLineRow.dtCreationDate                   = rsRetrieve.getTimestamp("CREATIONDATE");
	 customerProductLineRow.strCreationUser                  = rsRetrieve.getString("CREATIONUSER");
	 customerProductLineRow.dtModificationDate               = rsRetrieve.getTimestamp("MODIFICATIONDATE");
	 customerProductLineRow.strModificationUser              = rsRetrieve.getString("MODIFICATIONUSER");
	 customerProductLineRow.iObsolete                                = rsRetrieve.getInt("OBSOLETE");
	 customerProductLineRow.iJonglingBlocked                 = rsRetrieve.getInt("JONGLIJNBLOCKED");

	 customerProductLineTable.addUniqueRecord(customerProductLineRow);
	 }

	 teleSessionMgr.putTable("CUSTOMERPRODUCTLINE",customerProductLineTable);
	 rsRetrieve.getStatement().close();

	 //    BEGIN ADD V4.10f
	 //    comment: To Load CustomerProduct

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 /*******************************************************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("Loading CustomerProduct into the Session....");
	 }
	 *******************************************************************************
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 strSql.setLength(0); //Initialising
	 strSql.append("SELECT * FROM CUSTOMERPRODUCT WHERE CUSTOMERPRODUCTLINEID IN (SELECT CUSTOMERPRODUCTLINEID FROM CUSTOMERLR2CUSTOMERPRODUCT WHERE CUSTOMERLINKROLEID IN (SELECT CUSTOMERLINKROLEID FROM CUSTOMERLINKROLE WHERE CUSTOMERLINKID IN (SELECT CUSTOMERLINKID FROM CUSTOMERLINK WHERE CUSTOMERID = ").append(lCustomerID).append(")))");

	 rsRetrieve = gConnectAfe.rsQuery(strSql.toString());

	 if(null != teleSessionMgr.getTable("CUSTOMERPRODUCT"))
	 {
	 customerProductTable = (CustomerProduct) teleSessionMgr.getTable("CUSTOMERPRODUCT");
	 }

	 CustomerProductRow      customerProductRow      =       null;

	 while(rsRetrieve.next())
	 {
	 customerProductRow = new CustomerProductRow();
	 customerProductRow.lCustomerProductID = rsRetrieve.getLong("CUSTOMERPRODUCTID");
	 customerProductRow.lProductID = rsRetrieve.getLong("PRODUCTID");
	 customerProductRow.lCustomerProductLineID = rsRetrieve.getLong("CUSTOMERPRODUCTLINEID");
	 customerProductRow.lPriceSettingID = rsRetrieve.getLong("PRICESETTINGID");
	 customerProductRow.lCustomerPLIdentifierID = rsRetrieve.getLong("CUSTOMERPLIDENTIFIERID");
	 customerProductRow.lOriginalNRCCustomerAccountID = rsRetrieve.getLong("ORIGINALNRCCUSTOMERACCOUNTID");
	 customerProductRow.iObsolete = rsRetrieve.getInt("OBSOLETE");
	 customerProductRow.dtActivationDate = rsRetrieve.getDate("ACTIVATIONDATE");
	 customerProductRow.dtDeactivationDate = rsRetrieve.getDate("DEACTIVATIONDATE");
	 customerProductRow.lParentID = rsRetrieve.getLong("PARENTID");
	 customerProductRow.dtCreationDate = rsRetrieve.getTimestamp("CREATIONDATE");
	 customerProductRow.strCreationUser = rsRetrieve.getString("CREATIONUSER");
	 customerProductRow.dtModificationDate = rsRetrieve.getTimestamp("MODIFICATIONDATE");
	 customerProductRow.strModificationUser = rsRetrieve.getString("MODIFICATIONUSER");

	 customerProductTable.addUniqueRecord(customerProductRow);
	 }

	 teleSessionMgr.putTable("CUSTOMERPRODUCT",customerProductTable);
	 rsRetrieve.getStatement().close();

	 //    END ADD V4.10f

	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("All the Customer Related Tables Successfully Loaded into the Session....");
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 }//end of the if loop

	 }
	 catch (AfeException afee)                       //catch block starts to catch exceptions
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
	 afee.printStackTrace(System.out);
	 }
	 throw afee;
	 }
	 catch (SQLException sqle)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("sqle.getMessage() : " + sqle.getMessage());
	 }
	 AfeException afee = new AfeException("ERRCOM_00008" , sqle.getMessage()); //Unable to translate query Database access unsuccessful
	 throw afee;
	 }
	 catch (Exception ex)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 ex.printStackTrace(System.out);
	 }
	 AfeException afee = new AfeException("ERRCOM_00002",ex.getMessage());//unknown exception occurred
	 throw afee;
	 }
	 finally
	 {
	 try
	 {
	 closeAFEConnection();   //closing the connection
	 }
	 catch(Exception ex)
	 {
	 AfeException afee = new AfeException("ERRCOM_00001",ex.getMessage());//Database error occured
	 throw afee;
	 }
	 }


	 }*/

	//  Closing Brace of the function
	//  END DELETE VER 5.23a
	/**
	 *  DESCRIPTION :   This Function will Load all the Address Related Data for change of the Address on
	 *                                  the Role Screen.
	 *
	 *  @param          :       Long lAddressID
	 *
	 *  @return         :       boolean Returns True if the all the Data is Successfully Loaded in the Session
	 * /******************************************************************************************************************************
	 */
	protected void vdlnLoadAddressRelatedData_InSession(Long lAddressID)
			throws Exception {

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect1 = null;
		PreparedStatement psSelect2 = null;
		ResultSet rsRetrieve = null;

		// END ADD V 5.70b
		try {
			if (makeAFEConnection()) {
				StringBuffer strSql = new StringBuffer("");

				/** **************STARTING****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
					GLogger
							.chkpt("Function Called - vdlnLoadAddressRelatedData_InSession");
					GLogger
							.chkpt("Loading Address Related Table's into Session....");
				} // END MODIFY v9.00a

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				long lSapID = 0;
				long lRefAddressID = 0;
				long lManualAddressID = 0;

				// BEGIN DELETE V 5.70b
				// strSql.setLength(0); //Initialising
				// strSql.append("SELECT * FROM ADDRESS WHERE ADDRESSID = ").append(lAddressID).append(" AND OBSOLETE = 0");
				// /****************STARTING****************TO PRINT THE DATA********************************************/
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println("strSql - " +strSql);
				// }

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				// rsRetrieve = gConnectAfe.rsQuery(strSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				strSql.setLength(0); // Initialising
				strSql
						.append("SELECT * FROM ADDRESS WHERE ADDRESSID = ? AND OBSOLETE = 0");
				psSelect1 = gConnectAfe.psPrepareStatement(strSql.toString());
				psSelect1.setLong(1, lAddressID.longValue());
				rsRetrieve = psSelect1.executeQuery();

				// END ADD V 5.70b

				AddressRow addressRow = null;

				addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

				if (null != rsRetrieve) {
					if (rsRetrieve.next()) {
						addressRow = new AddressRow();
						lSapID = rsRetrieve.getLong("SERVICEADDRESSID");
						lRefAddressID = rsRetrieve
								.getLong("REFERENCEADDRESSID");
						lManualAddressID = rsRetrieve.getLong("COUNTRYID");
						addressRow.lAddressID = rsRetrieve.getLong("ADDRESSID");
						addressRow.lServiceAddressID = lSapID;
						addressRow.lReferenceAddressID = lRefAddressID;
						addressRow.lCountryID = lManualAddressID;
						addressRow.strHouseNumber = rsRetrieve
								.getString("HOUSENUMBER");
						addressRow.strSubHouseNumber = rsRetrieve
								.getString("SUBHOUSENUMBER");
						addressRow.strBox = rsRetrieve.getString("BOX");

						// BEGIN ADD V5.00a
						// comment: to load manual addressid  also
						addressRow.lManualAddressID = rsRetrieve
								.getLong("MANUALADDRESSID");

						// END ADD V5.00a

						// BEGIN DELETE : Ver 1.0
						// Changes made for change Request No 36 for Correspondence Address
						// addressRow.iCorrespondenceAddress     = rsRetrieve.getInt("CORRESPONDENCEADDRESS");
						// Changes made for change Request No 36 for Correspondence Address
						// BEGIN DELETE : Ver 1.0
						addressRow.dtCreationDate = rsRetrieve
								.getTimestamp("CREATIONDATE");
						addressRow.strCreationUser = rsRetrieve
								.getString("CREATIONUSER");
						addressRow.dtModificationDate = rsRetrieve
								.getTimestamp("MODIFICATIONDATE");
						addressRow.strModificationUser = rsRetrieve
								.getString("MODIFICATIONUSER");
						addressRow.iObsolete = rsRetrieve.getInt("OBSOLETE");
						addressRow.iCableAvailable = rsRetrieve
								.getInt("CABLEAVAILABLE");
						addressRow.lAddressTypeID = rsRetrieve
								.getLong("ADDRESSTYPEID");
						addressTable.addUniqueRecord(addressRow);
					}

					teleSessionMgr.putTable(string_ADDRESS, addressTable);

					// BEGIN DELETE V 5.70b
					// rsRetrieve.getStatement().close();
					// END DELETE V 5.70b

					/** **************STARTING****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
						GLogger.chkpt("Loading ADDRESS Table in Session....");
					} // END MODIFY v9.00a

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				}

				/*
				 * Not to Load RefAdd table in the Session as it is not present
				 * Could be loaded Later in some cases
				 * if ((0 == lSapID) && (0 != lRefAddressID))
				 * {
				 *   rsRetrieve = null;
				 *
				 *   strSql.setLength(0); //Initialising
				 *   strSql.append("SELECT * FROM REFERENCEADDRESS WHERE REFERENCEADDRESSID = ").append(lRefAddressID).append(" AND OBSOLETE = 0");
				 *
				 *   rsRetrieve = gConnectAfe.rsQuery(strSql.toString());
				 *
				 *   ReferenceAddressRow referenceAddressRow     =       null;
				 *   referenceAddressTable       =       (ReferenceAddress)teleSessionMgr.getMasterTable("REFERENCEADDRESS");    // Getting the Vat table from the session
				 *
				 *   if(null != rsRetrieve)
				 *   {
				 *       while(rsRetrieve.next())
				 *       {
				 *           referenceAddressRow                                         = new ReferenceAddressRow();
				 *           referenceAddressRow.lReferenceAddressID = rsRetrieve.getLong("REFERENCEADDRESSID");
				 *           referenceAddressRow.lZipID                          = rsRetrieve.getLong("ZIPID");
				 *           referenceAddressRow.strStreetName           = rsRetrieve.getString("STREETNAME");
				 *           referenceAddressRow.strLanguage                     = rsRetrieve.getString("LANGUAGE");
				 *           referenceAddressRow.iObsolete                       = rsRetrieve.getInt("OBSOLETE");
				 *           referenceAddressRow.strCreationUser         = rsRetrieve.getString("CREATIONUSER");
				 *           referenceAddressRow.strModificationUser = rsRetrieve.getString("MODIFICATIONUSER");
				 *           referenceAddressRow.dtCreationDate          = rsRetrieve.getTimestamp("CREATIONDATE");
				 *           referenceAddressRow.dtModificationDate      = rsRetrieve.getTimestamp("MODIFICATIONDATE");
				 *
				 *           referenceAddressTable.addRecord(referenceAddressRow);
				 *
				 *       }//end of the while loop
				 *
				 *   }//end of the if loop
				 *
				 *   teleSessionMgr.putMasterTable("REFERENCEADDRESS", referenceAddressTable);
				 *   rsRetrieve.getStatement().close();
				 *
				 *   /****************STARTING****************TO PRINT THE DATA
				 *   if(GAfePropertyLoader.DEBUG)
				 *   {
				 *       System.out.println("Loading REFERENCEADDRESS Table in Session....");
				 *   }
				 *   /****************ENDING*******************TO PRINT THE DATA
				 *
				 * }//end of the if loop
				 */
				if ((0 == lSapID) && (0 == lRefAddressID)
						&& (0 != lManualAddressID)) {
					rsRetrieve = null;

					// BEGIN DELETE V 5.70b
					// strSql.setLength(0); //Initialising
					// strSql.append("SELECT * FROM MANUALADDRESS WHERE MANUALADDRESSID = ").append(lManualAddressID).append(" AND OBSOLETE = 0");
					// /****************STARTING****************TO PRINT THE DATA********************************************/
					// if(GAfePropertyLoader.DEBUG)
					// {
					// System.out.println("strSql - " +strSql);
					// }
					// /****************ENDING*******************TO PRINT THE DATA*******************************************/
					// rsRetrieve = gConnectAfe.rsQuery(strSql.toString());
					// END DELETE V 5.70b
					// BEGIN ADD V 5.70b
					strSql.setLength(0); // Initialising
					strSql
							.append("SELECT * FROM MANUALADDRESS WHERE MANUALADDRESSID = ? AND OBSOLETE = 0");
					psSelect2 = gConnectAfe.psPrepareStatement(strSql
							.toString());
					psSelect2.setLong(1, lManualAddressID);
					rsRetrieve = psSelect2.executeQuery();

					// END ADD V 5.70b

					ManualAddressRow manualAddressRow = null;

					manualAddressTable = (ManualAddress) teleSessionMgr
							.getTable(string_MANUALADDRESS); // Getting the Customer table from the session

					if (null != rsRetrieve) {
						while (rsRetrieve.next()) {
							manualAddressRow = new ManualAddressRow();
							manualAddressRow.lManualAddressID = rsRetrieve
									.getLong("MANUALADDRESSID");
							manualAddressRow.strStreetName = rsRetrieve
									.getString("STREETNAME");
							manualAddressRow.strZip = rsRetrieve
									.getString("ZIP");
							manualAddressRow.strCity = rsRetrieve
									.getString("CITY");
							manualAddressRow.strPostBox = rsRetrieve
									.getString("POSTBOX");
							manualAddressRow.strPostOffice = rsRetrieve
									.getString("POSTOFFICE");
							manualAddressRow.dtCreationDate = rsRetrieve
									.getTimestamp("CREATIONDATE");
							manualAddressRow.strCreationUser = rsRetrieve
									.getString("CREATIONUSER");
							manualAddressRow.dtModificationDate = rsRetrieve
									.getTimestamp("MODIFICATIONDATE");
							manualAddressRow.strModificationUser = rsRetrieve
									.getString("MODIFICATIONUSER");
							manualAddressRow.iObsolete = rsRetrieve
									.getInt("OBSOLETE");
							manualAddressTable
									.addUniqueRecord(manualAddressRow);
						}
					} // end of the if loop

					teleSessionMgr
							.putTable(string_MANUALADDRESS, manualAddressTable);

					// BEGIN DELETE V 5.70b
					// rsRetrieve.getStatement().close();
					// END DELETE V 5.70b

					/** **************STARTING****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
						GLogger
								.chkpt("Loading MANUALADDRESSID Table in Session....");
					}

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				} // end of the if loop

				/** **************STARTING****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) {
					GLogger
							.chkpt("All the Address Related Tables Successfully Loaded into the Session....");
				} // END MODIFY v9.00a

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			} // end of the if loop
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());
			//	afee.printStackTrace(System.out);
			}

			throw afee;
		} catch (SQLException sqle) {
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("sqle.getMessage() : " + sqle.getMessage());
			} // END MODIFY v9.00a

			AfeException afee = new AfeException("ERRCOM_00008", sqle
					.getMessage()); // Unable to translate query Database access unsuccessful

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");	//ex.printStackTrace(System.out);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		} finally {
			try {

				// BEGIN ADD V 5.70b
				if (null != psSelect1) {
					psSelect1.close();
					psSelect1 = null;
				}

				if (null != psSelect2) {
					psSelect2.close();
					psSelect2 = null;
				}

				// END ADD V 5.70b
				// BEGIN ADD V6.20h
				if (null != rsRetrieve) {
					rsRetrieve.close();
					rsRetrieve = null;
				}

				// END ADD V6.20h
				closeAFEConnection(); // closing the connection
			} catch (Exception ex) {
				AfeException afee = new AfeException("ERRCOM_00001", ex
						.getMessage()); // Database error occured

				throw afee;
			}
		}
	} // Closing Brace of the function

	//  BEGIN ADD V5.02a
	//  comment : overridden function added to maintain backward compatibility

	/**
	 *  DESCRIPTION :   This Function will Load all the Address Related Data for change of the Address on
	 *                                  the Role Screen.
	 *
	 *  @param          :       Long lAddressID
	 *
	 *  @return         :       boolean Returns True if the all the Data is Successfully Loaded in the Session
	 * /******************************************************************************************************************************
	 */
	protected void vdlnLoadAddressRelatedData_InSession(Long lAddressID,
			Long lCustomerID) throws Exception { // Starting Braces of the Function

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect1 = null;
		PreparedStatement psSelect2 = null;
		PreparedStatement psSelect3 = null;
		ResultSet rsRetrieve = null;

		// END ADD V 5.70b
		try {
			if (makeAFEConnection()) // if connection is made
			{
				StringBuffer strSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				/** **************STARTING****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
					GLogger
							.chkpt("Function Called - vdlnLoadAddressRelatedData_InSession");
					GLogger
							.chkpt("Loading Address Related Table's into Session....");
				} // END MODIFY v9.00a

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				long lSapID = 0;
				long lRefAddressID = 0;
				long lManualAddressID = 0;

				// BEGIN DELETE V 5.70b
				// strSql.setLength(0); //Initialising
				// strSql.append("SELECT * FROM ADDRESS WHERE ADDRESSID = ").append(lAddressID).append(" AND OBSOLETE = 0");
				// /****************STARTING****************TO PRINT THE DATA********************************************/
				// if(GAfePropertyLoader.DEBUG)
				// {
				// System.out.println("strSql - " +strSql);
				// }
				// /****************ENDING*******************TO PRINT THE DATA*******************************************/
				// rsRetrieve = gConnectAfe.rsQuery(strSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				strSql.setLength(0); // Initialising
				strSql
						.append("SELECT * FROM ADDRESS WHERE ADDRESSID = ? AND OBSOLETE = 0");
				psSelect1 = gConnectAfe.psPrepareStatement(strSql.toString());
				psSelect1.setLong(1, lAddressID.longValue());
				rsRetrieve = psSelect1.executeQuery();

				// END ADD V 5.70b

				AddressRow addressRow = null;

				addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

				if (null != rsRetrieve) {
					if (rsRetrieve.next()) {
						addressRow = new AddressRow();
						lSapID = rsRetrieve.getLong("SERVICEADDRESSID");
						lRefAddressID = rsRetrieve
								.getLong("REFERENCEADDRESSID");
						lManualAddressID = rsRetrieve.getLong("COUNTRYID");
						addressRow.lAddressID = rsRetrieve.getLong("ADDRESSID");
						addressRow.lServiceAddressID = lSapID;
						addressRow.lReferenceAddressID = lRefAddressID;
						addressRow.lCountryID = lManualAddressID;
						addressRow.strHouseNumber = rsRetrieve
								.getString("HOUSENUMBER");
						addressRow.strSubHouseNumber = rsRetrieve
								.getString("SUBHOUSENUMBER");
						addressRow.strBox = rsRetrieve.getString("BOX");

						// BEGIN ADD V5.00a
						// comment: to load manual addressid  also
						addressRow.lManualAddressID = rsRetrieve
								.getLong("MANUALADDRESSID");

						// END ADD V5.00a

						// BEGIN DELETE : Ver 1.0
						// Changes made for change Request No 36 for Correspondence Address
						// addressRow.iCorrespondenceAddress     = rsRetrieve.getInt("CORRESPONDENCEADDRESS");
						// Changes made for change Request No 36 for Correspondence Address
						// BEGIN DELETE : Ver 1.0
						addressRow.dtCreationDate = rsRetrieve
								.getTimestamp("CREATIONDATE");
						addressRow.strCreationUser = rsRetrieve
								.getString("CREATIONUSER");
						addressRow.dtModificationDate = rsRetrieve
								.getTimestamp("MODIFICATIONDATE");
						addressRow.strModificationUser = rsRetrieve
								.getString("MODIFICATIONUSER");
						addressRow.iObsolete = rsRetrieve.getInt("OBSOLETE");
						addressRow.iCableAvailable = rsRetrieve
								.getInt("CABLEAVAILABLE");
						addressRow.lAddressTypeID = rsRetrieve
								.getLong("ADDRESSTYPEID");
						addressTable.addUniqueRecord(addressRow);
					}

					teleSessionMgr.putTable(string_ADDRESS, addressTable);

					// BEGIN DELETE V 5.70b
					// rsRetrieve.getStatement().close();
					// END DELETE V 5.70b

					/** **************STARTING****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
						GLogger.chkpt("Loading ADDRESS Table in Session....");
					} // END MODIFY v9.00a

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				}

				/*
				 * Not to Load RefAdd table in the Session as it is not present
				 * Could be loaded Later in some cases
				 * if ((0 == lSapID) && (0 != lRefAddressID))
				 * {
				 *   rsRetrieve = null;
				 *
				 *   strSql.setLength(0); //Initialising
				 *   strSql.append("SELECT * FROM REFERENCEADDRESS WHERE REFERENCEADDRESSID = ").append(lRefAddressID).append(" AND OBSOLETE = 0");
				 *
				 *   rsRetrieve = gConnectAfe.rsQuery(strSql.toString());
				 *
				 *   ReferenceAddressRow referenceAddressRow     =       null;
				 *   referenceAddressTable       =       (ReferenceAddress)teleSessionMgr.getMasterTable("REFERENCEADDRESS");    // Getting the Vat table from the session
				 *
				 *   if(null != rsRetrieve)
				 *   {
				 *       while(rsRetrieve.next())
				 *       {
				 *           referenceAddressRow                                         = new ReferenceAddressRow();
				 *           referenceAddressRow.lReferenceAddressID = rsRetrieve.getLong("REFERENCEADDRESSID");
				 *           referenceAddressRow.lZipID                          = rsRetrieve.getLong("ZIPID");
				 *           referenceAddressRow.strStreetName           = rsRetrieve.getString("STREETNAME");
				 *           referenceAddressRow.strLanguage                     = rsRetrieve.getString("LANGUAGE");
				 *           referenceAddressRow.iObsolete                       = rsRetrieve.getInt("OBSOLETE");
				 *           referenceAddressRow.strCreationUser         = rsRetrieve.getString("CREATIONUSER");
				 *           referenceAddressRow.strModificationUser = rsRetrieve.getString("MODIFICATIONUSER");
				 *           referenceAddressRow.dtCreationDate          = rsRetrieve.getTimestamp("CREATIONDATE");
				 *           referenceAddressRow.dtModificationDate      = rsRetrieve.getTimestamp("MODIFICATIONDATE");
				 *
				 *           referenceAddressTable.addRecord(referenceAddressRow);
				 *
				 *       }//end of the while loop
				 *
				 *   }//end of the if loop
				 *
				 *   teleSessionMgr.putMasterTable("REFERENCEADDRESS", referenceAddressTable);
				 *   rsRetrieve.getStatement().close();
				 *
				 *   /****************STARTING****************TO PRINT THE DATA
				 *   if(GAfePropertyLoader.DEBUG)
				 *   {
				 *       System.out.println("Loading REFERENCEADDRESS Table in Session....");
				 *   }
				 *   /****************ENDING*******************TO PRINT THE DATA
				 *
				 * }//end of the if loop
				 */
				if ((0 == lSapID) && (0 == lRefAddressID)
						&& (0 != lManualAddressID)) {
					rsRetrieve = null;

					// BEGIN DELETE V 5.70b
					// strSql.setLength(0); //Initialising
					// strSql.append("SELECT * FROM MANUALADDRESS WHERE MANUALADDRESSID = ").append(lManualAddressID).append(" AND OBSOLETE = 0");
					// /****************STARTING****************TO PRINT THE DATA********************************************/
					// if(GAfePropertyLoader.DEBUG)
					// {
					// System.out.println("strSql - " +strSql);
					// }
					// /****************ENDING*******************TO PRINT THE DATA*******************************************/
					// rsRetrieve = gConnectAfe.rsQuery(strSql.toString());
					// END DELETE V 5.70b
					// BEGIN ADD V 5.70b
					strSql.setLength(0); // Initialising
					strSql
							.append("SELECT * FROM MANUALADDRESS WHERE MANUALADDRESSID = ? AND OBSOLETE = 0");
					psSelect2 = gConnectAfe.psPrepareStatement(strSql
							.toString());
					psSelect2.setLong(1, lManualAddressID);
					rsRetrieve = psSelect2.executeQuery();

					// END ADD V 5.70b

					ManualAddressRow manualAddressRow = null;

					manualAddressTable = (ManualAddress) teleSessionMgr
							.getTable(string_MANUALADDRESS); // Getting the Customer table from the session

					if (null != rsRetrieve) {
						while (rsRetrieve.next()) {
							manualAddressRow = new ManualAddressRow();
							manualAddressRow.lManualAddressID = rsRetrieve
									.getLong("MANUALADDRESSID");
							manualAddressRow.strStreetName = rsRetrieve
									.getString("STREETNAME");
							manualAddressRow.strZip = rsRetrieve
									.getString("ZIP");
							manualAddressRow.strCity = rsRetrieve
									.getString("CITY");
							manualAddressRow.strPostBox = rsRetrieve
									.getString("POSTBOX");
							manualAddressRow.strPostOffice = rsRetrieve
									.getString("POSTOFFICE");
							manualAddressRow.dtCreationDate = rsRetrieve
									.getTimestamp("CREATIONDATE");
							manualAddressRow.strCreationUser = rsRetrieve
									.getString("CREATIONUSER");
							manualAddressRow.dtModificationDate = rsRetrieve
									.getTimestamp("MODIFICATIONDATE");
							manualAddressRow.strModificationUser = rsRetrieve
									.getString("MODIFICATIONUSER");
							manualAddressRow.iObsolete = rsRetrieve
									.getInt("OBSOLETE");
							manualAddressTable
									.addUniqueRecord(manualAddressRow);
						}
					} // end of the if loop

					teleSessionMgr
							.putTable(string_MANUALADDRESS, manualAddressTable);

					// BEGIN DELETE V 5.70b
					// rsRetrieve.getStatement().close();
					// END DELETE V 5.70b

					/** **************STARTING****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
						GLogger
								.chkpt("Loading MANUALADDRESSID Table in Session....");
					} // END MODIFY v9.00a

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */

					// BEGIN DELETE V 5.70b
					// strSql.setLength(0); //Initialising
					// strSql.append("SELECT * FROM ACTION WHERE CUSTOMERID = ").append(lCustomerID);
					// rsRetrieve = gConnectAfe.rsQuery(strSql.toString());
					// END DELETE V 5.70b
					// BEGIN ADD V 5.70b
					strSql.setLength(0); // Initialising
					strSql.append("SELECT * FROM ACTION WHERE CUSTOMERID = ?");
					psSelect3 = gConnectAfe.psPrepareStatement(strSql
							.toString());
					psSelect3.setLong(1, lCustomerID.longValue());
					rsRetrieve = psSelect3.executeQuery();

					// END ADD V 5.70b
					actionTable = (Action) teleSessionMgr.getTable(string_ACTION);

					ActionRow actionRow = null;

					while (rsRetrieve.next()) {
						actionRow = new ActionRow();
						actionRow.iNumberOfCalls = rsRetrieve
								.getInt("NUMBEROFCALLS");
						actionRow.iObsolete = rsRetrieve.getInt("OBSOLETE");
						actionRow.lActionID = rsRetrieve.getLong("ACTIONID");
						actionRow.lCustomerID = rsRetrieve
								.getLong("CUSTOMERID");
						actionRow.lActionTypeID = rsRetrieve
								.getLong("ACTIONTYPEID");
						actionRow.lActionStatusID = rsRetrieve
								.getLong("ACTIONSTATUSID");
						actionRow.lActionContactID = rsRetrieve
								.getLong("ACTIONCONTACTID");
						actionRow.lActionReasonID = rsRetrieve
								.getLong("ACTIONREASONID");
						actionRow.lObjectTypeID = rsRetrieve
								.getLong("OBJECTTYPEID");
						actionRow.lObjectID = rsRetrieve.getLong("OBJECTID");
						actionRow.strPhone = rsRetrieve.getString("PHONE");
						actionRow.strFaxNumber = rsRetrieve
								.getString("FAXNUMBER");
						actionRow.strEmail = rsRetrieve.getString("EMAIL");
						actionRow.strActionValue = rsRetrieve
								.getString("ACTIONVALUE");
						actionRow.strAddress = rsRetrieve.getString(string_ADDRESS);
						actionRow.strRemarks = rsRetrieve.getString("REMARKS");
						actionRow.strTitle = rsRetrieve.getString("TITLE");
						actionRow.strCreationUser = rsRetrieve
								.getString("CREATIONUSER");
						actionRow.strModificationUser = rsRetrieve
								.getString("MODIFICATIONUSER");
						actionRow.dtCreationDate = rsRetrieve
								.getTimestamp("CREATIONDATE");
						actionRow.dtModificationDate = rsRetrieve
								.getTimestamp("MODIFICATIONDATE");
						actionRow.dtActionDate = rsRetrieve
								.getTimestamp("ACTIONDATE");
						actionRow.dtTimeFrom = rsRetrieve
								.getTimestamp("TIMEFROM");
						actionRow.dtTimeTo = rsRetrieve.getTimestamp("TIMETO");
						actionRow.dtActionCloseDate = rsRetrieve
								.getTimestamp("ACTIONCLOSEDATE");
						actionTable.addUniqueRecord(actionRow);
					}

					teleSessionMgr.putTable(string_ACTION, actionTable);
					rsRetrieve.getStatement().close();
				} // end of the if loop

				/** **************STARTING****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
					GLogger
							.chkpt("All the Address Related Tables Successfully Loaded into the Session....");
				} // END MODIFY v9.00a

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			} // end of the if loop
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());
			//	afee.printStackTrace(System.out);
			}

			throw afee;
		} catch (SQLException sqle) {
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("sqle.getMessage() : " + sqle.getMessage());
			} // END MODIFY v9.00a

			AfeException afee = new AfeException("ERRCOM_00008", sqle
					.getMessage()); // Unable to translate query Database access unsuccessful

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afee = new AfeException(string_ERRCOM_00002, ex
					.getMessage()); // unknown exception occurred

			throw afee;
		} finally {
			try {

				// BEGIN ADD V 5.70b
				if (null != psSelect1) {
					psSelect1.close();
					psSelect1 = null;
				}

				if (null != psSelect2) {
					psSelect2.close();
					psSelect2 = null;
				}

				if (null != psSelect3) {
					psSelect3.close();
					psSelect3 = null;
				}

				// END ADD V 5.70b
				// BEGIN ADD V6.20h
				if (null != rsRetrieve) {
					rsRetrieve.close();
					rsRetrieve = null;
				}

				// END ADD V6.20h
				closeAFEConnection(); // closing the connection
			} catch (Exception ex) {
				AfeException afee = new AfeException("ERRCOM_00001", ex
						.getMessage()); // Database error occured

				throw afee;
			}
		}
	} // Closing Brace of the function

	//  END ADD V5.02a

	/**
	 *  DESCRIPTION :   This Function will Load all the Address Related Data for change of the Address on
	 *                                  the Role Bussiness Object.
	 *
	 *  @param          :       Long lAddressID, BProductRole bProductRole
	 *
	 *  @return         :       boolean Returns True if the all the Data is Successfully Loaded in the Session
	 * /******************************************************************************************************************************
	 */
	protected void vdMakeChangesOfAddressRelatedData_InRoleMainBussinessObj(
			Long lAddressID, BProductRole bProductRole) throws Exception { // Starting Braces of the Function
		GLogger
				.logInput(
						"METHOD_vdMakeChangesOfAddressRelatedData_InRoleMainBussinessObj",
						"lAddressID = ", lAddressID);
		GLogger
				.logInput(
						"METHOD_vdMakeChangesOfAddressRelatedData_InRoleMainBussinessObj",
						"bProductRole = ", bProductRole);

		try {
			AddressRow addressRow = null;

			addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

			// BEGIN ADD ver 5.96e
			// Begin DEL v9.01d
			// CustomerLink customerLink = null;
			// CustomerLinkRow customerLinkRow = null;
			// customerLink = (CustomerLink) GConnectMemoryDB.getTable(GAfeConstants.CUSTOMERLINK);
			// End DEL v9.01d
			// Begin DEL v9.01d
			// Vector vctCustomerLinkRow = null;
			// Begin DEL v9.01d
			// END ADD ver 5.96e
			Vector vctAddressInternal = null;

			vctAddressInternal = addressTable.vctSearchByAddressIDandObsolete(
					lAddressID.longValue(), FINAL_ZERO);
			addressRow = (AddressRow) vctAddressInternal.elementAt(FINAL_ZERO);
			bProductRole.lServiceAddressID = Long.valueOf(
					addressRow.lServiceAddressID);
			bProductRole.lManualAddressID = Long.valueOf(
					addressRow.lManualAddressID);

			// BEGIN ADD ver 5.96e

			/*
			 *   if(null != customerLink)
			 * {
			 *         //BEGIN MODIFY ver 5.96s
			 *         vctCustomerLinkRow = customerLink.clrSearchByCustIDAddIDandObsolete(bProductRole.lCustomerID.longValue(),lAddressID.longValue(),FINAL_ZERO);
			 *         if(null != vctCustomerLinkRow)
			 *         {
			 *                 customerLinkRow = (CustomerLinkRow)vctCustomerLinkRow.elementAt(FINAL_ZERO);
			 *                 if(null != customerLinkRow)
			 *                 {
			 *                         bProductRole.iEstimatedSapStatus = customerLinkRow.iEstimatedSapStatus;
			 *                 }
			 *             }
			 *                 //END MODIFY ver 5.96s
			 * }
			 */

			// END ADD ver 5.96e
			/** **************STARTING****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {

				GLogger.chkpt("Inside if statement ");		// System.out.println("bProductRole.lServiceAddressID    -       " + bProductRole.lServiceAddressID);
				// System.out.println("bProductRole.lManualAddressID     -       " + bProductRole.lManualAddressID);
				// System.out.println("Make the Changes in The Role Main BO for the Changed AddressId....");
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			GLogger.logException(ex);

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This Function will Load all the Address Related Data for change of the Address on
	 *                                  the Role Bussiness Object.
	 *
	 *  @param          :       Long lAddressID, BProductRoleDetail bProductRoleDetail
	 *
	 *  @return         :       boolean Returns True if the all the Data is Successfully Loaded in the Session
	 * /******************************************************************************************************************************
	 */
	protected void vdMakeChangesOfAddressRelatedData_InRoleBussinessObj(
			Long lAddressID, BProductRoleDetail bProductRoleDetail)
			throws Exception { // Starting Braces of the Function
		try {
			AddressRow addressRow = null;

			addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS); // Getting the Customer table from the session

			Vector vctAddressInternal = null;

			vctAddressInternal = addressTable.vctSearchByAddressIDandObsolete(
					lAddressID.longValue(), FINAL_ZERO);
			addressRow = (AddressRow) vctAddressInternal.elementAt(FINAL_ZERO);
			bProductRoleDetail.CatSapID = Long.valueOf(addressRow.lServiceAddressID);
			bProductRoleDetail.lManualAddressID = Long.valueOf(
					addressRow.lManualAddressID);

			/** **************STARTING****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if statement ");	
				// System.out.println("bProductRoleDetail.CatSapID                       -       " + bProductRoleDetail.CatSapID);
				// System.out.println("bProductRoleDetail.lManualAddressID       -       " + bProductRoleDetail.lManualAddressID);
				// System.out.println("Make the Changes in The Role BO for the Changed AddressId....");
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This Function will Delete the Old Phone Line from DSL and Insert the New Phone Line
	 *                                  in DSL for any change in the Customer or Address
	 *
	 *  @param          :       Long lProductID
	 *
	 *  @return         :       boolean Returns True if the product is hidden else false
	 * /******************************************************************************************************************************
	 */

	//  BEGIN DELETE V 5.43a
	//  NOT REQUIRED AS NP SCENARIOS ARE HANDLE IN MANAGER
	/*
	 protected int iCheckToSendNPROrNot(long lCustomerProductLineID) throws Exception
	 { //Starting Braces of the Function

	 //    intializing the variables
	 int     iMainFlag               =       1;

	 try
	 {
	 //    goto the customerproduct get cust prodparam fullgc wala parameter if fullgc dont do any thing in if loop
	 //    for np

	 CustomerProductRow              customerProductRow              = null;                                                                         // Initializing the Object Class for the CustomerProduct table
	 customerProductTable            =       (CustomerProduct)teleSessionMgr.getTable("CUSTOMERPRODUCT");    // Getting the CustomerProduct table from the session

	 customerProductRow                      =       customerProductTable.cprSearchByCustomerProductLineIDandProductIDandObsolete(lCustomerProductLineID, GAfeDescription.lGetTypeId("PRODUCT_NP"), FINAL_ZERO);

	 //****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The customerProductRow is " +customerProductRow);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 if (null != customerProductRow)
	 {
	 customerProductParameterTable           =       (CustomerProductParameter)teleSessionMgr.getTable("CUSTOMERPRODUCTPARAMETER");                                  // Getting the Customer table from the session

	 CustomerProductParameterRow     customerProductParameterRow     =       null;
	 customerProductParameterRow             =       customerProductParameterTable.cprSearchByCustProductIDandProductParameterandObsolete(customerProductRow.lCustomerProductID, GAfeDescription.lGetTypeId("PRODUCTPARAMETER_DONORID"), FINAL_ZERO);

	 if (null != customerProductParameterRow)
	 {
	 /****************    STARTING****************TO PRINT THE DATA********************************************
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println("The customerProductParameterRow.strCustomerProductParameterValue is " +customerProductParameterRow.strCustomerProductParameterValue);
	 }
	 /****************    ENDING*******************TO PRINT THE DATA*******************************************

	 if ((GAfeDescription.strGetProperty("DONORID_X")).equalsIgnoreCase(customerProductParameterRow.strCustomerProductParameterValue))
	 {
	 iMainFlag       =       0;
	 }

	 }//end of the if  loop

	 }//end of the if loop

	 }//end of the try block
	 catch (Exception ex)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 ex.printStackTrace(System.out);
	 }
	 throw new AfeException("ERRCOM_00002",ex.getMessage());//unknown exception occurred
	 }

	 //    Return BO
	 return iMainFlag;

	 } //Closing Brace of the function
	 */

	//  END DELETE V 5.43a
	//  BEGIN ADD: V 3.10
	//  Change made for fixing DEFECT id 18, Graydon Check
	//  To get the status Of BadPayer Check.
	/**
	 *  DESCRIPTION :   This Function will check the status of the customer Bad Payer status.
	 *
	 *  @param          :       long lCustomerId
	 *
	 *  @return         :       integer returns 1 if BadPayer else returns 0
	 * /******************************************************************************************************************************
	 */
	public int iCheckBadPayer(long lCustomerId) throws AfeException {
		ResultSet rsGetData = null;
		String sbSql = null;
		int iBadPayer = -1;

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b
		try {

			// BEGIN DELETE V 5.70b
			// sbSql= "SELECT BADPAYER FROM CUSTOMER WHERE CUSTOMERID="+lCustomerId;
			// END DELETE V 5.70b
			gConnectAfe = new GConnectAfe(this);

			/* BEGIN ADD VER : 2.41 */
			if (gConnectAfe.bIsConnected()) {

				/* END ADD VER : 2.41 */

				// BEGIN DELETE V 5.70b
				// rsGetData = gConnectAfe.rsQuery(sbSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				sbSql = "SELECT BADPAYER FROM CUSTOMER WHERE CUSTOMERID= ?";
				psSelect = gConnectAfe.psPrepareStatement(sbSql);
				psSelect.setLong(1, lCustomerId);
				rsGetData = psSelect.executeQuery();

				// END ADD V 5.70b
				if ((rsGetData != null) && rsGetData.next()) {
					iBadPayer = rsGetData.getInt("BADPAYER");

					/* BEGIN DELETE VER : 2.41 */

					// rsGetData.close();
					/* END DELETE VER : 2.41 */
					/* BEGIN ADD VER : 2.41 */

					// BEGIN DELETE V 5.70b
					// rsGetData.getStatement().close();
					// END DELETE V 5.70b
					/* END ADD VER : 2.41 */
				}

				/* BEGIN ADD VER : 2.41 */
			}

			/* END ADD VER : 2.41 */
		} catch (SQLException sqle) {
			if (GAfePropertyLoader.DEBUG) {
			//	sqle.printStackTrace(System.out);
				GLogger.logException(sqle);
			}

			throw new AfeException("ERRCOM_00001", sqle.getMessage());
		} catch (Exception e) {
			if (GAfePropertyLoader.DEBUG) {
				//e.printStackTrace(System.out);
				GLogger.logException(e);
				}

			throw new AfeException(string_ERRCOM_00002);
		}

		/* BEGIN ADD VER : 2.41 */
		finally {
			try {

				// BEGIN ADD V 5.70b
				if (null != psSelect) {
					psSelect.close();
					psSelect = null;
				}

				if (null != rsGetData) {
					rsGetData.close();
					rsGetData = null;
				}

				// END ADD V 5.70b
				gConnectAfe.bClose();
			} catch (Exception e) {
				GLogger.logException(e);
			}
		}

		/* END ADD VER : 2.41 */

		return iBadPayer;
	}

	//  Change made for fixing DEFECT id 18, Graydon Check
	//  END ADD: V 3.10
	//  Begin Ver 2.4
	//  Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).

	/**
	 *  DESCRIPTION :   This Function will check the whether the login is present in the binternet bo or now
	 *
	 *  @param          :       BInternet bInternet, String strLoginTo_Compare
	 *
	 *  @return         :       boolean returns when not present and false when present
	 * /******************************************************************************************************************************
	 */
	protected boolean bCheckLoginPresent(BInternet bInternet,
			String strLoginTo_Compare) throws AfeException {

		// Begin Ver 2.91
		// Changes Made for Fixing Upgrade Downgrade Logins problem
		boolean bFlagToADD = true;

		// End Ver 2.91
		// Changes Made for Fixing Upgrade Downgrade Logins problem

		try {
			if ((null == bInternet.vctInternetDetail)
					|| ((null != bInternet.vctInternetDetail) && (FINAL_ZERO == bInternet.vctInternetDetail
							.size()))) {
				return true;
			}

			for (int iCounterCLogin = FINAL_ZERO; iCounterCLogin < bInternet.vctInternetDetail
					.size(); iCounterCLogin++) {
				Vector vctTemp = null;

				vctTemp = (Vector) bInternet.vctInternetDetail
						.elementAt(iCounterCLogin);

				// Begin Ver 2.91
				// Changes Made for Fixing Upgrade Downgrade Logins problem
				if ((strLoginTo_Compare.trim()).equalsIgnoreCase(String
						.valueOf(vctTemp.elementAt(FINAL_ZERO)).trim()))

				// End Ver 2.91
				// Changes Made for Fixing Upgrade Downgrade Logins problem
				{
					bFlagToADD = false;

					// Begin Ver 2.80
					// Changes Made for Fixing Upgrade Downgrade Logins problem
					break;

					// End Ver 2.80
					// Changes Made for Fixing Upgrade Downgrade Logins problem
				} // end of the if loop

				// Begin Ver 2.80
				// Changes Made for Fixing Upgrade Downgrade Logins problem
				else {
					bFlagToADD = true;
				}

				// End Ver 2.80
				// Changes Made for Fixing Upgrade Downgrade Logins problem
			} // end of the if loop
		} catch (Exception e) {
			if (GAfePropertyLoader.DEBUG) {
				//e.printStackTrace(System.out);
				GLogger.logException(e);
			}

			throw new AfeException(string_ERRCOM_00002);
		}

		return bFlagToADD;
	}

	//  Begin Ver 3.03
	//  Commenting the Validation Done for URL name / Mailalais Linked with the Logins (Upgrade/Downgrade).
	//  End Ver 2.4
	//  Changes for showing diff aged Logins For MailBox and URL seperately (Upgrade/Downgrade).
	//  Begin Ver 2.7
	//  Changes for Validation Done for URL name / Mailalais Linked with the Logins (Upgrade/Downgrade).

	/*
	 public boolean blnValidateInternetLoginAndProducts(BProductDetailProperty bProductDetailProperty, BInternet bInternet) throws AfeException
	 {
	 BProductDetail bProductDetail = null;
	 final int FINAL_AGING         = 1;
	 final int FINAL_ADD                   = 0;
	 int     iGetLoginStatus                   = 0;

	 try
	 {

	 for (int iCount = 0 ; iCount <  bProductDetailProperty.vctProductSelected.size(); iCount++)
	 {
	 bProductDetail  =  (BProductDetail) bProductDetailProperty.vctProductSelected.elementAt(iCount);
	 //    blnGetForProperty function is in LProduct and is used to check whether this ProductID corresponds to URL

	 if( blnGetForProperty("PRODUCT_URL", bProductDetail.lProductID) )
	 {
	 //     this call tells us whether the Login attached to this URL is of Aging or not. 1 == Aging, 0 == New
	 iGetLoginStatus = iReturnLoginStatus(bProductDetail, bProductDetailProperty.vctGetLoginfromILMURL);

	 System.out.println("iGetLoginStatus - " +iGetLoginStatus);
	 System.out.println("bProductDetail.strProductStatus - " +bProductDetail.strProductStatus);

	 //    Begin Ver 3.0
	 //    Fix for the validation for Aged Logins being able to be attached to aged mailalaises.

	 if (bProductDetail.strProductStatus.length() > 3)
	 {
	 continue;
	 }

	 //    End Ver 3.0
	 //    Fix for the validation for Aged Logins being able to be attached to aged mailalaises.

	 //    Begin Ver 2.73
	 //    Changes Made for Fixing the Bug which was fixed in a validation ver 2.71
	 //    if( ( iGetLoginStatus == FINAL_AGING && ("AGE").equalsIgnoreCase(bProductDetail.strProductStatus) ) || (iGetLoginStatus == FINAL_ADD && ("ADD").equalsIgnoreCase(bProductDetail.strProductStatus) ) )
	 if( ( iGetLoginStatus == FINAL_AGING && ("AGE").equalsIgnoreCase(bProductDetail.strProductStatus) ) || (iGetLoginStatus == FINAL_ADD && ("ADD").equalsIgnoreCase(bProductDetail.strProductStatus) )  || ("".equalsIgnoreCase(bProductDetail.strProductStatus)) || (FINAL_ZERO == bProductDetail.strProductStatus.length() ) )
	 //    End Ver 2.73
	 //    Changes Made for Fixing the Bug which was fixed in a validation ver 2.71
	 {
	 continue;
	 }
	 else
	 {
	 String strLogin  = (String)teleSessionMgr.getValue("strLoginChecked");
	 if(strLogin == null)
	 strLogin = "";
	 //    Begin Update: Ver 2.71
	 //    throw new AfeException("Due to Aging concept URL can not be attached to Login - ",strLogin);
	 throw new AfeException("ERRAFE_00743",strLogin);
	 //    End Update: Ver 2.71
	 //    return false;
	 }
	 }
	 //    blnGetForProperty function is in LProduct and is used to check whether this ProductID corresponds to MAILBOX
	 else if( blnGetForProperty("PRODUCT_MAILBOX", bProductDetail.lProductID) )
	 {
	 //     this call tells us whether the Login attached to this MailBox is of Aging or not. 1 == Aging, 0 == New
	 iGetLoginStatus = iReturnLoginStatus(bProductDetail, bProductDetailProperty.vctGetLoginfromILMMAIL);

	 System.out.println("iGetLoginStatus - " +iGetLoginStatus);

	 long lParentID    = bProductDetail.lCustomerProductID.longValue();

	 System.out.println("lParentID - " +lParentID);

	 BProductDetail  bProductDetailTemp = null;

	 //     this block checks whether all the MailAlias in that mailbox are of Aging/New if the Login is of Aging/new
	 for (int iMailAliasCount = 0 ; iMailAliasCount < bProductDetailProperty.vctProductSelected.size(); iMailAliasCount++)
	 {
	 bProductDetailTemp =    (BProductDetail) bProductDetailProperty.vctProductSelected.elementAt(iMailAliasCount);

	 System.out.println("bProductDetailTemp.strProductStatus - " +bProductDetailTemp.strProductStatus);

	 //    Begin Ver 3.0
	 //    Fix for the validation for Aged Logins being able to be attached to aged mailalaises.

	 if (bProductDetailTemp.strProductStatus.length() > 3)
	 {
	 continue;
	 }

	 //    End Ver 3.0
	 //    Fix for the validation for Aged Logins being able to be attached to aged mailalaises.

	 //    Checking the Level and Parent Instance
	 if( blnGetForProperty("PRODUCT_MAILADDRESS", bProductDetailTemp.lProductID) && ((bProductDetailTemp.iLevel - FINAL_ONE) == bProductDetail.iLevel)  && ((bProductDetailTemp.iParentInstance) == bProductDetail.iInstance))
	 {
	 //    Begin Ver 2.73
	 //    Changes Made for Fixing the Bug which was fixed in a validation ver 2.71
	 //    if ( (iGetLoginStatus == FINAL_AGING && ("AGE").equalsIgnoreCase(bProductDetailTemp.strProductStatus) ) || (iGetLoginStatus == FINAL_ADD && ("ADD").equalsIgnoreCase(bProductDetailTemp.strProductStatus) ))
	 if ( (iGetLoginStatus == FINAL_AGING && ("AGE").equalsIgnoreCase(bProductDetailTemp.strProductStatus) ) || (iGetLoginStatus == FINAL_ADD && ("ADD").equalsIgnoreCase(bProductDetailTemp.strProductStatus) )  || ("".equalsIgnoreCase(bProductDetailTemp.strProductStatus)) || (FINAL_ZERO == bProductDetailTemp.strProductStatus.length() ))
	 //    End Ver 2.73
	 //    Changes Made for Fixing the Bug which was fixed in a validation ver 2.71

	 {
	 continue;
	 }
	 else
	 {
	 String strLogin  = (String)teleSessionMgr.getValue("strLoginChecked");
	 if(strLogin == null)
	 strLogin = "";
	 //    Begin Update: Ver 2.71
	 //    throw new AfeException("Due to Aging concept MailAlias can not be attached to Login - ", strLogin);
	 throw new AfeException("ERRAFE_00742", strLogin);
	 //    End Update: Ver 2.71
	 //    return false;
	 }
	 }
	 }
	 }
	 }
	 }
	 catch (AfeException afee)                       //catch block starts to catch exceptions
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
	 afee.printStackTrace(System.out);
	 }
	 throw afee;
	 }
	 catch (Exception ex)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 ex.printStackTrace(System.out);
	 }
	 AfeException afe = new AfeException("ERRCOM_00002",ex.getMessage());//unknown exception occurred
	 throw afe;
	 }

	 return true;

	 }

	 //    End Ver 2.7
	 //    Changes for Validation Done for URL name / Mailalais Linked with the Logins (Upgrade/Downgrade).

	 //    Begin Ver 2.7
	 //    Changes for Validation Done for URL name / Mailalais Linked with the Logins (Upgrade/Downgrade).

	 public int iReturnLoginStatus(BProductDetail bProductDetail, Vector vctGetILMLogins) throws AfeException
	 {
	 BProductParameter bProductParameter = null;
	 String  strLogin                                        = "";

	 try
	 {
	 //     this block gets the Current Login for this Product (URL/Mailbox)
	 for (int iParamCount = 0; iParamCount < bProductDetail.vctParameters.size(); iParamCount++)
	 {
	 bProductParameter = (BProductParameter)bProductDetail.vctParameters.elementAt(iParamCount);

	 //    Bigin add
	 //    Check for bProductParameter.iParameter = 0;

	 for (int iValueCount =  0; iValueCount < bProductParameter.vctParameterValues.size(); iValueCount++)
	 {
	 if((String.valueOf(((Vector)bProductParameter.vctParameterValues.elementAt(iValueCount)).elementAt(FINAL_ONE))).equals("1") && (0 == bProductParameter.iParameter))
	 {
	 strLogin =(String)((Vector)bProductParameter.vctParameterValues.elementAt(iValueCount)).elementAt(FINAL_ZERO);
	 break;
	 }
	 }
	 }

	 teleSessionMgr.putValue("strLoginChecked", strLogin);

	 //     this block tells whether the Login is in Aging or not
	 for(int iLoginCount = 0; iLoginCount < vctGetILMLogins.size(); iLoginCount++)
	 {

	 //    Begin Add
	 //    Second validation is not required as ILM now sends onlyaged logins. And they are not setting the status may be. So avoid thesecond.

	 if( (strLogin).equalsIgnoreCase(String.valueOf(((BChangeILogin)vctGetILMLogins.elementAt(iLoginCount)).strLogin) ))
	 return 1;
	 }
	 }
	 catch(Exception e)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 e.printStackTrace(System.out);
	 }
	 throw new AfeException("ERRCOM_00002");
	 }

	 return 0;

	 }

	 //    End Ver 2.7
	 //    Changes for Validation Done for URL name / Mailalais Linked with the Logins (Upgrade/Downgrade).


	 //    BEGIN ADD: V 3.10
	 //    Added function for fixing DEFECT id 70, Obsolete Masters
	 //    Added function to Get PriceSettingId Depending on OptionProduct, MinMax Concept and ParameterSetting

	 /*******************************************************************************************************************************
	 *           DESCRIPTION :   This Function will calculates the PriceSettingId of the product depending on OptionProduct,
	 *                                           MinMax Concept and ParameterSetting
	 *
	 *           @param          :       BProductDetail bProductDetail, Vector vctAllBillableParameters,int iNoOfOccurences,int iIsDefault
	 *
	 *           @return         :       BProductDetail with setting the PriceSettingId calculated.
	 /*******************************************************************************************************************************/
	protected BProductDetail objGetPriceSettingId(
			BProductDetail bProductDetail, Vector vctAllBillableParameters,
			int iNoOfOccurences, int iIsDefault, int iFlagForDate)
			throws Exception {
		int iTakeOpProdAsNull = 0;
		int iPSCount = 0;
		int iGoAhead = 0;
		int iCount = 0;
		long lProdParamId = 0;
		Vector vctPriceSetting = null;
		Vector vctParamSettingRows = null;
		Vector vctPriceSettingMInMax = null;
		Vector vctFinalParamaSettingRows = null;
		Vector vctParamSettingIntRows = null;
		String strParameterSettingValue = null;
		ParameterSettingRow paramSettingRow = null;
		PriceSettingRow priceSettingRow = null;
		Date dtDateCheck = null;
		CustomerProductRow custProductRow = null;
		Timestamp dtCreationDateOfProduct = null;

		try {
			if (null == priceSettingTable) {
				priceSettingTable = (PriceSetting) teleSessionMgr
						.getMasterTable("PRICESETTING"); // Getting the CustomerProduct table from the session
			}

			if (null == parameterSettingTable) {
				parameterSettingTable = (ParameterSetting) teleSessionMgr
						.getMasterTable("PARAMETERSETTING"); // Getting the CustomerProduct table from the session
			}

			if (iFlagForDate == FINAL_ZERO) {
				dtDateCheck = new java.util.Date();
			} else {
				if (null == customerProductTable) {
					customerProductTable = (CustomerProduct) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
				}

				custProductRow = (CustomerProductRow) customerProductTable
						.cprSearchByCustProductIDandObsolete(
								bProductDetail.lCustomerProductID.longValue(),
								FINAL_ZERO);

				if ((null != custProductRow)
						&& (null != custProductRow.dtCreationDate)) {
					dtCreationDateOfProduct = custProductRow.dtCreationDate;

					//                  Begin Modify : V3.34
					if (null != dtCreationDateOfProduct) {
						dtDateCheck = java.sql.Date
								.valueOf(dtCreationDateOfProduct.toString()
										.substring(0, 10));
					} else {
						dtDateCheck = new java.util.Date();
					}

					//                  End Modify : V3.34
				} else {
					dtDateCheck = new java.util.Date();
				}
			}

			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if block");
				// System.out.println("*** vctAllBillableParameters ***" + vctAllBillableParameters);
			}

			if (iIsDefault == 1) {
				priceSettingRow = priceSettingTable
						.psrSearchByProductIDObsoleteandIsDefaultandDate(
								bProductDetail.lProductID.longValue(),
								FINAL_ZERO, iIsDefault, dtDateCheck);

				if (null != priceSettingRow) {
					bProductDetail.lPriceSettingID = Long.valueOf(
							priceSettingRow.lPriceSettingID);
				} else {
					bProductDetail.lPriceSettingID = Long.valueOf(FINAL_ZERO);
				}
			} else {
				vctPriceSetting = priceSettingTable
						.vctSearchByProductIDandOptionProductIDandDate(
								bProductDetail.lProductID.longValue(),
								bProductDetail.lOptionProductID.longValue(),
								FINAL_ZERO, dtDateCheck);

				if (null != vctPriceSetting) {
					iPSCount = vctPriceSetting.size();

					if (iPSCount == 1) {
						priceSettingRow = (PriceSettingRow) vctPriceSetting
								.elementAt(0);
						bProductDetail.lPriceSettingID = Long.valueOf(
								priceSettingRow.lPriceSettingID);
					} else if (iPSCount == 0) {
						vctPriceSetting = priceSettingTable
								.vctSearchByProductIDandOptionProductIDandDate(
										bProductDetail.lProductID.longValue(),
										FINAL_ZERO, FINAL_ZERO, dtDateCheck);
						iPSCount = vctPriceSetting.size();

						if (iPSCount == 1) {
							priceSettingRow = (PriceSettingRow) vctPriceSetting
									.elementAt(0);
							bProductDetail.lPriceSettingID = Long.valueOf(
									priceSettingRow.lPriceSettingID);
						} else {
							iGoAhead = 1;
							iTakeOpProdAsNull = 1;
						}
					} else {
						iGoAhead = 1;
					}

					if (iGoAhead == 1) {
						if (iTakeOpProdAsNull == 1) {
							vctPriceSettingMInMax = priceSettingTable
									.vctSearchByProductIDOptionProductIDandMinMaxandDate(
											bProductDetail.lProductID
													.longValue(), FINAL_ZERO,
											FINAL_ZERO, iNoOfOccurences,
											dtDateCheck);
						} else {
							vctPriceSettingMInMax = priceSettingTable
									.vctSearchByProductIDOptionProductIDandMinMaxandDate(
											bProductDetail.lProductID
													.longValue(),
											bProductDetail.lOptionProductID
													.longValue(), FINAL_ZERO,
											iNoOfOccurences, dtDateCheck);
						}

						// With MinMax Funda with Is Default as Zero.

						/*                                      if (null == vctPriceSettingMInMax)
						 {
						 if (iTakeOpProdAsNull == 1)
						 {
						 vctPriceSettingMInMax = priceSettingTable.vctSearchByProductIDOptionProductIDandMinMaxandIsDefault(bProductDetail.lProductID.longValue(), 0, 0,iNoOfOccurences,FINAL_ZERO);
						 }
						 else
						 {
						 vctPriceSettingMInMax = priceSettingTable.vctSearchByProductIDOptionProductIDandMinMaxandIsDefault(bProductDetail.lProductID.longValue(), bProductDetail.lOptionProductID.longValue(), 0,iNoOfOccurences,FINAL_ZERO);
						 }

						 }
						 */
						if (null != vctPriceSettingMInMax) {
							iPSCount = vctPriceSettingMInMax.size();
							

						 if (iPSCount == 1) {
								priceSettingRow = (PriceSettingRow) vctPriceSettingMInMax
										.elementAt(0);
								bProductDetail.lPriceSettingID = Long.valueOf(
										priceSettingRow.lPriceSettingID);
							} else if ((iPSCount == 0) || (iPSCount >= 1)) {
								if (null != vctAllBillableParameters) {
									vctFinalParamaSettingRows = new Vector();

									for (int iBillableParamCnt = 0; iBillableParamCnt < vctAllBillableParameters
											.size(); iBillableParamCnt++) {
										lProdParamId = ((Long) ((Vector) vctAllBillableParameters
												.elementAt(iBillableParamCnt))
												.elementAt(0)).longValue();
										strParameterSettingValue = (String) ((Vector) vctAllBillableParameters
												.elementAt(iBillableParamCnt))
												.elementAt(1);
										GLogger.debug(CLASS_NAME, "vctFinalParamaSettingRows" , "**** vctFinalParamaSettingRows.parametrid ****",lProdParamId);
										GLogger.debug(CLASS_NAME, "vctFinalParamaSettingRows" , "**** vctFinalParamaSettingRows.strParameterSettingValue ****",strParameterSettingValue);
										vctParamSettingRows = parameterSettingTable
												.vctSearchByProdParamIDandParamSettingValueandObsolete(
														lProdParamId,
														strParameterSettingValue,
														0, 0, 0);
										vctFinalParamaSettingRows
												.addElement(vctParamSettingRows);

										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if block");
											// System.out.println(" **** lProdParamId **** " + lProdParamId);
											// System.out.println(" **** strParameterSettingValue **** " + strParameterSettingValue);
										}
									}
								}

								if (null != vctFinalParamaSettingRows) {
									for (int iPriceSetCount = 0; iPriceSetCount < vctPriceSettingMInMax
											.size(); iPriceSetCount++) {
										iCount = 0;
										priceSettingRow = (PriceSettingRow) vctPriceSettingMInMax
												.elementAt(iPriceSetCount);
										GLogger.debug(CLASS_NAME, "vctPriceSettingMInMax" , "**** vctPriceSettingMInMax.lPriceSettingID ****", priceSettingRow.lPriceSettingID);
										for (int iFinalParamCntr = 0; iFinalParamCntr < vctFinalParamaSettingRows
												.size(); iFinalParamCntr++) {
											vctParamSettingIntRows = (Vector) vctFinalParamaSettingRows
													.elementAt(iFinalParamCntr);

											if (null != vctParamSettingIntRows) {
												for (int iParamCount = 0; iParamCount < vctParamSettingIntRows
														.size(); iParamCount++) {
													paramSettingRow = (ParameterSettingRow) vctParamSettingIntRows
															.elementAt(iParamCount);

													if (GAfePropertyLoader.DEBUG) {
														GLogger.debug(CLASS_NAME, "objGetPriceSettingId" , "**** paramSettingRow.lPriceSettingID ****", paramSettingRow.lPriceSettingID);
													}

													if (priceSettingRow.lPriceSettingID == paramSettingRow.lPriceSettingID) {
														iCount++;
													}
												}
											}
										}
										if (GAfePropertyLoader.DEBUG) {
											GLogger.debug(CLASS_NAME, "objGetPriceSettingId" , "**** iCount ****", iCount);
											GLogger.debug(CLASS_NAME, "objGetPriceSettingId" , "**** vctFinalParamaSettingRows.size() ****", vctFinalParamaSettingRows.size());
										}
										if (null != vctFinalParamaSettingRows) {
											//R15.20:ALM 22339: Corrected the check on iCount for dual config of OptionProducts and multiple param values. iCount should always be 1 at this point
											if (iCount > 0) {
												bProductDetail.lPriceSettingID = Long.valueOf(
														priceSettingRow.lPriceSettingID);

												if (GAfePropertyLoader.DEBUG) {
													GLogger.debug(CLASS_NAME, "objGetPriceSettingId" , "**** bProductDetail.lPriceSettingID ****", bProductDetail.lPriceSettingID.longValue());
												}

												break;
											}
										} else {
											if (GAfePropertyLoader.DEBUG) {
												bProductDetail.lPriceSettingID = Long.valueOf(
														0);

												// System.out.println("******** No vctFinalParamaSettingRows Found **********");
											}
										}
									}
								}
							}
						}
					}
				} else {
					if (GAfePropertyLoader.DEBUG) {

						GLogger.chkpt("Inside if statement ");		// System.out.println("###########  In else part of Price Setting  ################");
					}

					vctPriceSetting = priceSettingTable
							.vctSearchByProductIDandOptionProductIDandDate(
									bProductDetail.lProductID.longValue(),
									FINAL_ZERO, FINAL_ZERO, dtDateCheck);
					iPSCount = vctPriceSetting.size();

					if (iPSCount == 1) {
						priceSettingRow = (PriceSettingRow) vctPriceSetting
								.elementAt(0);
						bProductDetail.lPriceSettingID = Long.valueOf(
								priceSettingRow.lPriceSettingID);
					} else {
						iGoAhead = 1;
						iTakeOpProdAsNull = 1;
					}

					if (iGoAhead == 1) {
						if (iTakeOpProdAsNull == 1) {
							vctPriceSettingMInMax = priceSettingTable
									.vctSearchByProductIDOptionProductIDandMinMaxandDate(
											bProductDetail.lProductID
													.longValue(), FINAL_ZERO,
											FINAL_ZERO, iNoOfOccurences,
											dtDateCheck);
						} else {
							vctPriceSettingMInMax = priceSettingTable
									.vctSearchByProductIDOptionProductIDandMinMaxandDate(
											bProductDetail.lProductID
													.longValue(),
											bProductDetail.lOptionProductID
													.longValue(), FINAL_ZERO,
											iNoOfOccurences, dtDateCheck);
						}

						// if not getting from MinMax Funda

						/*
						 if (null == vctPriceSettingMInMax)
						 {
						 if (iTakeOpProdAsNull == 1)
						 {
						 vctPriceSettingMInMax = priceSettingTable.vctSearchByProductIDOptionProductIDandMinMaxandIsDefault(bProductDetail.lProductID.longValue(), 0, 0,iNoOfOccurences,FINAL_ZERO);
						 }
						 else
						 {
						 vctPriceSettingMInMax = priceSettingTable.vctSearchByProductIDOptionProductIDandMinMaxandIsDefault(bProductDetail.lProductID.longValue(), bProductDetail.lOptionProductID.longValue(), 0,iNoOfOccurences,FINAL_ZERO);
						 }
						 }
						 */

						// Here it would always have vctPriceSettingMInMax Vector filled
						if (null != vctPriceSettingMInMax) {
							iPSCount = vctPriceSettingMInMax.size();

							if (iPSCount == 1) {
								priceSettingRow = (PriceSettingRow) vctPriceSettingMInMax
										.elementAt(0);
								bProductDetail.lPriceSettingID = Long.valueOf(
										priceSettingRow.lPriceSettingID);
							} else if ((iPSCount == 0) || (iPSCount >= 1)) {
								if (null != vctAllBillableParameters) {
									vctFinalParamaSettingRows = new Vector();

									for (int iBillableParamCnt = 0; iBillableParamCnt < vctAllBillableParameters
											.size(); iBillableParamCnt++) {
										lProdParamId = ((Long) ((Vector) vctAllBillableParameters
												.elementAt(iBillableParamCnt))
												.elementAt(0)).longValue();
										strParameterSettingValue = (String) ((Vector) vctAllBillableParameters
												.elementAt(iBillableParamCnt))
												.elementAt(1);
										vctParamSettingRows = parameterSettingTable
												.vctSearchByProdParamIDandParamSettingValueandObsolete(
														lProdParamId,
														strParameterSettingValue,
														0, 0, 0);
										vctFinalParamaSettingRows
												.addElement(vctParamSettingRows);

										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if block");
											// System.out.println(" **** lProdParamId **** " + lProdParamId);
											// System.out.println(" **** strParameterSettingValue **** " + strParameterSettingValue);
										}
									}
								}

								if (null != vctFinalParamaSettingRows) {
									for (int iPriceSetCount = 0; iPriceSetCount < vctPriceSettingMInMax
											.size(); iPriceSetCount++) {
										iCount = 0;
										priceSettingRow = (PriceSettingRow) vctPriceSettingMInMax
												.elementAt(iPriceSetCount);

										for (int iFinalParamCntr = 0; iFinalParamCntr < vctFinalParamaSettingRows
												.size(); iFinalParamCntr++) {
											vctParamSettingIntRows = (Vector) vctFinalParamaSettingRows
													.elementAt(iFinalParamCntr);

											if (null != vctParamSettingIntRows) {
												for (int iParamCount = 0; iParamCount < vctParamSettingIntRows
														.size(); iParamCount++) {
													paramSettingRow = (ParameterSettingRow) vctParamSettingIntRows
															.elementAt(iParamCount);

													if (GAfePropertyLoader.DEBUG) {
														GLogger.chkpt("Inside if block");
														// System.out.println(" **** paramSettingRow.lPriceSettingID **** " + paramSettingRow.lPriceSettingID);
													}

													if (priceSettingRow.lPriceSettingID == paramSettingRow.lPriceSettingID) {
														iCount++;
													}

													if (GAfePropertyLoader.DEBUG) {
														GLogger.chkpt("Inside if block");
														// System.out.println(" **** iCount **** " + iCount);
														// System.out.println(" **** vctFinalParamaSettingRows.size() **** " + vctFinalParamaSettingRows.size());
													}
												}
											} else {
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if block");
													// System.out.println("******** No vctParamSettingIntRows Found **********");
												}
											}
										}

										if (null != vctFinalParamaSettingRows) {
											if (iCount == vctFinalParamaSettingRows
													.size()) {
												bProductDetail.lPriceSettingID = Long.valueOf(
														priceSettingRow.lPriceSettingID);

												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if block");
													// System.out.println(" **** bProductDetail.lPriceSettingID **** " + bProductDetail.lPriceSettingID.longValue());
												}

												break;
											}
										} else {
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if block");
												// System.out.println("******** No vctFinalParamaSettingRows Found **********");
											}
										}
									}
								}
							}
						} else {
							bProductDetail.lPriceSettingID = Long.valueOf(0);

							if (GAfePropertyLoader.DEBUG) {

								GLogger.chkpt("Inside if statement ");	// System.out.println("******** No vctPriceSettingMInMax Found **********");
							}
						}
					}
				}
			}

			// BEGIN ADD SUPRIYA
			// Check if the price setting Id is to be picked for ATV Single Product
			try {
				if (bProductDetail.lProductID.longValue() == GAfeDescription.PRODUCT_SINGLE) {
					GLogger.chkpt("Product is ATV Single");

					// Get the Address Id of the productline from session
					Object obj1 = teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct);

					if (null != obj1) {
						GLogger.chkpt("Role object found in session");

						BProductRole objBProductRole = (BProductRole) obj1;

						GLogger.chkpt("Selected Address Id :"
								+ objBProductRole.lAddressID);
						GLogger.chkpt("objBProductRole:" + objBProductRole);

						Long lngAddressId = null;
						Long lngCustomerId = null;
						BProductRoleDetail objProductRoleDetail = null;

						// Begin DEL v9.01d
						// BProductParameter objBProductParameter  =   null;
						// End DEL v9.01d
						if (null != objBProductRole) {
							GLogger.chkpt("objBProductRole is not null");
							lngAddressId = objBProductRole.lAddressID;
							GLogger.chkpt("objBProductRole.lAddressID:"
									+ objBProductRole.lAddressID);

							//                          if(null != lngAddressId)
							//                          {
							if (null != objBProductRole.vctProductRole) {
								for (int iCounter = 0; iCounter < objBProductRole.vctProductRole
										.size(); iCounter++) {
									objProductRoleDetail = (BProductRoleDetail) objBProductRole.vctProductRole
											.elementAt(iCounter);

									if (null != objProductRoleDetail) {
										if ((null != objProductRoleDetail.lRoleTypeID)
												&& (GAfeDescription.ROLETYPE_USER == objProductRoleDetail.lRoleTypeID
														.longValue())) {
											GLogger
													.chkpt("objProductRoleDetail.lAddressID:"
															+ objProductRoleDetail.lAddressID);
											GLogger
													.chkpt("objProductRoleDetail.lCustomerID:"
															+ objProductRoleDetail.lCustomerID);
											lngAddressId = objProductRoleDetail.lAddressID;
											lngCustomerId = objProductRoleDetail.lCustomerID;
										}
									}
								}
							}

							// }
						}

						// Begin Modify v9.01b get the region instead of Owner

						// Modified for cached implementation of the method (Reason: slow performance of product movement in upper and lower grid)
						// long lRegionId = lProduct_ext.lGetRegionIdentifierForAddressId(lngAddressId.longValue());
						long lRegionId = lGetRegionIdentifierForAddressId(
								lngAddressId.longValue(), true);

						// long lOwnerId = lGetNodeOwnerByAddressId(lngAddressId.longValue(),true);
						GLogger.chkpt("Retrieved Region id:" + lRegionId);

						String strZip = null;
						long lPriceSettingId = -1;
						String[] arrAddressDetails = RProduct
								.arrGetAddressDetail(lngAddressId.longValue(),
										(int) bSession.lLanguageId);

						if (null != arrAddressDetails) {
							strZip = arrAddressDetails[5];
						}

						// End Modify v9.01b
						// Begin Modify v9.01b first find whether social is selected or not
						boolean isSocialTarief = isSocialTarief(bProductDetail.vctParameters);
						ArrayList alstCategorieTarief = LProduct_ext
								.getCategorieAndTarief(strZip, isSocialTarief,
										lRegionId);
						String strCategorie = null;

						// String strCategorie = strGetCategorie(strZip,strCountryCode,false,lOwnerId);

						// if("UPC Leuven".equalsIgnoreCase(strCategorie) || "UPC Bxl".equalsIgnoreCase(strCategorie))
						if ((isSocialTarief && lRegionId==1) || GAfeDescription.bCheckInList(lRegionId,
								GAfeConstants.REGION_UPC)
								|| GAfeDescription.bCheckInList(lRegionId,
										GAfeConstants.REGION_INTERKABEL)||(isSocialTarief && lRegionId==2)||(isSocialTarief && lRegionId==3))

						// End Modify v9.01b
						{
							GLogger
									.chkpt("Retrieved strCategorie is for Leuven/bxl or Interkabel");

							// Begin Add v9.01a  put the tarief
							strCategorie = (String) alstCategorieTarief
									.get(GAfeConstants.ONE);
							GLogger.chkpt("Tarief set is " + strCategorie);

							// End Add v9.01a
							// Price Setting Id to be overwritten with specific value
							// Check if Social Tariff is applicable, if yes change the values.

							// Begin delete v9.01a deleting as code was just to check if the selected tarief is social or not.

							/*
							 * vctParameters = bProductDetail.vctParameters;
							 * if(null != vctParameters)
							 * {
							 *   for (int iCountForParam =0 ; iCountForParam < vctParameters.size();iCountForParam++)
							 *   {
							 *       objTempBProductParameter = (BProductParameter)vctParameters.elementAt(iCountForParam);
							 *       if(objTempBProductParameter.lParameterID.longValue() == GAfeDescription.PRODUCTPARAMETER_TARIEF)
							 *       {
							 *           objBProductParameter = objTempBProductParameter;
							 *           break;
							 *       }
							 *   }
							 *   if (null != objBProductParameter)
							 *   {
							 *       if (null != objBProductParameter.vctParameterValues)
							 *       {
							 *           for(int iCount1=0; iCount1 < objBProductParameter.vctParameterValues.size();iCount1++)
							 *           {
							 *                   vctTemp = (Vector) objBProductParameter.vctParameterValues.elementAt(iCount1);
							 *               if(null !=vctTemp)
							 *               {
							 *                  if((((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL) ||
							 *                          ((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL_UPC_LEUVEN) ||
							 *                          ((String)vctTemp.elementAt(0)).equalsIgnoreCase(GAfeDescription.TARIEF_SOCIAL_UPC_BXL) ) && ((new Integer(vctTemp.elementAt(1)+""))).intValue() == 1 )
							 *                  {
							 *                      if("UPC Leuven".equalsIgnoreCase(strCategorie))
							 *                      {
							 *                          strCategorie = GAfeDescription.TARIEF_SOCIAL_UPC_LEUVEN;
							 *                      }
							 *                      else if("UPC Bxl".equalsIgnoreCase(strCategorie))
							 *                      {
							 *                          strCategorie = GAfeDescription.TARIEF_SOCIAL_UPC_BXL;
							 *                      }
							 *                  }
							 *               }
							 *           }
							 *       }
							 *   }
							 *
							 * }
							 */

							// Price Setting Id to be overwritten with specific value
							// Compute if VAT is applicable
							CustomerLink customerLink = null;
							CustomerLinkRow customerLinkRow = null;
							boolean bVatApplicable = false;

							customerLink = (CustomerLink) GConnectMemoryDB
									.getTable(GAfeConstants.CUSTOMERLINK);

							Vector vctCustomerLink = null;

							vctCustomerLink = customerLink
									.clrSearchByCustIDAddIDandObsolete(
											lngCustomerId.longValue(),
											lngAddressId.longValue(), 0);

							if ((null != vctCustomerLink)
									&& (0 != vctCustomerLink.size())) {
								ArrayList arrActiveDTVLine = null;
								ArrayList arrATVLines = null;

								customerLinkRow = (CustomerLinkRow) vctCustomerLink
										.elementAt(0);
								arrActiveDTVLine = arrGetLineWithActivationDateOnCustomerLinkOfPackage(
										customerLinkRow.lCustomerLinkID,
										GAfeDescription.PRODUCT_IDTV, true,
										GAfeConstants.SingleDTVPackage);
								GLogger.chkpt("arrActiveDTVLine:"
										+ arrActiveDTVLine);

								int iNoOfActiveDTVLines = 0;
								int iNoOfATVLines = 0;

								if (null != arrActiveDTVLine) {
									iNoOfActiveDTVLines = arrActiveDTVLine
											.size();
								}

								GLogger.chkpt("iNoOfActiveDTVLines:"
										+ iNoOfActiveDTVLines);

								// Get all Lines of ATV
								arrATVLines = arrGetLinesOfPackage(
										RProduct
												.arrGetCPLOnCustLinkId(
														customerLinkRow.lCustomerLinkID,
														GAfeDescription.PRODUCT_ANALOGTV,
														0, 1),
										GAfeConstants.SingleATVPackage);
								GLogger.chkpt("arrATVLines:" + arrATVLines);

								if (null != arrATVLines) {
									iNoOfATVLines = arrATVLines.size();
								}

								GLogger.chkpt("iNoOfATVLines:" + iNoOfATVLines);
								bVatApplicable = ((iNoOfATVLines > 0) && (iNoOfActiveDTVLines >= iNoOfATVLines));
								GLogger.chkpt("bVatApplicable:"
										+ bVatApplicable);
							}

							// For Normal Tarief Categorie and Tarief Values are same.
							lPriceSettingId = lGetPriceSettingIdByTariefAndVat(
									strCategorie, bVatApplicable);
						}

						GLogger.chkpt("lPriceSettingId:" + lPriceSettingId);

						if (-1 != lPriceSettingId) {

							// Valid value for Price Setting Id computed
							bProductDetail.lPriceSettingID = Long.valueOf(
									lPriceSettingId);
						}
					} else {

						// Move Order Flow

						/**
						 * In this case, Tarief is computed already and can be picked from session
						 */
						long lPriceSettingIdForOrder = -1;
						Object obj = teleSessionMgr
								.getValue("PriceSetting_Tarief");

						if (null != obj) {
							String strTarief = (String) obj;

							GLogger
									.chkpt("PriceSetting_Tarief picked from session:"
											+ strTarief);

							if (-1 != strTarief.indexOf("UPC")) {

								/**
								 * Other than tarief VAT Applicability needs to be computed.
								 * For this total number of ATV lines and total number of DTV lines
								 * at the destination address is required.
								 */

								// Get the Business Object containing the Move Order details from session.
								BOrderMove objBOrderMove = (BOrderMove) teleSessionMgr
										.getValue(GAfeConstants.BORDERMOVE_AFEORDER);
								BMoveOrderLineDetails objBMoveOrderLineDetails = null;

								if (null != objBOrderMove) {
									int iATVLineCount = 0;
									int iDTVLineCount = 0;
									boolean bVatApplicableForOrder = false;

									GLogger
											.chkpt("Checking for Total number of ATV and DTV Lines at destination address:");

									Vector vctLineDetails = objBOrderMove.vctBMoveOrderLineDetails;

									if (null != vctLineDetails) {
										GLogger.chkpt("vctLineDetails:"
												+ vctLineDetails);

										for (int iLineCount = 0; iLineCount < vctLineDetails
												.size(); iLineCount++) {
											objBMoveOrderLineDetails = (BMoveOrderLineDetails) vctLineDetails
													.get(iLineCount);

											if (objBMoveOrderLineDetails
													.lGetProductId() == GAfeDescription.PRODUCT_ANALOGTV) {
												iATVLineCount++;
											}

											if (objBMoveOrderLineDetails
													.lGetProductId() == GAfeDescription.PRODUCT_IDTV) {
												iDTVLineCount++;
											}

											GLogger.chkpt("iATVLineCount at :"
													+ iLineCount + ":"
													+ iATVLineCount);
											GLogger.chkpt("iDTVLineCount at :"
													+ iLineCount + ":"
													+ iDTVLineCount);
										}

										bVatApplicableForOrder = (iDTVLineCount > iATVLineCount);
										GLogger
												.chkpt("bVatApplicableForOrder :"
														+ bVatApplicableForOrder);
									}

									/**
									 * Compute Price Setting Id based on VAT Applicable and Tarief
									 */
									lPriceSettingIdForOrder = lGetPriceSettingIdByTariefAndVat(
											strTarief, bVatApplicableForOrder);
									GLogger.chkpt("lPriceSettingIdForOrder :"
											+ lPriceSettingIdForOrder);

									if (-1 != lPriceSettingIdForOrder) {

										// Valid value for Price Setting Id computed
										bProductDetail.lPriceSettingID = Long.valueOf(
												lPriceSettingIdForOrder);
									}
								}
							}
						}
					}
				}
			} catch (Exception e) {
				GLogger.logException(e);
			}

			// END ADD SUPRIYA
		} catch (Exception ex) {
		//	ex.printStackTrace(System.out);
			GLogger.logException(ex);
			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return bProductDetail;
	}

	//  Changes made for fixing DEFECT id 70, Obsolete Masters
	//  END ADD: V 3.10

	//  ADD made for fixing DEFECT id 70, Obsolete Masters
	//  END ADD: V 3.10
	//  BEGIN ADD: V 3.10
	//  Added Code for fixing DEFECT id 70, Obsolete Masters
	//   Function is added to get the Valid Option Group.
	// BEGIN DELETE V5.80a
	// protected boolean bGetValidOptionGroup (long lProductID, long lParentProdID, long lOptionGroupId, java.sql.Date dtCreationDate) throws Exception
	// END DELETE V5.80a
	// BEGIN ADD v5.80a
	protected boolean bGetValidOptionGroup(long lProductID, long lParentProdID,
			long lOptionGroupId, java.sql.Date dtCreationDate,
			BProductDetailProperty bProductDetailProperty) throws Exception

	// END ADD v5.80a
	{
		OptionProductRow optionProductRow = null;
		OptionGroupRow optionGroupRow = null;
		CustomerProduct customerProductTable = null;
		CustomerProductRow customerProductRow = null;
		Vector vctOptionGroup = null;

		// Begin DEL v9.01d
		// Vector vctObjOPInternal = null;
		// End DEL v9.01d
		Vector vctAllOPGroups = null;
		long lOGID = 0;
		boolean bReturn = false;

		try {
			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			if (null == customerProductTable) {
				customerProductTable = (CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCT);
			}

			customerProductRow = (CustomerProductRow) customerProductTable
					.cprSearchByCustProductIDandObsolete(lParentProdID,
							FINAL_ZERO);

			// BEGIN DELETE v5.80a
			// vctOptionGroup = optionGroupTable.vctSearchByProductIDandObsolete(customerProductRow.lProductID, FINAL_ZERO);
			// END DELETE v5.80a
			// BEGIN ADD v5.80a
			vctOptionGroup = optionGroupTable.vctSearchByProductIDandObsolete(
					customerProductRow.lProductID, FINAL_ZERO,
					bProductDetailProperty.iRateClassIDNew);

			// END ADD v5.80a

			if (null != vctOptionGroup) {

				// Loading the Tables into Memory
				if (null == optionProductTable) {
					optionProductTable = (OptionProduct) teleSessionMgr
							.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
				}

				vctAllOPGroups = new Vector();

				for (int iOGCounter = FINAL_ZERO; iOGCounter < vctOptionGroup
						.size(); iOGCounter++) {
					lOGID = ((OptionGroupRow) (vctOptionGroup
							.elementAt(iOGCounter))).lOptionGroupID;

					/* BEGIN DELETE VER: 5.59tan */

					// System.out.println("[bGetValidOptionGroup : ] > Option Group : "+lOGID);
					/* END DELETE VER: 5.59tan */

					// BEGIN DELETE v5.80a
					// optionProductRow = optionProductTable.prSearchBylOptionGroupIDandlProductIDandiObsolete(lOGID, lProductID, FINAL_ZERO);
					// END DELETE v5.80a
					// BEGIN ADD v5.80a
					optionProductRow = optionProductTable
							.prSearchBylOptionGroupIDandlProductIDandiObsolete(
									lOGID, lProductID, FINAL_ZERO,
									bProductDetailProperty.iRateClassIDNew);

					// END ADD v5.80a

					if (null != optionProductRow) {

						/* BEGIN DELETE VER: 5.59tan */

						// System.out.println("[bGetValidOptionGroup : ] > option Product : "+optionProductRow.lOptionProductID);
						/* END DELETE VER: 5.59tan */
						vctAllOPGroups.addElement(Long.valueOf(lOGID));
					}
				}

				/* BEGIN DELETE VER: 5.59tan */

				// System.out.println("[bGetValidOptionGroup : ] > vctAllOPGroups : "+vctAllOPGroups);
				/* END DELETE VER: 5.59tan */
				if (null != vctAllOPGroups) {
					if (vctAllOPGroups.size() != 0) {
						if (vctAllOPGroups.size() > 1) {
							for (int iOpGCntr = 0; iOpGCntr < vctAllOPGroups
									.size(); iOpGCntr++) {
								lOGID = ((Long) vctAllOPGroups
										.elementAt(iOpGCntr)).longValue();

								if (lOGID != lOptionGroupId) {
									optionGroupRow = optionGroupTable
											.ogSearchByOptionGroupIDValidandObsolete(
													lOGID, FINAL_ZERO,
													new java.util.Date());

									/*
									 * if (null == optionGroupRow)
									 * {
									 *       continue;
									 * }
									 * else
									 * {
									 *       break;
									 * }
									 */
								}
							}

							if (null == optionGroupRow) {
								optionGroupRow = optionGroupTable
										.ogSearchByOptionGroupIDValidandObsolete(
												lOptionGroupId, FINAL_ZERO,
												new java.util.Date());

								if (null != optionGroupRow) {
									bReturn = true;
								} else {
									optionGroupRow = optionGroupTable
											.ogSearchByOptionGroupIDValidandObsolete(
													lOptionGroupId, FINAL_ZERO,
													dtCreationDate);

									if (null != optionGroupRow) {
										bReturn = true;
									} else {
										bReturn = false;
									}
								}
							} else {
								bReturn = false;
							}
						} else {
							bReturn = true;
						}
					} else {
						bReturn = false;
					}
				} else {
					bReturn = false;
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return bReturn;
	}

	//  END ADD: V 3.10
	//  Added Code for fixing DEFECT id 70, Obsolete Masters
	//  BEGIN ADD: V 3.10
	//  Change made for fixing DEFECT id 70, Obsolete Masters
	//  To get the NumberOfOccurences Of product from Products Selected.

	/**
	 *       DESCRIPTION :   This Function will check the status of the customer Bad Payer status.
	 *
	 *       @param          :       long lCustomerId
	 *
	 *       @return         :       integer returns 1 if BadPayer else returns 0
	 * /******************************************************************************************************************************
	 */
	protected int iNoOfOccurencesOfProduct(Vector vctProductSelected,
			int iLevel, int iParentInstance, long lProductID) throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration
		int iNoOfOccurences = 0; // Local Varaible Declaration
		BProductDetail bProductDetail = null;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			//          BEGIN ADD : V3.26
			if (vctProductSelected != null) {

				//              END ADD : V3.26
				iSizeOfVector = vctProductSelected.size();

				if (0 != iSizeOfVector) {
					for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
						bProductDetail = (BProductDetail) vctProductSelected
								.elementAt(iCount);

						if ((iLevel == bProductDetail.iLevel)
								&& (iParentInstance == bProductDetail.iParentInstance)
								&& (lProductID == bProductDetail.lProductID
										.longValue())) {
							iNoOfOccurences++;
						} // end of the if loop
					} // end of the for loop

					iNoOfOccurences++;
				} else {
					iNoOfOccurences = FINAL_ONE;
				}

				//              BEGIN ADD : V3.26
			} else {
				iNoOfOccurences = FINAL_ONE;
			}

			//          END ADD : V3.26
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
				
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Returning of the String
		return iNoOfOccurences;
	} // Closing Brace of the function

	//  Change made for fixing DEFECT id 70, Obsolete Masters
	//  END ADD: V 3.10
	//  BEGIN ADD: V 3.10
	//  Added function for fixing DEFECT id 70, Obsolete Masters
	//  Added Function To get the no of Billable Parameters
	protected Vector vctGetAllBillableParameters(BProductDetail bProductDetail)
			throws Exception {
		int iParamEndCntr = 0;
		int iParamCntr = 0;
		int iParamValFinalCntr = 0;
		Vector vctParamValues = null;
		Vector vctIntern = null;
		Vector vctAllBillableParameters = null;
		BProductParameter bProdParam = null;

		try {
			iParamEndCntr = bProductDetail.vctParameters.size();
			vctAllBillableParameters = new Vector();

			for (iParamCntr = 0; iParamCntr < iParamEndCntr; iParamCntr++) {
				bProdParam = (BProductParameter) bProductDetail.vctParameters
						.elementAt(iParamCntr);

				if (bProdParam.iBillable == 1) {
					if (null != bProdParam.vctParameterValues) {
						iParamValFinalCntr = bProdParam.vctParameterValues
								.size();

						for (int iParamValCntr = 0; iParamValCntr < iParamValFinalCntr; iParamValCntr++) {
							vctParamValues = (Vector) bProdParam.vctParameterValues
									.elementAt(iParamValCntr);

							if ((null != vctParamValues)
									&& (string_ONE).equalsIgnoreCase(String
											.valueOf(vctParamValues
													.elementAt(FINAL_ONE)))) {
								vctIntern = new Vector();
								vctIntern.addElement(bProdParam.lParameterID);
								vctIntern.addElement(String
										.valueOf(vctParamValues
												.elementAt(FINAL_ZERO)));
								vctAllBillableParameters.addElement(vctIntern);
							}
						}
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return vctAllBillableParameters;
	} // Closing Brace of the function

	//  ADD made for fixing DEFECT id 70, Obsolete Masters
	//  END ADD: V 3.10
	//  Begin Ver 3.03
	//  Commenting the Validation Done for URL name / Mailalais Linked with the Logins (Upgrade/Downgrade).
	//  Begin Ver 2.91
	//  Begin Ver 2.80
	//  Changes Made for Fixing Upgrade Downgrade Logins problem

	/**
	 *  DESCRIPTION :   This Function check whether the login needs to be displayed on the screen
	 *                                  or not.
	 *
	 *  @param          :       Vector vctGetLoginfromILMURLOrMail, String strLogin
	 *
	 *  @return         :       boolean Returns True if the login
	 * /******************************************************************************************************************************
	 */
	protected boolean bCheckToAddLoginOrNot_ReInstallFlowWith_AgedLogins(
			Vector vctGetLoginfromILMURLOrMail, String strLogin)
			throws Exception { // Starting Braces of the Function

		// intializing the variables
		boolean bCheckToAddLoginOrNot = false;

		try {
			for (int iCounter = FINAL_ZERO; iCounter < vctGetLoginfromILMURLOrMail
					.size(); iCounter++) {
				if (null == ((BChangeILogin) vctGetLoginfromILMURLOrMail
						.elementAt(iCounter))) {
					continue;
				}

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if block");
					// System.out.println("vctGetLoginfromILMURL: Getting the aged login from ILM strLogin       - " + String.valueOf(((BChangeILogin) vctGetLoginfromILMURLOrMail.elementAt(iCounter)).strLogin.trim()));
					// System.out.println("vctGetLoginfromILMURL: strValues To Compare                                           - " + strLogin);
				}

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				if ((String
						.valueOf(((BChangeILogin) vctGetLoginfromILMURLOrMail
								.elementAt(iCounter)).strLogin.trim()))
						.equalsIgnoreCase(strLogin.trim())) {
					bCheckToAddLoginOrNot = true;

					break;
				} // end of the if loop
				else {
					bCheckToAddLoginOrNot = false;
				}
			} // end of the for loop
		} // end of the try block
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return BO
		return bCheckToAddLoginOrNot;
	} // Closing Brace of the function

	//  End Ver 2.80
	//  Changes Made for Fixing Upgrade Downgrade Logins problem
	//  End Ver 2.91
	//  Begin Ver 2.91
	//  Changes Made for Fixing Upgrade Downgrade Logins problem

	/**
	 *  DESCRIPTION :   This Function check whether the login needs to be displayed on the screen
	 *                                  or not.
	 *
	 *  @param          :       Vector vctGetLoginfromILMURLOrMail, String strLogin
	 *
	 *  @return         :       boolean Returns True if the login
	 * /******************************************************************************************************************************
	 */
	protected boolean bValidateLogin_ToExistingVector(Vector vctExternal,
			String strLogin) throws Exception { // Starting Braces of the Function

		// intializing the variables
		boolean bCheckToAddLoginOrNot = true;

		try {
			if (null == vctExternal) {
				bCheckToAddLoginOrNot = true;
			}

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if block");
				// System.out.println("vctExternal                       - " + vctExternal);
				// System.out.println("strLogin                  - " + strLogin);
				// System.out.println("**************************************");
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			for (int iCounter = FINAL_ZERO; iCounter < vctExternal.size(); iCounter++) {

				// Intentionally allocated memory
				Vector vctInt = null;

				vctInt = (Vector) vctExternal.elementAt(iCounter);

				if (null == vctInt) {
					continue;
				} // end of the if loop

				if ((String.valueOf(vctInt.elementAt(FINAL_ZERO)).trim())
						.equalsIgnoreCase(strLogin.trim())) {
					bCheckToAddLoginOrNot = false;

					break;
				} // end of the if loop
				else {
					bCheckToAddLoginOrNot = true;
				}
			} // end of the for loop
		} // end of the try block
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return BO
		return bCheckToAddLoginOrNot;
	} // Closing Brace of the function

	//  End Ver 2.91
	//  Changes Made for Fixing Upgrade Downgrade Logins problem
	//  Begin Version - 3.29 Changes For putting the process id's of domain with domain linked mailalaises and url's

	/**
	 *  DESCRIPTION :   This is a Special Function to check for the mailalais related to the domains and then
	 *                                  put the process id of that domain for the mailalaises
	 *
	 *  @param          :       bProductDetailProperty
	 *
	 *  @return         :       Returns the main BO of Product's
	 * /******************************************************************************************************************************
	 */
	protected BProductDetailProperty bOPutFlag_NForRelatedDomainProcesses(
			BProductDetailProperty bProductDetailProperty) throws Exception { // Starting Braces of the Function

		// intializing the variables
		String strValueSelected = "";
		String strParamManip = "";
		Vector vctParameterValues = null;

		// Begin DEL v9.01d
		// Vector vctParamValues = null;
		// End DEL v9.01d
		Vector vctObjCProdInternal = null;
		Vector vctTempCustomerProductStatusRow = null;
		long lProcessID_RelatedToDomain = 0;

		try {
			CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

			customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) {
				GLogger.chkpt("Inside if block");
				// System.out.println("bOPutFlag_ForRelatedDomainProcesses : bProductDetailProperty      - " + bProductDetailProperty);
			}

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected
					.size(); iCounter++) {

				// Intentionally allocated memory
				BProductDetail bProductDetail = null;

				bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(iCounter);

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if block");
					// System.out.println("bProductDetail.lProductID - " + bProductDetail.lProductID);
				}

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				if (null == bProductDetail) {
					continue;
				}

				if (blnGetForProperty("PRODUCT_DOMAIN",
						bProductDetail.lProductID)) {

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if block");
						// System.out.println("For PRODUCT_DOMAIN Kind of Product.");
					}

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */

					// Initialising the value of strValueSelected to null
					strValueSelected = "";

					for (int iCounter_One = FINAL_ZERO; iCounter_One < bProductDetail.vctParameters
							.size(); iCounter_One++) {
						BProductParameter bProductParameter = null;

						bProductParameter = (BProductParameter) bProductDetail.vctParameters
								.elementAt(iCounter_One);

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if block");
							// System.out.println("bProductParameter - " + bProductParameter);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						if (null == bProductParameter) {
							continue;
						}

						vctParameterValues = null;
						vctParameterValues = (Vector) bProductParameter.vctParameterValues
								.elementAt(FINAL_ZERO);

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if block");
							// System.out.println("vctParameterValues - " + vctParameterValues);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						if (null == vctParameterValues) {
							continue;
						}

						if ((string_ONE).equalsIgnoreCase(String
								.valueOf(vctParameterValues
										.elementAt(FINAL_ONE)))) {
							strValueSelected = String
									.valueOf(vctParameterValues
											.elementAt(FINAL_ZERO));
						} // end of the if loop

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if block");
							// System.out.println("strValueSelected - " + strValueSelected);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						if (strValueSelected.length() > FINAL_ZERO) {
							lProcessID_RelatedToDomain = 0;
							customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if block");
								// System.out.println("bProductDetail.lCustomerProductID - " + bProductDetail.lCustomerProductID);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							vctObjCProdInternal = null;
							vctObjCProdInternal = customerProductStatusTable
									.vctSearchByCustomerProductIDandObslete(
											bProductDetail.lCustomerProductID
													.longValue(), FINAL_ZERO);

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if block");
								// System.out.println("vctObjCProdInternal - " + vctObjCProdInternal);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							if (null == vctObjCProdInternal) {
								continue;
							} else {
								customerProductStatusRow = (CustomerProductStatusRow) vctObjCProdInternal
										.elementAt(FINAL_ZERO);
							}

							if (null == customerProductStatusRow) {
								continue;
							}

							lProcessID_RelatedToDomain = customerProductStatusRow.lProcessID;

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if block");
								// System.out.println("lProcessID_RelatedToDomain - " + lProcessID_RelatedToDomain);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							for (int iCounter_Two = FINAL_ZERO; iCounter_Two < bProductDetailProperty.vctProductSelected
									.size(); iCounter_Two++) {
								BProductDetail bProductDetail_temp = null;

								bProductDetail_temp = (BProductDetail) bProductDetailProperty.vctProductSelected
										.elementAt(iCounter_Two);

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if block");
									// System.out.println("bProductDetail_temp.strDescription1 - " + bProductDetail_temp.strDescription1);
									// System.out.println("bProductDetail_temp.lProductID                - " + bProductDetail_temp.lProductID);
									// System.out.println("bProductDetail_temp.strProductStatus- " + bProductDetail_temp.strProductStatus);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								if (null == bProductDetail_temp) {
									continue;
								}

								if (null != bProductDetail_temp) {
									if (null == bProductDetail_temp.strProductStatus) {
										continue;
									}

									if (FINAL_ZERO == bProductDetail_temp.strProductStatus
											.length()) {
										continue;
									}
								}

								if (blnGetForProperty("PRODUCT_MAILADDRESS",
										bProductDetail_temp.lProductID)
										|| blnGetForProperty(
												"PRODUCT_DOMAINMAILSERVER",
												bProductDetail_temp.lProductID)
										|| blnGetForProperty("PRODUCT_URL",
												bProductDetail_temp.lProductID)) {

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if block");
										// System.out.println("PRODUCT_MAILBOX or PRODUCT_DOMAINMAILSERVER or PRODUCT_URL");
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if block");
										// System.out.println("bProductDetail_temp.strProductStatus - " + bProductDetail_temp.strProductStatus);
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									strParamManip = bProductDetail_temp.strProductStatus
											.trim();

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if block");
										// System.out.println("strParamManip             - " + strParamManip);
										// System.out.println("strValueSelected  - " + strValueSelected);
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
									if ((strValueSelected)
											.equalsIgnoreCase(strParamManip)) {
										customerProductStatusRow = null;
										vctTempCustomerProductStatusRow = null;
										vctTempCustomerProductStatusRow = (Vector) customerProductStatusTable
												.vctSearchByCustomerProductIDandObslete(
														bProductDetail_temp.lCustomerProductID
																.longValue(),
														FINAL_ZERO);

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if block");
											// System.out.println("bProductDetail_temp.lCustomerProductID - " + bProductDetail_temp.lCustomerProductID);
											// System.out.println("vctTempCustomerProductStatusRow - " + vctTempCustomerProductStatusRow);
										}

										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										if ((null != vctTempCustomerProductStatusRow)
												&& (vctTempCustomerProductStatusRow
														.size() != 0)) {
											customerProductStatusRow = (CustomerProductStatusRow) vctTempCustomerProductStatusRow
													.elementAt(FINAL_ZERO);
										}

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if block");
											// System.out.println("customerProductStatusRow - " + customerProductStatusRow);
										}

										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										if (null != customerProductStatusRow) {
											customerProductStatusRow.lProcessID = lProcessID_RelatedToDomain;

											if ((customerProductStatusRow.iStatusInDB == Record.VIEW)
													|| (customerProductStatusRow.iStatusInDB == Record.UPDATE)) {
												customerProductStatusRow.iStatusInDB = Record.UPDATE;
											} else if (customerProductStatusRow.iStatusInDB == Record.INSERT) {
												customerProductStatusRow.iStatusInDB = Record.INSERT;
											}

											customerProductStatusTable
													.updateRecord(customerProductStatusRow);

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if block");
												// System.out.println("Setted the ProcessId ");
											}

											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										} // end of the if loop
									} // end of the if loop
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop
					} // end of the for loop
				} // end of the if loop
			} // end of the for loop

			teleSessionMgr.putTable(string_CUSTOMERPRODUCTSTATUS,
					customerProductStatusTable);
		} // end of the try block
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return BO
		return bProductDetailProperty;
	} // Closing Brace of the function

	/**
	 *  DESCRIPTION :   This is a Special Function to check for the mailalais related to the domains and then
	 *                                  put the process id of that domain for the mailalaises
	 *
	 *  @param          :       bProductDetailProperty
	 *
	 *  @return         :       Returns the main BO of Product's
	 * /******************************************************************************************************************************
	 */
	protected BProductDetailProperty bOPutFlag_OForRelatedDomainProcesses(
			BProductDetailProperty bProductDetailProperty) throws Exception { // Starting Braces of the Function

		// intializing the variables
		String strValueSelected = "";
		String strParamManip = "";
		String strParamTempManip = "";
		Vector vctParameterValues = null;
		Vector vctParamValues = null;
		Vector vctObjCProdInternal = null;
		Vector vctTempCustomerProductStatusRow = null;
		int iPosition = 0;
		long lProcessID_RelatedToDomain = 0;

		try {
			CustomerProductStatusRow customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

			customerProductStatusTable = (CustomerProductStatus) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTSTATUS); // Getting the CustomerProduct table from the session

			/** **************STARTING*****************TO PRINT THE DATA****************************************** */
			if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00a
				GLogger
						.chkpt("bOPutFlag_ForRelatedDomainProcesses : bProductDetailProperty     - "
								+ bProductDetailProperty);
			} // END MODIFY v9.00a

			/** **************ENDING*******************TO PRINT THE DATA***************************************** */
			for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected
					.size(); iCounter++) {

				// Intentionally allocated memory
				BProductDetail bProductDetail = null;

				bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(iCounter);

				/** **************STARTING*****************TO PRINT THE DATA****************************************** */
				if (GAfePropertyLoader.DEBUG) {
					GLogger.chkpt("Inside if block");
					// System.out.println("bProductDetail.lProductID - " + bProductDetail.lProductID);
				}

				/** **************ENDING*******************TO PRINT THE DATA***************************************** */
				if (null == bProductDetail) {
					continue;
				}

				if (blnGetForProperty("PRODUCT_DOMAIN",
						bProductDetail.lProductID)) {

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) {
						GLogger.chkpt("Inside if block");
						// System.out.println("For PRODUCT_DOMAIN Kind of Product.");
					}

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */

					// Initialising the value of strValueSelected to null
					strValueSelected = "";

					for (int iCounter_One = FINAL_ZERO; iCounter_One < bProductDetail.vctParameters
							.size(); iCounter_One++) {
						BProductParameter bProductParameter = null;

						bProductParameter = (BProductParameter) bProductDetail.vctParameters
								.elementAt(iCounter_One);

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if block");
							// System.out.println("bProductParameter - " + bProductParameter);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						if (null == bProductParameter) {
							continue;
						}

						vctParameterValues = null;
						vctParameterValues = (Vector) bProductParameter.vctParameterValues
								.elementAt(FINAL_ZERO);

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if block");
							// System.out.println("vctParameterValues - " + vctParameterValues);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						if (null == vctParameterValues) {
							continue;
						}

						if ((string_ONE).equalsIgnoreCase(String
								.valueOf(vctParameterValues
										.elementAt(FINAL_ONE)))) {
							strValueSelected = String
									.valueOf(vctParameterValues
											.elementAt(FINAL_ZERO));
						} // end of the if loop

						/** **************STARTING*****************TO PRINT THE DATA****************************************** */
						if (GAfePropertyLoader.DEBUG) {
							GLogger.chkpt("Inside if block");
							// System.out.println("strValueSelected - " + strValueSelected);
						}

						/** **************ENDING*******************TO PRINT THE DATA***************************************** */
						if (strValueSelected.length() > FINAL_ZERO) {
							lProcessID_RelatedToDomain = 0;
							customerProductStatusRow = null; // Initializing the Object Class for the CustomerProduct table

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if block");
								// System.out.println("bProductDetail.lCustomerProductID - " + bProductDetail.lCustomerProductID);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							vctObjCProdInternal = null;
							vctObjCProdInternal = customerProductStatusTable
									.vctSearchByCustomerProductIDandObslete(
											bProductDetail.lCustomerProductID
													.longValue(), FINAL_ZERO);

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if block");
								// System.out.println("vctObjCProdInternal - " + vctObjCProdInternal);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							if (null == vctObjCProdInternal) {
								continue;
							} else {
								customerProductStatusRow = (CustomerProductStatusRow) vctObjCProdInternal
										.elementAt(FINAL_ZERO);
							}

							if (null == customerProductStatusRow) {
								continue;
							}

							lProcessID_RelatedToDomain = customerProductStatusRow.lProcessID;

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if block");
								// System.out.println("lProcessID_RelatedToDomain - " + lProcessID_RelatedToDomain);
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							for (int iCounter_Two = FINAL_ZERO; iCounter_Two < bProductDetailProperty.vctProductSelected
									.size(); iCounter_Two++) {

								// Intentionally allocated memory
								BProductDetail bProductDetail_temp = null;

								bProductDetail_temp = (BProductDetail) bProductDetailProperty.vctProductSelected
										.elementAt(iCounter_Two);

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {
									GLogger.chkpt("Inside if block");
									// System.out.println("bProductDetail_temp - " + bProductDetail_temp);
									// System.out.println("bProductDetail_temp.lProductID - " + bProductDetail_temp.lProductID);
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								if (null == bProductDetail_temp) {
									continue;
								}

								if (blnGetForProperty("PRODUCT_MAILADDRESS",
										bProductDetail_temp.lProductID)
										|| blnGetForProperty(
												"PRODUCT_DOMAINMAILSERVER",
												bProductDetail.lProductID)
										|| blnGetForProperty("PRODUCT_URL",
												bProductDetail.lProductID)) {
									for (int iCounter_Three = FINAL_ZERO; iCounter_Three < bProductDetail_temp.vctParameters
											.size(); iCounter_Three++) {
										BProductParameter bProductParameter_temp = null;

										bProductParameter_temp = (BProductParameter) bProductDetail_temp.vctParameters
												.elementAt(iCounter_Three);

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if block");
											// System.out.println("vctParameterValues - " + (Vector) bProductParameter_temp.vctParameterValues.elementAt(FINAL_ZERO));
										}

										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										if (null == bProductParameter_temp) {
											continue;
										}

										vctParamValues = null;
										vctParamValues = (Vector) bProductParameter_temp.vctParameterValues
												.elementAt(FINAL_ZERO);

										/** **************STARTING*****************TO PRINT THE DATA****************************************** */
										if (GAfePropertyLoader.DEBUG) {
											GLogger.chkpt("Inside if block");
											// System.out.println("vctParamValues - " + vctParamValues);
										}

										/** **************ENDING*******************TO PRINT THE DATA***************************************** */
										if (null == vctParamValues) {
											continue;
										}

										if ((string_ONE).equalsIgnoreCase(String
												.valueOf(vctParamValues
														.elementAt(FINAL_ONE)))) {
											strParamManip = String
													.valueOf(vctParamValues
															.elementAt(FINAL_ZERO));

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if block");
												// System.out.println("strParamManip - " + strParamManip);
												// System.out.println("strValueSelected - " + strValueSelected);
											}

											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
											if (blnGetForProperty(
													"PRODUCT_MAILADDRESS",
													bProductDetail_temp.lProductID)
													|| blnGetForProperty(
															"PRODUCT_DOMAINMAILSERVER",
															bProductDetail.lProductID)) {

												/** **************STARTING*****************TO PRINT THE DATA****************************************** */
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if block");
													// System.out.println("PRODUCT_MAILBOX or PRODUCT_DOMAINMAILSERVER");
												}

												/** **************ENDING*******************TO PRINT THE DATA***************************************** */
												iPosition = 0;
												iPosition = strParamManip
														.indexOf("@");

												/** **************STARTING*****************TO PRINT THE DATA****************************************** */
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if block");
													// System.out.println("iPosition - " + iPosition);
													// System.out.println("strParamManip.length() - " + strParamManip.length());
												}

												/** **************ENDING*******************TO PRINT THE DATA***************************************** */
												if (-1 == iPosition) {
													continue;
												}

												strParamManip = strParamManip
														.substring(
																(iPosition + FINAL_ONE),
																strParamManip
																		.length());
											} else if (blnGetForProperty(
													"PRODUCT_URL",
													bProductDetail.lProductID)) {

												/** **************STARTING*****************TO PRINT THE DATA****************************************** */
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if block");
													// System.out.println("PRODUCT_URL");
												}

												/** **************ENDING*******************TO PRINT THE DATA***************************************** */
												iPosition = 0;
												iPosition = strParamManip
														.indexOf("//");

												/** **************STARTING*****************TO PRINT THE DATA****************************************** */
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if block");
													// System.out.println("iPosition - " + iPosition);
												}

												/** **************ENDING*******************TO PRINT THE DATA***************************************** */
												if (-1 != iPosition) {
													strParamTempManip = "";
													strParamTempManip = strParamManip
															.substring(
																	iPosition,
																	strParamManip
																			.length());

													/** **************STARTING*****************TO PRINT THE DATA****************************************** */
													if (GAfePropertyLoader.DEBUG) {
														GLogger.chkpt("Inside if block");
														// System.out.println("strParamTempManip - " + strParamTempManip);
													}

													/** **************ENDING*******************TO PRINT THE DATA***************************************** */
													iPosition = 0;
													iPosition = strParamTempManip
															.indexOf(SLASH);

													if (-1 == iPosition) {
														iPosition = 0;
														iPosition = strParamTempManip
																.indexOf("\\");
													}

													if (-1 == iPosition) {
														continue;
													}

													/** **************STARTING*****************TO PRINT THE DATA****************************************** */
													if (GAfePropertyLoader.DEBUG) {
														GLogger.chkpt("Inside if block");
														// System.out.println("strParamTempManip f - " + strParamTempManip);
														// System.out.println("iPosition - " + iPosition);
													}

													/** **************ENDING*******************TO PRINT THE DATA***************************************** */
													strParamManip = strParamTempManip
															.substring(
																	FINAL_ZERO,
																	iPosition);
												} else {
													iPosition = 0;
													iPosition = strParamTempManip
															.indexOf(SLASH);

													if (-1 == iPosition) {
														iPosition = 0;
														iPosition = strParamTempManip
																.indexOf("\\");
													}

													if (-1 == iPosition) {
														strParamManip = strParamManip;
													}
												}
											}

											/** **************STARTING*****************TO PRINT THE DATA****************************************** */
											if (GAfePropertyLoader.DEBUG) {
												GLogger.chkpt("Inside if block");
												// System.out.println("strParamManip - " + strParamManip);
												// System.out.println("strValueSelected - " + strValueSelected);
											}

											/** **************ENDING*******************TO PRINT THE DATA***************************************** */
											if ((strValueSelected)
													.equalsIgnoreCase(strParamManip)) {
												customerProductStatusRow = null;
												vctTempCustomerProductStatusRow = null;
												vctTempCustomerProductStatusRow = (Vector) customerProductStatusTable
														.vctSearchByCustomerProductIDandObslete(
																bProductDetail_temp.lCustomerProductID
																		.longValue(),
																FINAL_ZERO);

												/** **************STARTING*****************TO PRINT THE DATA****************************************** */
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if block");
													// System.out.println("bProductDetail_temp.lCustomerProductID - " + bProductDetail_temp.lCustomerProductID);
													// System.out.println("vctTempCustomerProductStatusRow - " + vctTempCustomerProductStatusRow);
												}

												/** **************ENDING*******************TO PRINT THE DATA***************************************** */
												if ((null != vctTempCustomerProductStatusRow)
														&& (vctTempCustomerProductStatusRow
																.size() != 0)) {
													customerProductStatusRow = (CustomerProductStatusRow) vctTempCustomerProductStatusRow
															.elementAt(FINAL_ZERO);
												}

												/** **************STARTING*****************TO PRINT THE DATA****************************************** */
												if (GAfePropertyLoader.DEBUG) {
													GLogger.chkpt("Inside if block");
													//                                                  System.out.println("customerProductStatusRow - " + customerProductStatusRow);
												}

												/** **************ENDING*******************TO PRINT THE DATA***************************************** */
												if (null != customerProductStatusRow) {
													customerProductStatusRow.lProcessID = lProcessID_RelatedToDomain;

													if ((customerProductStatusRow.iStatusInDB == Record.VIEW)
															|| (customerProductStatusRow.iStatusInDB == Record.UPDATE)) {
														customerProductStatusRow.iStatusInDB = Record.UPDATE;
													} else if (customerProductStatusRow.iStatusInDB == Record.INSERT) {
														customerProductStatusRow.iStatusInDB = Record.INSERT;
													}

													customerProductStatusTable
															.updateRecord(customerProductStatusRow);

													/** **************STARTING*****************TO PRINT THE DATA****************************************** */
													if (GAfePropertyLoader.DEBUG) {
														GLogger.chkpt("Inside if block");
														// System.out.println("Setted the ProcessId ");
													}

													/** **************ENDING*******************TO PRINT THE DATA***************************************** */
												} // end of the if loop
											} // end of the if loop
										} // end of the if loop
									} // end of the for loop
								} // end of the if loop
							} // end of the for loop
						} // end of the if loop
					} // end of the for loop
				} // end of the if loop
			} // end of the for loop

			teleSessionMgr.putTable(string_CUSTOMERPRODUCTSTATUS,
					customerProductStatusTable);
		} // end of the try block
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return BO
		return bProductDetailProperty;
	} // Closing Brace of the function

	//  end Version - 3.29 Changes For putting the process id's of domain with domain linked mailalaises and url's
	//  Begin Version - 3.31 Changes for Checking the Service KInd of Products

	/**
	 *  DESCRIPTION :   This checks whether there Service kind of products are attached to any Domain or Not
	 *
	 *  @param          :       BProductDetail bProductDetail
	 *
	 *  @return         :       Flag -  1- Yes , 0 - No
	 * /******************************************************************************************************************************
	 */
	protected int iServiceProductAttachedToDomain(BProductDetail bProductDetail)
			throws Exception {
		int iStatus = 0;
		Vector vctFullDomain = null;

		// Vector of Full Domains for this Customer
		vctFullDomain = (Vector) teleSessionMgr
				.getValue("vctFullDomainInSession_mInternet");

		if (GAfePropertyLoader.DEBUG) {

			GLogger.chkpt("Inside if statement ");		// System.out.println("      vctFullDomain_mInternet     " + vctFullDomain);
		}

		if (null == vctFullDomain) {
			return FINAL_ZERO;
		}

		for (int iCounter = 0; iCounter < vctFullDomain.size(); iCounter++) {

			// If Domain for this particular product is one of the Full Domain then Return true
			if (((String) vctFullDomain.elementAt(iCounter))
					.equals(bProductDetail.strProductStatus)) {
				iStatus = FINAL_ONE;

				break;
			}
		}

		return iStatus;
	}

	//  END Version - 3.31 Changes for Checking the Service KInd of Products

	// 4.10a   BEGIN ADD

	/*
	 *   DESCRIPTION :   This method Deletes the Promotions when the corresponding Productline is deleted
	 *   @param                  :       long lCustomerProductlineID
	 *   @return                         :       none
	 */

	// BEGIN DELETE V 5.96u
	// private final void vDeleteLineLevelPromotion (long lCustomerProductlineID)
	// throws AfeException
	// END DELETE V 5.96u
	// BEGIN ADD V 5.96u
	private final void vDeleteLineLevelPromotion(long lCustomerProductlineID)
			throws Exception

	// END ADD V 5.96u
	{

		// BEGIN DELETE V 5.96u
		// deleted as the promotion is been moved out of alles opslaan flow

		/*
		 * int iUpdateStatus = 0;                                          //      Integer initialization of the status
		 * int iCounter = 0;                                               //      Integer initialization of the counter
		 * final int FINAL_ZERO = 0;                                               //      Integer initialization of the zero "0"
		 * final int FINAL_ONE = 1;                                                //      Integer initialization of the one "1"
		 *
		 * CustomerPromotionRow custPromRow = null;                        //      Creating Object of Type CustomerPromotionRow
		 * CustomerPromotion custPromTable = null;                 //      Creating Object of Type CustomerPromotion
		 * Vector vctLinePromotion = null;                 //      Vector for Accomodating LineLevelPromotions
		 *
		 * try {
		 * if (GAfePropertyLoader.DEBUG) {
		 * GGeneric.println("In LProduct : Method vDeleteLineLevelPromotion() for CustomerProductLine " + lCustomerProductlineID, GGeneric.iDebugLevelSeven, this);
		 * }
		 * //  Retrieving CustomerPromotion Table from SessionBean
		 * custPromTable = (CustomerPromotion) teleSessionMgr.getTable("CUSTOMERPROMOTION");
		 * //  If CustomerPromotion Table is Null then return
		 * if (null == custPromTable) {
		 * return;
		 * }
		 * //  Retrieving the CustomerPromotionRow/s corresponding to the Given CustomerPromotionID
		 * vctLinePromotion = custPromTable.vctSearchByCustProductLineID(lCustomerProductlineID);
		 * //  If there are any records corresponding to the CustomerProductLine then
		 * if (null != vctLinePromotion) {
		 * for (int iCountProm = 0; iCountProm < vctLinePromotion.size(); iCountProm++) {
		 *   custPromRow = (CustomerPromotionRow) vctLinePromotion.elementAt(iCountProm);
		 *   //  if CustomerPromotion row is not null
		 *   if (null != custPromRow) {
		 *       //      If This Customer Promotion Row is newly inserted i.e. not inserted in DataBase
		 *       if (Record.INSERT == custPromRow.iStatusInDB) {
		 *           //  Set the flag for DELETE
		 *           custPromRow.iStatusInDB = Record.DELETE;
		 *           //  Delete this record from CustomerPromotion Table
		 *           custPromTable.deleteRecord(custPromRow.lCustomerPromotionID);
		 *       } else {
		 *           //  for existing records in CustomerPromotion Table, set Obsolete flag = 1
		 *           custPromRow.iObsolete = FINAL_ONE;
		 *           //  Set the Update flag if the flag
		 *           if (custPromRow.iStatusInDB == Record.VIEW) {
		 *               custPromRow.iStatusInDB = Record.UPDATE;
		 *           }
		 *           //  Set the Modification User as User in the Session
		 *           custPromRow.strModificationUser = bSession.strUserName;
		 *           //  Set the DeactivationDate as Today's Date
		 *           custPromRow.dtDeactivationDate = new Date();
		 *           //  Updating the record in CustomerPromotion table
		 *           custPromTable.updateRecord(custPromRow);
		 *       }
		 *   }
		 * }
		 * //      Put the CustomerPromotio Table in the session
		 * teleSessionMgr.putTable("CUSTOMERPROMOTION", custPromTable);
		 * }
		 * } catch (Exception e) {
		 * //  Logging the Exception
		 * GGeneric.printStackTrace(e, GGeneric.iDebugLevelThree, this);
		 * //  Throw new DataBase Exception having error code ERRCOM_00001
		 * throw new AfeException("ERRCOM_00001", e.getMessage());
		 * }
		 */

		// END DELETE V 5.96u
		// BEGIN ADD V 5.96u
		GLogger.logEntry(CLASS_NAME, METHOD_DELETELINELEVELPROMOTION);
		GLogger.logInput(METHOD_DELETELINELEVELPROMOTION,
				ARG_CUSTOMERPRODUCTLINEID, lCustomerProductlineID);

		BUpdateCustomerPromotion objBUpdateCustomerPromotion = null;
		Map mapUpdatedPromotion = null;

		objBUpdateCustomerPromotion = new BUpdateCustomerPromotion();
		objBUpdateCustomerPromotion
				.setCustomerProductLineId(lCustomerProductlineID);
		objBUpdateCustomerPromotion.setDeactivationDate(new Date());
		objBUpdateCustomerPromotion.setFlag(FINAL_ONE); // set the value of Flag as 1 for Line Level Promotion
		objBUpdateCustomerPromotion.setObsolete(FINAL_ONE); // set Obsolete value as 1
		mapUpdatedPromotion = (Map) teleSessionMgr
				.getTable("mapUpdatedPromotion");

		if (null == mapUpdatedPromotion) {
			mapUpdatedPromotion = new HashMap();
		}

		mapUpdatedPromotion.put("CPLID_" + lCustomerProductlineID,
				objBUpdateCustomerPromotion);
		teleSessionMgr.putTable("mapUpdatedPromotion", mapUpdatedPromotion);
		GLogger.logExit(CLASS_NAME, METHOD_DELETELINELEVELPROMOTION);

		// END ADD V 5.96u
	}

	// End Add : Ver 4.1 0a

	// BEGIN ADD V4.10f
	// comment: new function (split from iCheckGlobalForbiddenProduct)
	public void vdCheckGlobalForbiddenForProduct(long lCustomerID,
			long lCustomerProductLineID, BProductDetail bProductDetail)
			throws AfeException {
		Vector vctCustomerLink = null; // Initialization of variable vector
		Vector vctCustomerLinkRole = null; // Initialization of variable vector
		Vector vctCustomerRoleProduct = null; // Initialization of variable vector
		Vector vctCustomerProduct = null; // Initialization of variable vector
		Vector vctForbiddenProduct = null; // internal local vector
		CustomerLinkRow custLinkRow = null; // Initializing the Object Class for the CustomerLink table
		CustomerLR2CustomerProductRow custLR2ProdRow = null; // Initializing the Object Class for the CustomerLR2CustomerProductRow table
		CustomerLinkRoleRow custLinkRoleRow = null; // Initializing the Object Class for the CustomerLinkRole table

		// Begin DEL v9.01d
		// ForbiddenProductRow forbProdRow = null;                                               // Initialization of ForbiddenProduct Row
		// End DEL v9.01d
		int iCounter1 = 0; // Initialization of counter
		int iCounter2 = 0; // Initialization of counter
		int iCounter3 = 0; // Initialization of counter
		int iCounter4 = 0; // Initialization of counter
		Vector vctCustomerProductTemp = new Vector(4);

		try {
			if (null == customerLinkTable) {
				customerLinkTable = (CustomerLink) teleSessionMgr
						.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session
			}

			if (null != customerLinkTable) {
				vctCustomerLink = customerLinkTable.vctGetAll(); // Getting the Vector of CustomerLink Records
			}

			if (null == customerLinkRoleTable) {
				customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
						.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session
			}

			if (null != customerLinkRoleTable) {
				vctCustomerLinkRole = customerLinkRoleTable.vctGetAll(); // Getting the Vector of CustomerLinkRole Records
			}

			if (null == customerLR2CustomerProductTable) {
				customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session
			}

			if (null != customerLR2CustomerProductTable) {
				vctCustomerRoleProduct = customerLR2CustomerProductTable
						.vctGetAll(); // Getting the Vector of CustomerLR2Product Records
			}

			if (null == customerProductTable) {
				customerProductTable = (CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
			}

			if (null != customerProductTable) {
				vctCustomerProduct = customerProductTable.vctGetAll();
			}

			if (null == forbiddenProductTable) {
				forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
						.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
			}

			if (null != forbiddenProductTable) {
				vctForbiddenProduct = forbiddenProductTable.vctGetAll();
			}

			if ((0 != lCustomerID) && (null != vctCustomerLink)
					&& (null != vctCustomerLinkRole)
					&& (null != vctCustomerRoleProduct)) {

				// for each  record in the vector of CustomerLink Records
				long customerLinkSize = vctCustomerLink.size();
				long customerLinkRoleSize = vctCustomerLinkRole.size();
				for (iCounter1 = 0; iCounter1 < customerLinkSize; iCounter1++) {
					custLinkRow = (CustomerLinkRow) vctCustomerLink
							.elementAt(iCounter1);

					if ((custLinkRow.lCustomerID == lCustomerID)
							&& (custLinkRow.iObsolete == FINAL_ZERO)) {

						// for each  record in the vector of CustomerLinkRole Records                                                                                    // if the Customer is the Same Customer
						for (iCounter2 = 0; iCounter2 < customerLinkRoleSize; iCounter2++) {
							custLinkRoleRow = (CustomerLinkRoleRow) vctCustomerLinkRole
									.elementAt(iCounter2);
							// if the Customer is related to the CustomerLinkID
							if ((custLinkRoleRow.lCustomerLinkID == custLinkRow.lCustomerLinkID)
									&& (custLinkRoleRow.lRoleTypeID == GAfeDescription
											.lGetTypeId(string_ROLETYPE_USER))
									&& (custLinkRoleRow.iObsolete == FINAL_ZERO)) {
								long customerRoleProductSize = vctCustomerRoleProduct
										.size();
								// for each  record in the vector of CustomerLR2CustomerProductRow elements
								for (iCounter3 = 0; iCounter3 < customerRoleProductSize; iCounter3++) {
									custLR2ProdRow = (CustomerLR2CustomerProductRow) vctCustomerRoleProduct
											.elementAt(iCounter3);

									if ((custLR2ProdRow.lCustomerLinkRoleID == custLinkRoleRow.lCustomerLinkRoleID)
											&& (custLR2ProdRow.lCustomerProductLineID != lCustomerProductLineID)
											&& (-1 == vctCustomerProductTemp
													.indexOf(Long.valueOf(
															custLR2ProdRow.lCustomerProductLineID)))) {
										vctCustomerProductTemp
												.addElement(Long.valueOf(
														custLR2ProdRow.lCustomerProductLineID));

										if ((null != vctForbiddenProduct)
												&& (null != vctCustomerProduct)) {
											ForbiddenProductRow forbiddenProductRowTemp = null;
											long forbiddenProductSize = vctForbiddenProduct
													.size();
											for (iCounter4 = FINAL_ZERO; iCounter4 < forbiddenProductSize; iCounter4++) {
												forbiddenProductRowTemp = (ForbiddenProductRow) vctForbiddenProduct
														.elementAt(iCounter4);

												if ((forbiddenProductRowTemp.lProductID == bProductDetail.lProductID
														.longValue())
														&& (FINAL_ONE == forbiddenProductRowTemp.iLevel)
														&& (forbiddenProductRowTemp.iObsolete == FINAL_ZERO)) {
													CustomerProductRow customerProductRowTemp = null;
													long customerProductVectorSize = vctCustomerProduct
															.size();
													for (int iCounter5 = FINAL_ZERO; iCounter5 < customerProductVectorSize; iCounter5++) {
														customerProductRowTemp = (CustomerProductRow) vctCustomerProduct
																.elementAt(iCounter5);

														if ((customerProductRowTemp.lCustomerProductLineID == custLR2ProdRow.lCustomerProductLineID)
																&& (customerProductRowTemp.iObsolete == FINAL_ZERO)) {
															if (forbiddenProductRowTemp.lForbProductID == customerProductRowTemp.lProductID) {
																throw new AfeException(
																		"ERRAFE_00635");
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

			// Begin Add v7.07e
			CustomerProductRow customerProductRowTemp1 = null;

			GLogger.debug(CLASS_NAME, "vdCheckGlobalForbiddenForProduct",
					"bProductDetail.lProductID.longValue()="
							+ bProductDetail.lProductID.longValue());

			if (vctCustomerProduct != null) {
				int itemp = 0;
				long lCustomerProductVctSize = vctCustomerProduct.size();
				for (int iCheck = FINAL_ZERO; iCheck < lCustomerProductVctSize; iCheck++) {
					customerProductRowTemp1 = (CustomerProductRow) vctCustomerProduct
							.elementAt(iCheck);
					GLogger.debug(CLASS_NAME,
							"vdCheckGlobalForbiddenForProduct",
							"customerProductRowTemp1.lProductID ="
									+ customerProductRowTemp1.lProductID);

					if (bProductDetail.lProductID.longValue() == 62) {
						if (customerProductRowTemp1.lProductID == 61) {
							itemp++;
							GLogger.debug(CLASS_NAME,
									"vdCheckGlobalForbiddenForProduct",
									"itemp =" + itemp);
						}
					}
				}

				if (bProductDetail.lProductID.longValue() == 62) {
					if (itemp == 0) {
						throw new AfeException("ERRAFE_12001");
					}
				}
			}

			// End Add v7.07e
		} catch (AfeException afee) {
			throw afee;
		} catch (Exception e) {
			throw new AfeException(string_ERRCOM_00002, e.getMessage());
		}
	}

	// END ADD V4.10f

	// BEGIN ADD V4.10f
	// comment: old function re-written into a new function
	protected int iCheckGlobalForbiddenProduct(BProductDetail bProductDetail,
			long lCustomerProductLineID) throws AfeException {
		BProductRole bProductRoleTemp = null;
		BProductDetailProperty bProductDetailProperty = null;
		Long lCustomerID = null;
		int iStatus = 0;

		try {
			bProductRoleTemp = (BProductRole) teleSessionMgr
					.getValue(string_BProductDetailRole_aCProduct);

			long ROLETYPE_USER = GAfeDescription.lGetTypeId(string_ROLETYPE_USER);

			if ((null != bProductRoleTemp)
					&& (null != bProductRoleTemp.vctProductRole)) {
				BProductRoleDetail bProductRoleDetailTemp = null;

				for (int iCount = 0; iCount < bProductRoleTemp.vctProductRole
						.size(); iCount++) {
					bProductRoleDetailTemp = (BProductRoleDetail) bProductRoleTemp.vctProductRole
							.elementAt(iCount);

					if (bProductRoleDetailTemp.lRoleTypeID.longValue() == ROLETYPE_USER) {
						lCustomerID = bProductRoleDetailTemp.lCustomerID;

						break;
					}
				}
			}

			GLogger.chkpt("lCustomerID TJ" + lCustomerID);

			if (null == lCustomerID) {
				bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
						.getValue("BProductDetailProperty_aCProductOrders");
				GLogger.chkpt("bProductDetailProperty TJ"
						+ bProductDetailProperty);

				if (null != bProductDetailProperty) {
					lCustomerID = bProductDetailProperty.lCustomerID;
				} else {
					throw new AfeException(
							"Role object not found in session or orders object is null in session");
				}
			}

			vdCheckGlobalForbiddenForProduct(lCustomerID.longValue(),
					lCustomerProductLineID, bProductDetail);
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			throw afee;
		} catch (Exception ex) {
			GLogger.logException(ex);

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return iStatus;
	}

	// END ADD V4.10f

	// BEGIN ADD V4.10e
	// comment: Added function to delete entries in Document, Printheader and PrintBody tables
	protected void vDeleteInDocumentTable(long lOrderID, long lDocumentTypeID)
			throws Exception {
		ObjectTypeRow objTypeRow = null;
		DocumentRow documentRow = null;

		// BEGIN Commenting for Ver5.96d
		// PrintHeaderRow printHeaderRow = null;
		// PrintBodyRow printBodyRow = null;
		// END Commenting for Ver5.96d
		// BEGIN Coding for Ver5.96d
		ApplSaveAction applSaveContainer = null;
		ApplSaveActionRow applSaveContainerRow = null;
		Vector vctApplSaveAT = null; // Vector of "ApplSaveActionRow" Database Object for given Action and Type

		// Begin DEL v9.01d
		// long lArraySize = 0;
		// End DEL v9.01d
		String strOrderID = null;

		// Begin DEL v9.01d
		// com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo bCustomerInfo = null;
		// BAddressInfo bAddressInfo = null;
		// END Coding for Ver5.96d
		// long lUserCustomerID = 0;
		// begin add V5.61a
		// long lAddressID = 0;
		// end add V5.61a
		// End DEL v9.01d

		documentTable = (Document) teleSessionMgr.getTable("DOCUMENT"); // Getting Document table from the session

		// BEGIN Commenting for Ver5.96d
		// PrintHeader printHeaderTable = (PrintHeader) teleSessionMgr.getTable("PRINTHEADER"); //Getting PrintHeader Table
		// PrintBody printBodyTable = (PrintBody) teleSessionMgr.getTable("PRINTBODY"); //Getting PrintBody table
		// BEGIN Commenting for Ver5.96d
		if (null == objectTypeTable) {
			objectTypeTable = (ObjectType) teleSessionMgr
					.getMasterTable("OBJECTYPE"); // Getting ObjectTypeTable
		}

		objTypeRow = objectTypeTable.otrSearchBystrObjectNameandObsolete(
				"\"ORDER\"", FINAL_ZERO); // Get the ObjectType row for Order table

		// System.out.println("Testing for CR950: During Deletion Inside LProduct ObjectTYpeID = " + objTypeRow.lObjectTypeID);

		// BEGIN Adding for Ver5.96d
		strOrderID = String.valueOf(lOrderID);
		applSaveContainer = (ApplSaveAction) teleSessionMgr
				.getTable(string_APPLSAVEACTION);

		if (null != applSaveContainer) {
			vctApplSaveAT = applSaveContainer.vctSearchByActionType(
					Record.DELETE, String.valueOf(lDocumentTypeID));

			if (null != vctApplSaveAT) {
				for (int iCnt = 0; iCnt < vctApplSaveAT.size(); iCnt++) {
					applSaveContainerRow = (ApplSaveActionRow) vctApplSaveAT
							.elementAt(iCnt);

					if ("cancelRequest"
							.equalsIgnoreCase(applSaveContainerRow.strMethodName)
							&& strOrderID
									.equalsIgnoreCase(applSaveContainerRow.strSystem)) {
						applSaveContainer
								.deleteRecord(applSaveContainerRow.lID);
					}
				}
			}
		}

		// END Adding for Ver5.96d
		documentRow = documentTable
				.docSearchByObjectIDandObjectTypeIDandDocTypeIDandObsolete(
						lOrderID, objTypeRow.lObjectTypeID, lDocumentTypeID,
						FINAL_ZERO);

		if (null != documentRow) {

			// System.out.println("Testing for CR950: DocumentID = " + documentRow.lDocumentID);
			if (documentRow.iStatusInDB == Record.INSERT) // If the document row is still in the container. Delete this record.
			{
				documentRow.iStatusInDB = Record.DELETE;
				documentTable.deleteRecord(documentRow.lDocumentID);
			}

			// BEGIN DELETE V 5.96r

			/*
			 *  Documents should be closed only by a call to cancel document to document handling application
			 * else    //Update the document row in the database.
			 * {
			 *       documentRow.iStatusInDB = Record.UPDATE;
			 *       documentRow.iObsolete = FINAL_ONE;
			 *       documentRow.lDocumentStatusID = GAfeDescription.lGetTypeId("DOCUMENTSTATUS_CLOSE");
			 *       documentRow.strModificationUser = bSession.strUserName;
			 *       documentTable.updateRecord(documentRow);
			 * }
			 */

			// END DELETE V 5.96r
			// System.out.println("Testing for CR950: Updated the document table");
			/**
			 * UPDATING PRINTHEADER TABLE
			 */
			// Delete the record corresponding to the document row updated above in the
			// PrintHeader table
			// System.out.println("Testing for CR950: DocumentID = " + documentRow.lDocumentID);
			// System.out.println("Testing for CR950: CustomerID = " + lCustomerID);
			/*
			 * if (null == printHeaderTable)
			 *       System.out.println("Testing for CR950: PrintHeader could not be found");
			 * else
			 *       System.out.println("Testing for CR950: Got printHeader table");
			 * System.out.println("Testing for CR950: All records of Printheader = " + ((Vector)printHeaderTable.vctGetAll()).size());
			 */

			// Begin DEL v9.01d
			/*
			 * if (null != teleSessionMgr.getValue("BProductDetailRole_aCProduct"))
			 * {
			 *       BProductRole bProductRole = new BProductRole();
			 *
			 *       //Bussiness Object of the Type BProductRole for storing all the Data that is populated in the tablular form
			 *       bProductRole = (BProductRole) teleSessionMgr.getValue("BProductDetailRole_aCProduct");
			 *       lUserCustomerID = ((BProductRoleDetail) (bProductRole.vctProductRole.elementAt(FINAL_ZERO))).lCustomerID.longValue();
			 *       //begin add V5.61a
			 *       lAddressID = ((BProductRoleDetail) (bProductRole.vctProductRole.elementAt(FINAL_ZERO))).lAddressID.longValue();
			 *       //end add V5.61a
			 * }
			 */

			// End DEL v9.01d
			// BEGIN Commenting for Ver5.96d
			/**
			 * printHeaderRow = printHeaderTable.searchByDocIdAndCustomerID(documentRow.lDocumentID, lUserCustomerID);
			 * if (null != printHeaderRow)
			 * {
			 *       if (printHeaderRow.iStatusInDB == Record.INSERT)
			 *       {
			 *               printHeaderRow.iStatusInDB = Record.DELETE;
			 *               printHeaderTable.updateRecord(printHeaderRow);
			 *       }
			 *       else
			 *       {
			 *               printHeaderRow.iStatusInDB = Record.DELETE;
			 *               printHeaderTable.updateRecord(printHeaderRow);
			 *
			 *       }
			 *       //BEGIN add V5.61a
			 *       putPrintStatusInSession(printHeaderRow.lPrintRequestID,
			 *                               printHeaderRow.lDocumentID,
			 *                               DELETE,
			 *                               lDocumentTypeID,
			 *                               lAddressID
			 *       );
			 *       //END add V5.61a
			 *
			 *       //
			 *       //UPDATING PRINTBODY TABLE
			 *       //
			 *       //begin delete V5.61a
			 *       //                              //Delete the records in this table corresponding to the PrintRequestID
			 *       //                              //found in case of PrintHeader table
			 *       //                              Vector vctPrintBody = null;
			 *       //                              vctPrintBody = printBodyTable.vctSearchByPrintRequestID(printHeaderRow.lPrintRequestID);
			 *       //                              //System.out.println("Testing for CR950: PrintRequestID = " + printBodyRow.lPrintRequestID);
			 *       //                              //Delete the records
			 *       //                              if(null != vctPrintBody)
			 *       //                              {
			 *       //                                      for(int iCountOnPrintBody = 0;iCountOnPrintBody < vctPrintBody.size();iCountOnPrintBody++)
			 *       //                                      {
			 *       //                                              //Get the PrintBody row
			 *       //                                              printBodyRow = (PrintBodyRow)vctPrintBody.elementAt(iCountOnPrintBody);
			 *       //                                              if(null != printBodyRow)
			 *       //                                              {
			 *       //                                                      if(printBodyRow.iStatusInDB == Record.INSERT)
			 *       //                                                      {
			 *       //                                                              printBodyRow.iStatusInDB = Record.DELETE;
			 *       //                                                              printBodyTable.deleteRecord(printBodyRow.lPrintRequestID);
			 *       //                                                      }
			 *       //                                                      else
			 *       //                                                      {
			 *       //                                                              printBodyRow.iStatusInDB =  Record.DELETE;
			 *       //                                                              printBodyTable.updateRecord(printBodyRow);
			 *       //                                                      }
			 *       //                                              }
			 *       //                                      }
			 *       //                              }
			 *       //end delete V5.61a
			 * }
			 */
			// END Commenting for Ver5.96d
			// BEGIN DELETE V 5.96r
			// }
			// END DELETE V 5.96r
			// BEGIN Adding for Ver5.96d
			BCustomerOutDocuments objBCustomreOutDocuments = IAFEOUT
					.objGetDocument(documentRow.lDocumentID,
							bSession.lLanguageId);

			if (null != objBCustomreOutDocuments) {

				// if(lDocumentTypeID == objBCustomreOutDocuments.getDocumentTypeId() && "REQUESTED".equalsIgnoreCase(objBCustomreOutDocuments.getPrintRequestStatus()))
				if ((lDocumentTypeID == objBCustomreOutDocuments
						.getDocumentTypeId())
						&& ("REQUESTED"
								.equalsIgnoreCase(objBCustomreOutDocuments
										.getPrintRequestStatus()) || (GAfeDescription
								.lGetTypeId("DOCUMENTSTATUS_NEW") == objBCustomreOutDocuments
								.getDocumentStatusId()))) {
					applSaveContainerRow = new ApplSaveActionRow();
					applSaveContainerRow.bPerformLast = true;
					applSaveContainerRow.strType = String
							.valueOf(lDocumentTypeID);
					applSaveContainerRow.strValue = String
							.valueOf(documentRow.lDocumentID);
					applSaveContainerRow.iAction = Record.DELETE; // Delete
					applSaveContainerRow.strSystem = strOrderID;
					applSaveContainerRow.strMethodName = "cancelRequest";
					applSaveContainerRow.arrArguments = new Class[2];
					applSaveContainerRow.arrArguments[0] = Long.class;
					applSaveContainerRow.arrArguments[1] = String.class;
					applSaveContainerRow.arrParams = new Object[2];
					applSaveContainerRow.arrParams[0] = Long.valueOf(
							objBCustomreOutDocuments.getPrintRequestId());
					applSaveContainerRow.arrParams[1] = bSession.strUserName;
					applSaveContainer.addRecord(applSaveContainerRow);
				}
			}

			// BEGIN ADD V 5.96r
		}

		// END ADD V 5.96r
		teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveContainer);

		// END Adding for Ver5.96d
		teleSessionMgr.putTable("DOCUMENT", documentTable);

		// begin delete V5.61a
		// teleSessionMgr.putTable("PRINTBODY", printBodyTable);
		// end delete V5.61a
	}

	// END V4.10e

	//  begin delete V5.61a

	/*
	 //BEGIN ADD V4.10k
	 //comment: TO update document and delete from PrintHeader and PrintBody
	 protected void vdCancelDocumentEntriesForOrders(long lOrderID, long lCustomerID) throws AfeException, Exception
	 {
	 StringBuffer sbSql = null;
	 ResultSet rsDocument = null;
	 GConnectAfe gConnectAfe = null;
	 PreparedStatement psSelect = null;
	 PreparedStatement psUpdate = null;
	 int iResult = 0;
	 long lProcessID = 0;

	 try
	 {
	 */

	//  end delete V5.61a
	/**
	 * if (GAfePropertyLoader.DEBUG)
	 * {
	 * GGeneric.println("Inside vdCancelDocumentEntriesForOrders ("+lOrderID+","+lCustomerID+")",GGeneric.iDebugLevelSeven,this);
	 * }
	 */
	//  begin delete V5.61a
	/*
	 gConnectAfe = new GConnectAfe(this);

	 sbSql = new StringBuffer("SELECT PROCESSID FROM PROCESS WHERE PROCESSTYPEID = ? AND ORDERID = ?");
	 psSelect = gConnectAfe.psPrepareStatement(sbSql.toString());
	 psSelect.setLong(1,GAfeDescription.lGetTypeId("PROCESSTYPE_CPS"));
	 psSelect.setLong(2,lOrderID);
	 rsDocument = psSelect.executeQuery();
	 if (rsDocument.next() )
	 {
	 lProcessID = rsDocument.getLong(1);
	 }

	 //BEGIN DELETE V5.10a
	 //comment: in case of prepared statements, we need to close resultsets directly
	 //rsDocument.getStatement().close();
	 //END DELETE V5.10a

	 //BEGIN ADD V5.10a
	 //comment: closing the resultset
	 rsDocument.close();
	 psSelect.close();
	 //END ADD V5.10a

	 psSelect = null;

	 if ( lProcessID != 0)//case of CPS therefore objectid is of customerproductline
	 {
	 sbSql = new StringBuffer("SELECT DOCUMENTID FROM DOCUMENT WHERE DOCUMENTSTATUSID = ? AND OBJECTID IN (SELECT DISTINCT OBJECTID FROM PROCESSLINK WHERE PROCESSID = ? ) AND OBJECTTYPEID = ? AND OBSOLETE = 0");
	 psSelect = gConnectAfe.psPrepareStatement(sbSql.toString());
	 psSelect.setLong(1,GAfeDescription.lGetTypeId("DOCUMENTSTATUS_NEW"));
	 psSelect.setLong(2,lProcessID);
	 psSelect.setLong(3,GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCTLINE"));
	 */

	//  end delete V5.61a
	/**
	 * if (GAfePropertyLoader.DEBUG)
	 * {
	 * GGeneric.println("Select Document Query DocumentStatus:" +GAfeDescription.lGetTypeId("DOCUMENTSTATUS_NEW")+ " : ProcessID :"+ lProcessID +" :Objecttype CPL: " + GAfeDescription.lGetTypeId("OBJECTTYPE_CUSTOMERPRODUCTLINE") +" :Query: "+sbSql.toString(),GGeneric.iDebugLevelSeven,this);
	 * }
	 */
	//  begin delete V5.61a
	/*
	 }
	 else //other case objectid is of order
	 {
	 sbSql = new StringBuffer("SELECT DOCUMENTID FROM DOCUMENT WHERE DOCUMENTSTATUSID = ? AND OBJECTID = ? AND OBJECTTYPEID = ? AND OBSOLETE = 0");
	 psSelect = gConnectAfe.psPrepareStatement(sbSql.toString());
	 psSelect.setLong(1,GAfeDescription.lGetTypeId("DOCUMENTSTATUS_NEW"));
	 psSelect.setLong(2,lOrderID);
	 psSelect.setLong(3,GAfeDescription.lGetTypeId("OBJECTTYPE_ORDER"));
	 */

	//  end delete V5.61a
	/**
	 * if (GAfePropertyLoader.DEBUG)
	 * {
	 * GGeneric.println("Select Document Query DocumentStatus:" +GAfeDescription.lGetTypeId("DOCUMENTSTATUS_NEW")+ " : order :"+ lOrderID + " : Objecttype Order: " + GAfeDescription.lGetTypeId("OBJECTTYPE_ORDER") + ": Query: "+sbSql.toString(),GGeneric.iDebugLevelSeven,this);
	 * }
	 */
	//  begin delete V5.61a
	/*
	 }



	 rsDocument = psSelect.executeQuery();
	 while(rsDocument.next())
	 {
	 //UPDATING THE OBSOLETE FOR DOCUMENT TO 1
	 sbSql = null;
	 sbSql = new StringBuffer("UPDATE DOCUMENT SET OBSOLETE = 1 WHERE DOCUMENTID = ?");
	 psUpdate = gConnectAfe.psPrepareStatement(sbSql.toString());
	 psUpdate.setLong(1,rsDocument.getLong(1));
	 iResult = psUpdate.executeUpdate();
	 */

	/**
	 * if (GAfePropertyLoader.DEBUG)
	 * {
	 * GGeneric.println("Update document Query  :"+sbSql.toString(),GGeneric.iDebugLevelSeven,this);
	 * }
	 */

	/*
	 //BEGIN V5.10a
	 //comment: closing the prepared statement
	 psUpdate.close();
	 //END ADD V5.10a

	 psUpdate = null;

	 //DELETING FROM PRINTBODY
	 //begin delete V5.61a
	 //                              sbSql = null;
	 //                              sbSql = new StringBuffer("DELETE FROM PRINTBODY WHERE PRINTREQUEST_ID IN (SELECT PRINTREQUEST_ID FROM PRINTHEADER WHERE DOCUMENTID = ? AND CUSTOMER_ID = ?)");
	 //                              psUpdate = gConnectAfe.psPrepareStatement(sbSql.toString());
	 //                              psUpdate.setLong(1,rsDocument.getLong(1));
	 //                              psUpdate.setLong(2,lCustomerID);
	 //                              iResult = psUpdate.executeUpdate();
	 */

	// /******************************************************************************************************
	// if (GAfePropertyLoader.DEBUG)
	// {
	// GGeneric.println("Delete PrintBody Query  :"+sbSql.toString(),GGeneric.iDebugLevelSeven,this);
	// }
	// ******************************************************************************************************/
	/*
	 //                              //BEGIN V5.10a
	 //                              //comment: closing the prepared statement
	 //                              psUpdate.close();
	 //                              //END ADD V5.10a

	 //                              psUpdate = null;
	 //end delete V5.61a


	 //DELETING FROM PRINTHEADER
	 sbSql = null;
	 sbSql = new StringBuffer("DELETE FROM PRINTHEADER WHERE DOCUMENTID = ? AND CUSTOMER_ID = ?");
	 psUpdate = gConnectAfe.psPrepareStatement(sbSql.toString());
	 psUpdate.setLong(1,rsDocument.getLong(1));
	 psUpdate.setLong(2,lCustomerID);
	 iResult = psUpdate.executeUpdate();
	 */

	/**
	 * if (GAfePropertyLoader.DEBUG)
	 * {
	 * GGeneric.println("Delete printHeader Query  :"+sbSql.toString(),GGeneric.iDebugLevelSeven,this);
	 * }
	 */

	/*
	 //BEGIN V5.10a
	 //comment: closing the prepared statement
	 psUpdate.close();
	 //END ADD V5.10a

	 psUpdate = null;
	 }

	 //BEGIN DELETE V5.10a
	 //comment: in case of prepared statements we need to close the resultset directly
	 //rsDocument.getStatement().close();
	 //END DELETE V5.10a

	 //BEGIN ADD V5.10a
	 //comment: closing the resultset
	 rsDocument.close();
	 psSelect.close();
	 //END ADD V5.10a

	 gConnectAfe.bCommit();
	 gConnectAfe.bClose();
	 gConnectAfe = null;

	 }

	 catch (SQLException sqle)
	 {

	 if(GAfePropertyLoader.DEBUG)
	 {
	 GGeneric.printStackTrace(sqle,GGeneric.iDebugLevelThree,this);
	 }
	 try
	 {
	 if(null != gConnectAfe)
	 {
	 gConnectAfe.bRollBack();
	 }
	 }
	 catch(Exception e)
	 {
	 //comsume the exception
	 }

	 AfeException afee = new AfeException("ERRCOM_00001" , sqle.getMessage());
	 throw afee;
	 }
	 catch (Exception ex)
	 {
	 if(GAfePropertyLoader.DEBUG)
	 {
	 GGeneric.printStackTrace(ex,GGeneric.iDebugLevelThree,this);
	 }
	 try
	 {
	 if(null != gConnectAfe)
	 {
	 gConnectAfe.bRollBack();
	 }
	 }
	 catch(Exception e)
	 {
	 //consume the exception
	 }
	 AfeException dne = new AfeException("ERRCOM_00002",ex.getMessage());//unknown exception occurred
	 throw dne;      //consume the exception as finally this catch block throws dne with error code 9003
	 }
	 finally
	 {
	 try
	 {
	 if(null != gConnectAfe)
	 {
	 gConnectAfe.bClose();   //closing the connection
	 }
	 }
	 catch(Exception ex)
	 {
	 AfeException dne = new AfeException("ERRCOM_00002",ex.getMessage());
	 throw dne;
	 }
	 }
	 }
	 //END ADD V4.10k
	 */

	//  end delete V5.61a
	// Begin Add: V5.0
	// Added function for Checking whether the Appointment exists for a Product Line.
	/**
	 *  DESCRIPTION :   This function would check whether the Product Line is attached with an appointment or not.
	 *                                  Also it fethes the information whether the appointment is cretaed in the same transaction.
	 *  @param          :       long lCustomerProductLineID
	 *
	 *  @return         :       Vector - having CustomerAppointmentID and Boolean Flag to tell whether the appointment is
	 *                                  of the same transaction or not.
	 * /******************************************************************************************************************************
	 */
	protected Vector vctAppointmentExists(Long lCustomerProductLineID)
			throws AfeException {
		long lAppointmentExist = 0;
		boolean bIsRecordNew = false;
		CustomerAppointmentRow custAppRow = null;
		Vector vctCustApp2CustProd = null;
		Vector vctApptInfo = null;

		GLogger.logEntry(CLASS_NAME, "vctAppointmentExists");
		GLogger.logInput("vctAppointmentExists", ARG_LCUSTOMERPRODUCTLINEID,
				lCustomerProductLineID);

		try {
			customerApp2CustomerProductLTable = (CustomerApp2CustomerProductL) teleSessionMgr
					.getTable("CUSTOMERAPP2CUSTOMERPRODUCTL"); // Getting the Customer table from the session
			customerAppointmentTable = (CustomerAppointment) teleSessionMgr
					.getTable(string_CUSTOMERAPPOINTMENT);

			if (null != customerApp2CustomerProductLTable) {
				vctCustApp2CustProd = customerApp2CustomerProductLTable
						.vctSearchByCustProdLineID(lCustomerProductLineID
								.longValue());
			}

			if ((null != vctCustApp2CustProd)
					&& (vctCustApp2CustProd.size() != FINAL_ZERO)) {
				for (int iCounter = FINAL_ZERO; iCounter < vctCustApp2CustProd
						.size(); iCounter++) {
					custAppRow = (CustomerAppointmentRow) customerAppointmentTable
							.carSearchByCustApptIDandObsolete(
									((CustomerApp2CustomerProductLRow) (vctCustApp2CustProd
											.elementAt(iCounter))).lCustomerAppointmentID,
									FINAL_ZERO);

					/** **************STARTING*****************TO PRINT THE DATA****************************************** */
					if (GAfePropertyLoader.DEBUG) { // BEGIN MODIFY v9.00b
						GLogger.chkpt("The custAppRow : " + custAppRow);
					} // END MODIFY v9.00b

					/** **************ENDING*******************TO PRINT THE DATA***************************************** */
					if ((custAppRow != null)
							&& (custAppRow.lAppointmentTypeID == GAfeDescription
									.lGetTypeId("APPOINTMENTTYPE_INSTALLATION"))) {
						lAppointmentExist = custAppRow.lCustomerAppointmentID;

						if (custAppRow.iStatusInDB == Record.INSERT) {
							bIsRecordNew = true;
						} else {
							bIsRecordNew = false;
						}

						vctApptInfo = new Vector();
						vctApptInfo.addElement(Long.valueOf(lAppointmentExist));
						vctApptInfo.addElement(new Boolean(bIsRecordNew));
					}
				}
			}
		} catch (AfeException afe) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(afe, GGeneric.iDebugLevelFour, this);
			}

			throw afe;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}

		GLogger.logOutput("vctAppointmentExists", "vctApptInfo", vctApptInfo);
		GLogger.logExit(CLASS_NAME, "vctAppointmentExists");

		return vctApptInfo;
	}

	// End Add: V5.0

	// BEGIN ADD V5.20a
	// Comment: Changes made for Security Service

	/**
	 * Checks the Line Provisioning status
	 * @param   lCPLId
	 * @return boolean status of provisioning
	 * @throws  Exception       if fails to retrieve status
	 */
	//BEGIN DELETE V5.60c
	//comment: deleting bCheckProvisionStatus method as its not used any where
	/*
	 protected boolean bCheckProvisionStatus(long lCPLId) throws Exception
	 {
	 GLogger.logEntry(CLASS_NAME, METHOD_bCheckProvisionStatus);
	 GLogger.logInput(METHOD_bCheckProvisionStatus, ARG_CUSTOMER_PRODUCT_LINE_ID, lCPLId);

	 OrderRow orderRow                               = null;
	 ProcessRow processRow                   = null;
	 ProcessLinkRow processLinkRow   = null;
	 Vector vctProcessLink                   = null;
	 boolean bReturn                                 = false;
	 try
	 {
	 processLinkTable        = (ProcessLink)GConnectMemoryDB.getTable(GAfeConstants.PROCESSLINK);
	 processTable            = (Process)GConnectMemoryDB.getTable(GAfeConstants.PROCESS);
	 orderTable                      = (Order)GConnectMemoryDB.getTable(GAfeConstants.ORDER);
	 if (null != orderTable && null != processTable && null != processLinkTable)
	 {
	 vctProcessLink = processLinkTable.vctSearchByObjectIDandObjectTypeIDandObsolete(lCPLId,GAfeDescription.lGetTypeId(GAfeConstants.OBJECTTYPE_CUSTOMERPRODUCTLINE),0);
	 if (null != vctProcessLink && 0 != vctProcessLink.size())
	 {
	 for (int iCnt1 = 0;iCnt1 < vctProcessLink.size();iCnt1++)
	 {
	 processLinkRow = (ProcessLinkRow)vctProcessLink.elementAt(iCnt1);
	 if (null != processLinkRow)
	 {
	 processRow = processTable.prSearchByProcessIDandObsolete(processLinkRow.lProcessID,0);
	 if (null != processRow)
	 {
	 orderRow = orderTable.orSearchByOrderIDandObsolete(processRow.lOrderID,0);
	 if (null != orderRow && orderRow.lOrderTypeID == GAfeDescription.lGetTypeId(GAfeConstants.ORDERTYPE_INSTALL) && orderRow.lOrderStatusTypeID != GAfeDescription.lGetTypeId(GAfeConstants.ORDERSTATUSTYPE_COMPLETED))
	 {
	 bReturn = true;
	 break;
	 }
	 }
	 }
	 }
	 }
	 }
	 }
	 finally
	 {
	 }
	 GLogger.logOutput(CLASS_NAME, METHOD_bCheckProvisionStatus, bReturn);
	 GLogger.logExit(CLASS_NAME, METHOD_bCheckProvisionStatus);
	 return bReturn;
	 }
	 */

	//  END DELETE V5.60c
	// END ADD V5.20a
	// BEGIN ADD V5.21b
	// comment: function added to return CustomerAccountId for a role
	public long lGetCustomerAccountID(int iCheckFlag) throws AfeException,
			Exception {
		BProductDetailProperty bProductDetailProperty = null;
		BProductRole bProductRole = null;
		BProductRoleDetail bProductRoleDetail = null;
		CustomerLinkRow customerLinkRow = null;

		// Begin DEL v9.01d
		// CustomerAccountRow customerAccountRow = null;
		// End DEL v9.01d
		long lCustomerId = 0; // Stores CustomerId for the selected role
		long lAddressId = 0; // Stores AddressId for the selected role
		long lPaymentMethodId = 0; // Stores PaymentMethodId for the selected role
		long lCustomerAccountId = 0; // CustomerAccountId for the selected role.

		try {
			if (null != teleSessionMgr
					.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {
				bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
						.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

				if (GAfePropertyLoader.DEBUG) {
					GGeneric.println("vdCheckAccountLevelFeatures: Case is = "
							+ iCheckFlag, GGeneric.iDebugLevelSeven, this);
				}

				// Call coming from Product role screen.
				if (null != teleSessionMgr
						.getValue(string_BProductDetailRole_aCProduct)) {
					bProductRole = (BProductRole) teleSessionMgr
							.getValue(string_BProductDetailRole_aCProduct);

					for (int iCounter = 0; iCounter < bProductRole.vctProductRole
							.size(); iCounter++) {
						bProductRoleDetail = (BProductRoleDetail) bProductRole.vctProductRole
								.elementAt(iCounter);

						if ((GAfeDescription.lGetTypeId(string_ROLETYPE_USAGE) == bProductRoleDetail.lRoleTypeID
								.longValue())
								&& (iCheckFlag == 1)) // Change in USAGE role
						{
							lPaymentMethodId = bProductDetailProperty.lPaymentMethodUsage
									.longValue();

							break;
						}

						if ((GAfeDescription.lGetTypeId(string_ROLETYPE_RC) == bProductRoleDetail.lRoleTypeID
								.longValue())
								&& (iCheckFlag == 2)) // Change in RC role
						{
							lPaymentMethodId = bProductDetailProperty.lPaymentMethodRC
									.longValue();

							break;
						}

						if ((GAfeDescription.lGetTypeId(string_ROLETYPE_NRC) == bProductRoleDetail.lRoleTypeID
								.longValue())
								&& (iCheckFlag == 3)) // Change in NRC role
						{
							lPaymentMethodId = bProductDetailProperty.lPaymentMethodNRC
									.longValue();

							break;
						}
					}

					lCustomerId = bProductRoleDetail.lCustomerID.longValue();
					lAddressId = bProductRoleDetail.lAddressID.longValue();

					// Get the containers from the session
					customerLinkTable = (CustomerLink) teleSessionMgr
							.getTable(string_CUSTOMERLINK);
					customerAccountTable = (CustomerAccount) teleSessionMgr
							.getTable("CUSTOMERACCOUNT");

					Vector vctCustomerLinkRows = null;

					vctCustomerLinkRows = customerLinkTable
							.clrSearchByCustIDAddIDandObsolete(lCustomerId,
									lAddressId, 0);

					if ((null != vctCustomerLinkRows)
							&& (vctCustomerLinkRows.size() > 0)) {
						customerLinkRow = (CustomerLinkRow) vctCustomerLinkRows
								.elementAt(0);

						Vector vctCustomerAccountRows = null;

						// BEGIN DELETE V5.66a
						// Made changes for get correct the query for geting new customeraccountid
						// vctCustomerAccountRows = customerAccountTable.vctSearchByCustomerLinkIDandObsolete(customerLinkRow.lCustomerLinkID, 0);
						// EMD DELETE V5.66a

						// BEGIN ADD V5.66a
						// Made changes for get correct the query for geting new customeraccountid
						vctCustomerAccountRows = customerAccountTable
								.vctSearchByCustomerLinkIDandPayMethIDandObsolete(
										customerLinkRow.lCustomerLinkID,
										lPaymentMethodId, 0);

						// EMD ADD V5.66a

						if ((null != vctCustomerAccountRows)
								&& (vctCustomerAccountRows.size() > 0)) {
							lCustomerAccountId = ((CustomerAccountRow) (vctCustomerAccountRows
									.elementAt(0))).lCustomerAccountID;
						}
					}
				}

				if (GAfePropertyLoader.DEBUG) {
					GGeneric.println(
							"vdCheckAccountLevelFeatures: Change Role Case: CustomerId = "
									+ lCustomerId, GGeneric.iDebugLevelSeven,
							this);
					GGeneric.println(
							"vdCheckAccountLevelFeatures: Change Role Case: AddressId = "
									+ lAddressId, GGeneric.iDebugLevelSeven,
							this);
					GGeneric.println(
							"vdCheckAccountLevelFeatures: Change Role Case: PaymentMethodId = "
									+ lPaymentMethodId,
							GGeneric.iDebugLevelSeven, this);
					GGeneric.println(
							"vdCheckAccountLevelFeatures: Change Role Case: CustomerAccountId = "
									+ lCustomerAccountId,
							GGeneric.iDebugLevelSeven, this);
				}
			}
		} // End of try block
		catch (AfeException afee) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(afee, GGeneric.iDebugLevelFour, this);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}

		return lCustomerAccountId;
	}

	// END ADD V5.21b

	// BEGIN ADD V5.21b
	// comment: function to delete entries from CustomerChargeType, CustomerProduct and CustomerProductParameter tables
	public void vdDeleteAccountLevelFeatures(Vector vctCustProducts)
			throws AfeException {
		CustomerProductRow customerProductRow = null;
		CustomerChargeTypeRow customerChargeTypeRow = null;
		CustomerProductParameterRow customerProductParameterRow = null;

		try {
			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT);
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);
			customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTPARAMETER);

			for (int iCounter = 0; iCounter < vctCustProducts.size(); iCounter++) {
				customerProductRow = customerProductTable
						.cprSrchActiveByCustProdID4AccLevel(((Long) (vctCustProducts
								.elementAt(iCounter))).longValue());

				if (null != customerProductRow) {

					// Update the CustomerProduct table for account level products
					if (customerProductRow.iStatusInDB == Record.INSERT) {
						customerProductTable
								.deleteRecord(customerProductRow.lCustomerProductID);
					} else {
						customerProductRow.iObsolete = FINAL_ONE;
						customerProductRow.iStatusInDB = Record.UPDATE;
						customerProductTable.updateRecord(customerProductRow);
					}

					// Update the CustomerChargeType table for the CustomerProduct
					Vector vctChargeTypeRows = null;

					vctChargeTypeRows = customerChargeTypeTable
							.vctSearchActiveByCustomerProductID(customerProductRow.lCustomerProductID);

					if (null != vctChargeTypeRows) {
						for (int iCounterCharge = 0; iCounterCharge < vctChargeTypeRows
								.size(); iCounterCharge++) {
							customerChargeTypeRow = (CustomerChargeTypeRow) vctChargeTypeRows
									.elementAt(iCounterCharge);

							if (customerChargeTypeRow.iStatusInDB == Record.INSERT) {
								customerChargeTypeTable
										.deleteRecord(customerChargeTypeRow.lCustomerChargeTypeID);
							} else {
								customerChargeTypeRow.iStatusInDB = Record.UPDATE;
								customerChargeTypeRow.iObsolete = FINAL_ONE;
								customerChargeTypeTable
										.updateRecord(customerChargeTypeRow);
							}
						}
					}

					// Update the CustomerProductParameter table for the CustomerProduct
					Vector vctParameterRows = null;

					vctParameterRows = customerProductParameterTable
							.vctSearchByCustomerProductIDandObsolete(
									customerProductRow.lCustomerProductID,
									FINAL_ZERO);

					if (null != vctParameterRows) {
						for (int iCounterParameter = 0; iCounterParameter < vctParameterRows
								.size(); iCounterParameter++) {
							customerProductParameterRow = (CustomerProductParameterRow) vctParameterRows
									.elementAt(iCounterParameter);

							if (customerProductParameterRow.iStatusInDB == Record.INSERT) {
								customerProductParameterTable
										.deleteRecord(customerProductParameterRow.lCustomerProductParameterID);
							} else {
								customerProductParameterRow.iStatusInDB = Record.UPDATE;
								customerProductParameterRow.iObsolete = FINAL_ONE;
								customerProductParameterTable
										.updateRecord(customerProductParameterRow);
							}
						}
					}
				}
			}

			// Putting the containers back in session
			teleSessionMgr.putTable(string_CUSTOMERPRODUCT, customerProductTable);
			teleSessionMgr.putTable(string_CUSTOMERCHARGETYPE,
					customerChargeTypeTable);
			teleSessionMgr.putTable(string_CUSTOMERPRODUCTPARAMETER,
					customerProductParameterTable);
		} catch (Exception ex) {
			GLogger.logException(ex);

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}
	}

	// END ADD V5.21b

	//  BEGIN ADD VER 5.23a
	//  Comment 5.23a : Following two New Methods introduced first one to load proper data, second to delete account level promotion

	/**
	 * This Function will Load all the CustomerRelated Data for change of the Customer on
	 * the Role Screen.
	 * @param           long
	 * @return          None
	 * @throws          AfeException
	 */
	protected void vdlnLoadCustomerRelatedData_InSession(Long lCustomerID)
			throws AfeException {

		// BEGIN DELETE 5.56a

		/*
		 * StringBuffer    sbfSql                                                                                  =       null;
		 * StringBuffer    sbfAddressID                                                                    =       null;
		 * StringBuffer    sbfCustomerlinkID                                                       =       null;
		 * StringBuffer    sbfCustomerLinkRoleID                                   =       null;
		 * StringBuffer    sbfCustomerProductLineID                                =       null;
		 * StringBuffer    sbfCustomerAccountID                                    =       null;
		 * StringBuffer    sbfCustomerProductID                                    =       null;
		 * String                  strCustomerProductID                                    =       null;
		 * String                  strAddressID                                                                    =       null;
		 * String                  strCustomerLinkID                                                       =       null;
		 * String                  strCustomerLinkRoleID                                   =       null;
		 * String                  strCustomerProductLineID                                =       null;
		 * String                  strCustomerAccountID                                    =       null;
		 * ResultSet               rsRetrieve                                                                              =       null;
		 * ResultSet               rsRetrieveTemp                                                          =       null;
		 * Object                  objTemp                                                                         =       null;
		 * CustomerRow                                     customerRow                                     =       null;
		 * ContactInfoRow                                  contactInfoRow                          =       null;
		 * CustomerProfileRow                      customerProfileRow              =       null;
		 * CustomerLinkRow                         customerLinkRow                 =       null;
		 * AddressRow                                              addressRow                                      =       null;
		 * CustomerAccountRow              customerAccountRow              =       null;
		 * CustomerLinkRoleRow             customerLinkRoleRow     =       null;
		 * CustomerProductLineRow  customerProductLineRow= null;
		 * CustomerProductRow                      customerProductRow              =       null;
		 * CustomerChargeTypeRow   customerChargeTypeRow=  null;
		 * CustomerLR2CustomerProductRow customerLR2CustomerProductRow     =       null;
		 */

		// END DELETE 5.56a
		// BEGIN ADD 5.56a
		PreparedStatement psQuery = null;
		ResultSet rsCustAccID = null;
		CustomerAccount caTable = null;
		CustomerAccountRow caRow = null;
		ArrayList arrayListCustomerAccountID = new ArrayList();

		// END ADD 5.56a

		// BEGIN ADD V6.07d
		PreparedStatement psQuery1 = null;
		ResultSet rsCustLinkRole = null;
		CustomerLinkRole clrTable = null;
		CustomerLinkRoleRow clrRow = null;

		// Begin DEL v9.01d
		// ArrayList arrayListCustomerLinkRoleID = new ArrayList();
		// End DEL v9.01d
		// END ADD V6.07d

		try {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric
						.println(
								"In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID  :      "
										+ lCustomerID,
								GGeneric.iDebugLevelSeven, this);
			}

			caTable = (CustomerAccount) GConnectMemoryDB
					.getTable(GAfeConstants.CUSTOMERACCOUNT);

			if (null == caTable) {
				caTable = new CustomerAccount();
			}

			// BEGIN ADD 5.56a
			// NEW METHOD FOR LOADING DATA RELATED TO THE CUSTOMERID which is being selected @ CAFE/PRODUCT ROLE Screen
			psQuery = GConnectAfe
					.psPrepareStatement("SELECT CA.* FROM CUSTOMERLINK CL, CUSTOMERACCOUNT CA WHERE CL.CUSTOMERID = ? AND CA.CUSTOMERLINKID = CL.CUSTOMERLINKID");
			psQuery.setLong(1, lCustomerID.longValue());
			rsCustAccID = psQuery.executeQuery();

			while (rsCustAccID.next()) {
				caRow = new CustomerAccountRow();
				caRow = (CustomerAccountRow) caRow
						.objLoadResultSet(rsCustAccID);

				if (null != caRow) {
					caTable.addUniqueRecord(caRow);

					if (-1 == arrayListCustomerAccountID.indexOf(Long.valueOf(
							caRow.lCustomerAccountID))) {
						arrayListCustomerAccountID.add(Long.valueOf(
								caRow.lCustomerAccountID));
					}
				}
			}

			GConnectMemoryDB.putTable(GAfeConstants.CUSTOMERACCOUNT, caTable);

			if (arrayListCustomerAccountID.isEmpty()) {
				if (null != lCustomerID) {
					if (lCustomerID.longValue() > 0) {
						vdlnLoadCustomerRelatedData_InSession_NoAccountFound(lCustomerID);
					}
				}
			} else {
				LCustomerData.loadTablesInMemory(arrayListCustomerAccountID,
						null, teleSessionMgr, false);
			}

			// BEGIN ADD V6.07d
			clrTable = (CustomerLinkRole) GConnectMemoryDB
					.getTable(GAfeConstants.CUSTOMERLINKROLE);

			if (null == clrTable) {
				clrTable = new CustomerLinkRole();
			}

			psQuery1 = GConnectAfe
					.psPrepareStatement("SELECT CLR.* FROM CUSTOMERLINK CL, CUSTOMERLINKROLE CLR WHERE CL.CUSTOMERID = ? AND CLR.CUSTOMERLINKID = CL.CUSTOMERLINKID");
			psQuery1.setLong(1, lCustomerID.longValue());
			rsCustLinkRole = psQuery1.executeQuery();

			while (rsCustLinkRole.next()) {
				clrRow = new CustomerLinkRoleRow();
				clrRow = (CustomerLinkRoleRow) clrRow
						.objLoadResultSet(rsCustLinkRole);

				if (null != clrRow) {
					clrTable.addUniqueRecord(clrRow);
				}
			}

			GConnectMemoryDB.putTable(GAfeConstants.CUSTOMERLINKROLE, clrTable);
			GConnectAfe.close(rsCustLinkRole);
			GConnectAfe.close(psQuery1);

			// END ADD V6.07d
			GConnectMemoryDB.commit();

			if (GAfePropertyLoader.DEBUG) {
				GGeneric
						.println(
								"In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with after calling Method LCustomerData.loadTablesInMemory",
								GGeneric.iDebugLevelSeven, this);
			}

			// END ADD 5.56a
			// BEGIN DELETE 5.56a

			/*
			 * if (makeAFEConnection())
			 * {
			 *   //                      CUSTOMER TABLE DATA
			 *   sbfSql = new StringBuffer("SELECT * FROM CUSTOMER WHERE CUSTOMERID = ");
			 *   sbfSql.append(lCustomerID);
			 *   rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *   objTemp =       teleSessionMgr.getTable("CUSTOMER");
			 *   if(null !=objTemp)
			 *   {
			 *       customerTable       =       (Customer)objTemp;
			 *   }
			 *   else
			 *   {
			 *       customerTable       =       new Customer();
			 *   }
			 *   if(rsRetrieve.next())
			 *   {
			 *       customerRow                                                         =       new CustomerRow();
			 *       customerRow.lCustomerID                                     =       rsRetrieve.getLong("CUSTOMERID");
			 *       customerRow.lCustomerNumber                         =       rsRetrieve.getLong("CUSTOMERNUMBER");
			 *       customerRow.strName                                         =       rsRetrieve.getString("NAME");
			 *       customerRow.strFirstName                            =       rsRetrieve.getString("FIRSTNAME");
			 *       customerRow.lEpithetID                                      =       rsRetrieve.getLong("EPITHETID");
			 *       customerRow.lContactInfoID                          =       rsRetrieve.getLong("CONTACTINFOID");
			 *       customerRow.iVatCompliant                           =       rsRetrieve.getInt("VATCOMPLIANT");
			 *       customerRow.lCompanyID                                      =       rsRetrieve.getLong("COMPANYID");
			 *       customerRow.lNationality                            =       rsRetrieve.getLong("NATIONALITY");
			 *       customerRow.strPassportNumber                       =       rsRetrieve.getString("PASSPORTNUMBER");
			 *       customerRow.dtDateOfBirth                           =       rsRetrieve.getDate("DATEOFBIRTH");
			 *       customerRow.strPlaceOfBirth                         =       rsRetrieve.getString("PLACEOFBIRTH");
			 *       customerRow.strVatNumber                            =       rsRetrieve.getString("VATNUMBER");
			 *       customerRow.iBadPayer                                       =       rsRetrieve.getInt("BADPAYER");
			 *       customerRow.dtCreationDate                          =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *       customerRow.strCreationUser                         =       rsRetrieve.getString("CREATIONUSER");
			 *       customerRow.dtModificationDate                      =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *       customerRow.strModificationUser                     =       rsRetrieve.getString("MODIFICATIONUSER");
			 *       customerRow.iObsolete                                       =       rsRetrieve.getInt("OBSOLETE");
			 *       customerTable.addUniqueRecord(customerRow);
			 *   }
			 *
			 *   if (null != customerRow)
			 *   {
			 *       teleSessionMgr.putTable("CUSTOMER",customerTable);
			 *   }
			 *
			 *   rsRetrieve.close();
			 *   rsRetrieve.getStatement().close();
			 *
			 *
			 *   if(GAfePropertyLoader.DEBUG)
			 *   {
			 *       GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" Customer Table Loaded.... Loding ContactInfo Table",GGeneric.iDebugLevelSeven,this);
			 *   }
			 *
			 *   //                              CONTACT INFO TABLE DATA
			 *
			 *   if(null != customerRow)
			 *   {
			 *       sbfSql.setLength(0);
			 *       sbfSql.append("SELECT * FROM CONTACTINFO WHERE CONTACTINFOID = ").append(customerRow.lContactInfoID);
			 *       rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *       objTemp     =       teleSessionMgr.getTable("CONTACTINFO");
			 *       if(null != objTemp)
			 *       {
			 *           contactInfoTable = (ContactInfo)objTemp;
			 *       }
			 *       else
			 *       {
			 *           contactInfoTable = new ContactInfo();
			 *       }
			 *       while(rsRetrieve.next())
			 *       {
			 *           contactInfoRow                                                          =       new ContactInfoRow();
			 *           contactInfoRow.lContactInfoID                           =       rsRetrieve.getLong("CONTACTINFOID");
			 *           contactInfoRow.lLanguageID                                      =       rsRetrieve.getLong("LANGUAGEID");
			 *           contactInfoRow.strPhoneDay                                      =       rsRetrieve.getString("PHONEDAY");
			 *           contactInfoRow.strPhoneEvening                          =       rsRetrieve.getString("PHONEEVENING");
			 *           contactInfoRow.strPhoneMobile                           =       rsRetrieve.getString("PHONEMOBILE");
			 *           contactInfoRow.strFax                                           =       rsRetrieve.getString("FAX");
			 *           contactInfoRow.strEmail                                         =       rsRetrieve.getString("EMAIL");
			 *           contactInfoRow.strWebsite                                       =       rsRetrieve.getString("WEBSITE");
			 *           contactInfoRow.strComments                                      =       rsRetrieve.getString("COMMENTS");
			 *           contactInfoRow.iMail                                            =       rsRetrieve.getInt("MAIL");
			 *           contactInfoRow.iCalls                                           =       rsRetrieve.getInt("CALLS");
			 *           contactInfoRow.iEmails                                          =       rsRetrieve.getInt("EMAILS");
			 *           contactInfoRow.lPreferredContactID                      =       rsRetrieve.getLong("PREFERREDCONTACTID");
			 *           contactInfoRow.dtCreationDate                           =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *           contactInfoRow.strCreationUser                          =       rsRetrieve.getString("CREATIONUSER");
			 *           contactInfoRow.dtModificationDate                       =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *           contactInfoRow.strModificationUser                      =       rsRetrieve.getString("MODIFICATIONUSER");
			 *           contactInfoRow.iObsolete                                        =       rsRetrieve.getInt("OBSOLETE");
			 *           contactInfoTable.addUniqueRecord(contactInfoRow);
			 *       }
			 *       if (null != contactInfoTable)
			 *       {
			 *           teleSessionMgr.putTable("CONTACTINFO",contactInfoTable);
			 *       }
			 *
			 *       rsRetrieve.close();
			 *       rsRetrieve.getStatement().close();
			 *
			 *   }
			 *
			 *   if(GAfePropertyLoader.DEBUG)
			 *   {
			 *       GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" ContactInfo Table Loaded.... Loding CustomerProfile Table",GGeneric.iDebugLevelSeven,this);
			 *   }
			 *
			 *   //                      CUSTOMER PROFILE TABLE DATA
			 *
			 *   sbfSql.setLength(0);
			 *   sbfSql.append("SELECT * FROM CUSTOMERPROFILE WHERE CUSTOMERID = ").append(lCustomerID);
			 *   rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *   objTemp =       teleSessionMgr.getTable("CUSTOMERPROFILE");
			 *   if(null != objTemp)
			 *   {
			 *       customerProfileTable = (CustomerProfile)objTemp;
			 *   }
			 *   else
			 *   {
			 *       customerProfileTable = new CustomerProfile();
			 *   }
			 *
			 *   while(rsRetrieve.next())
			 *   {
			 *       customerProfileRow                                                          =       new CustomerProfileRow();
			 *       customerProfileRow.lCustomerProfileID                       =       rsRetrieve.getLong("CUSTOMERPROFILEID");
			 *       customerProfileRow.lSegmentID                                       =       rsRetrieve.getLong("SEGMENTID");
			 *       customerProfileRow.iResaleOfInfo                            =       rsRetrieve.getInt("RESALEOFINFO");
			 *       customerProfileRow.lPriorityID                                      =       rsRetrieve.getLong("PRIORITYID");
			 *       customerProfileRow.lCustomerID                                      =       rsRetrieve.getLong("CUSTOMERID");
			 *       customerProfileRow.lVipCodeID                                       =       rsRetrieve.getLong("VIPCODEID");
			 *       customerProfileRow.dtCreationDate                           =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *       customerProfileRow.strCreationUser                          =       rsRetrieve.getString("CREATIONUSER");
			 *       customerProfileRow.dtModificationDate                       =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *       customerProfileRow.strModificationUser                      =       rsRetrieve.getString("MODIFICATIONUSER");
			 *       customerProfileRow.iObsolete                                        =       rsRetrieve.getInt("OBSOLETE");
			 *       customerProfileTable.addUniqueRecord(customerProfileRow);
			 *   }
			 *   if (null != customerProfileRow)
			 *   {
			 *       teleSessionMgr.putTable("CUSTOMERPROFILE",customerProfileTable);
			 *   }
			 *
			 *   rsRetrieve.close();
			 *   rsRetrieve.getStatement().close();
			 *
			 *
			 *   if(GAfePropertyLoader.DEBUG)
			 *   {
			 *       GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" CustomerProfile Table Loaded.... Loding CustomerLink Table",GGeneric.iDebugLevelSeven,this);
			 *   }
			 *
			 *   //                                      CUSTOMERLINK TABLE DATA
			 *
			 *   sbfSql.setLength(0);
			 *   sbfSql.append("SELECT * FROM CUSTOMERLINK WHERE CUSTOMERID = ").append(lCustomerID);
			 *   rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *   objTemp =       teleSessionMgr.getTable("CUSTOMERLINK");
			 *   if(null != objTemp)
			 *   {
			 *       customerLinkTable = (CustomerLink)objTemp;
			 *   }
			 *   else
			 *   {
			 *       customerLinkTable = new CustomerLink();
			 *   }
			 *
			 *   sbfAddressID                    =        new StringBuffer("(");
			 *   sbfCustomerlinkID               =        new StringBuffer("(");
			 *
			 *   while(rsRetrieve.next())
			 *   {
			 *       customerLinkRow                                                             =       new CustomerLinkRow();
			 *       customerLinkRow.lCustomerLinkID                             =       rsRetrieve.getLong("CUSTOMERLINKID");
			 *       customerLinkRow.lCustomerID                                 =       rsRetrieve.getLong("CUSTOMERID");
			 *       customerLinkRow.lAddressID                                  =       rsRetrieve.getLong("ADDRESSID");
			 *       customerLinkRow.iObsolete                                   =       rsRetrieve.getInt("OBSOLETE");
			 *       customerLinkRow.dtCreationDate                              =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *       customerLinkRow.strCreationUser                             =       rsRetrieve.getString("CREATIONUSER");
			 *       customerLinkRow.dtModificationDate                  =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *       customerLinkRow.strModificationUser                 =       rsRetrieve.getString("MODIFICATIONUSER");
			 *       customerLinkRow.iCorrespondenceAddress              =       rsRetrieve.getInt("CORRESPONDENCEADDRESS");
			 *
			 *       customerLinkTable.addUniqueRecord(customerLinkRow);
			 *       //  Appending all the AddressID so that All these Address details records can be retrieved.
			 *       sbfAddressID.append(customerLinkRow.lAddressID).append(" , ");
			 *       sbfCustomerlinkID.append(customerLinkRow.lCustomerLinkID).append(" , ");
			 *   }
			 *   if (null != customerLinkRow)
			 *   {
			 *       teleSessionMgr.putTable("CUSTOMERLINK",customerLinkTable);
			 *   }
			 *   rsRetrieve.close();
			 *   rsRetrieve.getStatement().close();
			 *
			 *
			 *   if(GAfePropertyLoader.DEBUG)
			 *   {
			 *       GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" CustomerLink Table Loaded.... Loding Address Table",GGeneric.iDebugLevelSeven,this);
			 *   }
			 *
			 *   //                                      ADDRESS TABLE DATA
			 *
			 *   strAddressID    =       sbfAddressID.toString();
			 *   if (1 < strAddressID.length())
			 *   {
			 *       strAddressID = strAddressID.substring(0,strAddressID.length()-2) + ")";
			 *       sbfSql.setLength(0);
			 *       sbfSql.append("SELECT * FROM ADDRESS WHERE ADDRESSID IN ").append(strAddressID);
			 *       rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *       objTemp     =       teleSessionMgr.getTable("ADDRESS");
			 *       if (null != objTemp)
			 *       {
			 *           addressTable    =       (Address)objTemp;
			 *       }
			 *       else
			 *       {
			 *           addressTable    =       new Address();
			 *       }
			 *       if(rsRetrieve.next())
			 *       {
			 *           addressRow                                                              =       new AddressRow();
			 *           addressRow.lAddressID                                   =       rsRetrieve.getLong("ADDRESSID");
			 *           addressRow.lServiceAddressID                    =       rsRetrieve.getLong("SERVICEADDRESSID");
			 *           addressRow.lReferenceAddressID                  =       rsRetrieve.getLong("REFERENCEADDRESSID");
			 *           addressRow.lCountryID                                   =       rsRetrieve.getLong("COUNTRYID");
			 *           addressRow.strHouseNumber                               =       rsRetrieve.getString("HOUSENUMBER");
			 *           addressRow.strSubHouseNumber                    =       rsRetrieve.getString("SUBHOUSENUMBER");
			 *           addressRow.strBox                                               =       rsRetrieve.getString("BOX");
			 *           addressRow.dtCreationDate                               =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *           addressRow.strCreationUser                              =       rsRetrieve.getString("CREATIONUSER");
			 *           addressRow.dtModificationDate                   =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *           addressRow.strModificationUser                  =       rsRetrieve.getString("MODIFICATIONUSER");
			 *           addressRow.iObsolete                                    =       rsRetrieve.getInt("OBSOLETE");
			 *           addressRow.iCableAvailable                              =       rsRetrieve.getInt("CABLEAVAILABLE");
			 *           addressRow.lAddressTypeID                               =       rsRetrieve.getLong("ADDRESSTYPEID");
			 *
			 *           addressTable.addUniqueRecord(addressRow);
			 *       }
			 *       if (null != addressRow)
			 *       {
			 *           teleSessionMgr.putTable("ADDRESS",addressTable);
			 *       }
			 *       rsRetrieve.close();
			 *       rsRetrieve.getStatement().close();
			 *
			 *   }
			 *
			 *   if(GAfePropertyLoader.DEBUG)
			 *   {
			 *       GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" Address Table Loaded.... Loding CustomerAccount Table",GGeneric.iDebugLevelSeven,this);
			 *   }
			 *
			 *   //                                                              CUSTOMER ACCOUNT TABLE DATA
			 *
			 *   strCustomerLinkID = sbfCustomerlinkID.toString();
			 *   if (1 < strCustomerLinkID.length())
			 *   {
			 *       strCustomerLinkID = strCustomerLinkID.substring(0,strCustomerLinkID.length()-2) + ")";
			 *       sbfSql.setLength(0);
			 *       sbfSql.append("SELECT * FROM CUSTOMERACCOUNT WHERE CUSTOMERLINKID IN ").append(strCustomerLinkID);
			 *
			 *       rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *       objTemp     =       teleSessionMgr.getTable("CUSTOMERACCOUNT");
			 *       if(null != objTemp)
			 *       {
			 *           customerAccountTable = (CustomerAccount)objTemp;
			 *       }
			 *       else
			 *       {
			 *           customerAccountTable =  new CustomerAccount();
			 *       }
			 *       sbfCustomerAccountID        =       new StringBuffer("(");
			 *       while(rsRetrieve.next())
			 *       {
			 *           customerAccountRow                                                              =       new CustomerAccountRow();
			 *           customerAccountRow.lCustomerAccountID                   =       rsRetrieve.getLong("CUSTOMERACCOUNTID");
			 *           customerAccountRow.lCustomerLinkID                              =       rsRetrieve.getLong("CUSTOMERLINKID");
			 *           customerAccountRow.lAccountNumber                               =       rsRetrieve.getLong("ACCOUNTNUMBER");
			 *           customerAccountRow.lParentAccountID                             =       rsRetrieve.getLong("PARENTACCOUNTID");
			 *           customerAccountRow.iMinimumService                              =       rsRetrieve.getInt("MINIMUMSERVICE");
			 *           customerAccountRow.lPaymentMethodID                             =       rsRetrieve.getLong("PAYMENTMETHODID");
			 *           customerAccountRow.lCurrencyID                                  =       rsRetrieve.getLong("CURRENCYID");
			 *           customerAccountRow.lBankID                                              =       rsRetrieve.getLong("BANKID");
			 *           customerAccountRow.strBankAccountNumber                 =       rsRetrieve.getString("BANKACCOUNTNUMBER");
			 *           customerAccountRow.lBillCycleID                                 =       rsRetrieve.getLong("BILLCYCLEID");
			 *           customerAccountRow.lRecurringTypeID                             =       rsRetrieve.getLong("RECURRINGTYPEID");
			 *           customerAccountRow.lBillFormatID                                =       rsRetrieve.getLong("BILLFORMATID");
			 *           customerAccountRow.lDisplayMethodID                             =       rsRetrieve.getLong("DISPLAYMETHODID");
			 *           customerAccountRow.strDirectDebitNumber                 =       rsRetrieve.getString("DIRECTDEBITNUMBER");
			 *           customerAccountRow.iSuspendInvoice                              =       rsRetrieve.getInt("SUSPENDINVOICE");
			 *           customerAccountRow.strPayerName                                 =       rsRetrieve.getString("PAYERNAME");
			 *           customerAccountRow.strPayerAddress                              =       rsRetrieve.getString("PAYERADDRESS");
			 *           customerAccountRow.strCreditardNumber                   =       rsRetrieve.getString("CREDITCARDNUMBER");
			 *           customerAccountRow.strCreditcardService                 =       rsRetrieve.getString("CREDITCARDSERVICE");
			 *           customerAccountRow.dtCreationDate                               =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *           customerAccountRow.strCreationUser                              =       rsRetrieve.getString("CREATIONUSER");
			 *           customerAccountRow.dtModificationDate                   =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *           customerAccountRow.strModificationUser                  =       rsRetrieve.getString("MODIFICATIONUSER");
			 *           customerAccountRow.iObsolete                                    =       rsRetrieve.getInt("OBSOLETE");
			 *           customerAccountRow.dtActivationDate                             =       rsRetrieve.getDate("ACTIVATIONDATE");
			 *           customerAccountRow.dtDeactivationDate                   =       rsRetrieve.getDate("DEACTIVATIONDATE");
			 *           customerAccountRow.dtDDStatusModifiedDate               =       rsRetrieve.getDate("DDSTATUSMODIFIEDDATE");
			 *           customerAccountRow.lDirectDebitStatusID                 =       rsRetrieve.getLong("DIRECTDEBITSTATUSID");
			 *
			 *           customerAccountTable.addUniqueRecord(customerAccountRow);
			 *           //      for Loading CustomerChargeType table
			 *           sbfCustomerAccountID.append(customerAccountRow.lCustomerAccountID).append(" , ");
			 *       }
			 *       if (null != customerAccountRow)
			 *       {
			 *           teleSessionMgr.putTable("CUSTOMERACCOUNT", customerAccountTable);
			 *       }
			 *       rsRetrieve.close();
			 *       rsRetrieve.getStatement().close();
			 *
			 *       if(GAfePropertyLoader.DEBUG)
			 *       {
			 *           GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID  :      "+lCustomerID+" CustomerAccount Table Loaded.... Loding CustomerChargeType Table",GGeneric.iDebugLevelSeven,this);
			 *       }
			 *
			 *       //                                                          CUSTOMER CHARGE TYPE DATA
			 *
			 *       strCustomerAccountID = sbfCustomerAccountID.toString();
			 *       if (1 < strCustomerAccountID.length())
			 *       {
			 *           strCustomerAccountID = strCustomerAccountID.substring(0,strCustomerAccountID.length()-2) + ")";
			 *           sbfSql.setLength(0);
			 *           sbfSql.append("SELECT * FROM CUSTOMERCHARGETYPE WHERE CUSTOMERACCOUNTID IN ").append(strCustomerAccountID);
			 *
			 *           rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *
			 *           //BEGIN ADD V5.27a
			 *           //comment: initiallizing the string buffer
			 *           sbfCustomerProductID    =       new StringBuffer("(");
			 *           //END ADD V5.27a
			 *
			 *           objTemp =       teleSessionMgr.getTable("CUSTOMERCHARGETYPE");
			 *           if(null != objTemp)
			 *           {
			 *               customerChargeTypeTable = (CustomerChargeType)objTemp;
			 *           }
			 *           else
			 *           {
			 *               customerChargeTypeTable =   new CustomerChargeType();
			 *           }
			 *           while(rsRetrieve.next())
			 *           {
			 *               customerChargeTypeRow                                                               =       new CustomerChargeTypeRow();
			 *               customerChargeTypeRow.lCustomerChargeTypeID                 =       rsRetrieve.getLong("CUSTOMERCHARGETYPEID");
			 *               customerChargeTypeRow.lCustomerAccountID                    =       rsRetrieve.getLong("CUSTOMERACCOUNTID");
			 *               customerChargeTypeRow.lCustomerProductID                    =       rsRetrieve.getLong("CUSTOMERPRODUCTID");
			 *               customerChargeTypeRow.lCustomerProductLineID                =       rsRetrieve.getLong("CUSTOMERPRODUCTLINEID");
			 *               customerChargeTypeRow.lChargeTypeID                                 =       rsRetrieve.getLong("CHARGETYPEID");
			 *               customerChargeTypeRow.strCreationUser                               =       rsRetrieve.getString("CREATIONUSER");
			 *               customerChargeTypeRow.strModificationUser                   =       rsRetrieve.getString("MODIFICATIONUSER");
			 *               customerChargeTypeRow.dtActivationDate                              =       rsRetrieve.getDate("ACTIVATIONDATE");
			 *               customerChargeTypeRow.dtDeactivationDate                    =       rsRetrieve.getDate("DEACTIVATIONDATE");
			 *               customerChargeTypeRow.dtCreationDate                                =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *               customerChargeTypeRow.dtModificationDate                    =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *               customerChargeTypeRow.iObsolete                                             =       rsRetrieve.getInt("OBSOLETE");
			 *
			 *               customerChargeTypeTable.addUniqueRecord(customerChargeTypeRow);
			 *
			 *               //BEGIN ADD V5.27a
			 *               sbfCustomerProductID.append(customerChargeTypeRow.lCustomerProductID).append(" , ");
			 *               //END ADD V5.27a
			 *           }
			 *           if (null != customerChargeTypeRow)
			 *           {
			 *               GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" LINE NO 35635",GGeneric.iDebugLevelSeven,this);
			 *               teleSessionMgr.putTable("CUSTOMERCHARGETYPE", customerChargeTypeTable);
			 *           }
			 *           rsRetrieve.close();
			 *           rsRetrieve.getStatement().close();
			 *       }
			 *
			 *       //BEGIN ADD V5.27a
			 *       //comment: to load account level features
			 *       //  CUSTOMER PRODUCT DATA FOR ACCOUNT LEVEL FEATURES
			 *
			 *       if(null != sbfCustomerProductID)
			 *       {
			 *           strCustomerProductID = sbfCustomerProductID.toString();
			 *           if (1 < strCustomerProductID.length())
			 *           {
			 *               strCustomerProductID = strCustomerProductID.substring(0,strCustomerProductID.length()-2) + ")";
			 *               sbfSql.setLength(0);
			 *               sbfSql.append("SELECT * FROM CUSTOMERPRODUCT WHERE CUSTOMERPRODUCTID IN ").append(strCustomerProductID);
			 *
			 *               rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *               objTemp     =       teleSessionMgr.getTable("CUSTOMERPRODUCT");
			 *
			 *               if(null != objTemp)
			 *               {
			 *                   customerProductTable = (CustomerProduct)objTemp;
			 *               }
			 *               else
			 *               {
			 *                   customerProductTable =  new CustomerProduct();
			 *               }
			 *               while(rsRetrieve.next())
			 *               {
			 *                   customerProductRow                                                                                      =       new CustomerProductRow();
			 *                   customerProductRow.lCustomerProductID                                           =       rsRetrieve.getLong("CUSTOMERPRODUCTID");
			 *                   customerProductRow.lProductID                                                           =       rsRetrieve.getLong("PRODUCTID");
			 *                   customerProductRow.lCustomerProductLineID                                       =       rsRetrieve.getLong("CUSTOMERPRODUCTLINEID");
			 *                   customerProductRow.lPriceSettingID                                                      =       rsRetrieve.getLong("PRICESETTINGID");
			 *                   customerProductRow.lCustomerPLIdentifierID                                      =       rsRetrieve.getLong("CUSTOMERPLIDENTIFIERID");
			 *                   customerProductRow.lOriginalNRCCustomerAccountID                        =       rsRetrieve.getLong("ORIGINALNRCCUSTOMERACCOUNTID");
			 *                   customerProductRow.iObsolete                                                            =       rsRetrieve.getInt("OBSOLETE");
			 *                   customerProductRow.dtActivationDate                                                     =       rsRetrieve.getDate("ACTIVATIONDATE");
			 *                   customerProductRow.dtDeactivationDate                                           =       rsRetrieve.getDate("DEACTIVATIONDATE");
			 *                   customerProductRow.lParentID                                                            =       rsRetrieve.getLong("PARENTID");
			 *                   customerProductRow.dtCreationDate                                                       =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *                   customerProductRow.strCreationUser                                                      =       rsRetrieve.getString("CREATIONUSER");
			 *                   customerProductRow.dtModificationDate                                           =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *                   customerProductRow.strModificationUser                                          =       rsRetrieve.getString("MODIFICATIONUSER");
			 *
			 *                   customerProductTable.addUniqueRecord(customerProductRow);
			 *               }
			 *               if (null != customerProductRow)
			 *               {
			 *                   teleSessionMgr.putTable("CUSTOMERPRODUCT",customerProductTable);
			 *               }
			 *
			 *               rsRetrieve.close();
			 *               rsRetrieve.getStatement().close();
			 *
			 *           }
			 *       }
			 *       //END ADD V5.27a
			 *   }
			 *   if(GAfePropertyLoader.DEBUG)
			 *   {
			 *       GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" CustomerChargeType Table Loaded.... Loding CustomerLinkRole Table",GGeneric.iDebugLevelSeven,this);
			 *   }
			 *
			 *   //                                                                                                                              CUSTOMER LINK ROLE TABLE DATA
			 *
			 *   strCustomerLinkID = sbfCustomerlinkID.toString();
			 *   if (1 < strCustomerLinkID.length())
			 *   {
			 *       strCustomerLinkID = strCustomerLinkID.substring(0,strCustomerLinkID.length()-2) + ")";
			 *       sbfSql.setLength(0);
			 *       sbfSql.append("SELECT * FROM CUSTOMERLINKROLE WHERE CUSTOMERLINKID IN ").append(strCustomerLinkID);
			 *       rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *       objTemp = teleSessionMgr.getTable("CUSTOMERLINKROLE");
			 *       if(null != objTemp)
			 *       {
			 *           customerLinkRoleTable   =       (CustomerLinkRole)objTemp;
			 *       }
			 *       else
			 *       {
			 *           customerLinkRoleTable = new CustomerLinkRole();
			 *       }
			 *       sbfCustomerLinkRoleID       =       new StringBuffer("(");
			 *       while(rsRetrieve.next())
			 *       {
			 *           customerLinkRoleRow                                                             =       new CustomerLinkRoleRow();
			 *           customerLinkRoleRow.lCustomerLinkRoleID                 =       rsRetrieve.getLong("CUSTOMERLINKROLEID");
			 *           customerLinkRoleRow.lCustomerLinkID                             =       rsRetrieve.getLong("CUSTOMERLINKID");
			 *           customerLinkRoleRow.lRoleTypeID                                 =       rsRetrieve.getLong("ROLETYPEID");
			 *           customerLinkRoleRow.dtCreationDate                              =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *           customerLinkRoleRow.strCreationUser                             =       rsRetrieve.getString("CREATIONUSER");
			 *           customerLinkRoleRow.dtModificationDate                  =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *           customerLinkRoleRow.strModificationUser                 =       rsRetrieve.getString("MODIFICATIONUSER");
			 *           customerLinkRoleRow.iObsolete                                   =       rsRetrieve.getInt("OBSOLETE");
			 *
			 *           customerLinkRoleTable.addUniqueRecord(customerLinkRoleRow);
			 *           //      for fetching records from CUSTOMERLR2CUSTOMERPRODUCT table
			 *           sbfCustomerLinkRoleID.append(customerLinkRoleRow.lCustomerLinkRoleID).append(" , ");
			 *       }
			 *       if (null != customerLinkRoleRow)
			 *       {
			 *           teleSessionMgr.putTable("CUSTOMERLINKROLE",customerLinkRoleTable);
			 *       }
			 *       rsRetrieve.close();
			 *       rsRetrieve.getStatement().close();
			 *
			 *   }
			 *
			 *   if(GAfePropertyLoader.DEBUG)
			 *   {
			 *       GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" CUSTOMERLINKROLE Table Loaded.... Loding CUSTOMERLR2CUSTOMERPRODUCT Table",GGeneric.iDebugLevelSeven,this);
			 *   }
			 *
			 *   //                                                              CUSTOMERLR2CUSTOMERPRODUCT TABLE DATA
			 *
			 *   strCustomerLinkRoleID = sbfCustomerLinkRoleID.toString();
			 *   if (1 < strCustomerLinkRoleID.length())
			 *   {
			 *       strCustomerLinkRoleID = strCustomerLinkRoleID.substring(0,strCustomerLinkRoleID.length()-2) + ")";
			 *       sbfSql.setLength(0);
			 *       sbfSql.append("SELECT * FROM CUSTOMERLR2CUSTOMERPRODUCT WHERE CUSTOMERLINKROLEID IN ").append(strCustomerLinkRoleID);
			 *
			 *       rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *
			 *       objTemp     =       teleSessionMgr.getTable("CUSTOMERLR2CUSTOMERPRODUCT");
			 *       if(null != objTemp)
			 *       {
			 *           customerLR2CustomerProductTable = (CustomerLR2CustomerProduct)objTemp;
			 *       }
			 *       else
			 *       {
			 *           customerLR2CustomerProductTable = new CustomerLR2CustomerProduct();
			 *       }
			 *       sbfCustomerProductLineID    =       new StringBuffer("(");
			 *       while(rsRetrieve.next())
			 *       {
			 *           customerLR2CustomerProductRow                                                   =       new CustomerLR2CustomerProductRow();
			 *           customerLR2CustomerProductRow.lCustomerLinkRoleID               =       rsRetrieve.getLong("CUSTOMERLINKROLEID");
			 *           customerLR2CustomerProductRow.lCustomerProductID                =       rsRetrieve.getLong("CUSTOMERPRODUCTID");
			 *           customerLR2CustomerProductRow.lCustomerProductLineID    =       rsRetrieve.getLong("CUSTOMERPRODUCTLINEID");
			 *
			 *           customerLR2CustomerProductTable.addUniqueRecord(customerLR2CustomerProductRow);
			 *           //      for fetching records from CUSTOMERPRODUCTLINE table
			 *           sbfCustomerProductLineID.append(customerLR2CustomerProductRow.lCustomerProductLineID).append(" , ");
			 *       }
			 *       if (null != customerLR2CustomerProductRow)
			 *       {
			 *           teleSessionMgr.putTable("CUSTOMERLR2CUSTOMERPRODUCT",customerLR2CustomerProductTable);
			 *       }
			 *       rsRetrieve.close();
			 *       rsRetrieve.getStatement().close();
			 *
			 *       if(GAfePropertyLoader.DEBUG)
			 *       {
			 *           GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID  :      "+lCustomerID+" CUSTOMERLR2CUSTOMERPRODUCT Table Loaded.... Loding CUSTOMREPRODUCTLINE Table",GGeneric.iDebugLevelSeven,this);
			 *       }
			 *
			 *       //                                                                                                                  CUSTOMER PRODUCT LINE TABLE DATA
			 *
			 *       strCustomerProductLineID = sbfCustomerProductLineID.toString();
			 *
			 *       if (1 < strCustomerProductLineID.length())
			 *       {
			 *           strCustomerProductLineID = strCustomerProductLineID.substring(0,strCustomerProductLineID.length()-2) + ")";
			 *           sbfSql.setLength(0);
			 *           sbfSql.append("SELECT * FROM CUSTOMERPRODUCTLINE WHERE CUSTOMERPRODUCTLINEID IN ").append(strCustomerProductLineID);
			 *           rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *
			 *           objTemp =        teleSessionMgr.getTable("CUSTOMERPRODUCTLINE");
			 *           if(null != objTemp)
			 *           {
			 *               customerProductLineTable = (CustomerProductLine)objTemp;
			 *           }
			 *           else
			 *           {
			 *               customerProductLineTable =  new CustomerProductLine();
			 *           }
			 *           while(rsRetrieve.next())
			 *           {
			 *               customerProductLineRow                                                                      =       new CustomerProductLineRow();
			 *               customerProductLineRow.lCustomerProductLineID                       =       rsRetrieve.getLong("CUSTOMERPRODUCTLINEID");
			 *               customerProductLineRow.lProductID                                           =       rsRetrieve.getLong("PRODUCTID");
			 *               customerProductLineRow.dtActivationDate                                     =       rsRetrieve.getDate("ACTIVATIONDATE");
			 *               customerProductLineRow.dtDeactivationDate                           =       rsRetrieve.getDate("DEACTIVATIONDATE");
			 *               customerProductLineRow.iEncossStatus                                        =       rsRetrieve.getInt("ENCOSSTATUS");
			 *               customerProductLineRow.dtCreationDate                                       =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *               customerProductLineRow.strCreationUser                                      =       rsRetrieve.getString("CREATIONUSER");
			 *               customerProductLineRow.dtModificationDate                           =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *               customerProductLineRow.strModificationUser                          =       rsRetrieve.getString("MODIFICATIONUSER");
			 *               customerProductLineRow.iObsolete                                            =       rsRetrieve.getInt("OBSOLETE");
			 *               customerProductLineRow.iJonglingBlocked                                     =       rsRetrieve.getInt("JONGLIJNBLOCKED");
			 *               customerProductLineTable.addUniqueRecord(customerProductLineRow);
			 *           }
			 *           if (null != customerProductLineRow)
			 *           {
			 *               teleSessionMgr.putTable("CUSTOMERPRODUCTLINE",customerProductLineTable);
			 *           }
			 *           rsRetrieve.close();
			 *           rsRetrieve.getStatement().close();
			 *
			 *           if(GAfePropertyLoader.DEBUG)
			 *           {
			 *               GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" CUSTOMREPRODUCTLINE Table Loaded.... Loding CUSTOMREPRODUCT Table",GGeneric.iDebugLevelSeven,this);
			 *           }
			 *
			 *           //                                                                                              CUSTOMER PRODUCT DATA
			 *
			 *           sbfSql.setLength(0);
			 *           sbfSql.append("SELECT * FROM CUSTOMERPRODUCT WHERE CUSTOMERPRODUCTLINEID IN ").append(strCustomerProductLineID);
			 *           rsRetrieve = gConnectAfe.rsQuery(sbfSql.toString());
			 *
			 *           objTemp =       teleSessionMgr.getTable("CUSTOMERPRODUCT");
			 *           if(null != objTemp)
			 *           {
			 *               customerProductTable = (CustomerProduct)objTemp;
			 *           }
			 *           else
			 *           {
			 *               customerProductTable =      new CustomerProduct();
			 *           }
			 *           while(rsRetrieve.next())
			 *           {
			 *               customerProductRow                                                                                  =       new CustomerProductRow();
			 *               customerProductRow.lCustomerProductID                                               =       rsRetrieve.getLong("CUSTOMERPRODUCTID");
			 *               customerProductRow.lProductID                                                               =       rsRetrieve.getLong("PRODUCTID");
			 *               customerProductRow.lCustomerProductLineID                                   =       rsRetrieve.getLong("CUSTOMERPRODUCTLINEID");
			 *               customerProductRow.lPriceSettingID                                                  =       rsRetrieve.getLong("PRICESETTINGID");
			 *               customerProductRow.lCustomerPLIdentifierID                                  =       rsRetrieve.getLong("CUSTOMERPLIDENTIFIERID");
			 *               customerProductRow.lOriginalNRCCustomerAccountID                    =       rsRetrieve.getLong("ORIGINALNRCCUSTOMERACCOUNTID");
			 *               customerProductRow.iObsolete                                                                =       rsRetrieve.getInt("OBSOLETE");
			 *               customerProductRow.dtActivationDate                                                 =       rsRetrieve.getDate("ACTIVATIONDATE");
			 *               customerProductRow.dtDeactivationDate                                               =       rsRetrieve.getDate("DEACTIVATIONDATE");
			 *               customerProductRow.lParentID                                                                =       rsRetrieve.getLong("PARENTID");
			 *               customerProductRow.dtCreationDate                                                   =       rsRetrieve.getTimestamp("CREATIONDATE");
			 *               customerProductRow.strCreationUser                                                  =       rsRetrieve.getString("CREATIONUSER");
			 *               customerProductRow.dtModificationDate                                               =       rsRetrieve.getTimestamp("MODIFICATIONDATE");
			 *               customerProductRow.strModificationUser                                              =       rsRetrieve.getString("MODIFICATIONUSER");
			 *
			 *               customerProductTable.addUniqueRecord(customerProductRow);
			 *           }
			 *           if (null != customerProductRow)
			 *           {
			 *               teleSessionMgr.putTable("CUSTOMERPRODUCT",customerProductTable);
			 *           }
			 *           rsRetrieve.close();
			 *           rsRetrieve.getStatement().close();
			 *
			 *
			 *           if(GAfePropertyLoader.DEBUG)
			 *           {
			 *               GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" CUSTOMERPRODUCT Table Loaded",GGeneric.iDebugLevelSeven,this);
			 *               GGeneric.println("In LProduct.java Method : vdlnLoadCustomerRelatedData_InSession() with parameters lCustomerID      :      "+lCustomerID+" DATA LOADED SUCCESSFULLY !",GGeneric.iDebugLevelSeven,this);
			 *           }
			 *       }
			 *   }
			 * }
			 */

			// END DELETE 5.56a
		} catch (AfeException afe) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(afe, GGeneric.iDebugLevelThree, this);
			}

			throw afe;
		} catch (SQLException sqle) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(sqle, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException("ERRCOM_00001", sqle.getMessage());
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		} finally {
			GConnectAfe.close(psQuery);
			GConnectAfe.close(rsCustAccID);

			try {
				closeAFEConnection();
			} catch (Exception ex) {

				// Consume this Exception
				GLogger.logException(ex);
			}
		}
	}

	//  BEGIN ADD 5.56a
	protected void vdlnLoadCustomerRelatedData_InSession_NoAccountFound(
			Long lCustomerID) throws Exception {
		GLogger.logEntry(CLASS_NAME,
				"vdlnLoadCustomerRelatedData_InSession_NoAccountFound");

		StringBuffer sbfSql = null;
		PreparedStatement psQuery = null;
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery1 = null;
		ResultSet rsRetrieve1 = null;
		PreparedStatement psQuery2 = null;
		ResultSet rsRetrieve2 = null;
		PreparedStatement psQuery3 = null;
		ResultSet rsRetrieve3 = null;
		Customer custTable = null;
		CustomerRow custRow = null;
		ContactInfo ciTable = null;
		ContactInfoRow ciRow = null;
		CustomerProfile cpTable = null;
		CustomerProfileRow cpRow = null;
		CustomerLink clTable = null;
		CustomerLinkRow clRow = null;
		ArrayList arrayListAddressID = null;
		ArrayList arrayListManualAddressID = null;
		ArrayList arrayListCustomerID = null;
		ArrayList arrayListCustomerProfileID = null;

		try {
			custTable = (Customer) GConnectMemoryDB
					.getTable(GAfeConstants.CUSTOMER);

			if (null == custTable) {
				custTable = new Customer();
			}

			sbfSql = new StringBuffer(
					"SELECT * FROM CUSTOMER WHERE CUSTOMERID = ?");
			psQuery = GConnectAfe.psPrepareStatement(sbfSql.toString());
			psQuery.setLong(1, lCustomerID.longValue());
			rsRetrieve = psQuery.executeQuery();

			if (rsRetrieve.next()) {
				custRow = new CustomerRow();
				custRow = (CustomerRow) custRow.objLoadResultSet(rsRetrieve);

				if (null != custRow) {
					custTable.addUniqueRecord(custRow);
				}
			}

			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
			GConnectMemoryDB.putTable(GAfeConstants.CUSTOMER, custTable);
			GLogger.debug(CLASS_NAME,
					"vdlnLoadCustomerRelatedData_InSession_NoAccountFound",
					"Total Records in Customer Table  :       "
							+ custTable.vctGetAll().size());

			if (null != custRow) {
				ciTable = (ContactInfo) GConnectMemoryDB
						.getTable(GAfeConstants.CONTACTINFO);

				if (null == ciTable) {
					ciTable = new ContactInfo();
				}

				sbfSql.setLength(0);
				sbfSql
						.append("SELECT * FROM CONTACTINFO WHERE CONTACTINFOID = ?");
				psQuery1 = GConnectAfe.psPrepareStatement(sbfSql.toString());
				psQuery1.setLong(1, custRow.lContactInfoID);
				rsRetrieve1 = psQuery1.executeQuery();

				while (rsRetrieve1.next()) {
					ciRow = new ContactInfoRow();
					ciRow = (ContactInfoRow) ciRow
							.objLoadResultSet(rsRetrieve1);

					if (null != ciRow) {
						ciTable.addUniqueRecord(ciRow);
					}
				}

				GConnectAfe.close(rsRetrieve1);
				GConnectAfe.close(psQuery1);
				GConnectMemoryDB.putTable(GAfeConstants.CONTACTINFO, ciTable);
				GLogger.debug(CLASS_NAME,
						"vdlnLoadCustomerRelatedData_InSession_NoAccountFound",
						"Total Records in ContactInfo Table    :      "
								+ ciTable.vctGetAll().size());
				cpTable = (CustomerProfile) GConnectMemoryDB
						.getTable(GAfeConstants.CUSTOMERPROFILE);

				if (null == cpTable) {
					cpTable = new CustomerProfile();
				}

				sbfSql.setLength(0);
				sbfSql
						.append("SELECT * FROM CUSTOMERPROFILE WHERE CUSTOMERID = ?");
				psQuery2 = GConnectAfe.psPrepareStatement(sbfSql.toString());
				psQuery2.setLong(1, custRow.lCustomerID);
				rsRetrieve2 = psQuery2.executeQuery();

				while (rsRetrieve2.next()) {
					cpRow = new CustomerProfileRow();
					cpRow = (CustomerProfileRow) cpRow
							.objLoadResultSet(rsRetrieve2);

					if (null != cpRow) {
						cpTable.addUniqueRecord(cpRow);
					}
				}

				GConnectAfe.close(rsRetrieve2);
				GConnectAfe.close(psQuery2);
				GConnectMemoryDB.putTable(GAfeConstants.CUSTOMERPROFILE,
						cpTable);
				GLogger.debug(CLASS_NAME,
						"vdlnLoadCustomerRelatedData_InSession_NoAccountFound",
						"Total Records in CustomerProfile Table        :      "
								+ cpTable.vctGetAll().size());
				clTable = (CustomerLink) GConnectMemoryDB
						.getTable(GAfeConstants.CUSTOMERLINK);

				if (null == clTable) {
					clTable = new CustomerLink();
				}

				arrayListCustomerID = new ArrayList();
				arrayListAddressID = new ArrayList();
				arrayListManualAddressID = new ArrayList();
				arrayListCustomerProfileID = new ArrayList();
				arrayListCustomerID.add(lCustomerID);
				sbfSql.setLength(0);
				sbfSql.append("SELECT * FROM CUSTOMERLINK WHERE CUSTOMERID=?");
				psQuery3 = GConnectAfe.psPrepareStatement(sbfSql.toString());
				psQuery3.setLong(1, custRow.lCustomerID);
				rsRetrieve3 = psQuery3.executeQuery();

				while (rsRetrieve3.next()) {
					clRow = new CustomerLinkRow();
					clRow = (CustomerLinkRow) clRow
							.objLoadResultSet(rsRetrieve3);

					if (null != clRow) {
						if (clTable.bAddUniqueRecord(clRow)) {
							if (-1 == arrayListAddressID.indexOf(Long.valueOf(
									clRow.lAddressID))) {
								arrayListAddressID.add(Long.valueOf(
										clRow.lAddressID));
							}
						}
					}
				}

				GConnectAfe.close(rsRetrieve3);
				GConnectAfe.close(psQuery3);
				GConnectMemoryDB.putTable(GAfeConstants.CUSTOMERLINK, clTable);
				GLogger.debug(CLASS_NAME,
						"vdlnLoadCustomerRelatedData_InSession_NoAccountFound",
						"Total Records in CustomerLink Table   :      "
								+ clTable.vctGetAll().size());
				LCustomerData.reLoadAddressTable(arrayListAddressID,
						arrayListManualAddressID);
				GLogger
						.debug(
								CLASS_NAME,
								"vdlnLoadCustomerRelatedData_InSession_NoAccountFound",
								"After Calling reLoadAddressTable method of LCustomerData Class");
				LCustomerData
						.reLoadManualAddressTable(arrayListManualAddressID);
				GLogger
						.debug(
								CLASS_NAME,
								"vdlnLoadCustomerRelatedData_InSession_NoAccountFound",
								"After Calling reLoadManualAddressTable method of LCustomerData Class");
				LCustomerData.reLoadCustomerProfileTable(arrayListCustomerID,
						arrayListCustomerProfileID);
				GLogger
						.debug(
								CLASS_NAME,
								"vdlnLoadCustomerRelatedData_InSession_NoAccountFound",
								"After Calling reLoadCustomerProfileTable method of LCustomerData Class");
				LCustomerData
						.reLoadCustomerProfile2AffinityTable(arrayListCustomerProfileID);
				GLogger
						.debug(
								CLASS_NAME,
								"vdlnLoadCustomerRelatedData_InSession_NoAccountFound",
								"After Calling reLoadCustomerProfile2AffinityTable method of LCustomerData Class");
			}
		} catch (Exception e) {
			GGeneric.printStackTrace(e, GGeneric.iDebugLevelThree, this);

			throw e;
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
			GConnectAfe.close(rsRetrieve1);
			GConnectAfe.close(psQuery1);
			GConnectAfe.close(rsRetrieve2);
			GConnectAfe.close(psQuery2);
			GConnectAfe.close(rsRetrieve3);
			GConnectAfe.close(psQuery3);
		}
	}

	//  END ADD 5.56a

	/**
	 * Delete Account Level Promotion
	 * @param lCustomerAccountID    Customer Account Id
	 * @throws      Exception
	 */
	// BEGIN DELETE V 5.96u
	// private final void vDeleteAccountLevelPromotion (long lCustomerAccountID) throws AfeException
	// END DELETE V 5.96u
	// BEGIN ADD V 5.96u
	// BEGIN DELETE V 7.04e
	// private final void vDeleteAccountLevelPromotion (long lCustomerAccountID) throws Exception
	// END DELETE V 7.04e
	// BEGIN ADD V 7.04e
	public final void vDeleteAccountLevelPromotion(long lCustomerAccountID)
			throws Exception

	// END ADD V 7.04e
	// END ADD V 5.96u
	{

		// BEGIN DELETE V 5.96u
		// deleted as the promotion is been moved out of alles opslaan flow

		/*
		 * CustomerPromotionRow custPromRow = null;
		 * CustomerPromotion custPromTable = null;
		 * Vector vctAccountPromotion = null;
		 *
		 * try {
		 * if (GAfePropertyLoader.DEBUG) {
		 * GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() for Account " + lCustomerAccountID, GGeneric.iDebugLevelSeven, this);
		 * }
		 * custPromTable = (CustomerPromotion) teleSessionMgr.getTable("CUSTOMERPROMOTION");
		 * if (null == custPromTable) {
		 * if (GAfePropertyLoader.DEBUG) {
		 *   GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() Returning From Here 1  ", GGeneric.iDebugLevelSeven, this);
		 * }
		 * return;
		 * }
		 * vctAccountPromotion = custPromTable.vctSearchByCustAccountID(lCustomerAccountID);
		 * if (null != vctAccountPromotion) {
		 * if (GAfePropertyLoader.DEBUG) {
		 *   GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() vctAccountPromotion.size() =  " + vctAccountPromotion.size(), GGeneric.iDebugLevelSeven, this);
		 * }
		 * for (int iLoop = vctAccountPromotion.size() - 1; iLoop >= 0; iLoop--) {
		 *   if (GAfePropertyLoader.DEBUG) {
		 *       GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() In For Loop iLoop =  " + iLoop, GGeneric.iDebugLevelSeven, this);
		 *   }
		 *   custPromRow = (CustomerPromotionRow) vctAccountPromotion.elementAt(iLoop);
		 *   if (null != custPromRow) {
		 *       if (GAfePropertyLoader.DEBUG) {
		 *           GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() custPromRow Not Null for iLoop =  " + iLoop, GGeneric.iDebugLevelSeven, this);
		 *           GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() CustomerPromotionId is " + custPromRow.lCustomerPromotionID, GGeneric.iDebugLevelSeven, this);
		 *       }
		 *       if (Record.INSERT == custPromRow.iStatusInDB) {
		 *           if (GAfePropertyLoader.DEBUG) {
		 *               GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() Record in Insert Mode for iLoop =  " + iLoop, GGeneric.iDebugLevelSeven, this);
		 *               GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() CustomerProductLineId is " + custPromRow.lCustomerProductLineID, GGeneric.iDebugLevelSeven, this);
		 *           }
		 *           if (custPromRow.lCustomerProductLineID == 0) {
		 *               if (GAfePropertyLoader.DEBUG) {
		 *                   GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() CustomerProductLineId is zero ", GGeneric.iDebugLevelSeven, this);
		 *               }
		 *               //custPromRow.iStatusInDB       = Record.DELETE;
		 *               custPromTable.deleteRecord(custPromRow.lCustomerPromotionID);
		 *           }
		 *       } else {
		 *           if (GAfePropertyLoader.DEBUG) {
		 *               GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() Record Not in Insert Mode for iLoop = " + iLoop, GGeneric.iDebugLevelSeven, this);
		 *               GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() CustomerProductLineId is " + custPromRow.lCustomerProductLineID, GGeneric.iDebugLevelSeven, this);
		 *           }
		 *           if (custPromRow.lCustomerProductLineID == 0) {
		 *               if (GAfePropertyLoader.DEBUG) {
		 *                   GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() CustomerProductLineId is zero ", GGeneric.iDebugLevelSeven, this);
		 *               }
		 *               custPromRow.iObsolete = FINAL_ONE;
		 *               if (custPromRow.iStatusInDB == Record.VIEW) {
		 *                   if (GAfePropertyLoader.DEBUG) {
		 *                       GGeneric.println("In LProduct : Method vDeleteAccountLevelPromotion() Record in View Mode Mode for iLoop = " + iLoop, GGeneric.iDebugLevelSeven, this);
		 *                   }
		 *                   custPromRow.iStatusInDB = Record.UPDATE;
		 *               }
		 *               custPromRow.strModificationUser = bSession.strUserName;
		 *               custPromRow.dtDeactivationDate = new Date();
		 *               custPromTable.updateRecord(custPromRow);
		 *           }
		 *       }
		 *   }
		 * }
		 * teleSessionMgr.putTable("CUSTOMERPROMOTION", custPromTable);
		 * }
		 * } catch (Exception e) {
		 * GGeneric.printStackTrace(e, GGeneric.iDebugLevelThree, this);
		 * throw new AfeException(GErrorCodes.ERRCOM_00002, e.getMessage());
		 * }
		 */

		// END DELETE V 5.96u
		// BEGIN ADD V 5.96u
		GLogger.logEntry(CLASS_NAME, METHOD_DELETEACCOUNTLEVELPROMOTION);
		GLogger.logInput(METHOD_DELETEACCOUNTLEVELPROMOTION,
				ARG_CUSTOMERACCOUNTID, lCustomerAccountID);

		BUpdateCustomerPromotion objBUpdateCustomerPromotion = null;
		Map mapUpdatedPromotion = null;

		objBUpdateCustomerPromotion = new BUpdateCustomerPromotion();

		// BEGIN DELETE V 5.96u
		// objBUpdateCustomerPromotion.setCustomerProductLineId(lCustomerAccountID);
		// END DELETE V 5.96u
		// BEGIN ADD V 5.96u
		objBUpdateCustomerPromotion.setCustomerAccountId(lCustomerAccountID);

		// END ADD V 5.96u
		objBUpdateCustomerPromotion.setDeactivationDate(new Date());
		objBUpdateCustomerPromotion.setFlag(FINAL_ZERO); // set the value of Flag as 0 for Account Level Promotion
		objBUpdateCustomerPromotion.setObsolete(FINAL_ONE); // set the obsolete value as 1
		mapUpdatedPromotion = (Map) teleSessionMgr
				.getTable("mapUpdatedPromotion");

		if (null == mapUpdatedPromotion) {
			mapUpdatedPromotion = new HashMap();
		}

		mapUpdatedPromotion.put("CAID_" + lCustomerAccountID,
				objBUpdateCustomerPromotion);
		teleSessionMgr.putTable("mapUpdatedPromotion", mapUpdatedPromotion);

		// END ADD V 5.96u
	}

	//  END ADD VER 5.23a

	//  BEGIN ADD V5.22a
	// comment: function to remove special products from the selected product vector in case type of number is changed
	public void vdRemoveSpecialProducts(
			BProductDetailProperty bProductDetailProperty, String strType)
			throws AfeException {
		BProductDetail bProductDetail = null;
		int ivctProductSelected = 0;

		try {
			ivctProductSelected = bProductDetailProperty.vctProductSelected
					.size();

			for (int iCounterType = 0; iCounterType < ivctProductSelected; iCounterType++) {
				bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(iCounterType);

				// Begin Add V7.20h
				GLogger.debug(CLASS_NAME, "vdRemoveSpecialProducts",
						"bProductDetail.lProductID.longValue()"
								+ bProductDetail.lProductID.longValue());

				// End Add V7.20h
				if (strType.equalsIgnoreCase("NORMAL")) {
					if ((bProductDetail.lProductID.longValue() == GAfeDescription
							.lGetTypeId("PRODUCT_SILVER"))
							|| (bProductDetail.lProductID.longValue() == GAfeDescription
									.lGetTypeId("PRODUCT_GOLDEN"))
							|| (bProductDetail.lProductID.longValue() == GAfeDescription
									.lGetTypeId("PRODUCT_DIMOND"))) {
						bProductDetailProperty.vctProductSelected
								.removeElementAt(iCounterType);
						--ivctProductSelected;
						--iCounterType;
					}
				} else if (strType.equalsIgnoreCase("NP")) {
					if ((bProductDetail.lProductID.longValue() == GAfeDescription
							.lGetTypeId("PRODUCT_SILVER"))
							|| (bProductDetail.lProductID.longValue() == GAfeDescription
									.lGetTypeId("PRODUCT_GOLDEN"))
							|| (bProductDetail.lProductID.longValue() == GAfeDescription
									.lGetTypeId("PRODUCT_DIMOND"))) {
						bProductDetailProperty.vctProductSelected
								.removeElementAt(iCounterType);
						--ivctProductSelected;
						--iCounterType;
					}
				} else if (strType.equalsIgnoreCase("DIAMOND")) {
					if ((bProductDetail.lProductID.longValue() == GAfeDescription
							.lGetTypeId("PRODUCT_SILVER"))
							|| (bProductDetail.lProductID.longValue() == GAfeDescription
									.lGetTypeId("PRODUCT_GOLDEN"))) {
						bProductDetailProperty.vctProductSelected
								.removeElementAt(iCounterType);
						--ivctProductSelected;
						--iCounterType;
					}
				} else if (strType.equalsIgnoreCase("GOLDEN")) {
					if ((bProductDetail.lProductID.longValue() == GAfeDescription
							.lGetTypeId("PRODUCT_SILVER"))
							|| (bProductDetail.lProductID.longValue() == GAfeDescription
									.lGetTypeId("PRODUCT_DIMOND"))) {
						bProductDetailProperty.vctProductSelected
								.removeElementAt(iCounterType);
						--ivctProductSelected;
						--iCounterType;
					}
				} else if (strType.equalsIgnoreCase("SILVER")) {
					if ((bProductDetail.lProductID.longValue() == GAfeDescription
							.lGetTypeId("PRODUCT_DIMOND"))
							|| (bProductDetail.lProductID.longValue() == GAfeDescription
									.lGetTypeId("PRODUCT_GOLDEN"))) {
						bProductDetailProperty.vctProductSelected
								.removeElementAt(iCounterType);
						--ivctProductSelected;
						--iCounterType;
					}
				}
				//Begin Add V9.02j
				else if (strType.equalsIgnoreCase("DIAMOND MOBILE")) {
					if ((bProductDetail.lProductID.longValue() == GAfeDescription
							.lGetTypeId("PRODUCT_GOLDENMOBILE"))) {
						bProductDetailProperty.vctProductSelected
								.removeElementAt(iCounterType);
						--ivctProductSelected;
						--iCounterType;
					}
				}

				else if (strType.equalsIgnoreCase("GOLDEN MOBILE")) {
					if ((bProductDetail.lProductID.longValue() == GAfeDescription
							.lGetTypeId("PRODUCT_DIAMONDMOBILE"))) {
						bProductDetailProperty.vctProductSelected
								.removeElementAt(iCounterType);
						--ivctProductSelected;
						--iCounterType;
					}
				} else if (strType.equalsIgnoreCase("NORMAL MOBILE")) {
					if (bProductDetail.lProductID.longValue() == GAfeDescription
							.lGetTypeId("PRODUCT_DIAMONDMOBILE")
							|| (bProductDetail.lProductID.longValue() == GAfeDescription
									.lGetTypeId("PRODUCT_GOLDENMOBILE"))) {
						bProductDetailProperty.vctProductSelected
								.removeElementAt(iCounterType);
						--ivctProductSelected;
						--iCounterType;
					}

				}

				//End Add V9.02j
			}
		} catch (AfeException afe) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(afe, GGeneric.iDebugLevelFour, this);
			}

			throw afe;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}
	}

	// END ADD V5.22a

	// BEGIN ADD V5.24a
	// comment: added to look for parameter value in the selected prodcucts

	/**
	 *  DESCRIPTION :   The Function will find that a given product is there in the Vector of BO
	 *                                  that are passed to it.
	 *
	 *  @param          :       Vector vctProductSelected
	 *
	 *  @return         :       int     -       Returns a Integer
	 * /******************************************************************************************************************************
	 */
	protected String strFindProductParameterInVectorSelected(
			Vector vctProductSelected, Long lProductID, Long lProductParameterID)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		String strValues = null; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		int iNCounter = 0; // Local Varaible Declaration
		int iSizeVector = 0; // Local Varaible Declaration
		int iSizeOVector = 0; // Local Varaible Declaration

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		iSizeOfVector = vctProductSelected.size();

		BProductDetail bProductDetail = null;
		BProductParameter bProductParameter = null;

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			if (((String.valueOf(lProductID)).equalsIgnoreCase(String
					.valueOf(((BProductDetail) vctProductSelected
							.elementAt(iCount)).lProductID)))) {
				//bProductDetail = new BProductDetail();
				bProductDetail = (BProductDetail) vctProductSelected
						.elementAt(iCount);
				iSizeVector = bProductDetail.vctParameters.size();

				for (iCounter = FINAL_ZERO; iCounter < iSizeVector; iCounter++) {
					//bProductParameter = new BProductParameter();
					bProductParameter = (BProductParameter) bProductDetail.vctParameters
							.elementAt(iCounter);

					if ((String.valueOf(lProductParameterID)).equals(String
							.valueOf(bProductParameter.lParameterID))) {
						iSizeOVector = bProductParameter.vctParameterValues
								.size();

						for (iNCounter = FINAL_ZERO; iNCounter < iSizeOVector; iNCounter++) {
							if ((string_ONE)
									.equalsIgnoreCase(String
											.valueOf(((Vector) bProductParameter.vctParameterValues
													.elementAt(iNCounter))
													.elementAt(FINAL_ONE)))) {
								strValues = (String) ((Vector) bProductParameter.vctParameterValues
										.elementAt(iNCounter))
										.elementAt(FINAL_ZERO);
							} // end of the if loop
						} // end of the for loop
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop
		} // end of the for loop

		// Returning of the String
		return strValues;
	} // Closing Brace of the function

	// END ADD V5.24a
	// BEGIN ADD V5.26a
	// comment: overriding the function to load data as per the value of iObsolete
	public Vector vctLoadProducts(Long CustomerProductLineID, int iObsolete)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		String strDescription = ""; // Local Varaible Declaration
		Vector vctGetAllData = null; // internal local vector
		Vector vctInternal = null; // internal local vector
		SimpleDateFormat sdf = new SimpleDateFormat(string_dateFormat1); // Making the Object of the Date Formatter Class

		// Begin Add V7.05b
		long lContractTypeId = 0;

		// Begin DEL v9.01d
		// long lCustomerProductId  = 0;
		// End DEL v9.01d
		// End Add V7.05b
		String strShow_all_flag = null;

		// int iVBCount = 0;
		// int[] arrProductIds = null;

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			if (null != (String) teleSessionMgr.getValue("SHOW_ALL_FLAG")) {
				strShow_all_flag = (String) teleSessionMgr
						.getValue("SHOW_ALL_FLAG");

				// teleSessionMgr.removeValue("SHOW_ALL_FLAG");
			}

			/** **************************************MAKING OF 1RD QUERRY************************************** */
			CustomerProductLineRow customerProductLineRow = null;

			customerProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
			//customerProductLineRow = new CustomerProductLineRow();
			customerProductLineRow = customerProductLineTable
					.cplrSearchByCustProductLineIDandObsolete(
							CustomerProductLineID.longValue(), iObsolete);

			// Begin DEL v9.01d
			// CustomerProductRow customerProductRow = null;                                                                             // Initializing the Object Class for the CustomerProduct table
			// End DEL v9.01d
			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session

			/*
			 * arrProductIds = GAfeDescription.PRODUCT_KABELTOGANG;
			 * for(int iCount = 0; iCount < arrProductIds.length; iCount ++)
			 * {
			 *   customerProductRow = customerProductTable.cprSearchByCustProductLineIDAndProductID (CustomerProductLineID.longValue(), arrProductIds[iCount] ) ;
			 *   if(null != customerProductRow )
			 *   {
			 *       iVBCount ++ ;
			 *   }
			 * }
			 */
			Vector vctobjCPInternal = null;

			// vctobjCPInternal = customerProductTable.vctSearchByCustomerProductLineIDandObsolete(CustomerProductLineID.longValue(), iObsolete);
			if (string_ONE.equalsIgnoreCase(strShow_all_flag)) {
				vctobjCPInternal = customerProductTable
						.vctSearchByCustProductLineID(CustomerProductLineID
								.longValue());
			} else {
				vctobjCPInternal = customerProductTable
						.vctSearchByCustomerProductLineIDandObsolete(
								CustomerProductLineID.longValue(), iObsolete);
			}

			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT PRODUCTID, ACTIVATIONDATE, DEACTIVATIONDATE FROM CUSTOMERPRODUCT WHERE CUSTOMERPRODUCTLINEID = ").append(CustomerProductLineID);
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */

			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT DESCRIPTION1ID FROM PRODUCT WHERE PRODUCTID IN ( ");
			 * strSql.append("SELECT PRODUCTID FROM CUSTOMERPRODUCT WHERE CUSTOMERPRODUCTLINEID = ").append(CustomerProductLineID).append(" )");
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */
			vctGetAllData = new Vector(); // External Local Vector of ProductID, ActivationDate and DeActivationDate

			/* Making a WHILE Loop that moves from the first Record to the Last Record */
			/* and in which we add all the result's to a local internal vector which */
			/* further adds the record to the external vector that is returned. */
			/* Each Record in the External Vector is added as a Row of all the Records */
			/* that are fetched from the ResultSet's each Row */
			if (null == productTable) {
				productTable = (Product) teleSessionMgr
						.getMasterTable(string_PRODUCT); // Getting the Vat table from the session
			}

			// Begin Modify : V3.39
			// if(null != vctobjCPInternal)
			if ((null != vctobjCPInternal) && (null != customerProductLineRow))

			// End Modify : V3.39
			{

				// for each  record in the vector of CustomerProduct Records
				int ivctobjCPInternal = 0;

				ivctobjCPInternal = vctobjCPInternal.size();

				for (int iASCounter = FINAL_ZERO; iASCounter < ivctobjCPInternal; iASCounter++) {

					// Begin Add : V3.39
					if (!((String.valueOf(customerProductLineRow.lProductID))
							.equalsIgnoreCase(String
									.valueOf(((CustomerProductRow) (vctobjCPInternal
											.elementAt(iASCounter))).lProductID))))

					// if(!(customerProductLineRow.lProductID    ==      ((CustomerProductRow)(vctobjCPInternal.elementAt(iASCounter))).lProductID))
					// End Add : V3.39
					{
						ProductRow productRow = null; // Initializing the Object Class for the Vat table

						productRow = (ProductRow) productTable
								.prSearchByProductID(((CustomerProductRow) (vctobjCPInternal
										.elementAt(iASCounter))).lProductID);

						if (null != productRow) {
							strDescription = strFindDescription(productRow.lDescription1ID);
						}

						vctInternal = new Vector();
						vctInternal.addElement(Long.valueOf(
								((CustomerProductRow) (vctobjCPInternal
										.elementAt(iASCounter))).lProductID));

						Long DateToInsert = null;

						if (null != ((CustomerProductRow) (vctobjCPInternal
								.elementAt(iASCounter))).dtActivationDate) {
							vctInternal
									.addElement(sdf
											.format(((CustomerProductRow) (vctobjCPInternal
													.elementAt(iASCounter))).dtActivationDate));
						} else {
							vctInternal.addElement(DateToInsert);
						}

						if (null != ((CustomerProductRow) (vctobjCPInternal
								.elementAt(iASCounter))).dtDeactivationDate) {
							vctInternal
									.addElement(sdf
											.format(((CustomerProductRow) (vctobjCPInternal
													.elementAt(iASCounter))).dtDeactivationDate));
						} else {
							vctInternal.addElement(DateToInsert);
						}

						vctInternal.addElement(strDescription);

						// BEGIN ADD V5.60a
						if (null != ((CustomerProductRow) (vctobjCPInternal
								.elementAt(iASCounter))).dtContractStartDate) {
							vctInternal
									.addElement(sdf
											.format(((CustomerProductRow) (vctobjCPInternal
													.elementAt(iASCounter))).dtContractStartDate));
						} else {
							vctInternal.addElement(DateToInsert);
						}

						if (null != ((CustomerProductRow) (vctobjCPInternal
								.elementAt(iASCounter))).dtContractEndDate) {
							vctInternal
									.addElement(sdf
											.format(((CustomerProductRow) (vctobjCPInternal
													.elementAt(iASCounter))).dtContractEndDate));
						} else {
							vctInternal.addElement(DateToInsert);
						}

						// END ADD V5.60a
						// Begin Add V7.05b
						lContractTypeId = ((CustomerProductRow) (vctobjCPInternal
								.elementAt(iASCounter))).lContractTypeId;
						vctInternal.addElement(Long.valueOf(lContractTypeId));

						/*
						 * lContractTypeId = 0;
						 * if(null != vctobjCPInternal.elementAt(iASCounter))
						 * {
						 *   lCustomerProductId =
						 *   ((CustomerProductRow) (vctobjCPInternal.elementAt(iASCounter))).getCustomerProductID() ;
						 *   lContractTypeId =  LProduct_ext.iGetContractType(lCustomerProductId);
						 * }
						 * vctInternal.addElement(Long.valueOf(lContractTypeId));
						 */

						// GLogger.logOutput("vctLoadProducts","ContractTypeId:",+lContractTypeId) ;
						// End Add V7.05b
						vctGetAllData.addElement(vctInternal);
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the Vector
		return vctGetAllData;
	} // Closing Brace of the function

	// END ADD V5.26a

	// BEGIN ADD V5.26a
	// comment: overriding the function to take care of value of iObsolete

	/**
	 * This function will Return the EigenShappen of the Given CustomerProductLineID.
	 * Internally it is delegating the call to RProduct.strGetEigenchappen.
	 * @param   lCustomerProductlineID  Customer Product Line ID for which to get the eigenschappen
	 * @param iObsolete Obsolete flag to be able to see the deleted product descriptions too.
	 * @return  String containing the Eigenschappen
	 * @exception       Exception       when Unknown Error occurs
	 * @deprecated Use {@link #RProduct#strGetEigenschappen(long)} instead.
	 */
	protected String strGetEigenschappen(long lCustomerProductlineID,
			int iObsolete) throws AfeException {

		// BEGIN DELETE V5.52
		// function deprecated and being moved into the RProduct

		/*
		 * final   int                                                                     FINAL_ONE                               = 1;                                            // Initialization of finalOne("1")
		 * final   int                                                                     FINAL_ZERO                              = 0;                                            // Initialization of finalZero("0")
		 *       int                                                                     iCounter                                = 0;                                            // Initialization of Counter
		 *       int                                                                     iEndCounter                             = 0;                                            // Initialization of EndCounter
		 *       StringBuffer                                            sbfEigenChappen                 = new StringBuffer();           // Variable used to store the Eigenshappen
		 *       String                                                          strEigenChappen                 = "";                                           // Variable used to store the Eigenshaapen
		 *
		 *       long                                                            lngCustomerPLIdentifierID       = 0;                                    // Variable used to store the Eigenshaapen
		 *
		 *       Vector                                                          vctProductid                    = null;                         // Initialization of the Vector
		 *       ProductRow                                                      ProdRow                                 = null;                                         // Initializing the Object Class for the Product table
		 *       CustomerProductLineIdentifierRow        custPLIdRow                             = null;                                         // Initializing the Object Class for the CusotmerProductLineIdentifer table
		 *       //BEGIN ADD V5.39a
		 *       String strPackage                                                                                       = null;
		 *       //END ADD V5.39a
		 * try
		 * {
		 *   customerProductTable                                        =       (CustomerProduct)teleSessionMgr.getTable("CUSTOMERPRODUCT");                                                    // Getting the Customer table from the session
		 *   customerProductLineIdentifierTable          =       (CustomerProductLineIdentifier)teleSessionMgr.getTable("CUSTOMERPRODUCTLINEIDENTIFIER");                // Getting the Customer table from the session
		 *
		 *   if(null == productTable)
		 *   {
		 *       productTable                                                    =       (Product)teleSessionMgr.getMasterTable("PRODUCT");      // Getting the Vat table from the session
		 *   }
		 *
		 *   //BEGIN DELETE V5.26a
		 *   //comment: we need to call the function to search with CustomerProductLineId and Obsolete
		 *   //vctProductid              =        customerProductTable.vctSearchByCustProductLineIDAndNonObsolete(lCustomerProductlineID); // Select * from CustomerProduct where CustomerProductLineId is the one passed in the argument of the function
		 *   //END DELETE V5.26a
		 *
		 *   //BEGIN ADD V5.26a
		 *   //comment: getting the CustomerproductRows
		 *   vctProductid                =        customerProductTable.vctSearchByCustomerProductLineIDandObsolete(lCustomerProductlineID, iObsolete);
		 *   //END ADD V5.26a
		 *
		 *   if(null != vctProductid)
		 *       iEndCounter             =        vctProductid.size();                                   // No of Records
		 *
		 *   for (iCounter = FINAL_ZERO; iCounter < iEndCounter ;iCounter++)
		 *   {
		 *           ProdRow             =        productTable.prSearchByProductID(((CustomerProductRow)vctProductid.elementAt(iCounter)).lProductID); // Select * from Product where ProductId from Customerproduct evaluated earlier
		 *           //BEGIN DELETE V5.39a
		 *           //if(null != ProdRow.strShortDescription)
		 *               //sbfEigenChappen.append(ProdRow.strShortDescription).append("/");                      // Combining shortDescription of Products for No of Records Time
		 *           //END ADD DELETE V5.39a
		 *
		 *           if ((ProdRow.lProductID == GAfeDescription.lGetTypeId("PRODUCT_TELEPHONE")) || (ProdRow.lProductID == GAfeDescription.lGetTypeId("PRODUCT_INTERNET")) || (ProdRow.lProductID == GAfeDescription.lGetTypeId("PRODUCT_CPS")))
		 *           {
		 *               lngCustomerPLIdentifierID       =       ((CustomerProductRow)vctProductid.elementAt(iCounter)).lCustomerPLIdentifierID;
		 *           }
		 *           //BEGIN ADD V5.39a
		 *           if ( ProdRow.lProductTypeID == GAfeDescription.PRODUCTTYPE_PACKAGE)
		 *           {
		 *               if ( null !=ProdRow.strShortDescription )
		 *               {
		 *                   strPackage =ProdRow.strShortDescription;
		 *               }
		 *           }
		 *           else
		 *           {
		 *               if(null != ProdRow.strShortDescription)
		 *               {
		 *                   sbfEigenChappen.append(ProdRow.strShortDescription).append("/");
		 *               }
		 *           }
		 *           //END ADD V5.39a
		 *
		 *   }
		 *
		 *   if(FINAL_ZERO       !=      lngCustomerPLIdentifierID)
		 *   {
		 *       custPLIdRow = customerProductLineIdentifierTable.cplirSearchByCustomerPLIdentifierIDandObsolete(lngCustomerPLIdentifierID, iObsolete); // Getting CustomerProductLineIdentifier for given CustomerProductlineID
		 *   }
		 *
		 *   if(null != custPLIdRow)
		 *   {
		 *       if(GAfePropertyLoader.DEBUG)
		 *       {
		 *           System.out.println("The ProductDescription to be Added :- " +custPLIdRow.strCustomerPLIdentifierValue);
		 *       }
		 *       sbfEigenChappen.append(custPLIdRow.strCustomerPLIdentifierValue);                               // adding PL Identifier value to  strEigenChappen
		 *   }
		 *
		 *   strEigenChappen = sbfEigenChappen.toString();
		 *   //BEGIN ADD V5.39a
		 *   if ( null !=strPackage )
		 *   {
		 *       strEigenChappen=strPackage+"/"+strEigenChappen;
		 *   }
		 *   //END ADD V5.39a
		 *
		 * }
		 * catch (Exception e)
		 * {
		 *   if(GAfePropertyLoader.DEBUG)
		 *   {
		 *       e.printStackTrace(System.out);
		 *   }
		 *   throw new AfeException("ERRCOM_00001" , e.getMessage());
		 * }
		 * return strEigenChappen;         // returning strEigenChappen
		 */

		// END DELETE V5.51a
		// BEGIN ADD V5.51a
		try {
			return RProduct.strGetEigenschappen(lCustomerProductlineID,
					iObsolete);
		} catch (Exception e) {
			if (GAfePropertyLoader.DEBUG) {
				//e.printStackTrace(System.out);
				GLogger.logException(e);
			}

			throw new AfeException(string_ERRCOM_00002, e.getMessage());
		}

		// END ADD V5.52
	}

	// END ADD V5.26a
	// BEGIN ADD V5.26a
	// comment: overriding the function to considervalue of obsolete to during search
	public Vector vctGetOpenOrder(Long CustomerProductLineID, int iObsolete)
			throws Exception { // Starting Braces of the Function

		/** ************ Variable Declaration/Initialisation Starts **************************************************** */
		Vector vctGetOpenOrder = null; // internal local vector
		Vector vctTempForProcess = new Vector(); // internal local vector
		Vector vctTempForDescID = new Vector(); // internal local vector

		/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
		try {

			// Begin DEL v9.01d
			// StringBuffer strSql = new StringBuffer(""); //Defining a String Buffer to make the Sql querry
			// End DEL v9.01d
			vctGetOpenOrder = new Vector();

			/** **************************************MAKING OF 1RD QUERRY************************************** */

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("The Customer Product Line is : " +CustomerProductLineID);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */
			ObjectTypeRow objectTypeRow = null; // Initializing the Object Class for the Vat table

			if (null == objectTypeTable) {
				objectTypeTable = (ObjectType) teleSessionMgr
						.getMasterTable(string_OBJECTTYPE); // Getting the Vat table from the session
			}

			objectTypeRow = objectTypeTable
					.otrSearchBystrObjectNameandObsolete(string_CUSTOMERPRODUCTLINE,
							FINAL_ZERO);

			// Begin DEL v9.01d
			// ProcessLinkRow processLinkRow = null;                                                                                             // Initializing the Object Class for the Vat table
			// End DEL v9.01d
			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(string_PROCESSLINK); // Getting the Vat table from the session

			Vector vctObjPLInternal = null;

			vctObjPLInternal = processLinkTable
					.vctSearchByObjectIDandObjectTypeIDandObsolete(
							CustomerProductLineID.longValue(),
							objectTypeRow.lObjectTypeID, iObsolete);

			if (null != vctObjPLInternal) {
				processTable = (Process) teleSessionMgr.getTable(string_PROCESS); // Getting the PROCESS table from the session
				orderTable = (Order) teleSessionMgr.getTable(string_ORDER); // Getting the PROCESS table from the session

				if (null == orderType) {
					orderType = (OrderType) teleSessionMgr
							.getMasterTable("ORDERTYPE"); // Getting the PROCESS table from the session
				}

				// for each  record in the vector of ProcessLink Records
				for (int iPLCounter = FINAL_ZERO; iPLCounter < vctObjPLInternal
						.size(); iPLCounter++) {
					if (-1 == vctTempForProcess.indexOf(Long.valueOf(
							((ProcessLinkRow) (vctObjPLInternal
									.elementAt(iPLCounter))).lProcessID))) {
						vctTempForProcess.addElement(Long.valueOf(
								((ProcessLinkRow) (vctObjPLInternal
										.elementAt(iPLCounter))).lProcessID));

						/**
						 * **************STARTING*****************TO PRINT THE DATA
						 * if(GAfePropertyLoader.DEBUG)
						 * {
						 * System.out.println("The Process ID is : " +((ProcessLinkRow)(vctObjPLInternal.elementAt(iPLCounter))).lProcessID);
						 * }
						 * /****************ENDING*******************TO PRINT THE DATA******************************************
						 */
						ProcessRow processRow = null; // Initializing the Object Class for the PROCESS table

						processRow = processTable
								.prSearchByProcessIDandObsolete(
										((ProcessLinkRow) (vctObjPLInternal
												.elementAt(iPLCounter))).lProcessID,
										FINAL_ZERO);

						if (null != processRow) {
							OrderRow orderRow = null; // Initializing the Object Class for the PROCESS table

							/**
							 * **************STARTING*****************TO PRINT THE DATA
							 * if(GAfePropertyLoader.DEBUG)
							 * {
							 * System.out.println("The Order ID is : " +processRow.lOrderID);
							 * }
							 * /****************ENDING*******************TO PRINT THE DATA******************************************
							 */
							orderRow = orderTable.orSearchByOrderIDandObsolete(
									processRow.lOrderID, FINAL_ZERO);

							if (null != orderRow) {

								/**
								 * **************STARTING*****************TO PRINT THE DATA
								 * if(GAfePropertyLoader.DEBUG)
								 * {
								 * System.out.println("The orderRow.lOrderStatusTypeID is : " +orderRow.lOrderStatusTypeID);
								 * }
								 * /****************ENDING*******************TO PRINT THE DATA******************************************
								 */
								long lngOrderStatusTypeID = 0;
								long lOrderTypeID = 0;
								long lWirelessOrderTypeID = 50;
								long lFreePhoneAppOrderTypeID = 52;

								GLogger.chkpt("Came to fill in the open orders");
								lngOrderStatusTypeID = orderRow.lOrderStatusTypeID;
								lOrderTypeID = orderRow.lOrderTypeID;
								GLogger.chkpt("lOrderTypeID is "+ lOrderTypeID);
								GLogger.chkpt("lngOrderStatusTypeID is "+ lngOrderStatusTypeID);
								// Special handling for Homespot as the wireless order should 
								// not appear in the open order column of Product Overview screen
								if(lOrderTypeID != lWirelessOrderTypeID && lOrderTypeID != lFreePhoneAppOrderTypeID)
								{
									GLogger.chkpt("Not a wireless order");
									if ((lngOrderStatusTypeID == GAfeDescription
											.lGetTypeId(string_ORDERSTATUSTYPE_NEW))
											|| (lngOrderStatusTypeID == GAfeDescription
													.lGetTypeId("ORDERSTATUSTYPE_INPROGRESS"))
											|| (lngOrderStatusTypeID == GAfeDescription
													.lGetTypeId("ORDERSTATUSTYPE_ABORTED"))) {
	
										/**
										 * **************STARTING*****************TO PRINT THE DATA
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("The  2  orderStatusTypeRow.lOrderStatusTypeID is : " +orderStatusTypeRow.lOrderStatusTypeID);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
										orderRow = null; // Initializing the Object Class for the PROCESS table
	
										/**
										 * **************STARTING*****************TO PRINT THE DATA
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("The orderTable is : " +orderTable);
										 * System.out.println("The processRow.lOrderID is : " +processRow.lOrderID);
										 * System.out.println("The lngOrderStatusTypeID is : " +lngOrderStatusTypeID);
										 *
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
										orderRow = orderTable
												.orSearchByOrderIDandOrderStatusTypeIDandObsolete(
														processRow.lOrderID,
														lngOrderStatusTypeID,
														FINAL_ZERO);
	
										/**
										 * **************STARTING*****************TO PRINT THE DATA
										 * if(GAfePropertyLoader.DEBUG)
										 * {
										 * System.out.println("The orderRow is : " +orderRow);
										 * }
										 * /****************ENDING*******************TO PRINT THE DATA******************************************
										 */
										if (null != orderRow) {
											OrderTypeRow orderTypeRow = null; // Initializing the Object Class for the PROCESS table
											
 
											/**
											 * **************STARTING*****************TO PRINT THE DATA
											 * if(GAfePropertyLoader.DEBUG)
											 * {
											 * System.out.println("The orderRow.lOrderTypeID is : " +orderRow.lOrderTypeID);
											 * }
											 * /****************ENDING*******************TO PRINT THE DATA******************************************
											 */
											orderTypeRow = orderType
													.otrSearchByOrderTypeIDandObsolete(
															orderRow.lOrderTypeID,
															FINAL_ZERO);
	
											if (-1 == vctTempForDescID
													.indexOf(Long.valueOf(
															orderTypeRow.lDescriptionID))) {
												vctTempForDescID
														.addElement(Long.valueOf(
																orderTypeRow.lDescriptionID));
	
												if (null != orderTypeRow) {
													strObjectDesc = strFindDescription(orderTypeRow.lDescriptionID);
	
													/**
													 * **************STARTING*****************TO PRINT THE DATA
													 * if(GAfePropertyLoader.DEBUG)
													 * {
													 * System.out.println("The strDesc is : " +strObjectDesc);
													 * }
													 * /****************ENDING*******************TO PRINT THE DATA******************************************
													 */
													if (strObjectDesc.length() > 0) {
														vctGetOpenOrder
																.addElement(strObjectDesc);
																					
														// Begin Add for CMTS Rel 10.4 - get orderstatus
														GLogger
																.chkpt(" Order id before retrieving the order status : "
																		+ processRow.lOrderID);
														GLogger
																.chkpt(" Setting the orderstatusTypeid in BO only if it is an install order ");
														Vector vctGetOpenInstallOrderStatus = OrderUtils
																.getOrderStatus(processRow.lOrderID);
														if (vctGetOpenInstallOrderStatus
																.size() != 0
																&& vctGetOpenInstallOrderStatus != null
																&& Integer
																		.parseInt(vctGetOpenInstallOrderStatus
																				.elementAt(
																						0)
																				.toString()) == GAfeDescription.ORDERTYPE_INSTALL) {
															lOpenInstallOrderStatus = Long
																	.parseLong(vctGetOpenInstallOrderStatus
																			.elementAt(
																					1)
																			.toString());
															GLogger
																	.chkpt(" lOpenInstallOrderStatus : "
																			+ lOpenInstallOrderStatus);
														}
														//lOpenInstallOrderStatus = lngOrderStatusTypeID ;
														// End Add for CMTS Rel 10.4
													}
	
													// BEGIN ADD V6.20a
													// changes for not displaying SmartCard Pairing Order in a seperate Row for IDTV
													if (FINAL_TWO == vctGetOpenOrder
															.size()) {
														String strTemp = (String) vctGetOpenOrder
																.elementAt(FINAL_ZERO);
														String strConcat = strTemp
																+ "+"
																+ (String) vctGetOpenOrder
																		.elementAt(FINAL_ONE);
	
														vctGetOpenOrder
																.setElementAt(
																		strConcat,
																		FINAL_ZERO);
														vctGetOpenOrder
																.removeElementAt(FINAL_ONE);
													}
	
													// END ADD V6.20a
												} // end of the if loop
											} // end of the if loop
										} // end of the if loop
									} // end of the if loop -- loop
								} // End of wireless loop
								else
								{
									GLogger.chkpt("Was a wireless order and hence not considered in open orders");
								}
							} // end of the if loop
						} // end of the if loop
					} // end of the if loop
				} // end of the for loop
			} // end of the if loop

			/**
			 * **************STARTING*****************TO PRINT THE DATA
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * System.out.println("The final vector is : " +vctGetOpenOrder);
			 * }
			 * /****************ENDING*******************TO PRINT THE DATA******************************************
			 */

			/**
			 * **************STARTING*****************TO PRINT QUERRY
			 * if(GAfePropertyLoader.DEBUG)
			 * {
			 * strSql.setLength(0); //Initialising
			 * strSql.append("SELECT DESCRIPTION FROM OBJECTDESCRIPTION WHERE DESCRIPTIONID IN ( ");
			 * strSql.append("SELECT DESCRIPTIONID FROM ORDERTYPE WHERE ORDERTYPEID IN ( ");
			 * strSql.append("SELECT ORDERTYPEID FROM \"ORDER\" WHERE ORDERSTATUSTYPEID IN ( ");
			 * strSql.append("SELECT ORDERSTATUSTYPEID FROM ORDERSTATUSTYPE WHERE ORDERSTATUSTYPE = 'New' AND ORDERSTATUSTYPEID IN ( ");
			 * strSql.append("SELECT ORDERSTATUSTYPEID FROM \"ORDER\" WHERE ORDERID IN ( ");
			 * strSql.append("SELECT ORDERID FROM PROCESS WHERE PROCESSID IN ( ");
			 * strSql.append("SELECT PROCESSID FROM PROCESSLINK WHERE OBJECTID = ").append(CustomerProductLineID).append(" AND OBJECTTYPEID = ( ");
			 * strSql.append("SELECT OBJECTTYPEID FROM OBJECTTYPE WHERE OBJECTNAME = 'CUSTOMERPRODUCTLINE' ))))))) ");
			 * System.out.println("The Querry is : " + strSql.toString());
			 * }
			 * /****************ENDING*******************TO PRINT QUERRY*********************************************
			 */
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		// Returning of the Vector
		return vctGetOpenOrder;
	} // Closing Brace of the function

	// END ADD V5.26a

	// BEGIN DELETE V5.27b
	// comment: rollbacking this change done in V5.26a

	/**
	 * //BEGIN ADD V5.26a
	 * //comment: function to check status of open orders
	 * public void vdCheckStatusOfOpenOrders(long lCustomerProductLineID) throws AfeException
	 * {
	 * ObjectTypeRow      objectTypeRow           = null;
	 * ProcessLinkRow processLinkRow = null;
	 *
	 * try
	 * {
	 * if(null == objectTypeTable)
	 * {
	 * objectTypeTable    =       (ObjectType)teleSessionMgr.getMasterTable("OBJECTTYPE");
	 * }
	 *
	 * objectTypeRow      =       objectTypeTable.otrSearchBystrObjectNameandObsolete("CUSTOMERPRODUCTLINE", FINAL_ZERO);
	 *
	 * processLinkRow             = null;
	 * processLinkTable   =       (ProcessLink)teleSessionMgr.getTable("PROCESSLINK");
	 *
	 * Vector     vctObjPLInternal        =       new Vector();
	 *
	 * vctObjPLInternal   =       processLinkTable.vctSearchByObjectIDandObjectTypeIDandObsolete(lCustomerProductLineID, objectTypeRow.lObjectTypeID, FINAL_ZERO);
	 *
	 * if(null != vctObjPLInternal)
	 * {
	 * processTable       =       (Process)teleSessionMgr.getTable("PROCESS");
	 * orderTable         =       (Order)teleSessionMgr.getTable("ORDER");
	 *
	 * if(null == orderType)
	 * {
	 * orderType  =       (OrderType)teleSessionMgr.getMasterTable("ORDERTYPE");
	 * }
	 *
	 * //for each  record in the vector of ProcessLink Records
	 * for(int iCounterOnLink = 0; iCounterOnLink < vctObjPLInternal.size(); iCounterOnLink++)
	 * {
	 * ProcessRow processRow              = null;                                                                                         // Initializing the Object Class for the PROCESS table
	 * processRow =       processTable.prSearchByProcessIDandObsolete(((ProcessLinkRow)(vctObjPLInternal.elementAt(iCounterOnLink))).lProcessID, FINAL_ZERO);
	 *
	 * if(null != processRow)
	 * {
	 * OrderRow   orderRow                = null;
	 * orderRow   =       orderTable.orSearchByOrderIDandObsolete(processRow.lOrderID, FINAL_ZERO);
	 * if(null != orderRow)
	 * {
	 * long lngOrderStatusTypeID  =       0;
	 * lngOrderStatusTypeID       =       orderRow.lOrderStatusTypeID;
	 * if(lngOrderStatusTypeID == GAfeDescription.lGetTypeId("ORDERSTATUSTYPE_NEW") || lngOrderStatusTypeID == GAfeDescription.lGetTypeId("ORDERSTATUSTYPE_COMPLETED"))
	 * {
	 * continue;
	 * }
	 * else
	 * throw new AfeException(GErrorCodes.ERRAFE_00850);
	 * }
	 * }
	 * }
	 * }
	 * }
	 * catch(AfeException afee)
	 * {
	 * throw afee;
	 * }
	 * catch(Exception ex)
	 * {
	 * if(GAfePropertyLoader.DEBUG)
	 * {
	 * GGeneric.printStackTrace(ex,GGeneric.iDebugLevelThree,this);
	 * }
	 * throw new AfeException(GErrorCodes.ERRCOM_00002, ex.getMessage());
	 * }
	 * }
	 * //END ADD V5.26a
	 */
	// END DELETE V5.27b
	// BEGIN ADD V5.27a
	// to get the CustomerProducts and product details
	public Vector vctGetBCustomerProduct_ApplSave(long lAccountId)
			throws AfeException {
		long lProductID = 0;
		Long lngCustomerProductID = null;
		Vector vctBCustomerProductALF = null;
		Vector vctTemp = null;
		Vector vctCustomerProduct = null;
		Vector vctProductInfo = null;
		Hashtable htbCPIds = null;
		CustomerChargeTypeRow cChgTypeRow = null;
		CustomerProductRow cpRow = null;
		BCustomerProductAlf bCustomerProductAlf = null;

		//      BEGIN ADD ver 5.80b
		// Begin DEL v9.01d
		// int iRateClassID = 0;
		// Vector vctRateClassId = new Vector(1);
		// End DEL v9.01d
		Vector vctTempOptionGroupId = null;
		Vector vctBOptionrateid = null;

		// Begin DEL v9.01d
		// BProductRateId objBproductRateId = new BProductRateId();
		// End DEL v9.01d
		// END ADD ver 5.80b
		// BEGIN ADD V5.96N
		Vector vctALFs = null;
		Vector vctInter = null;

		// END ADD V5.96N
		try {

			// get distinct customerproductIDs
			// for all of them form BAccountALF and retrun the vector of such objects
			// sbSql.append("SELECT ch.CUSTOMERPRODUCTID, cp.productid FROM CUSTOMERCHARGETYPE ch, CUSTOMERPRODUCT cp WHERE  ch.CUSTOMERACCOUNTID = ");
			// sbSql.append(lCustomerAccountId);
			// sbSql.append(" AND ch.CUSTOMERPRODUCTLINEID IS NULL AND ch.CUSTOMERPRODUCTID = cp.CUSTOMERPRODUCTID AND ch.OBSOLETE = 0 ");
			// sbSql.append("AND (ch.DEACTIVATIONDATE > SYSDATE OR ch.DEACTIVATIONDATE IS NULL) ORDER BY         ch.CUSTOMERPRODUCTID");
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);

			if (null != customerChargeTypeTable) {
				vctTemp = customerChargeTypeTable
						.vctSearchActiveByCustAccIDNoCPLID(lAccountId);

				if (GAfePropertyLoader.DEBUG) {
					GGeneric.println(
							"LProduct: Vector of CustomerChargeTypeIds = "
									+ vctTemp, GGeneric.iDebugLevelSeven, this);
					GGeneric.println("LProduct: lAccountId = " + lAccountId,
							GGeneric.iDebugLevelSeven, this);
				}

				if (null != vctTemp) {

					// BEGIN ADD V5.96N
					vctALFs = new Vector(1);

					// END ADD V5.96N
					htbCPIds = new Hashtable();

					// BEGIN ADD V7.04m
					customerProductTable = (CustomerProduct) teleSessionMgr
							.getTable(string_CUSTOMERPRODUCT);

					// END ADD V7.04m
					for (int iCount = 0; iCount < vctTemp.size(); iCount++) {
						cChgTypeRow = (CustomerChargeTypeRow) vctTemp
								.elementAt(iCount);
						lngCustomerProductID = Long.valueOf(
								cChgTypeRow.lCustomerProductID);

						// BEGIN ADD V7.04m
						GGeneric.println(
								"LProduct: lngCustomerProductID before checking for STB = "
										+ lngCustomerProductID,
								GGeneric.iDebugLevelSeven, this);

						if (null != customerProductTable) {
							cpRow = customerProductTable
									.cprSearchByCustProductID(lngCustomerProductID
											.longValue());

							// If STB product found then do not add it to vector of CustomerProduct ALF
							if (cpRow != null && !GAfeDescription.bCheckInLongList(
									cpRow.lProductID,
									GAfeConstants.ARR_STB_Products)) {

								// END ADD V7.04m
								// BEGIN ADD V5.96N
								vctInter = new Vector(2);
								vctInter.addElement(lngCustomerProductID);
								vctInter
										.addElement(cChgTypeRow.dtActivationDate);
								vctInter
										.addElement(cChgTypeRow.dtDeactivationDate);
								vctALFs.addElement(vctInter);

								// END ADD V5.96N
								if (GAfePropertyLoader.DEBUG) {
									GGeneric.println("LProduct: cChgTypeRow = "
											+ cChgTypeRow,
											GGeneric.iDebugLevelSeven, this);
									GGeneric.println(
											"LProduct: lngCustomerProductID = "
													+ lngCustomerProductID,
											GGeneric.iDebugLevelSeven, this);
								}

								if (!htbCPIds.containsKey(lngCustomerProductID)) {
									if ((cChgTypeRow.dtDeactivationDate == null)
											|| (cChgTypeRow.dtDeactivationDate
													.compareTo(new Date()) > 0)) // known bug
									{
										if (null == vctCustomerProduct) {
											vctCustomerProduct = new Vector();
										}

										vctCustomerProduct
												.addElement(lngCustomerProductID);

										if (GAfePropertyLoader.DEBUG) {
											GGeneric
													.println(
															"LProduct: vctCustomerProduct = "
																	+ vctCustomerProduct,
															GGeneric.iDebugLevelSeven,
															this);
										}

										htbCPIds.put(lngCustomerProductID,
												"ADD");
									}
								}

								// BEGIN ADD V7.04m
							}
						}

						// END ADD V7.04m
					}
				}

				// now to get productID from customerProduct
				customerProductTable = (CustomerProduct) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCT);

				if (null != customerProductTable) {
					if (null != vctCustomerProduct) {
						for (int iCount = 0; iCount < vctCustomerProduct.size(); iCount++) {
							lngCustomerProductID = (Long) vctCustomerProduct
									.elementAt(iCount);
							cpRow = customerProductTable
									.cprSearchByCustProductID(lngCustomerProductID
											.longValue());

							if (null == vctProductInfo) {
								vctProductInfo = new Vector();
							}

							Vector vctInternal = new Vector();

							vctInternal.addElement(lngCustomerProductID);
							vctInternal.addElement(Long.valueOf(cpRow.lProductID));
							vctProductInfo.addElement(vctInternal);
						}
					}
				}

				if (GAfePropertyLoader.DEBUG) {
					GGeneric.println("LProduct: vctProductInfo = "
							+ vctProductInfo, GGeneric.iDebugLevelSeven, this);
				}

				// form the vctBAccountALFobject for the vectors
				if (null != vctProductInfo) {
					for (int iCount = 0; iCount < vctProductInfo.size(); iCount++) {
						lProductID = ((Long) (((Vector) vctProductInfo
								.elementAt(iCount)).elementAt(1))).longValue();
						bCustomerProductAlf = new BCustomerProductAlf();

						// BEGIN DELETE V5.80c
						// bCustomerProductAlf.vctOptionGroupId = vctGetOptionGrId(lProductID);
						// END DELETE V5.80c
						bCustomerProductAlf.vctForbiddenProductId = vctGetForbiddenId(lProductID);
						bCustomerProductAlf.lCustomerProductId = ((Long) (((Vector) vctProductInfo
								.elementAt(iCount)).elementAt(0))).longValue();
						bCustomerProductAlf.lProductId = lProductID;
						bCustomerProductAlf.vctProductIdInvolved = vctGetProductType(lProductID);

						// BEGIN ADD V5.96N
						// Add the ActivationDate and the Decativationdates retrieved in to the object
						for (int iCnt = 0; iCnt < vctALFs.size(); iCnt++) {
							Vector vctInternal = (Vector) vctALFs
									.elementAt(iCnt);

							if (bCustomerProductAlf.lCustomerProductId == ((Long) vctInternal
									.elementAt(0)).longValue()) {
								bCustomerProductAlf.dtActDate = ((Date) vctInternal
										.elementAt(1)); // for Activation Date
								bCustomerProductAlf.dtDeActDate = ((Date) vctInternal
										.elementAt(2)); // for Deactivation Date
							}
						}

						// END ADD V5.96N

						//                      BEGIN ADD ver 5.80c
						vctTempOptionGroupId = vctGetOptionGrId(lProductID);
						vctBOptionrateid = vctBGetOptionGrRateId(vctTempOptionGroupId);

						// BEGIN ADD V6.04a
						if (null != vctBOptionrateid) {

							// END ADD V6.04a
							for (int iOptionrateid = 0; iOptionrateid < vctBOptionrateid
									.size(); iOptionrateid++) {
								if (null == bCustomerProductAlf.vctOptionGroupId) {
									bCustomerProductAlf.vctOptionGroupId = new Vector(
											1);
								}

								if (null == bCustomerProductAlf.vctRateClassID) {
									bCustomerProductAlf.vctRateClassID = new Vector(
											1);
								}

								bCustomerProductAlf.vctOptionGroupId
										.addElement(Long.valueOf(
												((BOptionRateId) vctBOptionrateid
														.elementAt(iOptionrateid))
														.getOptionGroupId()));
								bCustomerProductAlf.vctRateClassID
										.addElement(Integer.valueOf(
												((BOptionRateId) vctBOptionrateid
														.elementAt(iOptionrateid))
														.getRateClassId()));
							}

							// BEGIN ADD V6.04a
						}

						// END ADD V6.04a

						// END ADD ver 5.80c
						if (null == vctBCustomerProductALF) {
							vctBCustomerProductALF = new Vector(1);
						}

						vctBCustomerProductALF.addElement(bCustomerProductAlf);
					}
				}

				if (GAfePropertyLoader.DEBUG) {
					GGeneric.println("LProduct: vctBCustomerProductALF = "
							+ vctBCustomerProductALF,
							GGeneric.iDebugLevelSeven, this);
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}

		return vctBCustomerProductALF;
	}

	// To get the customerProductlineIDs
	// BEGIN DELETE V5.80c
	// public Vector vctGetCustomerProductLine_ApplSave (long lAccountId) throws AfeException
	// END DELETE V5.80c
	// BEGIN ADD V5.80c
	public Vector vctGetBCustomerProductLine_ApplSave(long lAccountId)
			throws AfeException

	// END ADD V5.80c
	{
		Vector vctTemp = null;

		// BEGIN DELETE V5.80c
		// Vector vctCustomerProductLine = null;
		// END DELETE V5.80c
		// BEGIN ADD V5.80c
		Vector vctBCustomerProductLine = null;

		// END ADD V5.80c
		// Begin DEL v9.01d
		// Hashtable htbCPLIds = null;
		// Long lCustomerPLID = null;
		// CustomerProductLineRow cCustomerProductLineRow = null;
		// BEGIN ADD V5.80c
		// BCustomerProductLine objBCustomerProductLine = new BCustomerProductLine();
		// CustomerProductLineRow customerproductlinerow = new CustomerProductLineRow();
		// BEGIN ADD VER 5.91a
		// CustomerChargeTypeRow customerChargeTypeRow = new CustomerChargeTypeRow();
		// End DEL v9.01d
		Vector vctCustomerProductLine = new Vector(1);

		// END ADD VER 5.91a
		// Begin DEL v9.01d
		// Vector vctCustomerProductLineRow = new Vector(1);
		// End DEL v9.01d
		// END ADD V5.80c

		try {

			// get the distinct customerproductlines with deactivation date > sysdate or deactivationdate as NULL
			// sql query:
			// SELECT DISTINCT(CUSTOMERPRODUCTLINEID) FROM CUSTOMERCHARGETYPE WHERE customerproductid is null
			// and CUSTOMERACCOUNTID =?  AND OBSOLETE=0
			// AND ((FORMAT_DATE(DEACTIVATIONDATE,'dd-mon-yyyy') >= FORMAT_DATE(SYSDATE,'dd-mon-yyyy')) OR (DEACTIVATIONDATE IS NULL))
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);
			GLogger.chkpt("LProduct.vctGetCustomerProductLine_ApplSave");

			if (null != customerChargeTypeTable) {
				vctTemp = customerChargeTypeTable
						.vctSearchByCustAccIDNoCPID(lAccountId);

				// BEGIN ADD VER 5.91a
				if ((null != vctTemp) && (vctTemp.size() > 0)) {
					for (int iProductLine = 0; iProductLine < vctTemp.size(); iProductLine++) {
						vctCustomerProductLine
								.addElement(Long.valueOf(
										((CustomerChargeTypeRow) vctTemp
												.elementAt(iProductLine)).lCustomerProductLineID));
					}
				}

				// END ADD VER 5.91a

				//              BEGIN ADD V5.80c
				// BEGIN ADD VER 5.91a
				if (null != vctCustomerProductLine) {
					vctBCustomerProductLine = vctBCustomerProductLineRow(vctCustomerProductLine);
				}

				// END ADD VER 5.91a
				// BEGIN DELETE VER 5.91a

				/*
				 *                       if (null != vctTemp)
				 *           {
				 *
				 *               vctBCustomerProductLine = vctBCustomerProductLineRow(vctTemp);
				 *           }
				 */

				// END DELETE VER 5.91a
				// END ADD V5.80c
			}

			GLogger
					.chkpt("LProduct.vctGetCustomerProductLine_ApplSave: vctCustomerProductLine = "
							+ vctBCustomerProductLine);
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}

		// BEGIN DELETE V5.80c
		// return vctCustomerProductLine;
		// END DELETE V5.80c
		// BEGIN ADD V5.80c
		return vctBCustomerProductLine;

		// END ADD V5.80c
	}

	// to get the product IDs
	public long lGetProductId__ApplSave(long lCustomerProductLineID)
			throws AfeException {
		long lProductID = 0;
		CustomerProductLineRow cplRow = null;

		// Begin DEL v9.01d
		// BProductRateId objBProductRateId = new BProductRateId();
		// End DEL v9.01d

		try {
			customerProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE);

			if (GAfePropertyLoader.DEBUG) {
				GGeneric.println("LProduct.lCustomerProductLineID = "
						+ lCustomerProductLineID, GGeneric.iDebugLevelSeven,
						this);
			}

			if (null != customerProductLineTable) {
				cplRow = (CustomerProductLineRow) customerProductLineTable
						.cplrSearchByCustProductLineID(lCustomerProductLineID);

				if (null != cplRow) {
					lProductID = cplRow.lProductID;
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}

		return lProductID;
	}

	// supporting functions
	public Vector vctGetOptionGrId(long lProductID) throws AfeException {
		Hashtable htbOpGrpIDs = null;
		Vector vctTemp = null;
		Vector vctOptionGroupIDs = null;
		Long lngOptionGroupID = null;
		OptionProductRow optionProductRow = null;

		try {

			// get all optiongroupIds for the product from option product (??)wht about the valid ones
			optionProductTable = (OptionProduct) teleSessionMgr
					.getMasterTable(string_OPTIONPRODUCT); // wht bout multiple option groupIDs entry (??)

			if (null != optionProductTable) {
				vctTemp = optionProductTable.vctSearchByProductID(lProductID);

				if (null != vctTemp) {
					if (GAfePropertyLoader.DEBUG) {
						GGeneric.println(
								"LProduct.vctGetOptionGrId: lProductID = "
										+ lProductID,
								GGeneric.iDebugLevelSeven, this);
						GGeneric.println(
								"LProduct.vctGetOptionGrId: vctTemp = "
										+ vctTemp, GGeneric.iDebugLevelSeven,
								this);
					}

					htbOpGrpIDs = new Hashtable();

					for (int iCount = 0; iCount < vctTemp.size(); iCount++) {
						optionProductRow = (OptionProductRow) vctTemp
								.elementAt(iCount);
						lngOptionGroupID = Long.valueOf(
								optionProductRow.lOptionGroupID);

						if (!(htbOpGrpIDs.containsKey(lngOptionGroupID))
								&& (optionProductRow.iObsolete == 0)) {
							if (null == vctOptionGroupIDs) {
								vctOptionGroupIDs = new Vector();
							}

							vctOptionGroupIDs.addElement(lngOptionGroupID);
							htbOpGrpIDs.put(lngOptionGroupID, "ADD");
						}
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}

		if (GAfePropertyLoader.DEBUG) {
			GGeneric.println("LProduct.vctGetOptionGrId: vctOptionGroupIDs = "
					+ vctOptionGroupIDs, GGeneric.iDebugLevelSeven, this);
		}

		return vctOptionGroupIDs;
	}

	// function for forbiddenproductIDs
	public Vector vctGetForbiddenId(long lProductID) throws AfeException {
		Hashtable htbForbPIDs = null;
		Vector vctTemp = null;
		Vector vctForbPIDs = null;
		Long lngForbiddenPID = null;
		ForbiddenProductRow forbiddenProductRow = null;

		// get all forbproductIDs for the product (??)wht about the valid ones
		try {

			// get all optiongroupIds for the product from option product (??)wht about the valid ones
			forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
					.getMasterTable(string_FORBIDDENPRODUCT); //

			if (null != forbiddenProductTable) {
				vctTemp = forbiddenProductTable
						.vctSearchByProductID(lProductID);

				if (null != vctTemp) {
					htbForbPIDs = new Hashtable();

					for (int iCount = 0; iCount < vctTemp.size(); iCount++) {
						forbiddenProductRow = (ForbiddenProductRow) vctTemp
								.elementAt(iCount);
						lngForbiddenPID = Long.valueOf(
								forbiddenProductRow.lForbiddenProductID);

						if (!(htbForbPIDs.containsKey(lngForbiddenPID))
								&& (forbiddenProductRow.iObsolete == 0)) {
							if (null == vctForbPIDs) {
								vctForbPIDs = new Vector();
							}

							vctForbPIDs.addElement(lngForbiddenPID);
							htbForbPIDs.put(lngForbiddenPID, "ADD");
						}
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}

		return vctForbPIDs;
	}

	// function for getting involved products
	public Vector vctGetProductType(long lProductID) throws AfeException {
		Vector vctOptionGrIDs = null;
		Vector vctOptionGrpRows = null;
		Vector vctProductIDs = null;
		Hashtable htbOpGrpIDs = null;
		Hashtable htbPIDs = null;
		Long lngOptionGroupID = null;
		Long lngProductID = null;
		OptionGroupRow optionGroupRow = null;
		java.sql.Date dtSysdate = null;

		// select distinct(productid) from optiongroup where optiongroupid in (select optiongroupid from optionproduct where productid =?)
		try {
			dtSysdate = new java.sql.Date(System.currentTimeMillis());
			optionGroupTable = (OptionGroup) teleSessionMgr
					.getMasterTable(string_OPTIONGROUP);
			vctOptionGrIDs = vctGetOptionGrId(lProductID);
			GLogger.chkpt("LProduct.vctGetProductType: lProductID = "
					+ lProductID);

			if (null != vctOptionGrIDs) {
				htbOpGrpIDs = new Hashtable();

				for (int iCount = 0; iCount < vctOptionGrIDs.size(); iCount++) {
					htbOpGrpIDs.put((Long) vctOptionGrIDs.elementAt(iCount),
							"ADD");
				}

				vctOptionGrpRows = optionGroupTable.vctGetAllExisting();

				if (null != vctOptionGrpRows) {
					htbPIDs = new Hashtable();

					for (int iCount = 0; iCount < vctOptionGrpRows.size(); iCount++) {
						optionGroupRow = (OptionGroupRow) vctOptionGrpRows
								.elementAt(iCount);
						lngOptionGroupID = Long.valueOf(
								optionGroupRow.lOptionGroupID);
						lngProductID = Long.valueOf(optionGroupRow.lProductID);

						if (GAfePropertyLoader.DEBUG) {
							GGeneric.println(
									"LProduct.vctGetProductType: optionGroupRow = "
											+ optionGroupRow,
									GGeneric.iDebugLevelSeven, this);
							GGeneric.println(
									"LProduct.vctGetProductType: lngOptionGroupID = "
											+ lngOptionGroupID,
									GGeneric.iDebugLevelSeven, this);
							GGeneric.println(
									"LProduct.vctGetProductType: lngProductID = "
											+ lngProductID,
									GGeneric.iDebugLevelSeven, this);
						}

						if (htbOpGrpIDs.containsKey(lngOptionGroupID)) // to add product into the vector
						{
							if (!(htbPIDs.containsKey(lngProductID))
									&& (optionGroupRow.iObsolete == 0)
									&& (optionGroupRow.dtValidFrom.toString())
											.compareTo(dtSysdate.toString()) <= 0
									&& (optionGroupRow.dtValidTo.toString())
											.compareTo(dtSysdate.toString()) >= 0) {
								if (null == vctProductIDs) {
									vctProductIDs = new Vector();
								}

								vctProductIDs.addElement(lngProductID);
								htbPIDs.put(lngProductID, "ADD");
							}
						}
					}
				}
			}

			if (GAfePropertyLoader.DEBUG) {
				GGeneric.println("LProduct.vctGetProductType: vctProductIDs = "
						+ vctProductIDs, GGeneric.iDebugLevelSeven, this);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}
		}

		return vctProductIDs;
	}

	// function to make the old products obsolete
	public void vDeleteProduct_ApplSave(Vector vctBDeletedCustomerProductAlf,
			Vector vctCustomerProductIdIn, String strDeletionDate,
			long lDeActivationProcessId, String strCreationUser, int iObsolete)
			throws AfeException {
		CustomerProductRow customerProductRow = null;
		CustomerChargeTypeRow customerChargeTypeRow = null;
		CustomerProductParameterRow customerProductParameterRow = null;
		BCustomerProductAlf bCustomerProductAlf = null;
		Vector vctCustomerProductId = new Vector();

		// Begin DEL v9.01d
		// Date dtCurrentDate = new Date();
		// End DEL v9.01d
		try {
			if (null == objectTypeTable) {
				objectTypeTable = (ObjectType) teleSessionMgr
						.getMasterTable(string_OBJECTTYPE);
			}

			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT);
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);
			customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTPARAMETER);
			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable(string_PROCESSLINK);

			if (0 == lDeActivationProcessId) {
				iObsolete = 1;
			} else {
				iObsolete = 0;
			}

			if ((null != vctBDeletedCustomerProductAlf)
					&& (null == vctCustomerProductIdIn)) {
				for (int iCounterOnProduct = 0; iCounterOnProduct < vctBDeletedCustomerProductAlf
						.size(); iCounterOnProduct++) {
					bCustomerProductAlf = (BCustomerProductAlf) vctBDeletedCustomerProductAlf
							.elementAt(iCounterOnProduct);
					vctCustomerProductId.addElement(Long.valueOf(
							bCustomerProductAlf.lCustomerProductId));
				}
			}

			if (null != vctCustomerProductIdIn) {
				for (int iCounterOnProduct = 0; iCounterOnProduct < vctCustomerProductIdIn
						.size(); iCounterOnProduct++) {
					vctCustomerProductId
							.addElement((Long) vctCustomerProductIdIn
									.elementAt(iCounterOnProduct));
				}
			}

			for (int iCounterOnProduct = 0; iCounterOnProduct < vctCustomerProductId
					.size(); iCounterOnProduct++) {
				long lCustomerProductID = ((Long) (vctCustomerProductId
						.elementAt(iCounterOnProduct))).longValue();

				// Update CustomerProductTable
				customerProductRow = customerProductTable
						.cprSearchByCustProductIDandObsolete(
								lCustomerProductID, FINAL_ZERO);

				if (null != customerProductRow) {
					if (customerProductRow.iStatusInDB != Record.INSERT) {
						customerProductRow.iStatusInDB = Record.UPDATE;
						customerProductRow.dtDeactivationDate = new java.text.SimpleDateFormat(
								"yyyy-MM-dd").parse(strDeletionDate);
						customerProductRow.iObsolete = iObsolete;
						customerProductTable.updateRecord(customerProductRow);
					} else {
						customerProductTable
								.deleteRecord(customerProductRow.lCustomerProductID);
					}
				}

				// Update CustomerChargeType table
				Vector vctChargeTypeRows = null;

				vctChargeTypeRows = customerChargeTypeTable
						.vctSearchActiveByCustomerProductID(lCustomerProductID);

				if (null != vctChargeTypeRows) {
					for (int iCounterOnCharge = 0; iCounterOnCharge < vctChargeTypeRows
							.size(); iCounterOnCharge++) {
						customerChargeTypeRow = (CustomerChargeTypeRow) vctChargeTypeRows
								.elementAt(iCounterOnCharge);

						if (customerChargeTypeRow.iStatusInDB != Record.INSERT) {
							customerChargeTypeRow.iStatusInDB = Record.UPDATE;
							customerChargeTypeRow.dtDeactivationDate = new java.text.SimpleDateFormat(
									"yyyy-MM-dd").parse(strDeletionDate);
							customerChargeTypeRow.iObsolete = iObsolete;
							customerChargeTypeTable
									.updateRecord(customerChargeTypeRow);
						} else {
							customerChargeTypeTable
									.deleteRecord(customerChargeTypeRow.lCustomerChargeTypeID);
						}
					}
				}

				// Update CustomerProductParameter rows
				Vector vctParameterRows = null;

				vctParameterRows = customerProductParameterTable
						.vctSearchByActiveCustomerProductID(lCustomerProductID);

				if (null != vctParameterRows) {
					for (int iCounterOnParameter = 0; iCounterOnParameter < vctParameterRows
							.size(); iCounterOnParameter++) {
						customerProductParameterRow = (CustomerProductParameterRow) vctParameterRows
								.elementAt(iCounterOnParameter);

						if (customerProductParameterRow.iStatusInDB != Record.INSERT) {
							customerProductParameterRow.iStatusInDB = Record.UPDATE;
							customerProductParameterRow.dtDeactivationDate = new java.text.SimpleDateFormat(
									"yyyy-MM-dd").parse(strDeletionDate);
							customerProductParameterRow.iObsolete = iObsolete;
							customerProductParameterTable
									.updateRecord(customerProductParameterRow);
						} else {
							customerProductParameterTable
									.deleteRecord(customerProductParameterRow.lCustomerProductParameterID);
						}
					}
				}

				if (lDeActivationProcessId != 0) // Make entry in the ProcessLink table
				{
					ObjectTypeRow objTypeRow = (ObjectTypeRow) objectTypeTable
							.otrSearchByObjectName(string_CUSTOMERPRODUCT);
					ProcessLinkRow processLinkRow = new ProcessLinkRow();

					processLinkRow.iStatusInDB = Record.INSERT;
					processLinkRow.lProcessLinkID = processLinkRow.lNewNr();
					processLinkRow.lProcessID = lDeActivationProcessId;
					processLinkRow.lObjectID = lCustomerProductID;
					processLinkRow.lObjectTypeID = objTypeRow.lObjectTypeID;
					processLinkRow.strModificationUser = strCreationUser;
					processLinkRow.strCreationUser = strCreationUser;
					processLinkTable.addUniqueRecord(processLinkRow);
				}
			}

			teleSessionMgr.putTable(string_CUSTOMERPRODUCT, customerProductTable);
			teleSessionMgr.putTable(string_CUSTOMERCHARGETYPE,
					customerChargeTypeTable);
			teleSessionMgr.putTable(string_CUSTOMERPRODUCTPARAMETER,
					customerProductParameterTable);
			teleSessionMgr.putTable(string_PROCESSLINK, processLinkTable);
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(GErrorCodes.ERRCOM_00002, ex.getMessage());
		}
	}

	// function to add new products except for the NRC ones
	public int iUpdateDatabase_ApplSave(long lCustomerProductId,
			long lProductId, java.sql.Date dtActivationDate,
			long lCustomerAccountId, String strCreationUser,
			long lActivationProcessId) throws AfeException {
		CustomerProductRow customerProductRow = null;
		CustomerProductRow customerProductRowTemp = null;
		CustomerChargeTypeRow customerChargeTypeRow = null;
		CustomerProductParameterRow customerProductParameterRow = null;

		// Begin DEL v9.01d
		// Date dtSysDate = new Date();
		// End DEL v9.01d
		int iStatusUpdate = 0;

		try {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.println(
						"LProduct.iUpdateDatabase_ApplSave: lCustomerProductId = "
								+ lCustomerProductId,
						GGeneric.iDebugLevelSeven, this);
				GGeneric.println(
						"LProduct.iUpdateDatabase_ApplSave: lProductId = "
								+ lProductId, GGeneric.iDebugLevelSeven, this);
				GGeneric.println(
						"LProduct.iUpdateDatabase_ApplSave: dtActivationDate = "
								+ dtActivationDate, GGeneric.iDebugLevelSeven,
						this);
				GGeneric.println(
						"LProduct.iUpdateDatabase_ApplSave: lCustomerAccountId = "
								+ lCustomerAccountId,
						GGeneric.iDebugLevelSeven, this);
				GGeneric.println(
						"LProduct.iUpdateDatabase_ApplSave: strCreationUser = "
								+ strCreationUser, GGeneric.iDebugLevelSeven,
						this);
				GGeneric.println(
						"LProduct.iUpdateDatabase_ApplSave: lActivationProcessId = "
								+ lActivationProcessId,
						GGeneric.iDebugLevelSeven, this);
			}

			// get details for : CustomerProductID, ProductID
			// add a new row in CustomerProduct with same price setting ID

			// get details for : CustomerProductParameter for the CustomerID
			// add new rows for the new CustomerProductID
			// get details of old customerchargeType rows
			// add new rows for all charge Types except NRC
			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCT);
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);
			customerProductParameterTable = (CustomerProductParameter) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTPARAMETER);
			processLinkTable = (ProcessLink) teleSessionMgr
					.getTable("PROCESSLINKTABLE");

			if (null == objectTypeTable) {
				objectTypeTable = (ObjectType) teleSessionMgr
						.getMasterTable(string_OBJECTTYPE);
			}

			customerProductRow = customerProductTable
					.cprSearchByCustProductID(lCustomerProductId);

			if (GAfePropertyLoader.DEBUG) {
				GGeneric.println(
						"LProduct.iUpdateDatabase_ApplSave: customerProductRow = "
								+ customerProductRow,
						GGeneric.iDebugLevelSeven, this);
			}

			if (null != customerProductRow) {

				// INSERT INTO CUSTOMERPRODUCT TABLE FOR THE SAME PRICESETTING
				customerProductRowTemp = new CustomerProductRow();
				customerProductRowTemp.iStatusInDB = Record.INSERT;
				customerProductRowTemp.lCustomerProductID = customerProductRowTemp
						.lNewNr();
				customerProductRowTemp.lProductID = customerProductRow.lProductID;
				customerProductRowTemp.lPriceSettingID = customerProductRow.lPriceSettingID;
				customerProductRowTemp.lCustomerProductLineID = customerProductRow.lCustomerProductLineID;
				customerProductRowTemp.lCustomerPLIdentifierID = customerProductRow.lCustomerPLIdentifierID;
				customerProductRowTemp.strModificationUser = strCreationUser;
				customerProductRowTemp.strCreationUser = strCreationUser;
				customerProductRowTemp.dtActivationDate = dtActivationDate;
				customerProductTable.addUniqueRecord(customerProductRowTemp);
				iStatusUpdate = 1;
			}

			teleSessionMgr.putTable(string_CUSTOMERPRODUCT, customerProductTable);

			if (GAfePropertyLoader.DEBUG) {
				GGeneric
						.println(
								"LProduct.iUpdateDatabase_ApplSave: customerProductRowTemp.lCustomerProductID = "
										+ customerProductRowTemp.lCustomerProductID,
								GGeneric.iDebugLevelSeven, this);
			}

			Vector vctChargeRows = null;

			vctChargeRows = customerChargeTypeTable
					.vctSearchByCustomerProductID(lCustomerProductId); // This function will be added to CustomerChargeType

			if (null != vctChargeRows) {
				for (int iCounterOnCharge = 0; iCounterOnCharge < vctChargeRows
						.size(); iCounterOnCharge++) {
					customerChargeTypeRow = (CustomerChargeTypeRow) vctChargeRows
							.elementAt(iCounterOnCharge);

					if ((customerChargeTypeRow.lCustomerProductID == lCustomerProductId)
							&& (customerChargeTypeRow.lChargeTypeID != GAfeDescription
									.lGetTypeId(string_CHARGETYPE_NRC))) {
						CustomerChargeTypeRow customerChargeTypeRowTemp = new CustomerChargeTypeRow();

						customerChargeTypeRowTemp.iStatusInDB = Record.INSERT;
						customerChargeTypeRowTemp.lCustomerProductID = customerProductRowTemp.lCustomerProductID;
						customerChargeTypeRowTemp.lCustomerChargeTypeID = customerChargeTypeRowTemp
								.lNewNr();
						customerChargeTypeRowTemp.lCustomerAccountID = lCustomerAccountId;
						customerChargeTypeRowTemp.lCustomerProductLineID = customerChargeTypeRow.lCustomerProductLineID;
						customerChargeTypeRowTemp.lChargeTypeID = customerChargeTypeRow.lChargeTypeID;
						customerChargeTypeRowTemp.dtActivationDate = dtActivationDate;
						customerChargeTypeRowTemp.strModificationUser = strCreationUser;
						customerChargeTypeRowTemp.strCreationUser = strCreationUser;
						customerChargeTypeRowTemp.iObsolete = FINAL_ZERO;
						customerChargeTypeTable
								.addUniqueRecord(customerChargeTypeRowTemp);
					}
				}

				iStatusUpdate = 1;
			}

			teleSessionMgr.putTable(string_CUSTOMERCHARGETYPE,
					customerChargeTypeTable);

			Vector vctParameterRows = null;

			vctParameterRows = customerProductParameterTable
					.vctSearchByCustomerProductID(lCustomerProductId);

			if (null != vctParameterRows) {
				for (int iCounterOnParameter = 0; iCounterOnParameter < vctParameterRows
						.size(); iCounterOnParameter++) {
					customerProductParameterRow = (CustomerProductParameterRow) vctParameterRows
							.elementAt(iCounterOnParameter);

					CustomerProductParameterRow customerProductParameterRowTemp = new CustomerProductParameterRow();

					customerProductParameterRowTemp.iStatusInDB = Record.INSERT;
					customerProductParameterRowTemp.lCustomerProductParameterID = customerProductParameterRowTemp
							.lNewNr();
					customerProductParameterRowTemp.lCustomerProductID = customerProductRowTemp.lCustomerProductID;
					customerProductParameterRowTemp.dtActivationDate = dtActivationDate;
					customerProductParameterRowTemp.strCustomerProductParameterValue = customerProductParameterRow.strCustomerProductParameterValue;
					customerProductParameterRowTemp.lProductParameterID = customerProductParameterRow.lProductParameterID;
					customerProductParameterRowTemp.strModificationUser = strCreationUser;
					customerProductParameterRowTemp.strCreationUser = strCreationUser;
					customerProductParameterTable
							.addUniqueRecord(customerProductParameterRowTemp);
				}

				iStatusUpdate = 1;
			}

			teleSessionMgr.putTable(string_CUSTOMERPRODUCTPARAMETER,
					customerProductParameterTable);

			if (lActivationProcessId != 0) // Make entry in the ProcessLink table
			{
				ObjectTypeRow objTypeRow = (ObjectTypeRow) objectTypeTable
						.otrSearchByObjectName(string_CUSTOMERPRODUCT);
				ProcessLinkRow processLinkRow = new ProcessLinkRow();

				processLinkRow.iStatusInDB = Record.INSERT;
				processLinkRow.lProcessLinkID = processLinkRow.lNewNr();
				processLinkRow.lProcessID = lActivationProcessId;
				processLinkRow.lObjectID = customerProductRowTemp.lCustomerProductID;
				processLinkRow.lObjectTypeID = objTypeRow.lObjectTypeID;
				processLinkRow.strModificationUser = strCreationUser;
				processLinkRow.strCreationUser = strCreationUser;
				processLinkTable.addUniqueRecord(processLinkRow);
			}

			teleSessionMgr.putTable(string_PROCESSLINK, processLinkTable);
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(GErrorCodes.ERRCOM_00002, ex.getMessage());
		}

		return iStatusUpdate;
	}

	public Date dtGetActivationDate(Long lCustomerProductLineID)
			throws AfeException {
		CustomerProductLineRow customerProductLineRow = null;
		Date dtActivationDate = null;

		try {
			if (null != lCustomerProductLineID) {
				customerProductLineTable = (CustomerProductLine) teleSessionMgr
						.getTable(string_CUSTOMERPRODUCTLINE);
				customerProductLineRow = customerProductLineTable
						.cplrSearchByCustProductLineID(lCustomerProductLineID
								.longValue());
				dtActivationDate = customerProductLineRow.dtActivationDate;
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(GErrorCodes.ERRCOM_00002, ex.getMessage());
		}

		return dtActivationDate;
	}

	public long lGetProcessID(Long lCustomerProductLineID, long lProcessType)
			throws AfeException {
		ProcessRow processRow = null;
		ProcessLinkRow processLinkRow = null;
		Vector vctProcessLinks = null;
		long lProcessID = 0;

		try {
			if (null != lCustomerProductLineID) {
				processTable = (Process) teleSessionMgr.getTable(string_PROCESS);
				processLinkTable = (ProcessLink) teleSessionMgr
						.getTable(string_PROCESSLINK);
				vctProcessLinks = processLinkTable
						.vctSearchByObjectIDandObjectTypeIDandObsolete(
								lCustomerProductLineID.longValue(),
								GAfeDescription
										.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE),
								FINAL_ZERO);

				if (null != vctProcessLinks) {
					for (int iCounterOnLink = 0; iCounterOnLink < vctProcessLinks
							.size(); iCounterOnLink++) {
						processLinkRow = (ProcessLinkRow) vctProcessLinks
								.elementAt(iCounterOnLink);
						processRow = processTable
								.prSearchByProcessID(processLinkRow.lProcessID);

						if ((null != processRow)
								&& (processRow.lProcessTypeID == lProcessType)) {
							lProcessID = processRow.lProcessID;

							break;
						}
					}
				}
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(GErrorCodes.ERRCOM_00002, ex.getMessage());
		}

		return lProcessID;
	}

	// END ADD V5.27a

	// BEGIN ADD V5.30a
	// comment: method added to set right value in BillTypeId field for newly created accounts
	// BEGIN DELETE Vs
	// public void vUpdateBillTypeID (long lCustomerProductLineId, long lBillCycleID, long lChargeType) throws AfeException
	// END DELETE V5.75a
	// BEGIN ADD V5.75a
	public void vUpdateBillTypeID(
			BProductDetailProperty objBProductDetailProperty,
			long lBillCycleID, long lChargeType, BProductRole objBProductRole)
			throws AfeException {
		long lCustomerProductLineId = 0;

		// BEGIN DELETE V6.03a
		// boolean bAccountUpdated = false;
		// END ADD V5.75a
		// END DELETE V6.03a
		try {
			customerChargeTypeTable = (CustomerChargeType) teleSessionMgr
					.getTable(string_CUSTOMERCHARGETYPE);
			customerAccountTable = (CustomerAccount) teleSessionMgr
					.getTable("CUSTOMERACCOUNT");

			if ((null != customerChargeTypeTable)
					&& (null != customerAccountTable)) {

				// BEGIN ADD V5.75a
				lCustomerProductLineId = objBProductDetailProperty.lCustomerProductLineID
						.longValue();

				// END ADD V5.75a
				Vector vctChargeTypeRows = null;

				vctChargeTypeRows = customerChargeTypeTable
						.vctSearchByCustomerProductLineIDAndChargeTypeID(
								lCustomerProductLineId, lChargeType, FINAL_ZERO);

				if (null != vctChargeTypeRows) {
					long lCustomerAccountID = 0;

					for (int iCounterOnChargeType = 0; iCounterOnChargeType < vctChargeTypeRows
							.size(); iCounterOnChargeType++) {
						lCustomerAccountID = ((CustomerChargeTypeRow) vctChargeTypeRows
								.elementAt(iCounterOnChargeType)).lCustomerAccountID;

						CustomerAccountRow customerAccountRow = null;

						customerAccountRow = customerAccountTable
								.crSearchByCustomerAccountID(lCustomerAccountID);

						if ((null != customerAccountRow)
								&& (customerAccountRow.iStatusInDB == Record.INSERT)
								&& (customerAccountRow.iObsolete == 0)) {
							customerAccountRow.lBillCycleID = lBillCycleID;
							customerAccountTable
									.updateRecord(customerAccountRow);

							// BEGIN DELETE V6.03a
							// BEGIN ADD V5.75a
							// bAccountUpdated = true;
							// END ADD V5.75a
							// END DELETE V6.03a
						}
					}

					teleSessionMgr.putTable("CUSTOMERACCOUNT",
							customerAccountTable);
				}

				// BEGIN DELETE V6.03a
				// BEGIN ADD V5.75a

				/*
				 * GLogger.debug(CLASS_NAME, "vUpdateBillTypeID", "bAccountUpdated = " + bAccountUpdated);
				 * if (!bAccountUpdated && objBProductDetailProperty.lProductID.longValue() !=
				 *       GAfeDescription.PRODUCT_ANALOGTV) {
				 *   updateAccountForTVOnlyCustomers(lCustomerProductLineId, lBillCycleID,
				 *           objBProductRole, lChargeType, teleSessionMgr);
				 * }
				 */

				// END ADD V5.75a
				// END DELETE V6.03a
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(GErrorCodes.ERRCOM_00002, ex.getMessage());
		}
	}

	// END ADD V5.30a

	// 5.36a Begin Add

	/**
	 * Returns a boolean check whether the customer is residencial customer or not.
	 *
	 * @param lCustomerID
	 * @throws AfeException
	 */
	public boolean bCheckResidencialCustomer(Long lCustomerID)
			throws AfeException {
		boolean bResidencial = false;

		try {
			CustomerProfileRow customerProfileRow = null;

			customerProfileTable = (CustomerProfile) teleSessionMgr
					.getTable("CUSTOMERPROFILE"); // Getting the Customer table from the session
			customerProfileRow = (CustomerProfileRow) customerProfileTable
					.cprSearchByCustIDandObsolete(lCustomerID.longValue(),
							FINAL_ZERO);

			if (null != customerProfileRow) {
				if (GAfeDescription.strGetProperty("SEGMENT_RESIDENTIAL")
						.equalsIgnoreCase(
								String.valueOf(customerProfileRow.lSegmentID))) {
					bResidencial = true;
				} // end of the if loop
				else {
					bResidencial = false;
				} // end of the else loop of the if case
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(GErrorCodes.ERRCOM_00002, ex.getMessage());
		}

		return bResidencial;
	}

	// 5.36a End Add

	// BEGIN ADD V5.36b
	// comment: add method for installer invoicing

	/**
	 * Returns a String with vector with eigen schappen for a given customerproductlineid
	 *
	 * @param lCustomerProductLineId the CustomerProductlineID for which eigen schappen is required
	 * @return strReturn with eigen schappen for a given customerproductlineid
	 *
	 * @throws Exception
	 */
	public static String strShortDescription(long lCustomerProductLineId)
			throws Exception {
		String strReturn;
		ResultSet rsQuery = null;
		PreparedStatement psQuery = null;
		StringBuffer sbfShortDescp = null;

		GLogger.logEntry(CLASS_NAME, METHOD_STREIGENSCHAPPEN);
		GLogger.logInput(CLASS_NAME, ARG_CUSTOMERPRODUCTLINEID,
				lCustomerProductLineId);

		try {
			psQuery = GConnectAfe.psPrepareStatement(GAfeSql.S_EIGENSCHAPPEN);
			psQuery.setLong(1, lCustomerProductLineId);
			rsQuery = psQuery.executeQuery();
			sbfShortDescp = new StringBuffer();

			while (rsQuery.next()) {

				// BEGIN DELETE V5.54

				/*
				 * if (null!=rsQuery.getString("SHORTDESCRIPTION"))
				 * {
				 *   sbfShortDescp.append(rsQuery.getString("SHORTDESCRIPTION"));
				 *   sbfShortDescp.append(SLASH);
				 * }
				 */

				// END DELETE V5.54
				// BEGIN ADD V5.54
				String strShortDesc = rsQuery.getString("SHORTDESCRIPTION");

				if ((null != strShortDesc)
						&& (!("".equals(strShortDesc.trim())))) {
					sbfShortDescp.append(strShortDesc);
					sbfShortDescp.append(SLASH);
				}

				// END ADD V5.54
			}

			strReturn = sbfShortDescp.toString();
			GConnectAfe.close(rsQuery);
			GConnectAfe.close(psQuery);
		} finally {
			GConnectAfe.close(rsQuery);
			GConnectAfe.close(psQuery);
		}

		GLogger.logOutput(CLASS_NAME, METHOD_STREIGENSCHAPPEN, strReturn);
		GLogger.logExit(CLASS_NAME, METHOD_STREIGENSCHAPPEN);

		return strReturn;
	}

	/**
	 * Returns a vector with information of the product details required to be shown in Billing Info screen of Installer Invoicing
	 *
	 * @param lWfmTaskID the wfmappointmentid used to get the product details for the customerappointment from cdm
	 * @param lLanguageID language for the session
	 * @return vctBProductLijnen vector with product details for the appointment
	 *
	 * @throws Exception
	 */
	public static Vector vctGetProductLijnen(long lWfmTaskID, long lLanguageID)
			throws Exception {
		Vector vctBProductLijnen = null;
		BProductLijnen bProdLijn = null;
		ResultSet rsProdLijn = null;
		PreparedStatement psProdLijn = null;
		ResultSet rsProdLijnPID = null;
		PreparedStatement psProdLijnPID = null;

		// BEGIN ADD v6.01a
		PreparedStatement psProdLijnAccess = null;
		ResultSet rsProdLijnAccess = null;
		PreparedStatement psProdLijnPIDAccess = null;
		ResultSet rsProdLijnPIDAccess = null;

		// END ADD v6.01a

		// BEGIN ADD v5.96f
		long lProductId = 0;
		int iCount = 0;
		String strProductsInvolved = null;
		int iSize = 0;

		// END ADD v5.96f

		GLogger.logEntry(CLASS_NAME, METHOD_VCTGETPRODUCTLIJNEN);
		GLogger.logInput(METHOD_VCTGETPRODUCTLIJNEN, ARG_WFMTASKID, String
				.valueOf(lWfmTaskID));
		GLogger.logInput(METHOD_VCTGETPRODUCTLIJNEN, ARG_LANGUAGEID, String
				.valueOf(lLanguageID));

		try {
			vctBProductLijnen = new Vector();
			psProdLijn = GConnectAfe
					.psPrepareStatement(GAfeSql.S_INSINV_BILLINFO_PRODLIJN);
			psProdLijn.setLong(1, lWfmTaskID);

			// BEGIN DELETE v5.96f
			// psProdLijn.setLong(2, lLanguageID);
			// END DELETE v5.96f
			// BEGIN ADD v5.96f
			psProdLijn.setLong(2, GAfeDescription.PRODUCTLINE_INTRO);
			psProdLijn.setLong(3, GAfeDescription.PRODUCTLINE_INTERNET);
			psProdLijn.setLong(4, GAfeDescription.PRODUCTLINE_TELEPHONY);
			psProdLijn.setLong(5, GAfeDescription.PRODUCTLINE_TV);

			// BEGIN DELETE v6.01a

			/*
			 * psProdLijn.setLong(6, GAfeDescription.PRODUCTLINE_ACCESS);
			 * psProdLijn.setLong(7, lLanguageID);
			 */

			// END DELETE v6.01a
			// BEGIN ADD v6.01a
			// BEGIN DELETE 6.20g
			// psProdLijn.setLong(6, lLanguageID);
			// END DELETE 6.20g
			// END ADD v6.01a
			// END ADD v5.96f
			// BEGIN ADD V 6.20g
			psProdLijn.setLong(6, GAfeDescription.PRODUCT_DIGITALTV);
			psProdLijn.setLong(7, lLanguageID);

			// END ADD V 6.20g
			rsProdLijn = psProdLijn.executeQuery();

			while (rsProdLijn.next()) {
				GLogger.debug(CLASS_NAME, METHOD_VCTGETPRODUCTLIJNEN,
						"Found a non-access productline");
				bProdLijn = new BProductLijnen();
				bProdLijn.lLineTypeID = rsProdLijn.getLong("PRODUCTID");
				bProdLijn.strLineType = rsProdLijn.getString("DESCRIPTION");
				bProdLijn.strLineDescription = strShortDescription(rsProdLijn
						.getLong("CUSTOMERPRODUCTLINEID"));
				bProdLijn.strLineIdentifier = rsProdLijn
						.getString("CUSTOMERPLIDENTIFIERVALUE");
				bProdLijn.strLineStatus = rsProdLijn
						.getString("CUSTOMERPRODUCTLINESTATUS");

				// append the plidentifiervalue to end of short description
				bProdLijn.strLineDescription = bProdLijn.strLineDescription
						+ bProdLijn.strLineIdentifier;

				// Prepare the statement for Query to get CUSTOMERPRODUCTLINEID's
				psProdLijnPID = GConnectAfe
						.psPrepareStatement(GAfeSql.S_INSINV_BILLINFO_PRODLIJNPID);
				psProdLijnPID.setLong(1, rsProdLijn
						.getLong("CUSTOMERPRODUCTLINEID"));

				// Execute the query to get CUSTOMERPRODUCTLINEID's
				rsProdLijnPID = psProdLijnPID.executeQuery();

				// BEGIN DELETE v5.96f

				/*
				 * while (rsProdLijnPID.next()) {
				 *       bProdLijn.lProductID = rsProdLijnPID.getLong("PRODUCTID");
				 * }
				 */

				// END DELETE v5.96f
				// BEGIN ADD v5.96f
				strProductsInvolved = new String("");
				iSize = GAfeDescription.COMFORT_PRODUCTIDS.length;

				while (rsProdLijnPID.next()) {
					lProductId = rsProdLijnPID.getLong("PRODUCTID");

					if (0 == bProdLijn.lProductID) {

						// see if the product id is in the arrList
						while (iCount < iSize) {
							if (lProductId == GAfeDescription.COMFORT_PRODUCTIDS[iCount]) {
								bProdLijn.lProductID = lProductId;

								break;
							}

							// BEGIN ADD v5.98a
							iCount++;

							// END ADD v5.98a
						}

						// BEGIN Delete v5.98a
						// iCount++;
						// END Delete v5.98a
						// BEGIN DELETE v6.00a

						/* strProductsInvolved = strProductsInvolved.concat(bProdLijn.strProductsInvolved + ","); */

						// END DELETE v6.00a
						// BEGIN ADD v6.00a
						strProductsInvolved = strProductsInvolved
								.concat(lProductId + ",");

						// END ADD v6.00a
					}
				}

				// remove the last added comma
				iCount = strProductsInvolved.length();

				// BEGIN DELETE v6.00a

				/* strProductsInvolved.substring(0,iCount-1); */

				// END DELETE v6.00a
				// BEGIN ADD v6.00a
				strProductsInvolved = strProductsInvolved.substring(0,
						iCount - 1);

				// Add the bProdLijn object to vctBProductLijnen
				// END ADD v6.00a
				bProdLijn.strProductsInvolved = strProductsInvolved;
				GConnectAfe.close(rsProdLijnPID);
				GConnectAfe.close(psProdLijnPID);
				vctBProductLijnen.addElement(bProdLijn);

				// GLogger.debug(CLASS_NAME, METHOD_VCTGETPRODUCTLIJNEN, "bProdLijn.strProductsInvolved: " + bProdLijn.strProductsInvolved);
				// END ADD v5.96f
			}

			// BEGIN ADD v6.01a
			// Prepare a statement for getting Access productline id
			psProdLijnAccess = GConnectAfe
					.psPrepareStatement(GAfeSql.S_INSINV_BILLINFO_PRODLIJN_ACCESS);

			// Set the bind variables
			psProdLijnAccess.setLong(1, lWfmTaskID);
			psProdLijnAccess.setLong(2, GAfeDescription.PRODUCTLINE_ACCESS);
			psProdLijnAccess.setLong(3, lLanguageID);

			// execute the query
			rsProdLijnAccess = psProdLijnAccess.executeQuery();

			// Get individual product ids
			while (rsProdLijnAccess.next()) {
				GLogger.debug(CLASS_NAME, METHOD_VCTGETPRODUCTLIJNEN,
						"Found an access productline");
				bProdLijn = new BProductLijnen();
				bProdLijn.lLineTypeID = rsProdLijnAccess.getLong("PRODUCTID");
				bProdLijn.strLineType = rsProdLijnAccess
						.getString("DESCRIPTION");

				// BEGIN DELETE v6.02f
				// bProdLijn.strLineDescription = strShortDescription(rsProdLijnAccess.getLong("CUSTOMERPRODUCTLINEID"));
				// END DELETE v6.02f
				// BEGIN ADD v6.02f
				bProdLijn.strLineDescription = strShortDescriptionAccess(rsProdLijnAccess
						.getLong("CUSTOMERPRODUCTLINEID"));

				// END ADD v6.02f
				bProdLijn.strLineIdentifier = rsProdLijnAccess
						.getString("CUSTOMERPLIDENTIFIERVALUE");
				bProdLijn.strLineStatus = rsProdLijnAccess
						.getString("CUSTOMERPRODUCTLINESTATUS");

				// append the plidentifiervalue to end of short description
				bProdLijn.strLineDescription = bProdLijn.strLineDescription
						+ bProdLijn.strLineIdentifier;

				// Prepare the statement for Query to get CUSTOMERPRODUCTLINEID's
				psProdLijnPIDAccess = GConnectAfe
						.psPrepareStatement(GAfeSql.S_INSINV_BILLINFO_PRODLIJNPIDACCESS);
				psProdLijnPIDAccess.setLong(1, rsProdLijnAccess
						.getLong("CUSTOMERPRODUCTLINEID"));

				// Execute the query to get CUSTOMERPRODUCTLINEID's
				rsProdLijnPIDAccess = psProdLijnPIDAccess.executeQuery();

				// Get individual product ids
				strProductsInvolved = new String("");

				while (rsProdLijnPIDAccess.next()) {
					lProductId = rsProdLijnPIDAccess.getLong("PRODUCTID");
					strProductsInvolved = strProductsInvolved.concat(lProductId
							+ ",");
				}

				// remove the last added comma
				iCount = strProductsInvolved.length();
				strProductsInvolved = strProductsInvolved.substring(0,
						iCount - 1);

				// Assign the string
				bProdLijn.strProductsInvolved = strProductsInvolved;
				GConnectAfe.close(rsProdLijnPIDAccess);
				GConnectAfe.close(psProdLijnPIDAccess);
				vctBProductLijnen.addElement(bProdLijn);

				// END ADD v6.01a
			}
		} finally {
			GConnectAfe.close(rsProdLijn);
			GConnectAfe.close(psProdLijn);

			// BEGIN ADD 6.03b
			GConnectAfe.close(rsProdLijnAccess);
			GConnectAfe.close(psProdLijnAccess);

			// END ADD 6.03b
		}

		GLogger.logOutput(METHOD_VCTGETPRODUCTLIJNEN, ARG_VCTBPRODUCTLIJNEN,
				vctBProductLijnen);
		GLogger.logExit(CLASS_NAME, METHOD_VCTGETPRODUCTLIJNEN);

		return vctBProductLijnen;
	}

	// END ADD V5.36b

	// BEGIN ADD V5.38a
	// comment: function to get the status of a row in database
	public int iGetStatusInDB(long lPrimaryKey, String strTableName)
			throws Exception {
		int iStatusInDB = -1;

		// Begin DEL v9.01d
		// try {
		// End DEL v9.01d
		if (strTableName.equalsIgnoreCase(GAfeConstants.CUSTOMERPRODUCT)) {
			CustomerProductRow customerProductRow = null;

			customerProductTable = (CustomerProduct) teleSessionMgr
					.getTable(GAfeConstants.CUSTOMERPRODUCT);

			if (null != customerProductTable) {
				customerProductRow = customerProductTable
						.cprSearchByCustProductID(lPrimaryKey);

				if (null != customerProductRow) {
					iStatusInDB = customerProductRow.iStatusInDB;
				}
			}
		}

		// Begin DEL v9.01d
		// } finally {
		// }
		// End DEL v9.01d
		return iStatusInDB;
	}

	// END ADD V5.38a

	//  BEGIN ADD V5.40a
	// comment: method added to check for cascade product on a line
	public static int iCheckCascade(long lObjectID, int iCallingProgram)
			throws Exception {
		int iCascadePresent = 0;
		CustomerProduct customerProduct = null;
		Process process = null;
		ProcessLink processLink = null;

		// Begin DEL v9.01d
		// try {
		// End DEL v9.01d
		// System.out.println("LProduct: lObjectID = " + lObjectID);
		// System.out.println("LProduct: iCallingProgram = " + iCallingProgram);
		if (iCallingProgram == 1) {
			customerProduct = (CustomerProduct) GConnectMemoryDB
					.getTable(GAfeConstants.CUSTOMERPRODUCT);

			if (null != customerProduct) {
				CustomerProductRow customerProductRow = customerProduct
						.cprSearchByCustomerProductLineIDandProductIDandObsolete(
								lObjectID, GAfeDescription
										.lGetTypeId("PRODUCT_CASCADE"), 1);

				if (null != customerProductRow) {
					iCascadePresent = 1;
				}
			}
		} else if (iCallingProgram == 2) {
			process = (Process) GConnectMemoryDB
					.getTable(GAfeConstants.PROCESS);
			processLink = (ProcessLink) GConnectMemoryDB
					.getTable(GAfeConstants.PROCESSLINK);
			customerProduct = (CustomerProduct) GConnectMemoryDB
					.getTable(GAfeConstants.CUSTOMERPRODUCT);

			if ((null != process) && (null != processLink)
					&& (null != customerProduct)) {

				// System.out.println("Got the containers");
				ProcessRow processRow = process
						.prSearchBylOrderIDandProcessTypeIDandObsolete(
								lObjectID,
								GAfeDescription.PROCESSTYPE_PROVISIONINGACCESS,
								0);

				if (null != processRow) {

					// System.out.println("Got the processRow");
					Vector vctLinkRows = processLink
							.vctSearchByProcessIDandObsolete(
									processRow.lProcessID, 0);

					// Begin DEL v9.01d
					// ProcessLinkRow processLinkRow = null;
					// End DEL v9.01d
					long lCustomerProductLineID = 0;

					if (null != vctLinkRows) {

						// System.out.println("Got the link rows");
						// System.out.println("Objecttype for product line = " + GAfeDescription.OBJECTTYPE_CUSTOMERPRODUCTLINE);
						for (int iCounterOnLink = 0; iCounterOnLink < vctLinkRows
								.size(); iCounterOnLink++) {
							if (((ProcessLinkRow) vctLinkRows
									.elementAt(iCounterOnLink)).lObjectTypeID == GAfeDescription.OBJECTTYPE_CUSTOMERPRODUCTLINE) {
								lCustomerProductLineID = ((ProcessLinkRow) vctLinkRows
										.elementAt(iCounterOnLink)).lObjectID;

								// System.out.println("CustomerProductLineID = " + lCustomerProductLineID);
								break;
							}
						}

						if (0 != lCustomerProductLineID) {
							CustomerProductRow customerProductRow = customerProduct
									.cprSearchByCustomerProductLineIDandProductIDandObsolete(
											lCustomerProductLineID,
											GAfeDescription
													.lGetTypeId("PRODUCT_CASCADE"),
											1);

							// System.out.println("CustomerProductRow = " + customerProductRow);
							if (null != customerProductRow) {
								iCascadePresent = 1;
							}
						}
					}
				}
			}
		}

		// System.out.println("Inside function lProduct.iCheckCascade return value = " + iCascadePresent);
		// Begin DEL v9.01d
		// } finally {
		// }
		// End DEL v9.01d
		return iCascadePresent;
	}

	// END ADD V5.40a

	// BEGIN ADD V5.43c
	// COMMENT: new function being added to modify the porting flag before sending it to DSL.

	/**
	 * In case the Current Owner is Fullgc it is a case of Reactiveer Porteer, so
	 * even though we do not treat this as an NP number but in DSL we have to send it as porting
	 * flag.
	 * In case of Original Owner Fullgc, it is a scenario of reverse port out. In afe we treat it
	 * is treated as NP number but to DSL we need to send it as a fullgc number.
	 *
	 * @param objBNumber        Object having the details for the telephony product
	 * @param cPortingFlag_New  The flag which is being sent by the calling program to be sent to DSL
	 * @return cPortingFlag_New_Modified        As per the logic the modified Porting flag which needs to be
	 * sent to DSL
	 */
	private final char cUpdatePortingFlag_ForDsl(BNumber objBNumber,
			char cPortingFlag_New) {
		GLogger.logEntry(CLASS_NAME, METHOD_cUpdatePortingFlag_ForDsl);
		GLogger.logInput(METHOD_cUpdatePortingFlag_ForDsl, ARG_BNUMBER,
				objBNumber);
		GLogger.logInput(METHOD_cUpdatePortingFlag_ForDsl,
				ARG_NEW_PORTING_FLAG, cPortingFlag_New);

		char cPortingFlag_New_Modified = cPortingFlag_New;

		if (GAfeConstants.NP.equalsIgnoreCase(objBNumber.strKindOfNumber)) {

			// BEGIN DELETE V 5.46a

			/*
			 * if ( GAfeConstants.TELE.equalsIgnoreCase(objBNumber.strCurrentOwner) )
			 * {
			 *   cPortingFlag_New_Modified  = PORTING;
			 * }
			 * else if (!( GAfeConstants.TELE.equalsIgnoreCase(objBNumber.strOriginalOwner) ))
			 * {
			 *   cPortingFlag_New_Modified  = NO_PORTING;
			 * }
			 */

			// END DELETE V 5.46a
			// BEGIN ADD V 5.46a
			if ((null != objBNumber.strCurrentOwner)
					&& (GAfeConstants.TELE
							.equalsIgnoreCase(objBNumber.strCurrentOwner))) {
				cPortingFlag_New_Modified = PORTING;
			} else if ((null != objBNumber.strOriginalOwner)
					&& (!(GAfeConstants.TELE
							.equalsIgnoreCase(objBNumber.strOriginalOwner)))) {
				cPortingFlag_New_Modified = NO_PORTING;
			}

			// END ADD V 5.46a
		}

		GLogger.logOutput(METHOD_cUpdatePortingFlag_ForDsl,
				ARG_MODIFIED_NEW_PORTING_FLAG, cPortingFlag_New_Modified);
		GLogger.logExit(CLASS_NAME, METHOD_cUpdatePortingFlag_ForDsl);

		return cPortingFlag_New_Modified;
	}

	/**
	 * If the old number's current owner is OLO, and new NP also has current owner as OLO
	 * the product paramters need to be updated. The function returns TRUE in that case.
	 *
	 * @param strCurrentOwner   Current Owner for the new NP Number
	 * @param strCurrentOwnerOld        Current Owner for the old NP Number
	 * @return bCanUpdate       True if the paramters can be updated in product details
	 *
	 */
	private static final boolean bCanUpdateParameters(String strCurrentOwner,
			String strCurrentOwnerOld) {
		GLogger.logEntry(CLASS_NAME, METHOD_bCanUpdateParameters);
		GLogger.logInput(METHOD_bCanUpdateParameters, ARG_CURRENT_OWNER,
				strCurrentOwner);
		GLogger.logInput(METHOD_bCanUpdateParameters, ARG_CURRENT_OWNER_OLD,
				strCurrentOwnerOld);

		boolean bCanUpdate = false;

		// BEGIN ADD V 5.46a
		if ((null != strCurrentOwner) && (null != strCurrentOwnerOld)) {

			// END ADD V 5.46a
			if ((!GAfeConstants.TELE.equalsIgnoreCase(strCurrentOwner))
					&& (!GAfeConstants.TELE
							.equalsIgnoreCase(strCurrentOwnerOld))) {
				bCanUpdate = true;
			}

			// BEGIN ADD V 5.46a
		}

		// END ADD V 5.46a
		GLogger.logOutput(METHOD_bCanUpdateParameters, ARG_CAN_UPDATE,
				bCanUpdate);
		GLogger.logExit(CLASS_NAME, METHOD_bCanUpdateParameters);

		return bCanUpdate;
	}

	/**
	 * If the new Number's original owner is Fullgc then it is a case of reactivation of aging number
	 * the new number will not have any NP product associated with it. Hence product related
	 * to old NP number needs to be deleted, if it has owner as OLO since then it will have NP products.
	 * Same is the case when the new number is TN, except that the check for the new numbers owner would
	 * not be done.
	 *
	 * @param strCurrentOwner   Current Owner for the new NP Number.
	 * @param strCurrentOwnerOld        Current Owner for the old NP Number.
	 * @param bNewNumberNP False means new number is a fullgc number and not a case of NP.
	 * @return bCanDelete       True if the product related to the old number needs to be deleted from Product
	 * details.
	 *
	 */
	private static final boolean bCanDeleteProduct(String strCurrentOwner,
			String strCurrentOwnerOld, boolean bNewNumberNP) {

		// If BNewNumber = false; then it is TN. Then no need to check for the new number
		GLogger.logEntry(CLASS_NAME, METHOD_bCanDeleteProduct);
		GLogger.logInput(METHOD_bCanDeleteProduct, ARG_CURRENT_OWNER,
				strCurrentOwner);
		GLogger.logInput(METHOD_bCanDeleteProduct, ARG_CURRENT_OWNER_OLD,
				strCurrentOwnerOld);
		GLogger.logInput(METHOD_bCanDeleteProduct, ARG_NEW_NUMBER_NP,
				bNewNumberNP);

		boolean bCanDelete = false;

		if (!GAfeConstants.TELE.equalsIgnoreCase(strCurrentOwnerOld)) {
			if (bNewNumberNP) {

				// BEGIN DELETE V 5.46a
				// if ( GAfeConstants.TELE.equalsIgnoreCase(strCurrentOwner) )
				// END DELETE V 5.46a
				// BEGIN ADD V 5.46a
				if ((null != strCurrentOwner)
						&& (GAfeConstants.TELE
								.equalsIgnoreCase(strCurrentOwner)))

				// END ADD V 5.46a
				{
					bCanDelete = true;
				}
			} else {
				bCanDelete = true;
			}

			bCanDelete = true;
		}

		GLogger.logOutput(METHOD_bCanDeleteProduct, ARG_CAN_DELETE, bCanDelete);
		GLogger.logExit(CLASS_NAME, METHOD_bCanDeleteProduct);

		return bCanDelete;
	}

	/**
	 * If the new Number's original owner is Fullgc then it is a case of reactivation of aging number
	 * the new number will not have any NP product associated with it. Hence product related
	 * to old NP number needs to be deleted, if it has owner as OLO since then it will have NP products.
	 * Same is the case when the new number is TN, except that the check for the new numbers owner would
	 * not be done.
	 *
	 * @param strCurrentOwner   Current Owner for the new NP Number.
	 * @param strCurrentOwnerOld        Current Owner for the old NP Number.
	 * @param bNewNumberNP False means new number is a fullgc number and not a case of NP.
	 * @return bCanDelete       True if the product related to the old number needs to be deleted from Product
	 * details.
	 *
	 */
	private static final void vDeleteProduct(TeleSessionMgr teleSessionMgr) {

		// If BNewNumber = false; then it is TN. Then no need to check for the new number
		GLogger.logEntry(CLASS_NAME, METHOD_vDeleteProduct);
		GLogger.logInput(METHOD_vDeleteProduct, ARG_TELESESSIONMGR,
				teleSessionMgr);

		BProductDetailProperty objBProductDetailProperty = null;
		BProductDetail bProductDetail = null;
		Object objSession = teleSessionMgr
				.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

		if (null != objSession) {

			// Vector for storing all the Data that is populated in the tablular form
			objBProductDetailProperty = (BProductDetailProperty) objSession;

			for (int iCounter = FINAL_ZERO; iCounter < objBProductDetailProperty.vctProductSelected
					.size(); iCounter++) {
				bProductDetail = (BProductDetail) objBProductDetailProperty.vctProductSelected
						.elementAt(iCounter);

				if (GAfeDescription.PRODUCT_NP == bProductDetail.lProductID
						.longValue()) {
					objBProductDetailProperty.vctProductSelected
							.removeElementAt(iCounter);
				}
			}

			teleSessionMgr.putValue(BPRODUCTDETAILPROPERTY_ACPRODUCT,
					objBProductDetailProperty);
		}

		GLogger.logExit(CLASS_NAME, METHOD_vDeleteProduct);
	}

	/**
	 * Makes the NP process related to the old NP number obsolete in the following cases
	 * 1. NP to NP : where old number belongs to OLO and new number belongs to Fullgc
	 * 2. NP to TN : where old number belongs to OLO
	 * @param objBNumber <tt>BNumber</tt> object having the details for the Number.
	 * @param lNP_ProcessId Special NP Process Id which needs to be deleted.
	 * @throws Exception If the process could not be deleted.
	 *
	 */
	private final void vMakeNPProcessObsolete(BNumber objBNumber,
			long lNP_ProcessId_Delete) throws Exception {
		GLogger.logEntry(CLASS_NAME, METHOD_vMakeNPProcessObsolete);
		GLogger
				.logInput(METHOD_vMakeNPProcessObsolete, ARG_BNUMBER,
						objBNumber);
		GLogger.logInput(METHOD_vMakeNPProcessObsolete, ARG_NP_PROCESSID,
				lNP_ProcessId_Delete);

		try {
			if (GAfeConstants.NP
					.equalsIgnoreCase(objBNumber.strKindOfNumberOld)) {

				// BEGIN DELETE V 5.46a
				// if (!( GAfeConstants.TELE.equalsIgnoreCase(objBNumber.strCurrentOwnerOld)))
				// END DELETE V 5.46a
				// BEGIN ADD V 5.46a
				if ((null != objBNumber.strCurrentOwnerOld)
						&& (!(GAfeConstants.TELE
								.equalsIgnoreCase(objBNumber.strCurrentOwnerOld))))

				// END ADD V 5.46a
				{
					if (GAfeConstants.TN
							.equalsIgnoreCase(objBNumber.strKindOfNumber)) {

						// NP to TN case
						// if the old number is having owner is OLO then delete the process
						vdMakeProcessIDObsoleteInAllProcessTables(lNP_ProcessId_Delete);
					} else {

						// NP to NP case
						// BEGIN DELETE V 5.46a
						// if ( GAfeConstants.TELE.equalsIgnoreCase(objBNumber.strCurrentOwner) )
						// END DELETE V 5.46a
						// BEGIN ADD V 5.46a
						if ((null != objBNumber.strCurrentOwner)
								&& (GAfeConstants.TELE
										.equalsIgnoreCase(objBNumber.strCurrentOwner)))

						// END ADD V 5.46a
						{

							// if the old number is having owner is OLO and new number is having owner as fullgc
							// then also delete the process.
							vdMakeProcessIDObsoleteInAllProcessTables(lNP_ProcessId_Delete);
						}
					}
				}
			}
		} catch (Exception ex) {
			throw ex;
		}

		GLogger.logExit(CLASS_NAME, METHOD_vMakeNPProcessObsolete);
	}

	/**
	 * Add the special NP process related to the new NP number added in the following cases
	 * 1. NP to NP : where new NP number belongs to OLO and the old NP number also had the owner as OLO
	 * 2. TN to NP : where new NP number belongs to OLO
	 *
	 * @param objBNumber <tt>BNumber</tt> object having the details for the Number.
	 * @param lCustProdLineId  Customer Product Line ID for which the insertion of the process has to take place.
	 * @param lOrderId Order Id against which the new process woudl be added.
	 *
	 */

	/*
	 * private static final void vInsert_NP_Process(BNumber objBNumber,
	 * long lCustProdLineId , long lOrderId)
	 * {
	 *   GLogger.logEntry(CLASS_NAME,METHOD_vInsert_NP_Process) ;
	 *   GLogger.logInput(METHOD_vInsert_NP_Process,ARG_BNUMBER ,objBNumber);
	 *   GLogger.logInput(METHOD_vInsert_NP_Process,ARG_NP_PROCESSID,lNP_ProcessId_Delete) ;
	 *
	 *   if (GAfeConstants.NP.equalsIgnoreCase(objBNumber.strKindOfNumber))
	 *   {
	 *       if !( GAfeConstants.TELE.equalsIgnoreCase(objBNumber.strCurrentOwner))
	 *       {
	 *           if(GAfeConstants.TN.equalsIgnoreCase(objBNumber.strKindOfNumberOld))
	 *           {
	 *               //TN to NP case
	 *               // if the new number is an Np number with owner as OLO
	 *               vInsertInProcessTables(lCustProdLineId,     GAfeDescription.PROCESSTYPE_NP,
	 *               GAfeDescription.PROCESSSTATUSTYPE_NEW, lOrderId);
	 *           }
	 *           else
	 *           {
	 *               //NP to NP case
	 *               if !( GAfeConstants.TELE.equalsIgnoreCase(objBNumber.strCurrentOwner) )
	 *               {
	 *                   // if the new number is an Np number with owner as OLO and old NP number had
	 *                   //owner as Fullgc
	 *                   vInsertInProcessTables(lCustProdLineId, GAfeDescription.PROCESSTYPE_NP,
	 *                   GAfeDescription.PROCESSSTATUSTYPE_NEW, lOrderId);
	 *
	 *               }
	 *           }
	 *       }
	 *   }
	 *   GLogger.logExit(CLASS_NAME,METHOD_vInsert_NP_Process) ;
	 * }
	 */

	/**
	 * Returns true in case the modification for the New NP is required on the basis of the following
	 * conditions:-
	 * 1. NP to NP : where new NP number current owner OLO and the old NP number current owner tele
	 * 2. TN to NP : where new NP number belongs to OLO
	 *
	 * @param objBNumber <tt>BNumber</tt> object having the details for the Number.
	 * @return bModification_Required True if the modification for the new NP is required
	 *
	 */
	private static final boolean bModification_For_New_NP_Required(
			BNumber objBNumber) {
		GLogger.logEntry(CLASS_NAME, METHOD_bModification_For_New_NP_Required);
		GLogger.logInput(METHOD_bModification_For_New_NP_Required, ARG_BNUMBER,
				objBNumber);

		boolean bModification_Required = false;

		if (GAfeConstants.NP.equalsIgnoreCase(objBNumber.strKindOfNumber)) {

			// BEGIN DELETE V 5.46a
			// if (!( GAfeConstants.TELE.equalsIgnoreCase(objBNumber.strCurrentOwner)))
			// END DELETE V 5.46a
			// BEGIN ADD V 5.46a
			if ((null != objBNumber.strCurrentOwner)
					&& (!(GAfeConstants.TELE
							.equalsIgnoreCase(objBNumber.strCurrentOwner))))

			// END ADD V 5.46a
			{
				if (GAfeConstants.TN
						.equalsIgnoreCase(objBNumber.strKindOfNumberOld)) {

					// TN to NP case
					// if the new number is an Np number with owner as OLO
					bModification_Required = true;
				} else {

					// NP to NP case
					// BEGIN DELETE V 5.46a
					// if ( GAfeConstants.TELE.equalsIgnoreCase(objBNumber.strCurrentOwnerOld) )
					// END DELETE V 5.46a
					// BEGIN ADD V 5.46a
					if ((null != objBNumber.strCurrentOwnerOld)
							&& (GAfeConstants.TELE
									.equalsIgnoreCase(objBNumber.strCurrentOwnerOld)))

					// END ADD V 5.46a
					{

						// if the new number is an Np number with owner as OLO and old NP number had
						// owner as Fullgc
						bModification_Required = true;
					}
				}
			}
		}

		GLogger.logOutput(METHOD_bModification_For_New_NP_Required,
				ARG_MODIFICATION_REQUIRED, bModification_Required);
		GLogger.logExit(CLASS_NAME, METHOD_bModification_For_New_NP_Required);

		return bModification_Required;
	}

	// END ADD V5.43c
	// BEGIN ADD V5.55a
	private static final void sortProductParameter(
			BProductDetail objBProductDetail) throws Exception {
		int iCnt = 0;
		int iCnt1 = 0;
		int iCnt2 = 0;
		BProductParameter objBProductParameter = null;
		Vector vctTemp = null;
		Vector vctNewParameterValues = null;
		int iParmetervalue = 0;
		int iSizeOfVector = 0;
		boolean bSmallValue = true;

		GLogger.logEntry(CLASS_NAME, METHOD_sortProductParameter);

		try {System.out.println("Inside sortProductParameter");
			for (iCnt = 0; (null != objBProductDetail.vctParameters)
					&& (iCnt < objBProductDetail.vctParameters.size()); iCnt++) {
				objBProductParameter = (BProductParameter) objBProductDetail.vctParameters
						.elementAt(iCnt);

				// Check if parameter is URL Groote then sort it values
				// BEGIN DELETE V 5.67a
				// GLogger.debug(CLASS_NAME,METHOD_sortProductParameter,objBProductParameter.lParameterID.intValue());
				// END DELETE V 5.67a
				System.out.println("objBProductParameter.lParameterID.intValue()  :"+objBProductParameter.lParameterID.intValue());
				if (GAfeDescription.PRODUCTPARAMETER_URLGrootte == objBProductParameter.lParameterID
						.intValue() 
						||     GAfeDescription.bCheckInList(objBProductParameter.lParameterID, GAfeDescription.Pro_parm)) {
					System.out.println("Inside url_web:"+objBProductParameter.lParameterID
							.intValue());
					if (null != objBProductParameter.vctParameterValues) {
						iSizeOfVector = objBProductParameter.vctParameterValues
								.size();

						for (iCnt1 = 0; iCnt1 < iSizeOfVector; iCnt1++) {
							iParmetervalue = Integer
									.parseInt((String) ((Vector) objBProductParameter.vctParameterValues
											.elementAt(iCnt1)).elementAt(0));

							if (null == vctNewParameterValues) {

								// Temp Vector for putting parameter values for sorting
								vctTemp = new Vector(iSizeOfVector);
								vctTemp.addElement(Integer.valueOf(iParmetervalue));
								vctNewParameterValues = new Vector(
										iSizeOfVector);
								vctNewParameterValues
										.addElement(objBProductParameter.vctParameterValues
												.elementAt(iCnt1));
							} else {
								bSmallValue = false;

								for (iCnt2 = 0; iCnt2 < vctTemp.size(); iCnt2++) {

									// check the sorting order for the new value
									if (iParmetervalue < ((Integer) vctTemp
											.elementAt(iCnt2)).intValue()) {
										vctTemp.insertElementAt(Integer.valueOf(
												iParmetervalue), iCnt2);
										bSmallValue = true;
										vctNewParameterValues
												.insertElementAt(
														objBProductParameter.vctParameterValues
																.elementAt(iCnt1),
														iCnt2);

										break;
									}
								}

								// If value is bigger than existing parameters
								if (!bSmallValue) {
									vctTemp.addElement(Integer.valueOf(
											iParmetervalue));
									vctNewParameterValues
											.addElement(objBProductParameter.vctParameterValues
													.elementAt(iCnt1));
								}
							}
						}

						// BEGIN DELETE V 5.67a
						// GLogger.debug(CLASS_NAME,METHOD_sortProductParameter, vctTemp );
						// END DELETE V 5.67a

						objBProductParameter.vctParameterValues = vctNewParameterValues;
					}
				}
			}
		} catch (Exception e) {
			GLogger.logException(e);

			throw e;
		}

		GLogger.logExit(CLASS_NAME, METHOD_sortProductParameter);
	}

	// END ADD V5.55a

	// BEGIN ADD V5.59b
	// LN1714 : Function to retrieve the Zoneids, the input parameters being Zip,HouseNumber,Street and City
	protected Vector vctGetCatSapZipInfo(String strZip, String strHouseNumber,
			String strCity, String strStreetName) throws Exception {
		ResultSet rsRetrieve = null;
		Vector vctCatSapZone = new Vector(1);
		CallableStatement csStmt = null;
		int iZip = 0;
		GConnectCatsap gConnect = null;

		GLogger.logEntry(CLASS_NAME, METHOD_vctGetCatSapZipInfo);
		GLogger.logInput(METHOD_vctGetCatSapZipInfo, ARG_vctGetCatSapZipInfo,
				strZip);
		GLogger.logInput(METHOD_vctGetCatSapZipInfo, ARG_vctGetCatSapZipInfo,
				strHouseNumber);
		GLogger.logInput(METHOD_vctGetCatSapZipInfo, ARG_vctGetCatSapZipInfo,
				strCity);
		GLogger.logInput(METHOD_vctGetCatSapZipInfo, ARG_vctGetCatSapZipInfo,
				strStreetName);

		try {
			if ((null != strZip) && !(strZip.equals(""))) {
				iZip = Integer.parseInt(strZip);
			}

			GLogger.debug(CLASS_NAME, METHOD_vctGetCatSapZipInfo, "iZip="
					+ iZip);
			gConnect = new GConnectCatsap(this);

			if (gConnect.bIsCatsapConnected()) {
				csStmt = gConnect
						.csPrepareCall(GAfeSql.CS_GET_ZONE_OF_NEIGHBOUR);
				csStmt.setInt(1, iZip);
				csStmt.setString(2, strCity);
				csStmt.setString(3, strStreetName);
				csStmt.setString(4, strHouseNumber);
				rsRetrieve = csStmt.executeQuery();

				while (rsRetrieve.next()) {
					vctCatSapZone.addElement(rsRetrieve.getString("ZONE"));
				}
			}
		}

		// BEGIN ADD V5.65a
		// Made Changes for manual address check
		catch (Exception ex) {
			vctCatSapZone = new Vector(1);
		}

		// END ADD V5.65a
		finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(csStmt);
		}

		GLogger.logOutput(METHOD_vctGetCatSapZipInfo, OUT_Zip_CATSAP,
				vctCatSapZone);
		GLogger.logExit(CLASS_NAME, METHOD_vctGetCatSapZipInfo);

		return vctCatSapZone;
	}

	//  END ADD V5.59b
	// begin add V5.61a

	/**
	 * this method will return the list of Document IDs for a given order of a customer
	 * @param           lOrderID        The OrderId for which the document Ids need to retreived
	 * @param           lCustomerID     The lCustomerID for lCustomerID documents  need to retreived
	 * @return          Vector list of document Ids
	 * @exception       Exception       when Unknown Error occurs
	 */
	protected static Vector vctGetDucumentIdsForOrder(long lOrderID,
			long lCustomerID) throws Exception {
		ResultSet rsDocument = null;
		PreparedStatement psSelect = null;
		long lProcessID = 0;
		Vector vctDocumentList = null; // has the list of documentIds that will be returned

		// BEGIN ADD ver 6.05b
		long lDocumentID = 0;
		long lDocumentTypeID = 0;

		// END ADD ver 6.05b
		try {
			GLogger.logEntry(CLASS_NAME, METHOD_vctGetDucumentIdsForOrder);
			psSelect = GConnectAfe
					.psPrepareStatement(GAfeSql.S_DOC_HANDLING_PROCESS_ID);
			psSelect.setLong(1, GAfeDescription.PROCESSTYPE_CPS);
			psSelect.setLong(2, lOrderID);
			rsDocument = psSelect.executeQuery();

			if (rsDocument.next()) {
				lProcessID = rsDocument.getLong("PROCESSID");
			}

			GConnectAfe.close(rsDocument);
			GConnectAfe.close(psSelect);

			if (lProcessID != 0) // case of CPS therefore objectid is of customerproductline
			{
				psSelect = GConnectAfe
						.psPrepareStatement(GAfeSql.S_CUSTOMERPRODUCTLINE_DOCUMENTID);
				psSelect.setLong(1, GAfeDescription.DOCUMENTSTATUS_NEW);
				psSelect.setLong(2, lProcessID);
				psSelect.setLong(3,
						GAfeDescription.OBJECTTYPE_CUSTOMERPRODUCTLINE);
			} else // other case objectid is of order
			{
				psSelect = GConnectAfe
						.psPrepareStatement(GAfeSql.S_ORDERID_DOCUMENTID);
				psSelect.setLong(1, GAfeDescription.DOCUMENTSTATUS_NEW);
				psSelect.setLong(2, lOrderID);
				psSelect.setLong(3, GAfeDescription.OBJECTTYPE_ORDER);
			}

			rsDocument = psSelect.executeQuery();
			vctDocumentList = new Vector(1);

			while (rsDocument.next()) {

				// BEGIN DELETE ver 6.05b
				// vctDocumentList.addElement(Long.valueOf(rsDocument.getLong("DOCUMENTID")));
				// END DELETE ver 6.05b
				// BEGIN ADD ver 6.05b
				lDocumentID = rsDocument.getLong("DOCUMENTID");
				lDocumentTypeID = rsDocument.getLong("DOCUMENTTYPEID");

				if (GAfeDescription.DOCUMENTTYPE_CABLEACCESS_BROCHURE != lDocumentTypeID) {
					vctDocumentList.addElement(Long.valueOf(lDocumentID));
				}

				lDocumentID = 0;
				lDocumentTypeID = 0;

				// END ADD ver 6.05b
			}

			// comment: closing the resultset
			GConnectAfe.close(rsDocument);
			GConnectAfe.close(psSelect);
		} finally {
			GConnectAfe.close(rsDocument);
			GConnectAfe.close(psSelect);
		}

		return vctDocumentList;
	}

	// add the vector so the session application can get the value in MApplSave
	private final void putPrintStatusInSession(long lPrintRequestID,
			long lDocumentID, String strPrintStatus, long lDocumentTypeId,
			long lAddressID) throws Exception {

		// begin add V5.64a
		GLogger.logEntry(CLASS_NAME, "putPrintStatusInSession");

		// end add V5.64a
		Vector vctPrintDocument = null;

		// make a vector with elements as lPrintRequestId, documentid, status--> add to the session
		// begin modify V5.64a
		if (null == teleSessionMgr.getValue("VCT_PRINTDOCUMENT"))

		// end modify V5.64a
		{
			vctPrintDocument = new Vector();
		} else {

			// begin modify V5.64a
			vctPrintDocument = (Vector) teleSessionMgr
					.getValue("VCT_PRINTDOCUMENT");

			// end modify 5.64a
		}

		GLogger.debug(CLASS_NAME, "putPrintStatusInSession", vctPrintDocument
				.size());

		Vector vctTempPrintDocument = new Vector();

		vctTempPrintDocument.addElement(Long.valueOf(lPrintRequestID));
		vctTempPrintDocument.addElement(Long.valueOf(lDocumentID));
		vctTempPrintDocument.addElement(strPrintStatus);
		vctTempPrintDocument.addElement(Long.valueOf(lDocumentTypeId));
		vctTempPrintDocument.addElement(Long.valueOf(lAddressID));
		vctPrintDocument.addElement(vctTempPrintDocument);
		teleSessionMgr.putValue("VCT_PRINTDOCUMENT", vctPrintDocument);
		GLogger.logOutput(CLASS_NAME, "putPrintStatusInSession",
				vctPrintDocument.size());
		GLogger.logExit(CLASS_NAME, "putPrintStatusInSession");
	}

	// end add V5.61a

	// BEGIN ADD V5.61b
	// CR1483-Allowing ALFs to be taken for cross sell products

	/*
	 * public boolean bCheckGenerateOrder(long lCustomerProductLineID) throws Exception
	 * {
	 *   GLogger.logEntry(CLASS_NAME, METHOD_bCheckGenerateOrder);
	 *   GLogger.logInput(CLASS_NAME, METHOD_bCheckGenerateOrder, lCustomerProductLineID);
	 *
	 *   CustomerProductRow customerProductRow                                   = null;
	 *   CustomerChargeTypeRow customerChargeTypeRow                             = null;
	 *   CustomerProductParameterRow customerProductParameterRow = null;
	 *   BCustomerProductAlf bCustomerProductAlf                                 = null;
	 *   Vector vctCustomerProductId                                                             = new Vector();
	 *   Date dtCurrentDate                                                                              = new Date();
	 *   long lProductType = 0;
	 *   CustomerProductLineRow customerProductLineRow   = null;
	 *   CustomerProductLine customerProductLine                 = null;
	 *
	 *   try
	 *   {
	 *       customerProductTable = (CustomerProduct)teleSessionMgr.getTable("CUSTOMERPRODUCT");
	 *       customerChargeTypeTable = (CustomerChargeType)teleSessionMgr.getTable("CUSTOMERCHARGETYPE");
	 *       customerProductParameterTable = (CustomerProductParameter)teleSessionMgr.getTable("CUSTOMERPRODUCTPARAMETER");
	 *       processLinkTable = (ProcessLink)teleSessionMgr.getTable("PROCESSLINK");
	 *       customerProductLine         =       (CustomerProductLine) teleSessionMgr.getTable("CUSTOMERPRODUCTLINE");
	 *
	 *
	 *       customerProductLineRow = (CustomerProductLineRow)customerProductLine.cplrSearchByCustProductLineIDandObsolete(
	 *                                                                       lCustomerProductLineId, FINAL_ZERO);
	 *
	 *       if (null != customerProductLineRow)
	 *       {
	 *           lProductType = customerProductLineRow.lProductID;
	 *       }
	 *
	 *       vctChargeType = customerChargeTypeTable.vctSearchByCustomerProductLineIDandObsolete(lCustomerProductLineID);
	 *
	 *       if (null != vctChargeType && 0 < vctChargeType.size())
	 *       {
	 *           for (int iCounterCharge = FINAL_ZERO; iCounterCharge < vctChargeType.size(); iCounterCharge++)
	 *           {
	 *               custChargeRow = (CustomerChargeTypeRow) vctChargeType.elementAt(iCounterCharge);
	 *
	 *               if (!(vctCustomerAccountId.contains(Long.valueOf(custChargeRow.lCustomerAccountID))))
	 *               {
	 *                   vctCustomerAccountId.addElement(Long.valueOf(custChargeRow.lCustomerAccountID));
	 *               }
	 *           }
	 *       }
	 *
	 *       GLogger.debug(CLASS_NAME, METHOD_bCheckGenerateOrder, ARG_vctCustomerAccountId+vctCustomerAccountId);
	 *
	 *       //Get all the lines attached to the account!!
	 *
	 *       if (null != vctCustomerAccountId && 0 < vctCustomerAccountId.size())
	 *       {
	 *           for (int iCustAccount < 0; iCustAccount < vctCustomerAccountId; iCustAccount++)
	 *           {
	 *               vctChargeType = customerChargeTypeTable.vctSearchActiveByCustAccIDNoCPLID(((Long)vctCustomerAccountId.elementAt(iCustAccount)).longValue());
	 *
	 *               if (null != vctChargeType && 0 < vctChargeType.size())
	 *               {
	 *                   for (int iCounterCharge = FINAL_ZERO; iCounterCharge < vctChargeType.size(); iCounterCharge++)
	 *                   {
	 *                       custChargeRow = (CustomerChargeTypeRow) vctChargeType.elementAt(iCounterCharge);
	 *
	 *                       if (!(vctCustomerProductId.contains(Long.valueOf(custChargeRow.lCustomerProductID))))
	 *                       {
	 *                           vctCustomerProductId.addElement(Long.valueOf(custChargeRow.lCustomerProductID));
	 *                       }
	 *                   }
	 *               }
	 *           }
	 *       }
	 *
	 *       GLogger.debug(CLASS_NAME, METHOD_bCheckGenerateOrder, ARG_vctCustomerProductId+vctCustomerProductId);
	 *
	 *       if (null != vctCustomerProductId && 0 < vctCustomerProductId.size())
	 *       {
	 *           for (int iCustProduct = 0; iCustProduct < vctCustomerProductId.size(); iCustProduct++)
	 *           {
	 *               customerProductRow = (customerProductRow)customerProduct.cprSearchByCustProductIDandObsolete(((Long)vctCustomerProductId.elementAt(iCustProduct)).longValue());
	 *
	 *               if (null != customerProductRow)
	 *               {
	 *
	 *               }
	 *           }
	 *       }
	 *
	 *   //Getting the account to which this line is attached
	 *   }
	 * //END ADD V5.61b
	 * }
	 */

	// BEGIN ADD V5.71a
	/**
	 * Adds Analog TV line so that TV line to object of BProductDetailProperty is
	 *  displayed on the screen along with other line types.
	 *
	 * @param objBProductDetailProperty object of BProductDetailProperty
	 * @param objTeleSessionMgr object of TeleSessionMgr
	 * @param lLanguageID       LanguageID of the user
	 * @throws Exception If fails to get any of the  containers PRODUCT, OBJECTDESCRIPTION
	 */
	private static final void addTVLine(
			BProductDetailProperty objBProductDetailProperty,
			TeleSessionMgr objTeleSessionMgr, long lLanguageID)
			throws Exception {
		Product objProduct = null;
		ObjectDescription objObjectDescription = null;

		// Begin DEL v9.01d
		// Vector vctProductRows = null;
		// End DEL v9.01d
		ProductRow objProductRow = null;
		ObjectDescriptionRow objObjectDescriptionRow = null;
		Vector vctObjectDescriptionRows = null;

		// BEGIN ADD v5.71b
		Vector vctProduct = null;

		// END ADD v5.71b

		GLogger.logEntry(CLASS_NAME, METHOD_addTVLine);

		// Begin DEL v9.01d
		// try {
		// End DEL v9.01d
		objProduct = (Product) objTeleSessionMgr
				.getMasterTable(GAfeConstants.PRODUCT);
		objObjectDescription = (ObjectDescription) objTeleSessionMgr
				.getMasterTable(GAfeConstants.OBJECTDESCRIPTION);

		if ((null != objProduct) && (null != objObjectDescription)) {
			objProductRow = objProduct
					.prSearchByProductID(GAfeDescription.PRODUCT_ANALOGTV);

			// BEGIN ADD V5.73a
			if (null != objProductRow) {

				// END ADD V5.73a
				objObjectDescriptionRow = objObjectDescription
						.odrSearchByDescIDAndLangID(
								objProductRow.lDescription1ID, lLanguageID);

				if (null == objObjectDescriptionRow) {
					vctObjectDescriptionRows = objObjectDescription
							.vctSearchByDescriptionID(objProductRow.lDescription1ID);

					if (null != vctObjectDescriptionRows) {
						for (int iCounter = 0; iCounter < vctObjectDescriptionRows
								.size(); iCounter++) {
							objObjectDescriptionRow = (ObjectDescriptionRow) vctObjectDescriptionRows
									.elementAt(iCounter);

							if (null != objObjectDescriptionRow) {
								if (objObjectDescriptionRow.iIsDefault == 1) {

									// BEGIN DELETE v5.71b
									// vctProduct.add(Long.valueOf(GAfeDescription.PRODUCT_ANALOGTV));
									// vctProduct.add(objObjectDescriptionRow.strDescription);
									// END DELETE V5.71b
									break;
								}
							}
						}
					}
				}

				// BEGIN MODIFY v5.71b
				if (objObjectDescriptionRow != null) {
					vctProduct = new Vector(2);
					vctProduct.add(Long.valueOf(GAfeDescription.PRODUCT_ANALOGTV));
					vctProduct.add(objObjectDescriptionRow.strDescription);
					objBProductDetailProperty.vctMainProductLines
							.addElement(vctProduct);
				}

				// END MODIFY v5.71b
				// BEGIN ADD V5.73a
			}

			// END ADD V5.73a
		}

		// Begin DEL v9.01d
		// } finally {
		// }
		// End DEL v9.01d

		GLogger.logExit(CLASS_NAME, METHOD_addTVLine);
	}

	//  END ADD V5.71a
	// BEGIN ADD: ver 5.74a

	/**
	 * this method will return the list of distinct line types for a given address of a customer
	 * @param           lCustomerID     The lCustomerID for which line types need to be retrieved
	 * @param       lAddressID
	 * @return          Vector list of Line Types
	 */
	public Vector vctCheckExistingLines(long lCustomerID, long lAddressID)
			throws Exception {
		Vector vctExistingLines = null;
		Vector vctCustomerLinkRow = null;

		// Begin DEL v9.01d
		// CustomerLinkRoleRow objCustomerLinkRoleRow = null;
		// End DEL v9.01d
		try {
			GLogger.logEntry(CLASS_NAME, METHOD_vctCheckExistingLines);
			GLogger.logInput(METHOD_vctCheckExistingLines, ARG_lAddressID,
					lAddressID);
			GLogger.logInput(METHOD_vctCheckExistingLines, ARG_lCustomerID,
					lCustomerID);
			GLogger.logAlert("Loading tables from Telesession Manager");

			// Load tables from the Telesession Manager
			customerLinkTable = (CustomerLink) teleSessionMgr
					.getTable(string_CUSTOMERLINK);
			customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
					.getTable(string_CUSTOMERLINKROLE);
			customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
					.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT);
			customerProductLineTable = (CustomerProductLine) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINE);
			GLogger.logAlert("Calling clrSearchByCustIDAddIDandObsolete");
			vctCustomerLinkRow = customerLinkTable
					.clrSearchByCustIDAddIDandObsolete(lCustomerID, lAddressID,
							FINAL_ZERO);
			GLogger
					.logAlert("After call to clrSearchByCustIDAddIDandObsolete .. ");

			if (null != vctCustomerLinkRow) {
				GLogger.logAlert("Vector returned is : " + vctCustomerLinkRow);

				int ivctCLSize = vctCustomerLinkRow.size();
				Vector vctCustomerLinkRoleRow = null;

				for (int iCLCounter = 0; iCLCounter < ivctCLSize; iCLCounter++) {
					vctCustomerLinkRoleRow = customerLinkRoleTable
							.vctSearchByCustomerLinkIDandRoleTypeIDandObsolete(
									((CustomerLinkRow) (vctCustomerLinkRow
											.elementAt(iCLCounter))).lCustomerLinkID,
									GAfeDescription.ROLETYPE_USER, FINAL_ZERO);

					if (null != vctCustomerLinkRoleRow) {
						int ivctCLRSize = vctCustomerLinkRoleRow.size();
						Vector vctCLR2CPRow = null;

						for (int iCLRCounter = 0; iCLRCounter < ivctCLRSize; iCLRCounter++) {
							vctCLR2CPRow = customerLR2CustomerProductTable
									.vctSearchByCustomerLinkRoleID(((CustomerLinkRoleRow) (vctCustomerLinkRoleRow
											.elementAt(iCLRCounter))).lCustomerLinkRoleID);

							if (null != vctCLR2CPRow) {
								int ivctCLR2CPRow = vctCLR2CPRow.size();
								CustomerProductLineRow objCustomerProductLineRow = null;

								for (int iCLR2CPCounter = 0; iCLR2CPCounter < ivctCLR2CPRow; iCLR2CPCounter++) {
									objCustomerProductLineRow = customerProductLineTable
											.cplrSearchByCustomerProductLineIDandObsolete(
													((CustomerLR2CustomerProductRow) (vctCLR2CPRow
															.elementAt(iCLR2CPCounter))).lCustomerProductLineID,
													FINAL_ZERO);

									if (null != objCustomerProductLineRow) {
										long lProductId = objCustomerProductLineRow.lProductID;
										boolean bNotFound = true;

										// If the existing lines vector is null, then instantiate one, and add this product ID
										if (null == vctExistingLines) {
											vctExistingLines = new Vector(1);
											vctExistingLines
													.addElement(Long.valueOf(
															lProductId));
										} else {

											// Search in the current output vector whether this product ID exists already
											for (int iExistingLineCounter = 0; iExistingLineCounter < vctExistingLines
													.size(); iExistingLineCounter++) {
												if (lProductId == ((Long) vctExistingLines
														.elementAt(iExistingLineCounter))
														.longValue()) {
													bNotFound = false;

													break;
												}
											}

											// If this productId was not found, then add it to the output vector
											if (bNotFound) {
												vctExistingLines
														.addElement(Long.valueOf(
																lProductId));
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			GLogger.logException(e);
		} finally {
			GLogger.logOutput(METHOD_vctCheckExistingLines, "vctExistingLines",
					vctExistingLines);
			GLogger.logExit(CLASS_NAME, METHOD_vctCheckExistingLines);
		}

		return vctExistingLines;
	}

	/**
	 * bProductSaleabilityCheck checks whether a product can be sold or not, based on the capacity status
	 * given, and based on whether the product ID is there in the existing lines vector.
	 * @param vctExistingLines  : Vector containg Existing product IDs
	 * @param lProductID        : product ID whose Saleability is to be checked.
	 * @param iCapacityStatus   : Capacity Status against which the Product ID is to be checked.
	 * @return
	 *          true  : If  product can be sold,
	 *          false : if product cannot be sold.
	 */
	private boolean bProductSaleabilityCheck(Vector vctExistingLines,
			Long lProductID, int iCapacityStatus) {
		boolean bReturnVal = false;

		// IF Capacity is avaliable, then product can be sold
		if (GAfeDescription.CAPACITY_STATUS_OPEN == iCapacityStatus) {
			bReturnVal = true;
		} else if (GAfeDescription.CAPACITY_STATUS_NONE == iCapacityStatus) {

			// No capacity available, product cannot be sold
			bReturnVal = false;
		} else {

			// RESTRICTED ACCESS, find whether the line exits;
			boolean bFound = false;

			// BEGIN ADD: Ver 5.74b
			// If lines are there, then check whether the product is there in it [ to allow up sale / cross sale],
			// Else, new sale is not allowed
			if (null != vctExistingLines) {

				// END ADD: ver 5.74b
				for (int iExistingLinesCounter = 0; iExistingLinesCounter < vctExistingLines
						.size(); iExistingLinesCounter++) {
					Long lExistingProductLine = (Long) vctExistingLines
							.elementAt(iExistingLinesCounter);

					// If the product ID is found in Existing lines, then apply logic
					if (lExistingProductLine.equals(lProductID)) {
						bFound = true;

						break;
					}
				}

				// BEGIN ADD: Ver 5.74a
			}

			// END ADD: ver 5.74a
			// if product already exists , allow selling[ up sale or cross sale],
			// else not.
			if (bFound) {
				bReturnVal = true;
			} else {
				bReturnVal = false;
			}
		}

		return (bReturnVal);
	}

	// END ADD: ver 5.74a

	// BEGIN DELETE V6.03a
	// BEGIN ADD V5.75a

	/*
	 * private static final void updateAccountForTVOnlyCustomers(long lCustomerProductLineID,
	 *                                                         long lBillCycleID,
	 *                                                         BProductRole objBProductRole,
	 *                                                         long lChargeTypeID,
	 *                                                         TeleSessionMgr objTSM)
	 *       throws Exception {
	 *   CustomerChargeType objCustomerChargeType = null;
	 *   CustomerAccount objCustomerAccount = null;
	 *   CustomerProductLine objCustomerProductLine = null;
	 *   BProductRoleDetail objBProductRoleDetail = null;
	 *   long lCustomerAccountID = 0;
	 *   Vector vctCustomerChargeTypeRows = null;
	 *   Vector vctCustomerChargeTypeRows2 = null;
	 *   CustomerChargeTypeRow objCustomerChargeTypeRow = null;
	 *   CustomerProductLineRow objCPLRow = null;
	 *   CustomerAccountRow objCustomerAccountRow = null;
	 *   boolean bTVCustomer = true;
	 *   CustomerProfile objCustomerProfile = null;
	 *   CustomerProfileRow objCustomerProfileRow = null;
	 *   //BEGIN ADD V5.84a
	 *   PreparedStatement psAccountNumber = null;
	 *   ResultSet rsAccountNumber = null;
	 *   try {
	 *       //END ADD V5.84a
	 *       objCustomerChargeType = (CustomerChargeType) objTSM.getTable(GAfeConstants.CUSTOMERCHARGETYPE);
	 *       objCustomerProductLine = (CustomerProductLine) objTSM.getTable(GAfeConstants.CUSTOMERPRODUCTLINE);
	 *       if (null != objCustomerChargeType && null != objCustomerProductLine) {
	 *           vctCustomerChargeTypeRows =
	 *                   objCustomerChargeType.vctSearchByCustomerProductLineIDAndChargeTypeID(
	 *                           lCustomerProductLineID, lChargeTypeID, 0);
	 *           if (null != vctCustomerChargeTypeRows) {
	 *               lCustomerAccountID = ((CustomerChargeTypeRow)
	 *                       vctCustomerChargeTypeRows.elementAt(0)).lCustomerAccountID;
	 *
	 *               GLogger.debug(CLASS_NAME, METHOD_updateAccountForTVOnlyCustomers,
	 *                       "lCustomerAccountID = " + lCustomerAccountID);
	 *               //BEGIN DELETE V5.87a
	 *               //vctCustomerChargeTypeRows2 =
	 *               //objCustomerChargeType.vctSearchActiveByCustomerAccountID(lCustomerAccountID);
	 *               //END DELETE V5.87a
	 *               //BEGIN ADD V5.87a
	 *               vctCustomerChargeTypeRows2 =
	 *                       objCustomerChargeType.vctSearchByCustAccIDUniqueCPLID(lCustomerAccountID);
	 *               //END ADD V5.87a
	 *               if (null != vctCustomerChargeTypeRows2) {
	 *                   for (int iCounter = 0; iCounter < vctCustomerChargeTypeRows2.size(); iCounter++) {
	 *                       objCustomerChargeTypeRow = (CustomerChargeTypeRow)
	 *                               vctCustomerChargeTypeRows2.elementAt(iCounter);
	 *                       if (objCustomerChargeTypeRow.lCustomerProductLineID !=
	 *                               lCustomerProductLineID) {
	 *                           objCPLRow = objCustomerProductLine.cplrSearchByCustProductLineID(
	 *                                   objCustomerChargeTypeRow.lCustomerProductLineID);
	 *                           if (null != objCPLRow &&
	 *                                   objCPLRow.lProductID != GAfeDescription.PRODUCT_ANALOGTV) {
	 *                               bTVCustomer = false;
	 *                               break;
	 *                           }
	 *                       }
	 *                   }
	 *               }
	 *               GLogger.debug(CLASS_NAME, METHOD_updateAccountForTVOnlyCustomers,
	 *                       "bTVCustomer = " + bTVCustomer);
	 *               if (bTVCustomer) {
	 *                   objCustomerAccount = (CustomerAccount) objTSM.getTable(GAfeConstants.CUSTOMERACCOUNT);
	 *                   if (null != objCustomerAccount) {
	 *                       objCustomerAccountRow =
	 *                               objCustomerAccount.crSearchByCustID(lCustomerAccountID);
	 *                       if (null != objCustomerAccountRow &&
	 *                               objCustomerAccountRow.strCreationUser.equalsIgnoreCase(
	 *                                       GAfeConstants.ICS_MIGRATIONUSER)) {
	 *                           objCustomerProfile = (CustomerProfile)
	 *                                   objTSM.getTable(GAfeConstants.CUSTOMERPROFILE);
	 *                           if (null != objCustomerProfile) {
	 *                               for (int iCounter = 0;
	 *                                    iCounter < objBProductRole.vctProductRole.size();
	 *                                    iCounter++) {
	 *                                   objBProductRoleDetail = (BProductRoleDetail)
	 *                                           objBProductRole.vctProductRole.elementAt(iCounter);
	 *                                   if (lChargeTypeID == GAfeDescription.CHARGETYPE_NRC &&
	 *                                           objBProductRoleDetail.lRoleTypeID.longValue()
	 *                                           == GAfeDescription.ROLETYPE_NRC) {
	 *                                       break;
	 *                                   } else if (lChargeTypeID == GAfeDescription.CHARGETYPE_RC &&
	 *                                           objBProductRoleDetail.lRoleTypeID.longValue()
	 *                                           == GAfeDescription.ROLETYPE_RC) {
	 *                                       break;
	 *                                   } else if (lChargeTypeID == GAfeDescription.CHARGETYPE_USAGE &&
	 *                                           objBProductRoleDetail.lRoleTypeID.longValue()
	 *                                           == GAfeDescription.ROLETYPE_USAGE) {
	 *                                       break;
	 *                                   }
	 *                               }
	 *
	 *                               objCustomerProfileRow =
	 *                                       objCustomerProfile.cprSearchByCustIDandObsolete(
	 *                                               objBProductRoleDetail.lCustomerID.longValue(), 0);
	 *
	 *                               if (null != objCustomerProfileRow) {
	 *                                   GLogger.debug(CLASS_NAME, METHOD_updateAccountForTVOnlyCustomers,
	 *                                           "SegmentID = " + objCustomerProfileRow.lSegmentID);
	 *                                   if (objCustomerProfileRow.lSegmentID ==
	 *                                           GAfeDescription.SEGMENT_RESIDENTIAL) {
	 *                                       objCustomerAccountRow.lBillFormatID =
	 *                                               GAfeDescription.BILLFORMAT_RESIDENTIAL;
	 *                                   } else {
	 *                                       objCustomerAccountRow.lBillFormatID =
	 *                                               GAfeDescription.BILLFORMAT_OTHER;
	 *                                   }
	 *                               }
	 *                           }
	 *                           objCustomerAccountRow.lBillCycleID = lBillCycleID;
	 *                           objCustomerAccountRow.iMinimumService = 0;
	 *                           objCustomerAccountRow.lRecurringTypeID =
	 *                                   GAfeDescription.RECURRINGTYPE_MONTHLY;
	 *                           objCustomerAccountRow.iSuspendInvoice = 0;
	 *                           objCustomerAccountRow.lDisplayMethodID =
	 *                                   GAfeDescription.DISPLAYMETHOD_INVOICEONPAPER;
	 *                           objCustomerAccountRow.dtActivationDate = new java.util.Date();
	 *                           //BEGIN ADD V5.84a
	 *                           psAccountNumber =
	 *                                   GConnectAfe.psPrepareStatement("SELECT S_ACCOUNTNUMBER.NEXTVAL NEXTACCOUNTNUMBER FROM DUAL");
	 *                           rsAccountNumber = psAccountNumber.executeQuery();
	 *                           if (rsAccountNumber.next()) {
	 *                               objCustomerAccountRow.lAccountNumber =
	 *                                       rsAccountNumber.getLong("NEXTACCOUNTNUMBER");
	 *                           }
	 *                           //END ADD V5.84a
	 *                           if (objCustomerAccountRow.iStatusInDB != Record.INSERT) {
	 *                               objCustomerAccountRow.iStatusInDB = Record.UPDATE;
	 *                           }
	 *                           objCustomerAccount.updateRecord(objCustomerAccountRow);
	 *                           objTSM.putTable(GAfeConstants.CUSTOMERACCOUNT, objCustomerAccount);
	 *                           GLogger.debug(CLASS_NAME, METHOD_updateAccountForTVOnlyCustomers,
	 *                                   "Updated the Account");
	 *                       }
	 *                   }
	 *               }
	 *           }
	 *       }
	 *       //BEGIN ADD V5.84a
	 *   } finally {
	 *       GConnectAfe.close(rsAccountNumber);
	 *       GConnectAfe.close(psAccountNumber);
	 *   }
	 *   //END ADD V5.84a
	 * }
	 * //END ADD V5.75a
	 * //END DELETE V6.03a
	 * //BEGIN ADD ver 5.80b
	 *
	 * Returns RateClassId corresponding to the input CPLID fron CustomerProductLine Table.
	 * @param lCustomerProductLineID
	 * @return int, RateClassId corresponding to the input CPLID fron CustomerProductLine Table.
	 * @throws Exception
	 */
	public int iGetRateClassIDByCPLID(long lCustomerProductLineID)
			throws Exception {
		CustomerProductLineRow objCustomerProductLineRow = null;
		CustomerProductLine objCustomerProductLine = null;
		int iRateClassID = 0;

		objCustomerProductLine = (CustomerProductLine) GConnectMemoryDB
				.getTable(GAfeConstants.CUSTOMERPRODUCTLINE);

		if (null != objCustomerProductLine) {
			objCustomerProductLineRow = objCustomerProductLine
					.cplrSearchByCustProductLineID(lCustomerProductLineID);

			if (null != objCustomerProductLineRow) {
				iRateClassID = objCustomerProductLineRow.iRateClassID;
			}
		}

		return iRateClassID;
	}

	// END ADD ver 5.80b
	// BEGIN ADD V5.80c

	/**
	 * Description this function gives the optiongroupid, rateclassid from the table optiongroup
	 * @param vctOptionGroupId
	 * @return Vector of Business object BOptionRateId
	 * @throws AfeException
	 */
	public Vector vctBGetOptionGrRateId(Vector vctOptionGroupId)
			throws AfeException {
		GLogger.logEntry(CLASS_NAME, METHOD_vctBGetOptionGrRateId);
		GLogger.logInput(CLASS_NAME, METHOD_vctBGetOptionGrRateId,
				"vctOptionGroupId" + vctOptionGroupId);

		// Begin DEL v9.01d
		// Vector vctOptionGrIDs = null;
		// Vector vctOptionGrpRows = null;
		// Vector vctProductIDs = null;
		// Vector vctRateClassIDs = null;
		// Hashtable htbOpGrpIDs = null;
		// Hashtable htbOptionGroupIDs = null;
		// Hashtable htbRateClassIDs = null;
		// Long lngOptionGroupID = null;
		// Integer iRateClassID = null;
		// End DEL v9.01d
		OptionGroupRow optionGroupRow = null;

		// Begin DEL v9.01d
		// java.sql.Date dtSysdate = null;
		// long lngRateClassID = 0;
		// End DEL v9.01d
		Vector vctBOptGrRateIds = null;

		try {
			BOptionRateId objBOptionRateId = new BOptionRateId();

			// Begin DEL v9.01d
			// dtSysdate = new java.sql.Date(System.currentTimeMillis());
			// End DEL v9.01d
			optionGroupTable = (OptionGroup) teleSessionMgr
					.getMasterTable(string_OPTIONGROUP);

			if (null != vctOptionGroupId) {
				for (int iOptionGroup = 0; iOptionGroup < vctOptionGroupId
						.size(); iOptionGroup++) {
					optionGroupRow = optionGroupTable
							.prSearchByOptionGroupIDandObsolete(
									((Long) vctOptionGroupId
											.elementAt(iOptionGroup))
											.longValue(), 0);

					if (null == vctBOptGrRateIds) {
						vctBOptGrRateIds = new Vector(1);
					}

					if (!(vctBOptGrRateIds.contains(Long.valueOf(
							optionGroupRow.lOptionGroupID)))) {
						objBOptionRateId
								.setOptionGroupId(optionGroupRow.lOptionGroupID);
						objBOptionRateId
								.setRateClassId(optionGroupRow.iRateClassID);
						vctBOptGrRateIds.addElement(objBOptionRateId);
					}

					GLogger.debug(CLASS_NAME, METHOD_vctBGetOptionGrRateId,
							"vctBOptGrRateIds" + vctBOptGrRateIds);
				}
			}
		} catch (Exception ex) {
			GLogger.logException(ex);
		}

		GLogger.logOutput(CLASS_NAME, METHOD_vctBGetOptionGrRateId,
				vctBOptGrRateIds);
		GLogger.logExit(CLASS_NAME, METHOD_vctBGetOptionGrRateId);

		return vctBOptGrRateIds;
	}

	/**
	 * This method gets the customerproductlineids rows
	 * @param vctCustomerProductLineId
	 * @return VECTOR OF CUSTOMERPRODUCTLINEROW
	 * @throws AfeException
	 */
	public Vector vctBCustomerProductLineRow(Vector vctCustomerProductLineId)
			throws AfeException {

		// Begin DEL v9.01d
		// CustomerChargeTypeRow customerchargetype = new CustomerChargeTypeRow();
		// CustomerProductLineRow customerproductlinetype = new CustomerProductLineRow();
		// End DEL v9.01d
		BCustomerProductLine objBCustomerProductLine = new BCustomerProductLine();

		// Begin DEL v9.01d
		// Vector vctTempCustomerProductLineRow = new Vector(1);
		// Vector vctCustomerProductLineRow = new Vector(1);
		// Long lngCustomerProductLineID;
		// End DEL v9.01d
		// Vector vctCustomerProductLineRowsAll = new Vector();
		customerProductLineTable = (CustomerProductLine) teleSessionMgr
				.getTable("CustomerProductLine");

		CustomerProductLineRow customerproductlinerow = null;
		Vector vctCustomerProductLineIds = null;
		Vector vctBCustomerProductLine = null;

		GLogger.logEntry(CLASS_NAME, METHOD_vctCustomerProductLineRow);
		GLogger.logInput(CLASS_NAME, METHOD_vctCustomerProductLineRow,
				"vctCustomerProductLineId" + vctCustomerProductLineId);

		try {
			if (null != vctCustomerProductLineId) {
				for (int iProdLine = 0; iProdLine < vctCustomerProductLineId
						.size(); iProdLine++) {
					customerproductlinerow = (customerProductLineTable
							.cplrSearchByCustProductLineID(((Long) vctCustomerProductLineId
									.elementAt(iProdLine)).longValue()));

					if (null != customerproductlinerow) {
						if ((customerproductlinerow.dtDeactivationDate == null)
								|| (customerproductlinerow.dtDeactivationDate
										.compareTo(new Date()) > 0)) {
							objBCustomerProductLine
									.setCustomerProductLineId(customerproductlinerow.lCustomerProductLineID);
							objBCustomerProductLine
									.setProductId(customerproductlinerow.lProductID);
							objBCustomerProductLine
									.setRateClassId(customerproductlinerow.iRateClassID);

							if (null == vctBCustomerProductLine) {
								vctBCustomerProductLine = new Vector();
							}

							vctBCustomerProductLine
									.addElement(objBCustomerProductLine);
						}
					}
				}
			}
		} catch (Exception ex) {
			GLogger.logException(ex);
		}

		GLogger.logOutput(CLASS_NAME, METHOD_vctCustomerProductLineRow,
				"CustomerProductLineIds" + vctCustomerProductLineIds);
		GLogger.logExit(CLASS_NAME, METHOD_vctCustomerProductLineRow);

		return vctCustomerProductLineIds;
	}

	// END ADD V5.80c

	// BEGIN ADD V5.90a

	/**
	 * This method Calls Clarify for Creating Contact.
	 *
	 * @param objBProductRole Object of BProductRole
	 * @throws Exception
	 */
	public final void vdCallClarifyforContact(BProductRole objBProductRole)
			throws Exception {
		String strEpithet = "";
		String strLastName = "";
		String strFirstName = "";
		String strBox = "";
		long lCustomerID = 0;
		long lAddressID = 0;
		long lCustomerLinkID = 0;
		int iCounter = 0;
		Address objAddress = null;
		Epithet objEpithet = null;
		BSession objBSession = null;
		Customer objCustomer = null;
		EpithetRow objEpithetRow = null;
		CustomerLink objCustomerLink = null;
		CustomerRow objCustomerRow = null;
		ManualAddress objManualAddress = null;
		BCatsapAddress objBCatsapAddress = null;
		Vector vctAddressInternal = null;
		Vector vctCustomerLinkRow = null;
		LCustomer objLCustomer = null;
		ManualAddressRow objManualAddressRow = null;
		BProductRoleDetail objBProductRoleDetail = null;
		BCustomerAddress objBCustomerAddress = null;

		GLogger.logEntry(CLASS_NAME, METHOD_vdCallClarifyforContact);

		// Begin DEL v9.01d
		// try {
		// End DEL v9.01d
		objCustomer = (Customer) teleSessionMgr
				.getTable(GAfeConstants.CUSTOMER);
		objCustomerLink = (CustomerLink) teleSessionMgr
				.getTable(GAfeConstants.CUSTOMERLINK);
		objEpithet = (Epithet) teleSessionMgr
				.getMasterTable(GAfeConstants.EPITHET);
		objBSession = (BSession) teleSessionMgr
				.getValue(GAfeConstants.BSESSION_AFE);

		if ((null != objCustomer) && (null != objCustomerLink)
				&& (null != objBSession)) {
			for (iCounter = FINAL_ZERO; iCounter < objBProductRole.vctProductRole
					.size(); iCounter++) {
				objBProductRoleDetail = (BProductRoleDetail) objBProductRole.vctProductRole
						.elementAt(iCounter);

				if (GAfeDescription.ROLETYPE_USER == objBProductRoleDetail.lRoleTypeID
						.longValue()) {
					break;
				}
			}

			lCustomerID = (objBProductRoleDetail.lCustomerID).longValue();
			;
			lAddressID = (objBProductRoleDetail.lAddressID).longValue();
			;
			//vctCustomerLinkRow = new Vector();
			vctCustomerLinkRow = objCustomerLink
					.clrSearchByCustIDAddIDandObsolete(lCustomerID, lAddressID,
							0);

			if (null != vctCustomerLinkRow) {
				lCustomerLinkID = ((CustomerLinkRow) (vctCustomerLinkRow
						.elementAt(FINAL_ZERO))).lCustomerLinkID;
				objCustomerRow = (CustomerRow) objCustomer
						.crSearchByCustIDandObsolete(lCustomerID, FINAL_ZERO);

				if (null != objCustomerRow) {
					if (null != objCustomerRow.strFirstName) {
						strFirstName = objCustomerRow.strFirstName;
					}

					if (null != objCustomerRow.strName) {
						strLastName = objCustomerRow.strName;
					}

					if (null != objEpithet) {
						objEpithetRow = objEpithet
								.astrSearchByEpithetID(objCustomerRow.lEpithetID);

						if (null != objEpithetRow) {
							strEpithet = strGetDescription(
									objBSession.lLanguageId,
									objEpithetRow.lDescriptionID);
						} else {
							strEpithet = "";
						}
					}
				} else {
					strFirstName = "";
					strLastName = "";
					strEpithet = "";
				}

				if ((null != objBProductRoleDetail.CatSapID)
						&& (FINAL_ZERO < objBProductRoleDetail.CatSapID
								.longValue())) {
					objLCustomer = new LCustomer();
					objBCustomerAddress = new BCustomerAddress();
					objBCustomerAddress.lCustomerId = lCustomerID;
					objBCustomerAddress.lAddressId = lAddressID;
					objBCustomerAddress.lServiceAddressId = objBProductRoleDetail.CatSapID
							.longValue();
					objLCustomer.vSelectCatsapAddress(objBCustomerAddress);
					objBCatsapAddress = objLCustomer
							.objAddressFromSapId(objBProductRole.lServiceAddressID
									.longValue());

					if (objBCatsapAddress.strBox == null) {
						strBox = "";
					} else {
						strBox = objBCatsapAddress.strBox;
					}

					iCreateContactInClfy(Long.valueOf(lCustomerLinkID), Long.valueOf(
							lCustomerID), objBProductRoleDetail.CatSapID,
							strFirstName, strLastName,
							objBCustomerAddress.strCity,
							objBCustomerAddress.strPostCode,
							objBCatsapAddress.strStreet,
							objBCustomerAddress.strHouseNumber,
							objBCustomerAddress.strSubHouseNumber, strEpithet,
							strBox);
				} else {
					if (FINAL_ZERO < objBProductRoleDetail.lManualAddressID
							.longValue()) {
						//vctAddressInternal = new Vector();
						objManualAddress = (ManualAddress) teleSessionMgr
								.getTable(GAfeConstants.MANUALADDRESS);

						if (null != objManualAddress) {
							objManualAddressRow = objManualAddress
									.marSearchByManualAddressID(objBProductRoleDetail.lManualAddressID
											.longValue());

							if (null != objManualAddressRow) {
								objAddress = (Address) teleSessionMgr
										.getTable(GAfeConstants.ADDRESS);

								if (null != objAddress) {
									vctAddressInternal = objAddress
											.vctSearchByAddressIDandObsolete(
													lAddressID, FINAL_ZERO);

									if (null != vctAddressInternal) {
										if (null == objManualAddressRow.strCity) {
											objManualAddressRow.strCity = "";
										}

										if (null == objManualAddressRow.strZip) {
											objManualAddressRow.strZip = "";
										}

										if (null == objManualAddressRow.strStreetName) {
											objManualAddressRow.strStreetName = "";
										}

										iCreateContactInClfy(
												Long.valueOf(lCustomerLinkID),
												objBProductRoleDetail.lCustomerID,
												null,
												strFirstName,
												strLastName,
												objManualAddressRow.strCity,
												objManualAddressRow.strZip,
												objManualAddressRow.strStreetName,
												((AddressRow) vctAddressInternal
														.elementAt(FINAL_ZERO)).strHouseNumber,
												((AddressRow) vctAddressInternal
														.elementAt(FINAL_ZERO)).strSubHouseNumber,
												strEpithet,
												((AddressRow) vctAddressInternal
														.elementAt(FINAL_ZERO)).strBox);
									}
								}
							}
						}
					}
				}
			}
		}

		// Begin DEL v9.01d
		// } finally {
		// }
		// End DEL v9.01d
		GLogger.logExit(CLASS_NAME, METHOD_vdCallClarifyforContact);
	}

	// END ADD V5.90a

	// BEGIN  Adding for Ver5.96d
	private static final com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo objLoadCustomerInfo(
			Epithet epithet, ObjectDescription objectDescription,
			long CustomerID, CustomerRow customerRow,
			ContactInfoRow contInfoRow, String strCountryName, long lLanguageId)
			throws Exception {

		// BEGIN: Deleted for Ver5.96h
		// to populate the CustomerInfo details
		// com.fullgc.afe.customer.BCustomerInfo bCustomerInfoAfe = new com.fullgc.afe.customer.BCustomerInfo();
		// MCustomerInfo mCustomer = new MCustomerInfo();
		// bCustomerInfoAfe=(com.fullgc.afe.customer.BCustomerInfo)MCustomerInfo.objSelectCustomerInfoDB(CustomerID);
		// END: Deleted for Ver5.96h
		com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo bCustomerInfo = new com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo(); // this is the transfer object

		bCustomerInfo.setlCustomerId(CustomerID);
		bCustomerInfo.setStrName(customerRow.strFirstName);
		bCustomerInfo.setStrLastName(customerRow.strName);
		bCustomerInfo.setStrCustomerComany(GAfeConstants.COMPANY_X);
		bCustomerInfo.setlCustomerNumber(customerRow.lCustomerNumber);

		if (null != contInfoRow) {
			bCustomerInfo.setStrDayTelNo(contInfoRow.strPhoneDay);
			bCustomerInfo.setStrNightTelNo(contInfoRow.strPhoneEvening);
		}

		bCustomerInfo.setDtBirth(customerRow.dtDateOfBirth);
		bCustomerInfo.setStrBirthPlace(customerRow.strPlaceOfBirth);
		bCustomerInfo.setStrNationality(strCountryName); // CountryName

		// Epithet epithet = (Epithet)teleSessionMgr.getMasterTable("Epithet");
		EpithetRow epithetRow = null;

		epithetRow = (EpithetRow) epithet
				.astrSearchByEpithetID(customerRow.lEpithetID);

		ObjectDescriptionRow objectDescriptionRow = null;

		// ObjectDescription objectDescription = (ObjectDescription)teleSessionMgr.getMasterTable("OBJECTDESCRIPTION");
		objectDescriptionRow = (ObjectDescriptionRow) objectDescription
				.odrSearchByDescIDAndLangID(epithetRow.lDescriptionID,
						lLanguageId);
		bCustomerInfo.setStrTitle(objectDescriptionRow.strDescription);
		GLogger.logExit(CLASS_NAME, METHOD_objLoadCustomerInfo);

		return bCustomerInfo;
	}

	// END Adding for Ver5.96d
	// BEGIN  Adding for Ver5.96d
	private static final BAddressInfo objLoadAddressInfo(long lAddressId,
			String arrAddressCDM[]) throws Exception {
		BAddressInfo bAddressInfo = new BAddressInfo();

		bAddressInfo.setlAddressId(lAddressId);
		bAddressInfo.setStrAddressBox(arrAddressCDM[2]);

		if ((null != arrAddressCDM[5]) && !("").equals(arrAddressCDM[5])) {

			// BEGIN DELETE V6.07a
			// bAddressInfo.setiZip((Integer.parseInt((arrAddressCDM[5]).trim()) ) );
			// END DELETE V6.07a
			// BEGIN ADD V6.07a
			bAddressInfo.setStrZip(((arrAddressCDM[5]).trim()));

			// END ADD V6.07a
		}

		bAddressInfo.setStrCity(arrAddressCDM[4]);
		bAddressInfo.setStrCountry(arrAddressCDM[6]);
		bAddressInfo.setStrArborAddress(" ");
		bAddressInfo.setStrStreetName(arrAddressCDM[3]);
		bAddressInfo.setStrHouseNr(arrAddressCDM[0]);
		bAddressInfo.setStrSubHouseNr(arrAddressCDM[1]);
		GLogger.logExit(CLASS_NAME, METHOD_objLoadAddressInfo);

		return bAddressInfo;
	}

	// END Adding for Ver5.96d
	// BEGIN Adding for Ver5.96d
	private static final BDocumentRequest objLoadDocumentRequest(
			long lCustomerID,
			long lLanguageId,
			long lDocumentTypeID,
			long lDocumentID,
			String strUserName,
			long lAddressId,
			BAddressInfo bAddressInfo,
			com.fullgc.documents.commonclient.transferobject.docbuild.nodes.BCustomerInfo bCustomerInfo,
			Object objDocData) throws Exception {
		BDocumentRequest bDocumentRequest = new BDocumentRequest();

		bDocumentRequest.setAddresseeId(lCustomerID);
		bDocumentRequest
				.setAddresseeTypeId(GAfeDescription.ADDRESSEETYPEID_CDM);
		bDocumentRequest.setLanguageId(lLanguageId);
		bDocumentRequest.setDocumentTypeId(lDocumentTypeID);
		bDocumentRequest
				.setDispatchTypeId(GAfeDescription.LDISPATCHTYPEID_PRINT);
		bDocumentRequest.setDocumentId(lDocumentID);
		bDocumentRequest.setUserName(strUserName);

		// Not Required:  call method to load customerInfo
		// bCustomerInfo = (BCustomerInfo)objLoadCustomerInfo();
		// bAddressInfo = (BAddressInfo)objLoadAddressInfo();
		// not required
		if ((GAfeDescription.DOCUMENTTYPE_INTERCEPT_O == bDocumentRequest
				.getDocumentTypeId())
				|| (GAfeDescription.DOCUMENTTYPE_INTERCEPT_W == bDocumentRequest
						.getDocumentTypeId())) {
			BInterceptDisconnectRequest bInterceptDisconnectRequest = new BInterceptDisconnectRequest();

			if (null != bAddressInfo) {
				bInterceptDisconnectRequest.setObjBAddresInfo(bAddressInfo);
			}

			if (null != bCustomerInfo) {
				bInterceptDisconnectRequest.setObjBcustomerInfo(bCustomerInfo);
			}

			bDocumentRequest
					.setBDocumentRequestDetail(bInterceptDisconnectRequest);
		} else if (GAfeDescription.DOCUMENTTYPE_LOA == bDocumentRequest
				.getDocumentTypeId()) {
			BLOARequest bLOARequest = new BLOARequest();

			if (null != bCustomerInfo) {
				bLOARequest.setObjCustomerInfo(bCustomerInfo);
			}

			if (null != bAddressInfo) {
				bLOARequest.setObjAddressInfo(bAddressInfo);
			}

			if (null != (BProductLine) objDocData) {
				bLOARequest.setObjBProductLine((BProductLine) objDocData);
			}

			bDocumentRequest.setBDocumentRequestDetail(bLOARequest);
		}

		// BEGIN ADD ver 5.97a
		else if (GAfeDescription.DOCUMENTTYPE_CABLEACCESS_BROCHURE == bDocumentRequest
				.getDocumentTypeId()) {
			BCustomerFulfilmentRequest objBCustomerFulfilmentRequest = new BCustomerFulfilmentRequest();

			if (null != bCustomerInfo) {
				objBCustomerFulfilmentRequest.setObjCustomerInfo(bCustomerInfo);
			}

			if (null != bAddressInfo) {
				objBCustomerFulfilmentRequest.setObjAddressInfo(bAddressInfo);
			}

			// Begin Add V6.05g
			objBCustomerFulfilmentRequest
					.setStrDocumentDescription(LProduct_ext
							.strGetDocumentTypeDescription(
									GAfeDescription.DOCUMENTTYPE_CABLEACCESS_BROCHURE,
									lLanguageId));

			// End Add V6.05g
			bDocumentRequest
					.setBDocumentRequestDetail(objBCustomerFulfilmentRequest);
		}

		// END ADD ver 5.97a
		GLogger.logExit(CLASS_NAME, METHOD_objLoadDocumentRequest);

		return bDocumentRequest;
	}

	// END Adding for Ver5.96d
	// BEGIN Adding for Ver5.96d
	private final BProductLine objLoadProductLine(long lDocumentID,
			TeleSessionMgr teleSessionMgr) throws Exception {
		GLogger.logEntry(CLASS_NAME, METHOD_objLoadProductLine);

		BSession bSession = (BSession) teleSessionMgr
				.getValue(GAfeConstants.BSESSION_AFE);
		Document docTable = (Document) teleSessionMgr.getTable("DOCUMENT");

		// Begin DEL v9.01d
		// DocumentType docTypeTable     = (DocumentType) teleSessionMgr.getMasterTable("DOCUMENTTYPE");
		// End DEL v9.01d
		if (null == productTable) {
			productTable = (Product) teleSessionMgr.getMasterTable(string_PRODUCT);
		}

		CustomerProductParameter custProdParaTable = (CustomerProductParameter) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTPARAMETER);
		CustomerProduct custProdTable = (CustomerProduct) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCT);

		if (null == objectDescriptionTable) {
			objectDescriptionTable = (ObjectDescription) teleSessionMgr
					.getMasterTable(string_OBJECTDESCRIPTION);
		}

		CustomerProductLineIdentifier customerProductLineIdentifier = (CustomerProductLineIdentifier) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);
		CustomerProductLine customerProductLine = (CustomerProductLine) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINE);
		DocumentRow docRow = (DocumentRow) docTable
				.docSearchByDocID(lDocumentID);
		BProductLine bProductLine = new BProductLine();

		if (null != docRow) {
			CustomerProductLineRow customerProductLineRow = (CustomerProductLineRow) customerProductLine
					.cplrSearchByCustProductLineID(docRow.lObjectID);

			if (customerProductLineRow.iStatusInDB == Record.INSERT) {

				// putting the actual/dummy CustomerProductLineId in case of new CPS line
				bProductLine.setlCustomerProductLineId(docRow.lObjectID);
			} else {
				bProductLine.setlCustomerProductLineId(docRow.lObjectID);
			}

			if (null != customerProductLineRow) {
				bProductLine.setlLineTypeId(customerProductLineRow.lProductID);

				ObjectDescriptionRow objectDescriptionRow = (ObjectDescriptionRow) objectDescriptionTable
						.odrSearchByDescIDAndLangID_Billing(productTable
								.prSearchByProductIDandObsolete(bProductLine
										.getlLineTypeId(), 0).lDescription1ID,
								bSession.lLanguageId);

				bProductLine
						.setStrLineType(objectDescriptionRow.strDescription);

				CustomerProductLineIdentifierRow cpLineIdentifierRow = null;
				Vector vctCpLineIdentifierRow = (Vector) customerProductLineIdentifier
						.cplirSearchByCustProdLineID(customerProductLineRow.lCustomerProductLineID);
				StringBuffer sbfIdentifierValue = new StringBuffer("");

				if (null != vctCpLineIdentifierRow) {
					for (int iCounter = 0; iCounter < vctCpLineIdentifierRow
							.size(); iCounter++) {
						cpLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCpLineIdentifierRow
								.elementAt(iCounter);

						if (null != cpLineIdentifierRow.strCustomerPLIdentifierValue) {
							if (iCounter > 0) {
								sbfIdentifierValue
										.append(SLASH)
										.append(
												cpLineIdentifierRow.strCustomerPLIdentifierValue);
							} else {
								sbfIdentifierValue = sbfIdentifierValue
										.append(cpLineIdentifierRow.strCustomerPLIdentifierValue);
							}
						}
					}

					bProductLine.setStrIdentifierValue(sbfIdentifierValue
							.toString());
				}

				CustomerProductRow cpRow = custProdTable
						.cprSearchByCustProductLineIDAndProductID(
								customerProductLineRow.lCustomerProductLineID,
								GAfeDescription.PRODUCT_INTO_PARAMETERS);
				CustomerProductParameterRow cppRow = custProdParaTable
						.cprSearchByCustProdIDAndProdParamID(
								cpRow.lCustomerProductID,
								GAfeDescription.PRODUCTPARAMETER_DONOR_KLANTNUMMER);

				bProductLine
						.setStrBGCCustomerNumebr(cppRow.strCustomerProductParameterValue);
			}
		}

		GLogger.logExit(CLASS_NAME, METHOD_objLoadProductLine);

		return bProductLine;
	}

	// END Adding for Ver5.96d
	// BEGIN ADD V5.96K

	/*
	 * Returns Minimum Activationdate for a given product, rateclass and AccountId combination from container.
	 * @param lProductId ProductId for the Product
	 * @param lRateClassId RateclassId for corresponding to the product
	 * @param lAccountId AccountId for the Account
	 * @returns Activationdate depending upon the product, rateclass and AccountId combination
	 * @throws Exception when fails to retrieve activationdate
	 */

	// BEGIN DELETE V5.96N
	// public String  strMinActDate(long lProductId, int iRateClassId, long lAccountId, TeleSessionMgr teleSessionMgr) throws Exception
	// END DELETE V5.96N
	// BEGIN ADD V5.96N
	public java.util.Date dtMinActDate(long lProductId, int iRateClassId,
			long lAccountId, TeleSessionMgr teleSessionMgr) throws Exception

	// END ADD V5.96N
	{
		Vector vctCustAcct = null;

		// Begin DEL v9.01d
		// long lCustomerproductlineid = 0;
		// Vector vctCPL = null;
		// Vector vctActDate = null;
		// End DEL v9.01d
		java.util.Date dtNextDate = null;
		java.util.Date dtMinActDate = null;

		// BEGIN ADD V5.96N
		// Begin DEL v9.01d
		// Date dtActDate = null;
		// End DEL v9.01d
		// END ADD V5.96N
		// Begin DEL v9.01d
		// try
		// {
		// End DEL v9.01d
		CustomerProductLine cpl = (CustomerProductLine) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINE);
		CustomerChargeType cct = (CustomerChargeType) teleSessionMgr
				.getTable(string_CUSTOMERCHARGETYPE);

		vctCustAcct = cct.vctSearchByCustomerAccountID(lAccountId, 0);

		for (int iCnt = 0; iCnt < vctCustAcct.size(); iCnt++) {
			CustomerChargeTypeRow cctRow = (CustomerChargeTypeRow) vctCustAcct
					.elementAt(iCnt);

			// BEGIN DELETE V5.96M
			// vctCPL = cpl.vctSearchByCustProductLineIDandiObsolete(cctRow.lCustomerProductLineID,0);
			// END DELETE V5.96M
			// BEGIN MODIFY V5.96M
			CustomerProductLineRow cplRow = cpl
					.cplrSearchByCustProductLineIDandObsolete(
							cctRow.lCustomerProductLineID, 0);

			if ((lProductId == cplRow.lProductID)
					&& (iRateClassId == cplRow.iRateClassID)) {

				// BEGIN ADD V5.96N
				if (cplRow.dtActivationDate != null) {

					// END ADD V5.96N
					if (iCnt == 0) {
						dtMinActDate = cplRow.dtActivationDate;
					} else {
						dtNextDate = cplRow.dtActivationDate;

						if (dtMinActDate.before(dtNextDate)) {
							dtMinActDate = dtNextDate;
						}
					}

					// END MODIFY V5.96M
					// BEGIN ADD V5.96N
				}

				// END ADD V5.96N
			}
		}

		// Begin DEL v9.01d

		/*
		 * }
		 * finally
		 * {
		 *
		 * }
		 */

		// End DEL v9.01d
		// BEGIN MODIFY V5.96N
		// return dtMinActDate.toString();
		return dtMinActDate;

		// END MODIFY V5.96N
	}

	/*
	 * Returns the vector with ALF which are required to be recalculated.
	 * @param vctBCPALFForUpdate Vector for the ALF's
	 * @throws Exception when fails to return the filtered vector set.
	 */

	//  BEGIN MODIFY V5.96N
	// BEGIN DELETE V5.97B
	// public void vUpdateALFInContainer(Vector vctBCPALFForUpdate , TeleSessionMgr teleSessionMgr,String strUser) throws Exception
	// END DELETE V5.97B
	// BEGIN ADD V5.97B
	public void vUpdateALFInContainer(Vector vctBCPALFForUpdate, String strUser)
			throws Exception

	// END ADD V5.97B
	//END MODIFY V5.96N
	{
		java.util.Date dtActivationDate = null;
		Vector vctCustChargeType = null;
		CustomerProduct cp = (CustomerProduct) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCT);
		CustomerChargeType cct = (CustomerChargeType) teleSessionMgr
				.getTable(string_CUSTOMERCHARGETYPE);

		for (int iCnt = 0; iCnt < vctBCPALFForUpdate.size(); iCnt++) {
			BCustomerProductAlf bCustomerproductAlf = (BCustomerProductAlf) vctBCPALFForUpdate
					.elementAt(iCnt);
			CustomerProductRow cpRow = cp.cprSearchByCustProductIDandObsolete(
					bCustomerproductAlf.lCustomerProductId, 0);

			// BEGIN DELETE V5.96M
			// cpRow.dtActivationDate = dtActivationDate;
			// END DELETE V5.96M
			// BEGIN DELETE V5.97B
			// if ( cpRow.iStatusInDB != Record.INSERT)
			// {
			// END DELETE V5.97B
			// BEGIN ADD V5.96M
			// BEGIN DELETE V5.96N
			// cpRow.dtActivationDate = dtActivationDate;
			// END DELETE V5.96N
			// END ADD V5.96M
			// BEGIN ADD V5.96N
			cpRow.dtActivationDate = bCustomerproductAlf.dtDeActDate;

			// END ADD V5.96N
			cpRow.iStatusInDB = Record.UPDATE;
			cp.updateRecord(cpRow);
			teleSessionMgr.putTable(string_CUSTOMERPRODUCT, cp);

			// BEGIN DELETE V5.97B
			// }
			// END DELETE V5.97B
			// BEGIN MODIFY V5.96M
			vctCustChargeType = cct
					.vctSearchByCustomerProductID(bCustomerproductAlf.lCustomerProductId);

			// END MODIFY V5.96M
			for (int iCount = 0; iCount < vctCustChargeType.size(); iCount++) {
				CustomerChargeTypeRow cctRow = (CustomerChargeTypeRow) vctCustChargeType
						.elementAt(iCount);

				// BEGIN DELETE V5.96M
				// cctRow.dtActivationDate = dtActivationDate;
				// END DELETE V5.96M
				// BEGIN DELETE V5.97B
				// if ( cctRow.iStatusInDB != Record.INSERT)
				// {
				// END DELETE V5.97B
				// BEGIN ADD V5.96M
				cctRow.dtActivationDate = dtActivationDate;

				// END ADD V5.96M
				// BEGIN ADD V5.96N
				cctRow.strModificationUser = strUser;
				cctRow.dtModificationDate = tstmGetSqlTimestamp(new java.util.Date());

				// END ADD V5.96N
				cctRow.iStatusInDB = Record.UPDATE;
				cct.updateRecord(cctRow);
				teleSessionMgr.putTable(string_CUSTOMERCHARGETYPE, cct);

				// BEGIN DELETE V5.97B
				// }
				// END DELETE V5.97B
			}
		}
	}

	// END ADD V5.96K
	// BEGIN ADD V5.96l
	public static long lGetOrderStatusForCPLID(long lCustomerProductLineId)
			throws Exception {
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		long lOrderStatus = 0;

		try {
			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GETORDERSTATUSFORCPLID);
			psQuery.setLong(1, lCustomerProductLineId);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				lOrderStatus = rsRetrieve.getLong(1);
			}
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return lOrderStatus;
	}

	public static long lGetOrderIdForCPLID(long lCustomerProductLineId)
			throws Exception {
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		long lOrderId = 0;

		try {
			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GETORDERIDFORCPLID);
			psQuery.setLong(1, lCustomerProductLineId);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				lOrderId = rsRetrieve.getLong(1);
			}
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return lOrderId;
	}

	public static String strGetPinInfoFromOrderParameter(long lOrderId,
			long lOrderTypeParameterId) throws Exception {
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		String strPin = null;

		try {
			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GETPINFROMOBJPARAM);
			psQuery.setLong(1, lOrderId);
			psQuery.setLong(2, lOrderTypeParameterId);
			rsRetrieve = psQuery.executeQuery();

			// BEGIN DELETE V6.07l
			// while(rsRetrieve.next())
			// END DELETE V6.07l
			// BEGIN ADD V6.07l
			if (rsRetrieve.next())

			// END ADD V6.07l
			{
				strPin = rsRetrieve.getString(1);
			}

			// BEGIN ADD V6.07l
			// If orderparameter is not found, set a special value in strPIN
			else {
				strPin = GAfeConstants.PIN_ORDER_PARAMETER_NOT_FOUND;
			}

			// END ADD V6.07l
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return strPin;
	}

	public static long lGetPinId(String strPin) throws Exception {
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		long lPinId = 0;

		try {
			psQuery = GConnectAfe.psPrepareStatement(GAfeSql.S_GETPINIDFROMPIN);
			psQuery.setString(1, strPin);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				lPinId = rsRetrieve.getLong(1);
			}
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return lPinId;
	}

	public static long lGetPinInfoFromCPL2Pin(long lCustomerProductLineId)
			throws Exception {
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		long lPinId = 0;

		try {
			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GETPINIDFROMCPL2PIN);
			psQuery.setLong(1, lCustomerProductLineId);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				lPinId = rsRetrieve.getLong(1);
			}
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return lPinId;
	}

	public static void populateBProductDetailPropertyWithPinInfo(
			BProductDetailProperty bpdpObject) throws Exception {
		ResultSet rsRetrieve = null;

		// Begin DEL v9.01d
		// PreparedStatement psQuery = null;
		// End DEL v9.01d
		long lCustomerProductLineId = bpdpObject.lCustomerProductLineID
				.longValue();
		String strPin = null;
		long lPinId = 0;
		long lOrderTypeParameterId = GAfeDescription.SB_ORDERTYPEPARAMETER;
		long lOrderStatus = 0;
		long lOrderId = 0;

		// BEGIN ADD v7.04a
		String strPinId = null;

		// END ADD v7.04a
		try {
			lOrderStatus = lGetOrderStatusForCPLID(lCustomerProductLineId);

			if (lOrderStatus == 1) {
				lOrderId = lGetOrderIdForCPLID(lCustomerProductLineId);

				if (lOrderId > 0) {

					// BEGIN DELETE v7.04a
					// strPin = strGetPinInfoFromOrderParameter(lOrderId,lOrderTypeParameterId);
					// END DELETE v7.04a
					// BEGIN ADD v7.04a
					strPinId = strGetPinInfoFromOrderParameter(lOrderId,
							lOrderTypeParameterId);

					// END ADD v7.04a
				}

				// BEGIN DELETE v7.04a

				/*
				 * if(strPin != null && !strPin.equals(""))
				 * {
				 *   lPinId  = lGetPinId(strPin);
				 * }
				 */

				// END DELETE v7.04a
				// BEGIN ADD v7.04a
				if ((strPinId != null) && !strPinId.equals("")) {
					lPinId = Long.parseLong(strPinId);
					GLogger.chkpt("LProduct.java : lPinId =" + lPinId);
					strPin = strGetPinForPinId(lPinId);
					GLogger.chkpt("LProduct.java : strPin =" + strPin);
				}

				// END ADD v7.04a
			} else {
				lPinId = lGetPinInfoFromCPL2Pin(lCustomerProductLineId);
				strPin = strGetPinForPinId(lPinId);
			}

			if (strPin == null) {
				strPin = "";
			}

			bpdpObject.strPIN = strPin;
			bpdpObject.strOldPIN = strPin;
			bpdpObject.lPinID = lPinId;
		} finally {
			GConnectAfe.close(rsRetrieve);
		}
	}

	public static String strGetPinForPinId(long lPinId) throws Exception {
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		String strPin = "";

		try {

			// GConnectAfe.setCallFromBatchProcess(true);
			psQuery = GConnectAfe.psPrepareStatement(GAfeSql.S_GETPINFORPINID);
			psQuery.setLong(1, lPinId);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				strPin = rsRetrieve.getString("PIN");
			}
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return strPin;
	}

	// END ADD V5.96l
	// Begin Add v5.96t
	protected Vector vctGetConnectivityInfoFromFirstAddressID(long lAddressID)
			throws Exception {
		long lSapID = 0;
		LCustomer lCustomer = null;
		// Begin DEL v9.01d
		// BSAPDetailsFromCATSAP objSapDetails = null;
		// End DEL v9.01d
		long lLanguageId = 0;
		Vector vctGetProductConnectivityInfo = new Vector(1);

		GLogger.logEntry(CLASS_NAME, METHOD_GETCONNECTIVITYINFOFROMFIRSTADDRID);
		GLogger.logInput(METHOD_GETCONNECTIVITYINFOFROMFIRSTADDRID,
				ARG_lAddressID, lAddressID);

		try {
			if (null != bSession) {
				lLanguageId = bSession.lLanguageId;
			}

			BCatsapAddress bCatsapAddress =null;

			lCustomer = new LCustomer(teleSessionMgr);
			addressTable = (Address) teleSessionMgr.getTable(string_ADDRESS);
			manualAddressTable = (ManualAddress) teleSessionMgr
					.getTable(string_MANUALADDRESS);

			AddressRow addressRow = null;
			Vector vctAddressInternal = null;

			vctAddressInternal = addressTable.vctSearchByAddressIDandObsolete(
					lAddressID, FINAL_ZERO);

			if ((null == vctAddressInternal)
					|| (FINAL_ZERO == vctAddressInternal.size())) {
				throw new AfeException(string_ERRAFE_00512);
			} else if (null != vctAddressInternal) {
				addressRow = null;
				addressRow = (AddressRow) vctAddressInternal
						.elementAt(FINAL_ZERO);
			}

			lSapID = 0;

			if (FINAL_ZERO != addressRow.lServiceAddressID) {
				lSapID = addressRow.lServiceAddressID;
				bCatsapAddress = lCustomer.objAddressFromSapId(lSapID);

				if (null != bCatsapAddress) {
					if (0 == lLanguageId) {
						if (null != bCatsapAddress.strLanguage) {
							lLanguageId = Long
									.parseLong(bCatsapAddress.strLanguage
											.trim());
						}
					}

					GLogger
							.debug(CLASS_NAME,
									METHOD_GETCONNECTIVITYINFOFROMFIRSTADDRID,
									"Its a Catsap Address So getting Connectivity for SAP");

					// TODO to be uncommented once the new method is ready
					// BEGIN ADD V6.09a
					try {

						// END ADD V6.09a
						vctGetProductConnectivityInfo = GNinas
								.vctGetProdConnectivityWithSapStsChk(null,
										null, null, null, false, lLanguageId,
										GAfeDescription.SALES_CAPACITY_CHECK,
										bCatsapAddress.lServiceAddressID);
						
						// BEGIN ADD V6.09a
					} catch (AfeException e) {
						if (e.strGetErrCode().equalsIgnoreCase(
								Constants.ERR_NEIGHBOUR_SAP_NOT_FOUND)) {
							GLogger
									.chkpt("LProduct , vctGetConnectivityInfoFromFirstAddressID , No neighbours found error consumed to allow CPS check to be done.");
						} else {
							throw e;
						}
					}

					// END ADD V6.09a
					// vctGetProductConnectivityInfo = lCustomer.vctGetProductConnectivityInfo(bCatsapAddress.strNodeId, bCatsapAddress.strLanguage,GAfeDescription.SALES_CAPACITY_CHECK,Long.valueOf(bCatsapAddress.lServiceAddressID));
				}
			} else // No SapID Available move for the Manual Address ID
			if (FINAL_ZERO != addressRow.lManualAddressID) {
				ManualAddressRow manualAddressRow = null;

				manualAddressRow = manualAddressTable
						.marSearchByManualAddressID(addressRow.lManualAddressID);

				if (null != manualAddressRow) {

					// Got the Manual Address ID
					String strHouseNr = (addressRow.strHouseNumber).trim();

					if (strHouseNr.length() > 5) {
						strHouseNr = strHouseNr.substring(0, 5);
					}

					if (0 == lLanguageId) {
						lLanguageId = 1;
					}

					GLogger
							.debug(CLASS_NAME,
									METHOD_GETCONNECTIVITYINFOFROMFIRSTADDRID,
									"Its a Manual Address So getting Connectivity with auto best guess");

					// BEGIN ADD V6.09a
					try {

						// END ADD V6.09a
						vctGetProductConnectivityInfo = GNinas
								.vctGetProdConnectivityWithSapStsChk(
										strHouseNr,
										(manualAddressRow.strStreetName).trim(),
										(manualAddressRow.strCity).trim(),
										(manualAddressRow.strZip).trim(), true,
										lLanguageId,
										GAfeDescription.SALES_CAPACITY_CHECK, 0);
						
						// Begin Add Rel 12.4 MultiDTV
						GLogger.chkpt("vctGetProductConnectivityInfo : "+ vctGetProductConnectivityInfo);
						if(vctGetProductConnectivityInfo != null)
						{
							BProductConnectivityInfo bProductConnectivityInfo = (BProductConnectivityInfo) vctGetProductConnectivityInfo.firstElement();
						
							GLogger.chkpt("bProductConnectivityInfo : "+ bProductConnectivityInfo);
							if(bProductConnectivityInfo != null && bProductConnectivityInfo.getStrPreventSubCoaxFlag() != null)
							{
								GLogger.chkpt("PreventSubCoaxFlag : "+ bProductConnectivityInfo.getStrPreventSubCoaxFlag());
								if(bProductConnectivityInfo.getStrPreventSubCoaxFlag().equalsIgnoreCase("Y"))
								{
									GLogger
									.debug(CLASS_NAME,
											METHOD_GETCONNECTIVITYINFOFROMFIRSTADDRID,
											"Setting PreventSubCoaxFlag");
									teleSessionMgr.putValue(GAfeConstants.PREVENT_SUB_COAX_FLAG , "Y");
								} else {
									//incase it is not Y then set to null
									teleSessionMgr.putValue(GAfeConstants.PREVENT_SUB_COAX_FLAG , "N");
								}
							}
						}
						// End Add Rel 12.4 MultiDTV

						// BEGIN ADD V6.09a
					} catch (AfeException e) {
						if (e.strGetErrCode().equalsIgnoreCase(
								Constants.ERR_NEIGHBOUR_SAP_NOT_FOUND)) {
							GLogger
									.chkpt("LProduct , vctGetConnectivityInfoFromFirstAddressID , No neighbours found error consumed to allow CPS check to be done.");
						} else {
							throw e;
						}
					}

					// END ADD V6.09a
				} // end of the if loop
			} else {
				throw new AfeException(string_ERRAFE_00686);
			} // end of the if else if loop
		} catch (AfeException afee) {
			throw afee;
		} catch (Exception ex) {
			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		// Return BO
		if (null != vctGetProductConnectivityInfo) {
			GLogger.logOutput(METHOD_GETCONNECTIVITYINFOFROMFIRSTADDRID,
					ARG_VCTPRODCONNECTIVITYINFO, vctGetProductConnectivityInfo
							.size());
		}

		GLogger.logExit(CLASS_NAME, METHOD_GETCONNECTIVITYINFOFROMFIRSTADDRID);

		return vctGetProductConnectivityInfo;
	}

	// End Add v5.96t

	// BEGIN ADD V 5.96u
	// LN 1813: Added method to retrieve user customerid for the line

	/**
	 *      Finds the user id for the input productline
	 *
	 *      @param lCPLID   Customerproductlineid of the line for which user customer has to be found
	 *      @return long    Customerid of the user of the line
	 *      @throws Exception If any db error occur
	 */
	protected long lRetrieveUserForCPLine(long lCPLID) throws Exception {
		long lCustomerID = 0;
		PreparedStatement psQuery = null;
		ResultSet rsQuery = null;

		GLogger.logEntry(CLASS_NAME, METHOD_IRETRIEVEUSERFORCPLINE);
		GLogger.logInput(CLASS_NAME, ARG_CUSTOMERPRODUCTLINEID, lCPLID);

		try {
			psQuery = GConnectAfe.psPrepareStatement(GAfeSql.S_GETUSERFORCPLID);
			psQuery.setLong(1, lCPLID);
			psQuery.setLong(2, GAfeDescription.lGetTypeId(string_ROLETYPE_USER));
			rsQuery = psQuery.executeQuery();

			while (rsQuery.next()) {
				lCustomerID = rsQuery.getLong("CUSTOMERID");
			}
		} finally {
			GConnectAfe.close(rsQuery);
			GConnectAfe.close(psQuery);
		}

		GLogger.logOutput(CLASS_NAME, METHOD_IRETRIEVEUSERFORCPLINE,
				lCustomerID);
		GLogger.logExit(CLASS_NAME, METHOD_IRETRIEVEUSERFORCPLINE);

		return lCustomerID;
	}

	// END ADD V 5.96u
	// BEGIN ADD v6.02f

	/**
	 *      Gets the short description for Accessproduct
	 *
	 *      @param lCustomerProductLineId
	 *      @return strReturn
	 *      @throws Exception If any db error occur
	 */
	public static String strShortDescriptionAccess(long lCustomerProductLineId)
			throws Exception {
		String strReturn;
		ResultSet rsQuery = null;
		PreparedStatement psQuery = null;
		StringBuffer sbfShortDescp = null;

		GLogger.logEntry(CLASS_NAME, METHOD_strShortDescriptionAccess);
		GLogger.logInput(CLASS_NAME, ARG_CUSTOMERPRODUCTLINEID,
				lCustomerProductLineId);

		try {
			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_EIGENSCHAPPEN_ALL);
			psQuery.setLong(1, lCustomerProductLineId);
			rsQuery = psQuery.executeQuery();
			sbfShortDescp = new StringBuffer();

			while (rsQuery.next()) {
				String strShortDesc = rsQuery.getString("SHORTDESCRIPTION");

				if ((null != strShortDesc)
						&& (!("".equals(strShortDesc.trim())))) {
					sbfShortDescp.append(strShortDesc);
					sbfShortDescp.append(SLASH);
				}
			}

			strReturn = sbfShortDescp.toString();
			GConnectAfe.close(rsQuery);
			GConnectAfe.close(psQuery);
		} finally {
			GConnectAfe.close(rsQuery);
			GConnectAfe.close(psQuery);
		}

		GLogger.logOutput(CLASS_NAME, METHOD_strShortDescriptionAccess,
				strReturn);
		GLogger.logExit(CLASS_NAME, METHOD_strShortDescriptionAccess);

		return strReturn;
	}

	// END ADD v6.02 f

	// BEGIN ADD V6.07d

	/**
	 * This function checks whether a product is a VAS product or not.
	 * It takes CDMConstants.arrVASProduct Array as refernce of all the VAS product IDs.
	 *
	 * @param productid the product to be checked
	 * @return false if productid is a VAS product else false
	 */
	public static final boolean bIsVASProduct(long productid) {
		int iTotalVASP = 0;
		boolean bVASProductFound = false;

		if (CDMConstants.arrVASProduct != null) {
			for (iTotalVASP = 0; iTotalVASP < CDMConstants.arrVASProduct.length; iTotalVASP++) {
				if (CDMConstants.arrVASProduct[iTotalVASP] == productid) {
					bVASProductFound = true;

					break;
				}
			}
		}

		return bVASProductFound;
	}

	/**
	 * The function will fill the parameters of the VAS products according to the requirements
	 * the requirements could be inclusion of master/all logins
	 *
	 * @param bProductParameter
	 * @param bInternet
	 */
	public static final void fillVASParameters(
			BProductParameter bProductParameter, BInternet bInternet) {
		GLogger.logEntry(CLASS_NAME, METHOD_fillVASParameters);

		Vector vctExt = new Vector();
		Vector vctInt = new Vector();
		String strLogin = null;

		/*
		 * 1.      Consider all the logins contained in Binternet.vctInternetDetail
		 * 2.      If all logins has to be included then include them.
		 * 3.      else if master login is to be included then include it.
		 */
		GLogger.chkpt("METHOD_fillVASParameter GAfeConstants.iLoginDescriptor "
				+ GAfeConstants.iLoginDescriptor);

		if (GAfeConstants.iLoginDescriptor == GAfeConstants.iMasterLoginOnly) {
			if (bInternet.vctInternetDetail != null) {
				strLogin = strGetMasterLogin(bInternet.vctInternetDetail);

				if (strLogin != null) {
					vctInt.addElement(strLogin);
					vctInt.addElement(Integer.valueOf(1));
					vctExt.addElement(vctInt);
				}
			}

			bProductParameter.vctParameterValues = vctExt;
		} else if (GAfeConstants.iLoginDescriptor == GAfeConstants.iAllLogins) {
			GLogger.chkpt("Inside else if statement ");	
			// Attach All Logins
			// vctExt = vctGetAllLogins(bInternet.vctInternetDetail);
		}

		GLogger.chkpt("METHOD_fillVASParameters Logins attached: " + vctExt);
		GLogger.logExit(CLASS_NAME, METHOD_fillVASParameters);
	}

	/**
	 * This Function returns new Vector of All the Logins in the vector vctInternetDetail
	 *
	 * @param vctInternetDetail
	 * @return <B>String</B> <I>Master Login</I>
	 */
	public static final Vector vctGetAllLogins(Vector vctInternetDetail) {
		GLogger.logEntry(CLASS_NAME, METHOD_vctGetAllLogins);

		int iCnt = 0;
		Vector vctExt = new Vector();
		Vector vctInt = null;

		if (null != vctInternetDetail) {
			for (iCnt = 0; iCnt < vctInternetDetail.size(); iCnt++) {
				vctInt = new Vector();
				vctInt.addElement(new String(
						(String) (((Vector) vctInternetDetail.elementAt(iCnt))
								.elementAt(0))));
				vctInt
						.addElement(Integer.valueOf(
								((Integer) (((Vector) vctInternetDetail
										.elementAt(iCnt)).elementAt(1)))
										.intValue()));
				vctExt.addElement(vctInt);
			}
		}

		GLogger.logExit(CLASS_NAME, METHOD_vctGetAllLogins);

		return vctExt;
	}

	/**
	 * This Function returns Master Login in the vector vctInternetDetail
	 *
	 * @param vctInternetDetail
	 * @return <B>String</B> <I>Master Login</I>
	 */
	public static final String strGetMasterLogin(Vector vctInternetDetail) {
		GLogger.logEntry(CLASS_NAME, METHOD_strGetMasterLogin);

		int iCnt = 0;
		String str = null;

		if (null != vctInternetDetail) {
			for (iCnt = 0; iCnt < vctInternetDetail.size(); iCnt++) {
				if (((Integer) ((Vector) (vctInternetDetail.elementAt(iCnt)))
						.elementAt(1)).intValue() == 1) {
					str = new String(((String) ((Vector) (vctInternetDetail
							.elementAt(iCnt))).elementAt(0)));

					break;
				}
			}
		}

		GLogger.logOutput(METHOD_strGetMasterLogin, "MasterLogin", str);
		GLogger.logExit(CLASS_NAME, METHOD_strGetMasterLogin);

		return str;
	}

	// END ADD V6.07d
	// BEGIN ADD V6.07h

	/**
	 *  DESCRIPTION :   This function Gets contact info from session.
	 * @param lCustomerID
	 * @return
	 * @throws SQLException
	 * @throws Exception
	 */
	public ContactInfoRow cirGetContactInfo(long lCustomerID)
			throws SQLException, Exception {
		ContactInfoRow contactInfoRow = null;
		Customer customer = (Customer) teleSessionMgr.getTable(string_CUSTOMER); // Getting the Customer table from the session
		CustomerRow customerRow = customer.crSearchByCustID(lCustomerID);
		ContactInfo contactInfo = null;

		contactInfo = (ContactInfo) GConnectMemoryDB
				.getTable(GAfeConstants.CONTACTINFO);

		if (customerRow != null) {
			contactInfoRow = contactInfo
					.cirSearchByContactInfoID(customerRow.lContactInfoID);
		}

		return contactInfoRow;
	}

	/**
	 *       DESCRIPTION :   This function Updates email address ifthe user has changed info.
	 * @param lCustomerID
	 * @throws SQLException
	 * @throws Exception
	 */
	public void updateContactInfo(long lCustomerID) throws SQLException,
			Exception {
		GLogger.logEntry(CLASS_NAME, "updateContactInfo");
		GLogger.logInput("updateContactInfo", ARG_lCustomerID, lCustomerID);

		String strEmailAddress = null;
		ContactInfoBO objContactInfoBO = null;
		long lCustomerNumber = 0l;
		ApplSaveAction applSaveActionTable = null;
		ApplSaveActionRow applSaveActionRow = null;

		strEmailAddress = (String) teleSessionMgr.getValue("EMAILADDRESS_VON");
		GLogger.chkpt("New Email Von:" + strEmailAddress);

		// BEGIN DELETE v7.20f
		//        //BEGIN ADD V7.05g
		//       ContactInfoExtRow objContactInfoExtRow = null;
		//       boolean bVonPurposeEmailExist = false;
		//       ContactInfoExt objContactInfoExt = (ContactInfoExt) GConnectMemoryDB.getTable( GAfeConstants.CONTACTINFOEXT_TB);
		//       if(null != strEmailAddress)
		//       {
		//
		//          objContactInfoExtRow = objGetContactInfoVon(lCustomerID);
		//           if(null != objContactInfoExtRow)
		//           {
		//               if(!strEmailAddress.equalsIgnoreCase(objContactInfoExtRow.strContactValue))
		//               {
		//                   if(objContactInfoExtRow.iStatusInDB == Record.VIEW)
		//                   {
		//                       objContactInfoExtRow.iStatusInDB = Record.UPDATE;
		//                   }
		//                   objContactInfoExtRow.strContactValue = strEmailAddress;
		//                   objContactInfoExtRow.dtModificationDate = new Timestamp((new Date()).getTime());
		//                   objContactInfoExt.updateRecord(objContactInfoExtRow);
		//               }
		//           }
		//           else
		//           {
		//               objContactInfoExtRow = new ContactInfoExtRow();
		//               objContactInfoExtRow.iStatusInDB = Record.INSERT;
		//               objContactInfoExtRow.strContactValue = strEmailAddress;
		//               objContactInfoExtRow.iPurposeId = GAfeConstants.PURPOSE_VON;
		//               objContactInfoExtRow.iMediumId = GAfeConstants.MEDIUM_EMAIL;
		//               objContactInfoExtRow.lCustomerId = lCustomerID;
		//               objContactInfoExt.addRecord(objContactInfoExtRow);
		//           }
		// END DELETE v7.20f
		// BEGIN ADD v7.20f
		if (strEmailAddress != null) {
			lCustomerNumber = CustomerUtils.lGetCustomerNumber(lCustomerID);
			GLogger.chkpt("the customer number retreived" + lCustomerNumber);

			if (0l != lCustomerNumber) {
				objContactInfoBO = new ContactInfoBO();
				objContactInfoBO.setMedium(GAfeConstants.MEDIUM_EMAIL);
				objContactInfoBO.setPurpose(GAfeConstants.PURPOSE_VON);
				objContactInfoBO.setContactValue(strEmailAddress);
				GLogger.chkpt("the added details" + objContactInfoBO);
			}

			applSaveActionTable = (ApplSaveAction) teleSessionMgr
					.getTable(string_APPLSAVEACTION);
			applSaveActionRow = new ApplSaveActionRow();
			applSaveActionRow.arrArguments = new Class[2];
			applSaveActionRow.arrParams = new Object[2];

			// Setting the variables of record to entered in Appl Save container
			applSaveActionRow.iAction = Record.INSERT;
			applSaveActionRow.strType = GAfeConstants.CONTACTINFO;
			applSaveActionRow.strValue = String.valueOf(lCustomerNumber);
			applSaveActionRow.strSystem = string_IAFEOUT;
			applSaveActionRow.strMethodName = "updateContactInfoForZoof"; // the name of the IAFEOUT Method which needs to be called
			applSaveActionRow.arrArguments[0] = Long.class;
			applSaveActionRow.arrArguments[1] = ContactInfoBO.class;
			applSaveActionRow.arrParams[0] = Long.valueOf(lCustomerNumber);
			applSaveActionRow.arrParams[1] = objContactInfoBO;

			// adding the Newly created row to the ApplSaveaction Container/table
			applSaveActionTable.addRecord(applSaveActionRow);
			teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveActionTable);
			GLogger.chkpt("objContactInfoBo:" + objContactInfoBO);
		}

		// GConnectMemoryDB.putTable(GAfeConstants.CONTACTINFOEXT_TB, objContactInfoExt);
		GLogger.logExit(CLASS_NAME, "updateContactInfo");

		// END ADD V7.05g
		// END ADD v7.20f
	}

	/**
	 * checking if change product allowed for VON product
	 * @param CPLId
	 * @return
	 * @throws SQLException
	 * @throws Exception
	 */
	public static boolean bVONProductChangeAllowed(long CPLId)
			throws SQLException, Exception {
		PreparedStatement psSelect = null;
		PreparedStatement psSelectLast = null;
		ResultSet rsGetCount = null;
		ResultSet rsGetLast = null;
		boolean bAllowChange = false;

		GLogger.chkpt("Entered bVONProductChangeAllowed ok ");
		GLogger.chkpt("LProduct VON CPLID : " + CPLId);

		try {
			psSelect = GConnectAfe
					.psPrepareStatement(GAfeSql.S_COUNT_TARIFF_CHANGES_IN_YEAR);
			psSelect.setLong(1, CPLId);
			rsGetCount = psSelect.executeQuery();
			GLogger.chkpt("execute query done : ");

			if (rsGetCount.next()) {
				GLogger.chkpt("entered rsGetCount.next  : ");

				if (rsGetCount.getLong(1) >= GAfeDescription.VON_PROD_CHANGES_PER_YEAR) {
					GLogger.chkpt("set to false more than or equal to 4 : ");
					bAllowChange = false;
				} else {
					GLogger.chkpt("entered 2 months loop  : ");
					psSelectLast = GConnectAfe
							.psPrepareStatement(GAfeSql.S_LAST_TARIFF_CHANGES);
					psSelectLast.setLong(1, CPLId);
					rsGetLast = psSelectLast.executeQuery();
					GLogger.chkpt("execute query done for 2 months: ");

					if (rsGetLast.next()) {
						if (rsGetLast.getLong(1) < GAfeDescription.VON_MONTHS_BET_PROD_CHANGES) {
							GLogger
									.chkpt("set to true change done within 2 months : ");
							bAllowChange = true;
						} else {
							GLogger
									.chkpt("set to false change not done within 2 months : ");
							bAllowChange = false;
						}
					}
				}
			}
		} finally {
			GConnectAfe.close(rsGetCount);
			GConnectAfe.close(psSelect);
			GConnectAfe.close(rsGetLast);
			GConnectAfe.close(psSelectLast);
		}

		GLogger.chkpt("Exit bVONProductChangeAllowed ok ");

		return bAllowChange;
	}

	/**
	 * adding to the database the required change product for VON.
	 *  @param CPLId
	 * @param Date
	 * @return
	 * @throws SQLException
	 * @throws Exception
	 */
	public static int iAddVonProductChange(long CPLId) throws SQLException,
			Exception {
		int iSuccess = 0;

		GLogger.chkpt(" Entered iAddVonProductChange");

		PreparedStatement psInsert = null;

		GLogger.chkpt("LProduct VON CPLID : " + CPLId);

		try {
			psInsert = GConnectAfe
					.psPrepareStatement(GAfeSql.I_VON_TARIFF_CHANGES);
			psInsert.setLong(1, CPLId);
			iSuccess = psInsert.executeUpdate();
			GLogger.chkpt("execute query done for insert");
		} finally {
			if (null != psInsert) {
				GConnectAfe.close(psInsert);
			}
		}

		GLogger.chkpt("Lproduct exit von add iSucess value : " + iSuccess);

		return iSuccess;
	}

	// END ADD V6.07h

	// BEGIN ADD V6.07j
	public String strAddExtraEntryPresent(long lAddressID) throws AfeException {
		String strVerkavellingPresent = null;
		AddressExtra adExtraTable = null;
		AddressExtraRow adExtraRow = null;

		adExtraTable = (AddressExtra) teleSessionMgr.getTable("ADDRESSEXTRA");
		GLogger.debug(CLASS_NAME, "vAddExtraEntryPresent",
				"loading the ADEXTRA Table loop");

		if (adExtraTable != null) {
			GLogger.debug(CLASS_NAME, "vAddExtraEntryPresent",
					"Entering the ADEXTRA Table loop");
			adExtraRow = adExtraTable.adSearchByAddressID(lAddressID);

			if (adExtraRow != null) {
				GLogger.debug(CLASS_NAME, "vAddExtraEntryPresent",
						"Entering the ADEXTRA Row loop");

				// If it is the first product on this manual address, set iAddExtraPresent to 1 and update ADDRESSEXTRA table
				if (adExtraRow.iFirstProductOnLine == 0) {
					GLogger.debug(CLASS_NAME, "vAddExtraEntryPresent",
							"iFirstProductOnLine"
									+ adExtraRow.iFirstProductOnLine);
					strVerkavellingPresent = adExtraRow.strVerkavelling; // To validate that an entry is present in the AddressExtra table with iFirstProductonLine being 0
					GLogger.debug(CLASS_NAME, "vAddExtraEntryPresent",
							"strVerkavellingPresent" + strVerkavellingPresent);
					GLogger
							.debug(CLASS_NAME, "iAddExtraEntryPresent",
									"Updating field FIRSTPRODUCTONLINE in ADDRESSEXTRA table");

					if (adExtraRow.iStatusInDB != Record.INSERT) {
						GLogger.debug(CLASS_NAME, "vAddExtraEntryPresent",
								"Updating the FirstProductOnLine field");
						adExtraRow.iStatusInDB = Record.UPDATE;
						adExtraRow.iFirstProductOnLine = 1;
						adExtraRow.strModificationUser = bSession.strUserName;
						adExtraRow.lAddressID = lAddressID;
						adExtraTable.updateRecord(adExtraRow);
					} else {
						GLogger
								.debug(CLASS_NAME, "vAddExtraEntryPresent",
										"Inserting - Updating the FirstProductOnLine field");
						adExtraRow.iFirstProductOnLine = 1;
						adExtraTable.updateRecord(adExtraRow);
					}

					teleSessionMgr.putTable("ADDRESSEXTRA", adExtraTable);
					GLogger.debug(CLASS_NAME, "iAddExtraEntryPresent",
							"Updating Complete");
				}
			}
		}

		return strVerkavellingPresent;
	}

	protected int iFindProductInVectorLevelParentInstanceandOptionGroupID(
			Vector vctFindProductInVector, int iLevel, int iParentInstance,
			Long OptionGroupID, Vector vctObjOGIDMMPMMPInternalNew)
			throws Exception {
		int iNumberOfTimesPID = 0; // Local Varaible Declaration
		int iSizeOfVector = 0; // Local Varaible Declaration
		int iCount = 0; // Local Varaible Declaration

		iSizeOfVector = vctFindProductInVector.size();

		BProductDetail bProductDetail = null;

		for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
			bProductDetail = (BProductDetail) vctFindProductInVector
					.elementAt(iCount);

			if ((iLevel == bProductDetail.iLevel)
					&& (iParentInstance == bProductDetail.iParentInstance)
					&& ((OptionGroupID.longValue() == bProductDetail.lOptionGroupID
							.longValue()) || vctObjOGIDMMPMMPInternalNew
							.contains(bProductDetail.lOptionGroupID))) {
				++iNumberOfTimesPID;
			}

			// BEGIN MODIFY v9.00b
			GLogger.chkpt("iNumberOfTimesPID= " + iNumberOfTimesPID);
		} // END MODIFY v9.00b

		return iNumberOfTimesPID;
	} // Closing Brace of the function

	// END ADD V6.07j
	// BEGIN ADD V6.10e
	protected static final boolean bApplyDSLCheck(
			BProductDetailProperty objBProductDetailProperty,
			BSession objBSession) {

		// BEGIN DELETED V6.10g
		// boolean bDSLProfile = false;
		// END DELETED v6.10g
		boolean bDSLApplicable = false;

		// BEGIN DELETED V6.10g
		// boolean bReturn = false;
		// END DELETED V6.10g
		BProductDetail objBProductDetail = null;

		// BEGIN DELETED V6.10g

		/*
		 * if(GPermission.bCheckPermission( "AFEORD01", "DeActivatie", objBSession))
		 * {
		 *   bDSLProfile = true;
		 * }
		 * if(bDSLProfile)
		 * {
		 */

		// END DELETED v6.10g
		if (objBProductDetailProperty.lProductID.longValue() == GAfeDescription.PRODUCT_INTERNET) {
			if (objBProductDetailProperty.vctProductSelected.size() == 0) {
				objBProductDetail = (BProductDetail) objBProductDetailProperty.vctProductNonSelected
						.elementAt(0);

				if (GAfeDescription.bCheckInList(objBProductDetail.lProductID
						.longValue(), GAfeDescription.DSL_PACKAGE_PRODUCTID)) {
					bDSLApplicable = true;
				}
			} else {
				for (int iCounter = 0; iCounter < objBProductDetailProperty.vctProductSelected
						.size(); iCounter++) {
					objBProductDetail = (BProductDetail) objBProductDetailProperty.vctProductSelected
							.elementAt(iCounter);

					if (GAfeDescription.bCheckInList(
							objBProductDetail.lProductID.longValue(),
							GAfeDescription.DSL_PACKAGE_PRODUCTID)) {
						bDSLApplicable = true;

						break;
					}
				}
			}

			// BEGIN DELETED V6.10g

			/*
			 * if(bDSLApplicable)
			 *   bReturn = true;
			 */

			// END DELETED V6.10g
		}

		// BEGIN DELETED V6.10g
		// }
		// return bReturn;
		// END DELETED V6.10g
		return bDSLApplicable;
	}

	// END ADD V6.10e
	// BEGIN ADD V6.20a

	/**
	 * Checks whether the Line has any Deinstall or Move from order which is not cancelled.
	 * @param lCustomerProductLineId
	 * @return iResult: 1 - if any Deinstall order is there on the line with status other than cancelled
	 *                  2 - if any MoveFrom order is there on the line with status other than cancelled
	 *                  3 - if any Move to order is there on the line in status other than cancelled
	 *                  0 - otherwise
	 * @throws Exception
	 */
	public int iCheckForDeinstallOrMoveOrder(long lCustomerProductLineId)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, "icheckforDeinstallorMovefromLine");
		GLogger.logInput(CLASS_NAME,
				"icheckforDeinstallorMovefromLine => lCustomerProductLineID ",
				lCustomerProductLineId);

		ProcessLink processLinkTable = null;
		Process processTable = null;
		ProcessRow processRow = null;
		Order orderTable = null;
		OrderRow orderRow = null;
		Vector vctProcessLinkRow = null;
		int iResult = 0;
		int iSize = 0;

		processLinkTable = (ProcessLink) teleSessionMgr.getTable(string_PROCESSLINK);
		processTable = (Process) teleSessionMgr.getTable(string_PROCESS);
		orderTable = (Order) teleSessionMgr.getTable(string_ORDER);

		if (null != processLinkTable) {

			// get all the processes attached to the CustomerProductLine
			vctProcessLinkRow = processLinkTable
					.vctSearchByObjectIDandObjectTypeIDandObsolete(
							lCustomerProductLineId,
							GAfeDescription
									.lGetTypeId(string_OBJECTTYPE_CUSTOMERPRODUCTLINE),
							FINAL_ZERO);

			if (null != vctProcessLinkRow) {

				// for each process check whether a Deinstall or move order is there
				iSize = vctProcessLinkRow.size();
				GLogger.debug(CLASS_NAME,
						"icheckforDeinstallorMovefromLine => iSize ", iSize);

				for (int iCounter = FINAL_ZERO; iCounter < iSize; iCounter++) {
					if (null != processTable) {
						processRow = processTable
								.prSearchByProcessIDandObsolete(
										((ProcessLinkRow) vctProcessLinkRow
												.elementAt(iCounter)).lProcessID,
										FINAL_ZERO);

						// get the order corresponding for the process id
						if (null != processRow) {
							orderRow = orderTable.orSearchByOrderIDandObsolete(
									processRow.lOrderID, FINAL_ZERO);

							if (null != orderRow) {
								if ((orderRow.lOrderTypeID == GAfeDescription.ORDERTYPE_DEINSTALL)
										&& !(orderRow.lOrderStatusTypeID == GAfeDescription.ORDERSTATUSTYPE_CANCELLED)) {
									iResult = 1;

									break;
								}

								// if the order type is move then check for Move from is performed
								else if ((orderRow.lOrderTypeID == GAfeDescription.ORDERTYPE_MOVE)
										&& !(orderRow.lOrderStatusTypeID == GAfeDescription.ORDERSTATUSTYPE_CANCELLED)) {

									// if Deactivation in Billing is there then it is a Move from order
									processRow = processTable
											.prSearchBylOrderIDandProcessTypeIDandObsolete(
													orderRow.lOrderID,
													GAfeDescription.PROCESSTYPE_DEACTIVATIONINBILLING,
													FINAL_ZERO);

									if (null != processRow) {
										iResult = 2;

										break;
									}

									// if Activation in Billing is there then it is a MoveTo order
									processRow = processTable
											.prSearchBylOrderIDandProcessTypeIDandObsolete(
													orderRow.lOrderID,
													GAfeDescription.PROCESSTYPE_ACTIVATIONINBILLING,
													FINAL_ZERO);

									if (null != processRow) {
										iResult = 3;

										break;
									}
								}
							}
						}
					}
				}
			}
		}

		GLogger.logOutput(CLASS_NAME,
				"icheckforDeinstallorMovefromLine => iResult ", iResult);
		GLogger.logExit(CLASS_NAME, "icheckforDeinstallorMovefromLine");

		return iResult;
	}

	/**
	 * Retrieves the MainCPLIdentifier for the CPLId from the container and returns it.
	 * @param lCustomerProductLineID
	 * @return strCustomerPLIdentifierValue
	 * @throws Exception
	 */
	public String strGetMainCPLIdenValueFromCPLId(long lCustomerProductLineID)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, "strGetMainCPLIdenValueFromCPLId");
		GLogger.logInput(CLASS_NAME,
				"strGetMainCPLIdenValueFromCPLId => lCustomerProductLineID ",
				lCustomerProductLineID);

		CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null;
		String strCustomerPLIdentifierValue = null;
		Vector vctCPLIdentifierRow = null;

		customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);

		if (null != customerProductLineIdentifierTable) {
			vctCPLIdentifierRow = customerProductLineIdentifierTable
					.vctSearchByCustProdLineIDandProdLineIdentifierTypeIDandObsolete(
							lCustomerProductLineID,
							GAfeDescription.IdentifierTypeForDigitalTV,
							FINAL_ZERO);

			if (null != vctCPLIdentifierRow) {
				int iSizeofVector = vctCPLIdentifierRow.size();

				GLogger
						.debug(
								CLASS_NAME,
								"strGetMainCPLIdenValueFromCPLId => iSizeofVector - CPLIdentifierRow ",
								iSizeofVector);

				for (int iCounter = FINAL_ZERO; iCounter < iSizeofVector; iCounter++) {
					customerProductLineIdentifierRow = null;
					customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCPLIdentifierRow
							.elementAt(iCounter);
					strCustomerPLIdentifierValue = customerProductLineIdentifierRow.strCustomerPLIdentifierValue;
				}
			}
		}

		GLogger
				.logOutput(
						CLASS_NAME,
						"strGetMainCPLIdenValueFromCPLId => strCustomerPLIdentifierValue ",
						strCustomerPLIdentifierValue);
		GLogger.logExit(CLASS_NAME, "strGetMainCPLIdenValueFromCPLId");

		return strCustomerPLIdentifierValue;
	}
	/**
	 * Retrieves the MainCPLIdentifier for the CPLId from the container and returns it.
	 * @param lCustomerProductLineID
	 * @return strCustomerPLIdentifierValue
	 * @throws Exception
	 */
	public String strGetMainCPLIdenValueFromCPLId(long lCustomerProductLineID, long lineIdentifierTypeId)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, "strGetMainCPLIdenValueFromCPLId");

		CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null;
		String strCustomerPLIdentifierValue = null;
		Vector vctCPLIdentifierRow = null;

		customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);

		if (null != customerProductLineIdentifierTable) {
			vctCPLIdentifierRow = customerProductLineIdentifierTable
					.vctSearchByCustProdLineIDandProdLineIdentifierTypeIDandObsolete(
							lCustomerProductLineID,lineIdentifierTypeId,FINAL_ZERO);

			if (null != vctCPLIdentifierRow) {
				int iSizeofVector = vctCPLIdentifierRow.size();

				GLogger.debug(
								CLASS_NAME,
								"strGetMainCPLIdenValueFromCPLId => iSizeofVector - CPLIdentifierRow ",
								iSizeofVector);

				for (int iCounter = FINAL_ZERO; iCounter < iSizeofVector; iCounter++) {
					customerProductLineIdentifierRow = null;
					customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCPLIdentifierRow
							.elementAt(iCounter);
					strCustomerPLIdentifierValue = customerProductLineIdentifierRow.strCustomerPLIdentifierValue;
				}
			}
		}

		GLogger.logOutput(
						CLASS_NAME,
						"strGetMainCPLIdenValueFromCPLId => strCustomerPLIdentifierValue ",
						strCustomerPLIdentifierValue);
		GLogger.logExit(CLASS_NAME, "strGetMainCPLIdenValueFromCPLId");

		return strCustomerPLIdentifierValue;
	}

	public String strGetMobileCPLIdenValueFromCPLId(long lCustomerProductLineID)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, "strGetMobileCPLIdenValueFromCPLId");
		GLogger.logInput(CLASS_NAME,
				"strGetMobileCPLIdenValueFromCPLId => lCustomerProductLineID ",
				lCustomerProductLineID);

		CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null;
		String strCustomerPLIdentifierValue = null;
		Vector vctCPLIdentifierRow = null;

		customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);

		if (null != customerProductLineIdentifierTable) {
			vctCPLIdentifierRow = customerProductLineIdentifierTable
					.vctSearchByCustProdLineIDandProdLineIdentifierTypeIDandObsolete(
							lCustomerProductLineID,
							GAfeDescription.PRODUCTLINEIDENTIFIERTYPE_MOBILE,
							FINAL_ZERO);

			if (null != vctCPLIdentifierRow) {
				int iSizeofVector = vctCPLIdentifierRow.size();

				GLogger
						.debug(
								CLASS_NAME,
								"strGetMobileCPLIdenValueFromCPLId => iSizeofVector - CPLIdentifierRow ",
								iSizeofVector);

				for (int iCounter = FINAL_ZERO; iCounter < iSizeofVector; iCounter++) {
					customerProductLineIdentifierRow = null;
					customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCPLIdentifierRow
							.elementAt(iCounter);
					strCustomerPLIdentifierValue = customerProductLineIdentifierRow.strCustomerPLIdentifierValue;
				}
			}
		}

		GLogger
				.logOutput(
						CLASS_NAME,
						"strGetMobileCPLIdenValueFromCPLId => strCustomerPLIdentifierValue ",
						strCustomerPLIdentifierValue);
		GLogger.logExit(CLASS_NAME, "strGetMobileCPLIdenValueFromCPLId");

		return strCustomerPLIdentifierValue;
	}

	/**
	 * Inserts Rows into to the CPLIdentifier Table for all the Logins available in the HouseHoldMember object.
	 * @param lCustomerProductLineId
	 * @throws Exception
	 */
	private void vInsertIncustomerProductLineIdentifierforiDTV(
			long lCustomerProductLineId) throws Exception {
		GLogger.logEntry(CLASS_NAME,
				"vInsertIncustomerProductLineIdentifierforiDTV");
		GLogger
				.logOutput(
						CLASS_NAME,
						"vInsertIncustomerProductLineIdentifierforiDTV => bProductDetailProperty ",
						lCustomerProductLineId);

		BHouseholdDetails bHouseholdDetails = null;
		CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null;
		Vector vctcustomerProductLineIdentifierRow = null;
		Vector vctLogins = null;
		String strLogin = null;
		int iSizeofVector = 0;

		// ProductLineIdentifierTypeid is always the same - Login
		long lProductLineIdentifierTypeID = 2;
		long lngCustomerPLIdentifierID = 0;
		String strCustPlIdenvalue = null;

		if (null != teleSessionMgr.getValue(GAfeConstants.HouseHoldDetails)) {
			GLogger.chkpt("obj in session not null");
			bHouseholdDetails = (BHouseholdDetails) teleSessionMgr
					.getValue(GAfeConstants.HouseHoldDetails);
		}

		if (null == bHouseholdDetails) {
			GLogger.chkpt("getting from Hashmap");

			if (null != teleSessionMgr
					.getValue(GAfeConstants.HouseHold_HashMap)) {
				GLogger.chkpt("Hashmnap not null");

				HashMap hmHH = (HashMap) teleSessionMgr
						.getValue(GAfeConstants.HouseHold_HashMap);

				strCustPlIdenvalue = strGetMainCPLIdenValueFromCPLId(lCustomerProductLineId);
				GLogger.chkpt("strCustPlIdenvalue" + strCustPlIdenvalue);
				bHouseholdDetails = (BHouseholdDetails) hmHH
						.get(strCustPlIdenvalue);
			}
		}

		GLogger.chkpt("before obj" + bHouseholdDetails);

		if (null != bHouseholdDetails) {
			GLogger.chkpt("obj not null");
			customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);

			if (null != customerProductLineIdentifierTable) {

				// Gets all the Logins which are Present in the HouseHoldMember Object
				vctLogins = vctGetLoginsforHHMembers(bHouseholdDetails);
				GLogger
						.debug(
								CLASS_NAME,
								"vInsertIncustomerProductLineIdentifierforiDTV => vctLogins ",
								vctLogins);
				iSizeofVector = vctLogins.size();

				// Makes entry for each login in the CPLIdentifer table in container
				for (int iCount = FINAL_ZERO; iCount < iSizeofVector; iCount++) {
					strLogin = (String) vctLogins.elementAt(iCount);

					// check if the entry is not existing already in the container
					vctcustomerProductLineIdentifierRow = customerProductLineIdentifierTable
							.vctSearchBystrCustomerPLIdentifierValueandlCustomerProductLineIDandObsolete(
									lCustomerProductLineId, strLogin,
									FINAL_ZERO);

					if ((null == vctcustomerProductLineIdentifierRow)
							|| (vctcustomerProductLineIdentifierRow.size() == 0)) {
						customerProductLineIdentifierRow = new CustomerProductLineIdentifierRow();
						customerProductLineIdentifierRow.iStatusInDB = Record.INSERT;

						// Generate Identifier
						lngCustomerPLIdentifierID = customerProductLineIdentifierRow
								.lNewNr();
						customerProductLineIdentifierRow.lCustomerPLIdentifierID = lngCustomerPLIdentifierID;
						customerProductLineIdentifierRow.lCustomerProductLineID = lCustomerProductLineId;
						customerProductLineIdentifierRow.strCustomerPLIdentifierValue = strLogin;
						customerProductLineIdentifierRow.lProductLineIdentifierTypeID = lProductLineIdentifierTypeID;
						customerProductLineIdentifierRow.strModificationUser = bSession.strUserName;
						customerProductLineIdentifierRow.strCreationUser = bSession.strUserName;
						customerProductLineIdentifierTable
								.addUniqueRecord(customerProductLineIdentifierRow);
					}
				}
			}

			teleSessionMgr.putTable(string_CUSTOMERPRODUCTLINEIDENTIFIER,
					customerProductLineIdentifierTable);
		}

		GLogger.logExit(CLASS_NAME,
				"vInsertIncustomerProductLineIdentifierforiDTV");
	}

	/**
	 * Retrieves the Logins which are present in the HouseHold Member Objects.
	 * @param bHouseholdDetails
	 * @return vctLogins - Vector of Logins which are present in all the HHmemberObjects
	 */
	private Vector vctGetLoginsforHHMembers(BHouseholdDetails bHouseholdDetails)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, "vctGetLoginsforHHMembers");
		GLogger.logInput(CLASS_NAME,
				"vctGetLoginsforHHMembers => bHouseholdDetails",
				bHouseholdDetails);

		BHouseholdMember[] arrbBHouseholdMembers = null;
		BHouseholdMember bHouseholdMember = null;
		int isizeofArray = 0;
		Vector vctLogins = new Vector(5);

		if (null != bHouseholdDetails) {
			arrbBHouseholdMembers = bHouseholdDetails.getArrBHouseholdMember();

			if (null != arrbBHouseholdMembers) {
				isizeofArray = arrbBHouseholdMembers.length;

				for (int iCount = 0; iCount < isizeofArray; iCount++) {
					bHouseholdMember = arrbBHouseholdMembers[0];

					// If Login is existing for the HouseHold Member then it adds the Login to the Vector
					if ((null != bHouseholdMember)
							&& (null != bHouseholdMember.getStrLogin())
							&& !("".equals(bHouseholdMember.getStrLogin()))) {
						GLogger.chkpt("HH member Login"
								+ bHouseholdMember.getStrLogin());
						vctLogins.addElement(bHouseholdMember.getStrLogin());
					}
				}
			}
		}

		GLogger.logOutput(CLASS_NAME,
				"vctGetLoginsforHHMembers => vctLogins : Size ", vctLogins
						.size());
		GLogger.logExit(CLASS_NAME, "vctGetLoginsforHHMembers");

		return vctLogins;
	}

	// END ADD V6.20a
	// BEGIN ADD V6.20e
	private boolean bCheckIfPairingProcessCompleted(long lProcessId) {
		GLogger.logEntry(CLASS_NAME, "bCheckIfPairingProcessCompleted");
		GLogger.logInput(CLASS_NAME,
				"bCheckIfPairingProcessCompleted => lProcessId", lProcessId);

		boolean bReturn = false;
		ProcessRow processRow = null;
		ProcessStatusRow processStatusRow = null;

		if (0 != lProcessId) {
			processRow = processTable.prSearchByProcessIDandObsolete(
					lProcessId, FINAL_ZERO);

			if (null != processRow) {
				if ((CDMConstants.PROCESSTYPE_ACTIVATE_BILLING_PAIRING == processRow.lProcessTypeID)
						|| (CDMConstants.PROCESSTYPE_PAIRING == processRow.lProcessTypeID)
						|| (CDMConstants.PROCESSTYPE_UNPAIRING == processRow.lProcessTypeID)) {
					GLogger.chkpt("Entered for Pairing Process");
					processStatusRow = processStatusTable
							.psrSearchByProcessID(lProcessId);

					if (null != processStatusRow) {
						GLogger.chkpt("Entered for Pairing Status");

						if (GAfeDescription.PROCESSSTATUSTYPE_COMPLETED == processStatusRow.lProcessStatusTypeID) {
							GLogger.chkpt(" Pairing Status is Completed");
							bReturn = true;
						}
					}
				}
			}
		}

		GLogger.logOutput(CLASS_NAME,
				"bCheckIfPairingProcessCompleted => bReturn", bReturn);
		GLogger.logExit(CLASS_NAME, "bCheckIfPairingProcessCompleted");

		return bReturn;
	}

	// END ADD V6.20e

	//  BEGIN ADD v7.00b
	protected static final Vector vctGetPinForLine(long lCustomerProductLineID,
			TeleSessionMgr teleSessionMgr) throws Exception {
		String strPin = null;
		long lPinID = 0;
		PreparedStatement pCustPin = null;
		ResultSet rsCustPin = null;
		PreparedStatement pPinFromID = null;
		ResultSet rsPinFromID = null;
		PreparedStatement pPinFromIDForContainer = null;
		ResultSet rsPinFromIDForContainer = null;

		// to check in container for the pin associated to a line
		CustomerProductLine2PinRow customerProductLine2PinRow = null; // Initializing the Object Class for the CustomerProduct table
		CustomerProductLine2Pin customerProductLine2Pin = null;
		Vector vctPin = new Vector(0);

		GLogger.logEntry(CLASS_NAME, METHOD_vctGetPinForLine);
		GLogger.logInput(METHOD_vctGetPinForLine, ARG_LCUSTOMERPRODUCTLINEID,
				lCustomerProductLineID);

		try {

			// getting the container from the session
			customerProductLine2Pin = (CustomerProductLine2Pin) teleSessionMgr
					.getTable("CUSTOMERPRODUCTLINE2PIN"); // Getting the CustomerProduct table from the session

			if (null != customerProductLine2Pin) {
				GLogger.chkpt("for PUQ checking pin in container ");
				customerProductLine2PinRow = customerProductLine2Pin
						.cpl2pSearchByCustomerProductLineID(lCustomerProductLineID);

				if (null != customerProductLine2PinRow) {
					lPinID = customerProductLine2PinRow.lPinID;
					GLogger.chkpt("for PUQ : container lPinID=" + lPinID);

					if (0 != lPinID) {
						pPinFromIDForContainer = GConnectAfe
								.psPrepareStatement(GAfeSql.S_GETPINFORPINID);
						pPinFromIDForContainer.setLong(1, lPinID);
						rsPinFromIDForContainer = pPinFromIDForContainer
								.executeQuery();

						if (rsPinFromIDForContainer.next()) {
							strPin = rsPinFromIDForContainer.getString("PIN");
						}
					}
				}
			}

			if (null != strPin) {
				GLogger.chkpt("for PUQ : Checking for pin in DB");
				pCustPin = GConnectAfe
						.psPrepareStatement(GAfeSql.S_GETPINIDFROMCPL2PIN);
				pCustPin.setLong(1, lCustomerProductLineID);
				rsCustPin = pCustPin.executeQuery();

				if (rsCustPin.next()) {
					lPinID = rsCustPin.getLong("PINID");
					GLogger.debug(CLASS_NAME, METHOD_vctGetPinForLine,
							"lPinID = " + lPinID);

					if (0 != lPinID) {
						pPinFromID = GConnectAfe
								.psPrepareStatement(GAfeSql.S_GETPINFORPINID);
						pPinFromID.setLong(1, lPinID);
						rsPinFromID = pPinFromID.executeQuery();

						if (rsPinFromID.next()) {
							strPin = rsPinFromID.getString("PIN");
						}
					}
				}
			}
		} finally {
			GConnectAfe.close(rsCustPin);
			GConnectAfe.close(rsPinFromID);
			GConnectAfe.close(pCustPin);
			GConnectAfe.close(pPinFromID);
			GConnectAfe.close(rsPinFromIDForContainer);
			GConnectAfe.close(pPinFromIDForContainer);
		}

		vctPin.addElement(strPin);
		vctPin.addElement(Long.valueOf(lPinID));
		GLogger.logOutput(METHOD_vctGetPinForLine, "strPin", strPin);

		return vctPin;
	}

	//  END ADD v7.00b
	void checkModemBatteryPack() throws Exception {
		GLogger.logEntry(CLASS_NAME, "checkModemBatteryPack5");

		int iNoOftel = 0;
		int iNoOfMBP = 0;
		CustomerLinkRow objCustomerLinkRow = null;
		Vector vctCustomerLinkRoleRow = null;
		CustomerLinkRoleRow objCustomerLinkRoleRow = null;
		Vector vctCustomerLR2CustomerProductRow = null;
		CustomerLR2CustomerProductRow objCustomerLR2CustomerProductRow = null;
		Vector vctCustomerProductRow = null;
		CustomerProductRow objCustomerProductRow = null;
		BProductRole bProductRole = (BProductRole) teleSessionMgr
				.getValue(GAfeConstants.BPRODUCTDETAILROLE_ACPRODUCT);

		customerProductTable = (CustomerProduct) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCT); // Getting the CustomerProduct table from the session
		customerProductLineTable = (CustomerProductLine) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
		customerLR2CustomerProductTable = (CustomerLR2CustomerProduct) teleSessionMgr
				.getTable(string_CUSTOMERLR2CUSTOMERPRODUCT); // Getting the Customer table from the session
		customerLinkRoleTable = (CustomerLinkRole) teleSessionMgr
				.getTable(string_CUSTOMERLINKROLE); // Getting the Customer table from the session
		customerLinkTable = (CustomerLink) teleSessionMgr
				.getTable(string_CUSTOMERLINK); // Getting the Customer table from the session

		//      GLogger.debug(CLASS_NAME, "checkModemBatteryPack3","customerLinkTable"+customerLinkTable.vctGetAll());
		//      GLogger.debug(CLASS_NAME, "checkModemBatteryPack3","customerLinkRoleTable"+customerLinkRoleTable.vctGetAll());
		//      GLogger.debug(CLASS_NAME, "checkModemBatteryPack3","customerLR2CustomerProductTable"+customerLR2CustomerProductTable.vctGetAll());
		//      GLogger.debug(CLASS_NAME, "checkModemBatteryPack3","customerProductTable"+customerProductTable.vctGetAll());

		try {
			if ((bProductRole != null)
					&& (teleSessionMgr.getValue("toCheckMBP") != null)) {
				objCustomerLinkRow = customerLinkTable.clrSearchByCustIDNAddID(
						bProductRole.lCustomerID.longValue(),
						bProductRole.lAddressID.longValue());
			}

			if (objCustomerLinkRow != null) {
				GLogger.chkpt("objCustomerLinkRow.lCustomerLinkID "
						+ objCustomerLinkRow.lCustomerLinkID);
				vctCustomerLinkRoleRow = customerLinkRoleTable
						.vctSearchByCustomerLinkIDandRoleTypeIDandObsolete(
								objCustomerLinkRow.lCustomerLinkID, 1, 0);

				if ((vctCustomerLinkRoleRow != null)
						&& (objCustomerLinkRoleRow = (CustomerLinkRoleRow) vctCustomerLinkRoleRow
								.elementAt(0)) != null) {
					GLogger.chkpt("objCustomerLinkRoleRow.lCustomerLinkRoleID "
							+ objCustomerLinkRoleRow.lCustomerLinkRoleID);
					vctCustomerLR2CustomerProductRow = customerLR2CustomerProductTable
							.vctSearchByCustomerLinkRoleID(objCustomerLinkRoleRow.lCustomerLinkRoleID);

					if ((vctCustomerLR2CustomerProductRow != null)
							&& (vctCustomerLR2CustomerProductRow.size() > 0)) {
						for (int iCLR2CP = 0; iCLR2CP < vctCustomerLR2CustomerProductRow
								.size(); iCLR2CP++) {
							objCustomerLR2CustomerProductRow = (CustomerLR2CustomerProductRow) vctCustomerLR2CustomerProductRow
									.elementAt(iCLR2CP);

							if (objCustomerLR2CustomerProductRow != null) {
								GLogger
										.chkpt("objCustomerLR2CustomerProductRow.lCustomerProductLineID "
												+ objCustomerLR2CustomerProductRow.lCustomerProductLineID);
								vctCustomerProductRow = customerProductTable
										.vctSearchByCustomerProductLineIDandObsolete(
												objCustomerLR2CustomerProductRow.lCustomerProductLineID,
												0);

								if ((vctCustomerProductRow != null)
										&& (vctCustomerProductRow.size() > 0)) {
									for (int iCustomerProductRow = 0; iCustomerProductRow < vctCustomerProductRow
											.size(); iCustomerProductRow++) {
										objCustomerProductRow = (CustomerProductRow) vctCustomerProductRow
												.elementAt(iCustomerProductRow);

										if (objCustomerProductRow != null) {
											if (objCustomerProductRow.lProductID == 621) {
												GLogger
														.debug(
																CLASS_NAME,
																"checkModemBatteryPack",
																objCustomerProductRow);
												iNoOfMBP++;
											}

											if (objCustomerProductRow.lProductID == 34) {
												GLogger
														.debug(
																CLASS_NAME,
																"checkModemBatteryPack",
																objCustomerProductRow);
												iNoOftel++;
											}
										} else {
											GLogger
													.debug(
															CLASS_NAME,
															"checkModemBatteryPack",
															"NULL for objCustomerLR2CustomerProductRow.lCustomerProductID ="
																	+ objCustomerLR2CustomerProductRow.lCustomerProductID);
										}
									}
								}
							}
						}
					} else {
						GLogger
								.debug(
										CLASS_NAME,
										"checkModemBatteryPack",
										"NULL for objCustomerLinkRoleRow.lCustomerLinkRoleID ="
												+ objCustomerLinkRoleRow.lCustomerLinkRoleID);
					}
				}
			} else {
				GLogger.debug(CLASS_NAME, "checkModemBatteryPack", "NULL for "
						+ bProductRole);
			}

			if (iNoOfMBP * 2 > iNoOftel) {
				throw new AfeException("ERRAFE_10822");
			}
		} catch (Exception e) {
			GLogger.logException(e);

			throw e;
		}
	}

	// BEGIN ADD v7.04l
	public static boolean bIsLineActive(long lCustomerProductLineId)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, METHOD_bIsLineActive);
		GLogger.logInput(METHOD_bIsLineActive, ARG_CUSTOMERPRODUCTLINEID,
				lCustomerProductLineId);

		PreparedStatement psGetLine = null;
		ResultSet rsGetLine = null;
		long lCPLID = 0;
		boolean bIsActive = false;

		try {
			GLogger.logAlert("Going to call the query");
			psGetLine = GConnectAfe
					.psPrepareStatement(GAfeSql.SELECT_CUSTOMERPRODUCTLINE);
			psGetLine.setLong(1, lCustomerProductLineId);
			psGetLine.setInt(2, CDMConstants.OBSOLETE_ZERO);
			rsGetLine = psGetLine.executeQuery();

			if (rsGetLine.next()) {
				lCPLID = rsGetLine.getLong("CUSTOMERPRODUCTLINEID");
				GLogger.logAlert("Customerproductlineid of line is " + lCPLID);

				if (0 != lCPLID) {
					bIsActive = true;
				}
			}
		} finally {
			GConnectAfe.close(rsGetLine);
			GConnectAfe.close(psGetLine);
		}

		GLogger.logAlert("Value of bIsActive flag is :" + bIsActive);
		GLogger.logExit(CLASS_NAME, METHOD_bIsLineActive);

		return bIsActive;
	}

	// END ADD v7.04l

	// BEGIN ADD v7.05c
	public static long lGetContractType(long lCustomerProductId)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, METHOD_lGetContractType);

		long lContractTypeId = 0;

		lContractTypeId = LDisconnectionFee
				.lGetContractType(lCustomerProductId);
		GLogger.chkpt("lContractTypeId (LProduct)=" + lContractTypeId);
		GLogger.logExit(CLASS_NAME, METHOD_lGetContractType);

		return lContractTypeId;
	}

	// END ADD v7.05c

	// Begin ADD v7.05i

	/**
	 * Returns BModemMasterDetails for the CustomerProductLine input.
	 * @param lCPLID CustomerProductLineID for the line
	 * @return BModemMasterDetails bmodemdetails Modem Details for the line
	 * @throws Exception If some in-memory container is not found
	 */
	public static BModemMasterDetails BOGetModemDetails(long lCPLID)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, METHOD_BOGetModemDetails);
		GLogger.logInput(METHOD_BOGetModemDetails, "lCPLID", lCPLID);

		BModemMasterDetails bmodemdetails = null;
		ResultSet rsModemDetails = null;
		PreparedStatement psModemDetails = null;
		AfeNinasOut objAfeNinasOut = null;
		String strModemMACID = null;
		String[] arrFinalUpDownMaster = null;
		String MaxUpStreams = null;
		String MaxDownStreams = null;

		try {
			psModemDetails = GConnectAfe
					.psPrepareStatement(GAfeSql.S_MODEM_DETAILS);
			psModemDetails.setLong(1, lCPLID);
			psModemDetails.setLong(2,
					GAfeDescription.OBJECTTYPE_CUSTOMERPRODUCTLINE);
			psModemDetails.setLong(3, CDMConstants.OBSOLETE_ZERO);
			psModemDetails.setLong(4, CDMConstants.OBSOLETE_ZERO);
			psModemDetails.setLong(5,
					GAfeDescription.LOGISTICPROPERTY_SERIALNUMBER);
			psModemDetails.setLong(6,
					GAfeDescription.LOGISTICPROPERTY_DOCEMTAESN);
			rsModemDetails = psModemDetails.executeQuery();

			if (rsModemDetails.next()) {
				bmodemdetails = new BModemMasterDetails();
				GLogger.chkpt("LogisticID :"
						+ rsModemDetails.getLong("LOGISTICID"));
				GLogger.chkpt("NINAS LOGISTICPROPERTYVALUE :"
						+ rsModemDetails.getString("LOGISTICPROPERTYVALUE"));
				bmodemdetails.setlLogisticID(rsModemDetails
						.getLong("LOGISTICID"));
				strModemMACID = rsModemDetails
						.getString("LOGISTICPROPERTYVALUE");
				objAfeNinasOut = new AfeNinasOut();
				arrFinalUpDownMaster = objAfeNinasOut
						.arrGetModemUpdown(strModemMACID);

				if ((null != arrFinalUpDownMaster)
						&& (arrFinalUpDownMaster.length > 1)) {
					MaxUpStreams = arrFinalUpDownMaster[0];
					MaxDownStreams = arrFinalUpDownMaster[1];
					GLogger.chkpt("NINAS MAXUPSTREAM :" + MaxUpStreams);
					GLogger.chkpt("NINAS MAXDOWNSTREAM :" + MaxDownStreams);
					bmodemdetails.setstrMaxUpStrm(MaxUpStreams);
					bmodemdetails.setstrMaxDownStrm(MaxDownStreams);
				} else {
					throw new AfeException("ERRCOM_00007");
				}
			}
		} finally {
			GConnectAfe.close(rsModemDetails);
			GConnectAfe.close(psModemDetails);
		}

		GLogger.logExit(CLASS_NAME, METHOD_BOGetModemDetails);

		return bmodemdetails;
	}

	// End ADD v7.05i

	// BEGIN ADD V7.05e

	/**
	 * Returns package productid for the CustomerProductLine input.
	 * @param lCustomerProductLineID CustomerProductLineID for the line
	 * @return long ProductID for the package on the line
	 * @throws Exception If some in-memory container is not found
	 */
	public long lGetPackageProduct(long lCustomerProductLineID)
			throws Exception {
		long lPackageProductID = 0;
		CustomerProductLine objCustProdL = null;
		CustomerProduct objCustProd = null;
		Product objProduct = null;
		CustomerProductLineRow objCustProdLRow = null;
		CustomerProductRow objCustProdRow = null;
		CustomerProductRow objCustProdRow1 = null;
		ProductRow objProdRow = null;
		Vector vctCustProd = null;
		int iCPCount = 0;

		GLogger.logEntry(CLASS_NAME, "lGetPackageProduct");
		GLogger.logInput("lGetPackageProduct", ARG_LCUSTOMERPRODUCTLINEID,
				lCustomerProductLineID);

		try {
			objCustProdL = (CustomerProductLine) teleSessionMgr
					.getTable(GAfeConstants.CUSTOMERPRODUCTLINE);
			objCustProd = (CustomerProduct) teleSessionMgr
					.getTable(GAfeConstants.CUSTOMERPRODUCT);
			objProduct = (Product) teleSessionMgr
					.getMasterTable(GAfeConstants.PRODUCT);
			objCustProdLRow = objCustProdL
					.cplrSearchByCustProductLineID(lCustomerProductLineID);

			if (null != objCustProdLRow) {
				objCustProdRow = objCustProd
						.cprSearchByCustProductLineIDAndProductID(
								objCustProdLRow.getCustomerProductLineID(),
								objCustProdLRow.getProductID());

				if (null != objCustProdRow) {
					vctCustProd = objCustProd
							.vctSearchByCustomerProductLineID(objCustProdLRow
									.getCustomerProductLineID());

					if (null != vctCustProd) {
						for (iCPCount = 0; iCPCount < vctCustProd.size(); iCPCount++) {
							objCustProdRow1 = (CustomerProductRow) vctCustProd
									.elementAt(iCPCount);

							if ((objCustProdRow1.getParentID() == objCustProdRow
									.getCustomerProductID())
									&& (objCustProdRow1.getObsolete() == objCustProdRow
											.getObsolete())) {
								objProdRow = objProduct
										.prSearchByProductID(objCustProdRow1
												.getProductID());

								if ((null != objProdRow)
										&& (GAfeDescription.PRODUCTTYPE_PACKAGE == objProdRow.lProductTypeID)) {
									lPackageProductID = objCustProdRow1
											.getProductID();

									break;
								}
							}
						}
					}
				}
			}

			if (lPackageProductID == 0) {
				lPackageProductID = CDMConstants.PRODUCT_SKYPELIKE;
			}
		} finally {
			objCustProdL = null;
			objCustProd = null;
			objProduct = null;
			objCustProdLRow = null;
			objCustProdRow = null;
			objCustProdRow1 = null;
			objProdRow = null;
			vctCustProd = null;
		}

		GLogger.logOutput("lGetPackageProduct", "lPackageProductID",
				lPackageProductID);
		GLogger.logExit(CLASS_NAME, "lGetPackageProduct");

		return lPackageProductID;
	}

	// END ADD V7.05e
	// Begin Add v7.05h

	/*
	 * public static String strGetBillCycleDesc(long lCPLID, long lLanguageId) throws SQLException, Exception
	 * {
	 *   GLogger.logEntry(CLASS_NAME,"strGetBillCycleDesc");
	 *   GLogger.logInput("strGetBillCycleDesc", "lCPLId", lCPLID);
	 *   GLogger.logInput("strGetBillCycleDesc", "ARG_lLanguageId", lLanguageId);
	 *
	 *   PreparedStatement psBillCycle = null;
	 *   ResultSet rsBillCycle = null;
	 *   String strBillCycleDesc = null;
	 *   int iSize = 0;
	 *   try
	 *   {
	 *           psBillCycle = GConnectAfe.psPrepareStatement(GAfeSql.S_GET_BILL_CYCLE);
	 *           psBillCycle.setLong(1,lCPLID);
	 *           psBillCycle.setLong(2,lLanguageId);
	 *           psBillCycle.setLong(3,CDMConstants.OBSOLETE_ZERO);
	 *           psBillCycle.setLong(4,CDMConstants.OBSOLETE_ZERO);
	 *           psBillCycle.setLong(5,CDMConstants.OBSOLETE_ZERO);
	 *           rsBillCycle = psBillCycle.executeQuery();
	 *           if(rsBillCycle.next())
	 *           {
	 *              strBillCycleDesc = rsBillCycle.getString("BILLCYCLEDESCRIPTION");
	 *               //vctGetData.addElement(bProductLineOvw);
	 *           }
	 *           GLogger.chkpt("LProductstrBillCycleDesc: "+strBillCycleDesc);
	 *       }
	 *       //objBProductOvw.vctBProductLineOvw = vctGetData;
	 *   finally
	 *   {
	 *       GConnectAfe.close(rsBillCycle);
	 *       GConnectAfe.close(psBillCycle);
	 *   }
	 *   GLogger.logOutput("strGetBillCycleDesc","LProductstrBillCycleDesc1: ",strBillCycleDesc);
	 *   return strBillCycleDesc;
	 * }
	 */

	// End Add v7.05h
	// BEGIN ADD V7.05g
	/**
	 * Gets ContactInfoExtRow for the Von purpose email.
	 * @param lCustomerId
	 * @return ContactInfoExtRow if found else null
	 * @throws SQLException
	 * @throws Exception
	 */
	public ContactInfoExtRow objGetContactInfoVon(long lCustomerId)
			throws SQLException, Exception {
		GLogger.logEntry(CLASS_NAME, "objGetContactInfoVon");

		ContactInfoExtRow objContactInfoExtRow = null;
		ContactInfoExt objContactInfoExt = (ContactInfoExt) GConnectMemoryDB
				.getTable(GAfeConstants.CONTACTINFOEXT_TB);
		Vector vctAllContactForCustomer = objContactInfoExt
				.vctGetContactInfoExtByCustId(lCustomerId);

		if ((null != vctAllContactForCustomer)
				&& (vctAllContactForCustomer.size() > 0)) {
			for (int iCount = 0; iCount < vctAllContactForCustomer.size(); iCount++) {

				// If contact found for Von purpose
				if (GAfeConstants.PURPOSE_VON == ((ContactInfoExtRow) vctAllContactForCustomer
						.elementAt(iCount)).iPurposeId) {
					objContactInfoExtRow = (ContactInfoExtRow) vctAllContactForCustomer
							.elementAt(iCount);

					break;
				}
			}
		}

		GLogger.logOutput("objGetContactInfoVon", "objContactInfoExtRow",
				objContactInfoExtRow);
		GLogger.logExit(CLASS_NAME, "objGetContactInfoVon");

		return objContactInfoExtRow;
	}

	// END ADD V7.05g

	// Begin Add v7.05k

	/**
	 * This method check whether the given account is given or not.
	 * @param vctCustomerAcctRow
	 * @return vctCustomerAcctRow
	 * @throws SQLException
	 * @throws Exception
	 */
	private Vector vctSearchActiveAccounts(Vector vctCustomerAcctRow)
			throws Exception {
		GLogger.logEntry(CLASS_NAME, "vctSearchActiveAccounts");

		CustomerAccountRow CustAccRow = null;
		long lCustomerAccountId = 0;
		Vector vctCustomerAccountId = null;
		CustomerAccount CustAccTable = null;
		CustomerChargeType CustChargeTable = null;

		CustAccTable = (CustomerAccount) GConnectMemoryDB
				.getTable("CUSTOMERACCOUNT");
		CustChargeTable = (CustomerChargeType) GConnectMemoryDB
				.getTable(string_CUSTOMERCHARGETYPE);

		if (null != vctCustomerAcctRow) {
			for (int iCounter = 0; iCounter < vctCustomerAcctRow.size(); iCounter++) {
				CustAccRow = (CustomerAccountRow) vctCustomerAcctRow
						.elementAt(iCounter);

				if (null != CustAccRow) {
					lCustomerAccountId = CustAccRow.lCustomerAccountID;

					if (null == vctCustomerAccountId) {
						vctCustomerAccountId = new Vector();
					}

					vctCustomerAccountId.add(Long.valueOf(lCustomerAccountId));
				}
			}

			if (null != vctCustomerAccountId) {
				GLogger.chkpt("First vctCustomerAccountId:"
						+ vctCustomerAccountId.size());
				vctCustomerAccountId = CustChargeTable
						.vctSearchActiveAccounts(vctCustomerAccountId);
			}

			vctCustomerAcctRow = null;

			if (null != vctCustomerAccountId) {
				GLogger.chkpt("Second vctCustomerAccountId:"
						+ vctCustomerAccountId.size());
				vctCustomerAcctRow = CustAccTable
						.vctSearchAccountRowByCustomerAccountID(vctCustomerAccountId);
			}
		}

		GLogger.logExit(CLASS_NAME, "vctSearchActiveAccounts");

		return vctCustomerAcctRow;
	}

	// End Add v7.05k

	// Begin Add V7.06c

	/**
	 * Description : Checks whether the line is saved in Database or not.
	 * @param lCustomerProductLineID
	 * @return true - line is saved in DB, false - line is not saved in DB.
	 * @throws Exception
	 */
	public boolean bCheckLineInDB(long lCustomerProductLineID) throws Exception {
		GLogger.logEntry(CLASS_NAME, METHOD_bCheckLineInDB);
		GLogger.logInput(METHOD_bCheckLineInDB, ARG_CUSTOMERPRODUCTLINEID,
				lCustomerProductLineID);

		CustomerProductLineRow cplRow = null;
		boolean bIsLineInDB = false;

		customerProductLineTable = (CustomerProductLine) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINE); // Getting the Customer table from the session
		cplRow = customerProductLineTable
				.cplrSearchByCustProductLineID(lCustomerProductLineID);

		if (null != cplRow) {
			if (Record.INSERT == cplRow.iStatusInDB) {
				bIsLineInDB = false;
			} else {
				bIsLineInDB = true;
			}
		}

		GLogger.logOutput(METHOD_bCheckLineInDB, "bIsLineInDB : ", bIsLineInDB);
		GLogger.logExit(CLASS_NAME, METHOD_bCheckLineInDB);

		return bIsLineInDB;
	}

	// End Add V7.06c

	// Begin Add V7.06h
	public long lGetParentProductID(Vector vctProductSelected, long lProductID)
			throws AfeException {
		GLogger.logEntry(CLASS_NAME, METHOD_lGetParentProductID);
		GLogger.logInput(METHOD_lGetParentProductID, "lProductID : ",
				lProductID);

		// Begin DEL v9.01d
		// long lParentID = 0;
		// PreparedStatement psQuery = null;
		// ResultSet rsParentID = null;
		// End DEL v9.01d
		Product objProduct = null;

		// Begin DEL v9.01d
		// ProductRow objProductRow = null;
		// End DEL v9.01d
		OptionProduct objOptionProduct = null;

		// Begin DEL v9.01d
		// OptionProductRow objOptionProductRow = null;
		// End DEL v9.01d
		OptionGroup objOptionGroup = null;
		OptionGroupRow objOptionGroupRow = null;
		Vector vctOptionProducts = null;
		ArrayList arrParentIds = null;
		long lParentProductId = 0;
		boolean bParentFound = false;

		try {
			objOptionGroup = (OptionGroup) GConnectMemoryDB
					.getMasterTable(GAfeConstants.OPTIONGROUP);
			objOptionProduct = (OptionProduct) GConnectMemoryDB
					.getMasterTable(GAfeConstants.OPTIONPRODUCT);
			objProduct = (Product) GConnectMemoryDB
					.getMasterTable(GAfeConstants.PRODUCT);

			if ((null != objOptionProduct) && (null != objOptionGroup)
					&& (null != objProduct)) {
				vctOptionProducts = objOptionProduct
						.vctSearchByProductID(lProductID);

				if (null != vctOptionProducts) {
					for (int iIndex = 0; iIndex < vctOptionProducts.size(); iIndex++) {
						if (((OptionProductRow) vctOptionProducts
								.elementAt(iIndex)).iObsolete == 0) {
							objOptionGroupRow = objOptionGroup
									.prSearchByOptionGroupIDandObsolete(
											((OptionProductRow) vctOptionProducts
													.elementAt(iIndex)).lOptionGroupID,
											0);

							if (null != objOptionGroupRow) {
								lParentProductId = objOptionGroupRow.lProductID;

								if (null == arrParentIds) {
									arrParentIds = new ArrayList();
								}

								arrParentIds.add(Long.valueOf(lParentProductId));
							}
						}
					}
				}
			}

			if ((null != arrParentIds) && (null != vctProductSelected)) {
				for (int iIndex = 0; iIndex < arrParentIds.size(); iIndex++) {
					for (int ivctIndex = 0; ivctIndex < vctProductSelected
							.size(); ivctIndex++) {
						if (((BProductDetail) vctProductSelected
								.elementAt(ivctIndex)).lProductID.longValue() == ((Long) arrParentIds
								.get(iIndex)).longValue()) {
							lParentProductId = ((Long) arrParentIds.get(iIndex))
									.longValue();
							bParentFound = true;

							break;
						}
					}

					if (bParentFound) {
						break;
					}
				}
			}
		} catch (Exception ex) {
		//	ex.printStackTrace(System.out);
			GLogger.logException(ex);

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		GLogger.logOutput(METHOD_lGetParentProductID, "lParentProductId",
				lParentProductId);
		GLogger.logExit(CLASS_NAME, METHOD_lGetParentProductID);

		return lParentProductId;
	}

	public boolean bVerifyParentProductID(Vector vctProductSelected,
			long lProductID, long lCustomerProductID) throws Exception {
		GLogger.logEntry(CLASS_NAME, METHOD_bVerifyParentProductID);
		GLogger.logInput(METHOD_bVerifyParentProductID, "lProductID : ",
				lProductID);
		GLogger.logInput(METHOD_bVerifyParentProductID,
				"lCustomerProductID : ", lCustomerProductID);

		if (lGetParentProductID(vctProductSelected, lProductID) == RProduct
				.lGetProductIDFromCustProdID(lCustomerProductID)) {
			GLogger.chkpt("ParentProductID matches with the given ProductID");
			GLogger.logExit(CLASS_NAME, METHOD_bVerifyParentProductID);

			return true;
		} else {
			GLogger
					.chkpt("ParentProductID does not matches with the given ProductID");
			GLogger.logExit(CLASS_NAME, METHOD_bVerifyParentProductID);

			return false;
		}
	}

	// End Add V7.06h

	/*
	 *  Begin Delete V 7.07b
	 * /**Checks if the Product is installed
	 * @param lCustomerProductID long
	 * @return bCheckInstalledProduct boolean
	 */

	/*
	 *
	 * public boolean IsInstalledProducts(long lCustomerProductID)   throws Exception
	 * {
	 * GLogger.logEntry(CLASS_NAME,METHOD_IsInstalledProducts);
	 * GLogger.chkpt("\n********* ENTERED LPRODUCT.JAVA ***********\n");
	 * GLogger.chkpt("\n*********ENTERED IN IsInstalledProducts() METHOD ***********\n");
	 * Date Sysdate = new Date();
	 * boolean IsInstalledProducts = false;
	 * CustomerProduct customerProduct=null;
	 * CustomerProductRow custProductRow = null;
	 * Date ActivationDate = null;
	 * try
	 * {
	 *
	 * if(null != teleSessionMgr.getTable("CUSTOMERPRODUCT"))
	 * {
	 *         customerProduct = (CustomerProduct) teleSessionMgr.getTable("CUSTOMERPRODUCT");
	 * }
	 * }  catch (Exception ex) {
	 * if (GAfePropertyLoader.DEBUG) {
	 * ex.printStackTrace(System.out);
	 * }
	 * AfeException afe = new AfeException("ERRCOM_00002", ex.getMessage());//unknown exception occurred
	 * throw afe;
	 * }
	 * custProductRow =(CustomerProductRow) customerProduct.cprSearchByCustProductID(lCustomerProductID);
	 * if (1    !=      custProductRow.iObsolete)
	 * {
	 * ActivationDate=  custProductRow.getDtActivationDate();
	 * if(ActivationDate != null && Sysdate.compareTo(ActivationDate)!= -1 )
	 * {
	 * IsInstalledProducts = true;
	 * GLogger.chkpt("\n*********ACTIVATION DATE OF PRODUCT < = sysdate ***********\n");
	 * GLogger.chkpt("\n********* IsInstalledProducts CHECK SUCCEEDED ***********\n");
	 * }
	 * }
	 * GLogger.chkpt("\n********* EXITED LPRODUCT.JAVA ***********\n");
	 * GLogger.logExit(CLASS_NAME,METHOD_IsInstalledProducts);
	 * return IsInstalledProducts;
	 * }
	 *
	 */

	/**
	 * Checks if the Product is new
	 * @param lCustomerProductID long
	 * @return bCheckInstalledProduct boolean
	 */

	/*
	 *
	 * public boolean IsProductNew (long lCustomerProductID) throws Exception
	 *  {
	 *  GLogger.logEntry(CLASS_NAME,METHOD_IsProduct_New);
	 *  GLogger.chkpt("\n********* ENTERED LPRODUCT.JAVA ***********\n");
	 *  GLogger.chkpt("\n*********ENTERED IN IsProduct_New() METHOD ***********\n");
	 *  boolean IsInstalledProducts = false;
	 *  CustomerProduct customerProduct=null;
	 *  CustomerProductRow custProductRow = null;
	 *  Date ActivationDate = null;
	 *  try
	 *  {
	 *
	 *  if(null != teleSessionMgr.getTable("CUSTOMERPRODUCT"))
	 *          {
	 *                  customerProduct = (CustomerProduct) teleSessionMgr.getTable("CUSTOMERPRODUCT");
	 *          }
	 *  }  catch (Exception ex) {
	 *      if (GAfePropertyLoader.DEBUG) {
	 *          ex.printStackTrace(System.out);
	 *      }
	 *      AfeException afe = new AfeException("ERRCOM_00002", ex.getMessage());//unknown exception occurred
	 *      throw afe;
	 *  }
	 * custProductRow =(CustomerProductRow) customerProduct.cprSearchByCustProductID(lCustomerProductID);
	 *
	 * GLogger.chkpt("CustProductRow CustomerProductLineID"+ custProductRow.getCustomerProductLineID());
	 * GLogger.chkpt("CustProductRow getCustomerProductID "+ custProductRow.getCustomerProductID());
	 * GLogger.chkpt("CustProductRow ActivationDate"+ custProductRow.getDtActivationDate());
	 * if (1    !=      custProductRow.iObsolete)
	 * {
	 *    ActivationDate=  custProductRow.getDtActivationDate();
	 *    GLogger.chkpt("\n*********ACTIVATION DATE OF PRODUCT is  ***********\n"+ActivationDate);
	 *    if(ActivationDate != null)
	 *     {
	 *
	 *       GLogger.chkpt("\n*********ACTIVATION DATE OF PRODUCT Present ***********\n");
	 *       GLogger.chkpt("\n********* IsInstalledProducts CHECK Failed ***********\n");
	 *     }
	 *     else
	 *    {
	 *       GLogger.chkpt("\n*********ACTIVATION DATE OF PRODUCT is null ***********\n");
	 *       GLogger.chkpt("\n********* IsInstalledProducts CHECK SUCCEEDED ***********\n");
	 *       IsInstalledProducts = true;
	 *    }
	 * }
	 *  GLogger.chkpt("\n********* EXITED LPRODUCT.JAVA ***********\n");
	 *  GLogger.logExit(CLASS_NAME,METHOD_IsProduct_New);
	 *          return IsInstalledProducts;
	 *  }
	 */

	// END delete V 7.07b
	// Begin add v7.09a
	public String sGetMobileNumberFromSession(long lcplid) throws Exception {
		GLogger.logEntry(CLASS_NAME, "sGetMobileNumberFromSession");

		try {
			CustomerProductLineIdentifierRow cplirObj = null;
			String strNumber = null;

			customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
					.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);
			cplirObj = customerProductLineIdentifierTable
					.cplirSearchByCustProductLineID(lcplid);
			strNumber = cplirObj.strCustomerPLIdentifierValue;
			GLogger.chkpt("Mobile  Number retrived is " + strNumber);
			GLogger.logExit(CLASS_NAME, "sGetMobileNumberFromSession");

			return strNumber;
		} catch (Exception e) {
			throw (e);
		}
	}

	// End add v7.09a
	// Begin Add V8.00a

	/**
	 * Retrieves the MainCPLIdentifier for the CPLId from the container and returns it.
	 * @param lCustomerProductLineID
	 * @return strCustomerPLIdentifierValue
	 * @throws Exception
	 */
	public String strGetTeleMainCPLIdenValueFromCPLId(
			long lCustomerProductLineID) throws Exception {
		GLogger.debug(CLASS_NAME, "strGetTeleMainCPLIdenValueFromCPLId", "");
		GLogger
				.debug(
						CLASS_NAME,
						"strGetTeleMainCPLIdenValueFromCPLId => lCustomerProductLineID ",
						lCustomerProductLineID);

		CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null;
		String strCustomerPLIdentifierValue = null;
		Vector vctCPLIdentifierRow = null;
		int IdentifierTypeForTEL = 1;

		customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);

		if (null != customerProductLineIdentifierTable) {
			vctCPLIdentifierRow = customerProductLineIdentifierTable
					.vctSearchByCustProdLineIDandProdLineIdentifierTypeIDandObsolete(
							lCustomerProductLineID, IdentifierTypeForTEL,
							FINAL_ZERO);

			if (null != vctCPLIdentifierRow) {
				int iSizeofVector = vctCPLIdentifierRow.size();

				GLogger
						.debug(
								CLASS_NAME,
								"strGetTeleMainCPLIdenValueFromCPLId => iSizeofVector - CPLIdentifierRow ",
								iSizeofVector);

				for (int iCounter = FINAL_ZERO; iCounter < iSizeofVector; iCounter++) {
					customerProductLineIdentifierRow = null;
					customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCPLIdentifierRow
							.elementAt(iCounter);
					strCustomerPLIdentifierValue = customerProductLineIdentifierRow.strCustomerPLIdentifierValue;
				}
			}
		}

		GLogger
				.debug(
						CLASS_NAME,
						"strGetTeleMainCPLIdenValueFromCPLId => strCustomerPLIdentifierValue ",
						strCustomerPLIdentifierValue);
		GLogger.debug(CLASS_NAME, "strGetTeleMainCPLIdenValueFromCPLId", "");

		return strCustomerPLIdentifierValue;
	}

	// End Add V8.00a
	// Begin Add v7.20c

	/**
	 * Retrieves the MainCPLIdentifier for the CPLId from the container and returns it.
	 * @param lCustomerProductLineID
	 * @return strCustomerPLIdentifierValue
	 * @throws Exception
	 */
	public String strGetInternetMainCPLIdenValueFromCPLId(
			long lCustomerProductLineID) throws Exception {
		GLogger
				.debug(CLASS_NAME, "strGetInternetMainCPLIdenValueFromCPLId",
						"");
		GLogger
				.debug(
						CLASS_NAME,
						"strGetInternetMainCPLIdenValueFromCPLId => lCustomerProductLineID ",
						lCustomerProductLineID);

		CustomerProductLineIdentifierRow customerProductLineIdentifierRow = null;
		String strCustomerPLIdentifierValue = null;
		Vector vctCPLIdentifierRow = null;

		customerProductLineIdentifierTable = (CustomerProductLineIdentifier) teleSessionMgr
				.getTable(string_CUSTOMERPRODUCTLINEIDENTIFIER);

		if (null != customerProductLineIdentifierTable) {
			vctCPLIdentifierRow = customerProductLineIdentifierTable
					.vctSearchByCustProdLineIDandProdLineIdentifierTypeIDandObsolete(
							lCustomerProductLineID,
							GAfeDescription.IdentifierTypeForInternet,
							FINAL_ZERO);

			if (null != vctCPLIdentifierRow) {
				int iSizeofVector = vctCPLIdentifierRow.size();

				GLogger
						.debug(
								CLASS_NAME,
								"strInternetGetMainCPLIdenValueFromCPLId => iSizeofVector - CPLIdentifierRow ",
								iSizeofVector);

				for (int iCounter = FINAL_ZERO; iCounter < iSizeofVector; iCounter++) {
					customerProductLineIdentifierRow = null;
					customerProductLineIdentifierRow = (CustomerProductLineIdentifierRow) vctCPLIdentifierRow
							.elementAt(iCounter);
					strCustomerPLIdentifierValue = customerProductLineIdentifierRow.strCustomerPLIdentifierValue;
				}
			}
		}

		GLogger
				.debug(
						CLASS_NAME,
						"strInternetGetMainCPLIdenValueFromCPLId => strCustomerPLIdentifierValue ",
						strCustomerPLIdentifierValue);
		GLogger
				.debug(CLASS_NAME, "strInternetGetMainCPLIdenValueFromCPLId",
						"");

		return strCustomerPLIdentifierValue;
	}

	// End Add v7.20c

	// BEGIN Add 7.20d

	/**
	 * The Function will is used to do all the validations that are there for selecting a product from
	 * the upper Grid to the Lower Grid. This method is called when there are some servcies from the migrated
	 * screen to be added in the product structure.
	 * @param bProductDetailProperty
	 * @param bProductDetailUpper
	 * @param bProductDetailLower
	 * @param lProductID
	 * @return
	 * @throws Exception
	 */
	public int iValidateSelectForMigratedServices(
			BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetailUpper,
			BProductDetail bProductDetailLower, Long lProductID)
			throws Exception {

		// Begin DEL v9.01d
		// int iMinMand = 0;     //Local Varaible Declaration
		// End DEL v9.01d
		int iMaxMand = 0; // Local Varaible Declaration
		int iCounter = 0; // Local Varaible Declaration
		int iSecondCheck = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// int iSum = 0;                 //Local Varaible Declaration
		// End DEL v9.01d
		int iParentInstance = 0; // Local Varaible Declaration
		int iLevel = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d
		try {
			BProductDetail bProductDetail = null;

			iCheckGlobalForbiddenProduct(bProductDetailUpper,
					bProductDetailProperty.lCustomerProductLineID.longValue());

			Vector vctForbiddenProduct = null; // internal local vector

			if (null == forbiddenProductTable) {
				forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
						.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
			}

			if (null != forbiddenProductTable) {
				vctForbiddenProduct = forbiddenProductTable.vctGetAll();
			}

			if ((FINAL_ZERO != bProductDetailProperty.vctProductSelected.size())) {

				//              vctForbiddenProduct = (Vector)forbiddenProductTable.vctSearchByProductIDandObsolete(bProductDetailUpper.lProductID.longValue(),FINAL_ZERO);
				if (null != vctForbiddenProduct) {
					ForbiddenProductRow forbiddenProductRowTemp = null;

					for (int iCounter4 = FINAL_ZERO; iCounter4 < vctForbiddenProduct
							.size(); iCounter4++) {
						forbiddenProductRowTemp = (ForbiddenProductRow) vctForbiddenProduct
								.elementAt(iCounter4);

						if ((forbiddenProductRowTemp.lProductID == bProductDetailUpper.lProductID
								.longValue())
								&& (forbiddenProductRowTemp.iObsolete == FINAL_ZERO)) {
							for (int iCounter5 = FINAL_ZERO; iCounter5 < bProductDetailProperty.vctProductSelected
									.size(); iCounter5++) {
								bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
										.elementAt(iCounter5);

								if ((forbiddenProductRowTemp.lForbProductID == bProductDetail.lProductID
										.longValue())
										&& (FINAL_ONE == forbiddenProductRowTemp.iLevel)) {
									throw new AfeException("ERRAFE_00635");
								}
							}
						}
					}
				}
			}

			if (null != bProductDetailLower) {
				GLogger
				.chkpt("Test iValidateSelectForMigratedServices bProductDetailLower.iLevel<" + bProductDetailLower.iLevel + ">bProductDetailUpper.iLevel <"+bProductDetailUpper.iLevel+">- FINAL_ONE<"+FINAL_ONE+">");
				if (!((bProductDetailLower.iLevel) == (bProductDetailUpper.iLevel - FINAL_ONE))) {
					throw new AfeException("ERRAFE_00505"); /* Error " Because of level mismatch you can not select this product" */
				} // end of the if loop
			} // end of the if loop

			// add for reconciliation rel5.2
			if (bProductDetailUpper.lProductID.longValue() == 621) // Modem Battery Pack
			{
				checkModemBatteryPack();
			}

			// add for reconciliation rel5.2
			OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			optionGroupRow = optionGroupTable
					.prSearchByOptionGroupIDandObsolete(
							(bProductDetailUpper.lOptionGroupID).longValue(),
							FINAL_ZERO);

			if (null != bProductDetailLower) {
				if (bProductDetailLower.lProductID.longValue() != optionGroupRow.lProductID) {
					throw new AfeException("ERRAFE_00506"); /* Error " You can not move selected product to the selected package" */
				} // end of the if loop
			} // end of the if loop

			if (null != optionGroupRow) {

				// Begin DEL v9.01d
				// iMinMand = optionGroupRow.iMinMandProducts;
				// End DEL v9.01d
				iMaxMand = optionGroupRow.iMaxMandProducts;
			} // end of the if loop

			if (null != bProductDetailLower) {
				iParentInstance = bProductDetailLower.iInstance;
				iLevel = bProductDetailLower.iLevel + FINAL_ONE;
				iCounter = iFindProductInVectorLevelParentInstanceandOptionGroupID(
						bProductDetailProperty.vctProductSelected, iLevel,
						iParentInstance, bProductDetailUpper.lOptionGroupID);

				// BEGIN Add vYogi
				boolean bByPassException = false;

				if (bProductDetailUpper.lProductID.longValue() == CDMConstants.PRODUCT_MAILALIAS) {
					String strChelloMail = "@chello.";
					int iPos = 0;
					String strMailAlias = null;

					strMailAlias = (String) (((Vector) ((Vector) ((BProductParameter) (bProductDetailUpper.vctParameters
							.elementAt(0))).vctParameterValues).elementAt(0))
							.get(0));

					if (null != strMailAlias) {
						iPos = strMailAlias.indexOf(strChelloMail);

						if (iPos != -1) {
							GLogger.chkpt("Found out the next mailalias as "
									+ strMailAlias);
							bByPassException = true;
						}
					}
				} else if (bProductDetailUpper.lProductID.longValue() == CDMConstants.PRODUCT_URL) {
					String strUrl = null;
					int iPosition = 0;
					String strChelloUrl = "chello.";

					strUrl = (String) (((Vector) ((Vector) ((BProductParameter) (bProductDetailUpper.vctParameters
							.elementAt(2))).vctParameterValues).elementAt(0))
							.get(0));

					if (null != strUrl) {
						iPosition = strUrl.indexOf(strChelloUrl);

						if (iPosition != -1) {
							GLogger.chkpt("Found out the next web url as "
									+ strUrl);
							bByPassException = true;
						}
					}
				}

				// END Add vYogi
				if ((iCounter < iMaxMand) || bByPassException) {
					GLogger.chkpt("Bypassed the exception");
					iSecondCheck = FINAL_ONE;
				} // end of the if loop
				else {
					throw new AfeException("ERRAFE_00507"); /* Maximum limit has reached for this OptionGroup */
				} // end of the else part of the if loop
			} // end of the if loop
			else {
				iSecondCheck = FINAL_ONE;
			}
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				/* BEGIN DELETE VER: 5.59a */

				// System.out.println(afee.strGetErrCode() + " ----------   " +afee.strGetErrMsg());
				/* END DELETE VER: 5.59a */
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred

			throw afe;
		}

		return iSecondCheck;
	}

	/**
	 *  This method is called during the adding of the mailaliases or the web url's inside the product structure.
	 *   Based on this logic it adds or deletes teh various elements from the migrated services screen to the main
	 *   product structure.
	 *
	 * @param bProductDetailProperty
	 * @param bProductDetailUpper
	 * @param bProductDetailLower
	 * @param lProductID
	 * @param CustomerID
	 * @param iPostionInLowerSelectedVector
	 * @param iPostionInUpperSelectedVector
	 * @return bProductDetailProperty
	 * @throws SQLException
	 * @throws Exception
	 */
	public BProductDetailProperty objSelectForMigratedServices(
			BProductDetailProperty bProductDetailProperty,
			BProductDetail bProductDetailUpper,
			BProductDetail bProductDetailLower, Long lProductID,
			Long CustomerID, int iPostionInLowerSelectedVector,
			int iPostionInUpperSelectedVector) throws SQLException, Exception {

		// Begin DEL v9.01d
		// int iReturnCount = 0; //Local Varaible Declaration
		// End DEL v9.01d
		int iParentInstance = 0; // Local Varaible Declaration
		int iLevel = 0; // Local Varaible Declaration
		int iSParentInstance = 0; // Local Varaible Declaration
		int iSLevel = 0; // Local Varaible Declaration
		int iMaxInstance = 0; // Local Varaible Declaration
		int iIncMaxInstance = 0; // Local Varaible Declaration
		int iMaxMand = 0; // Local Varaible Declaration
		int iNumberOfTimes = 0; // Local Varaible Declaration

		// Begin DEL v9.01d
		// long lStart = System.currentTimeMillis();
		// End DEL v9.01d
		Long lTemp = Long.valueOf(0);
		boolean bMigratedWeb = false;
		boolean bSkipRemoveElement = false;
		String strUrl = null;
		int iPosition = 0;
		boolean bChelloUrl = false;
		String strChelloUrl = "chello.";

		try {
			OptionGroupRow optionGroupRow = null; // Initializing the Object Class for the OptionGroup table

			if (null == optionGroupTable) {
				optionGroupTable = (OptionGroup) teleSessionMgr
						.getMasterTable(string_OPTIONGROUP); // Getting the OptionGroup table from the session
			}

			optionGroupRow = optionGroupTable
					.prSearchByOptionGroupID(bProductDetailUpper.lOptionGroupID
							.longValue());

			if ((null != optionGroupRow)
					&& (FINAL_ZERO == optionGroupRow.iObsolete)) {
				iMaxMand = optionGroupRow.iMaxMandProducts;
			}

			int iNumberOfTimesProducts = FINAL_ZERO;
			BProductDetail bProductDetail = null;

			if (bProductDetailUpper.lProductID.longValue() == CDMConstants.PRODUCT_URL) {
				strUrl = (String) (((Vector) ((Vector) ((BProductParameter) (bProductDetailUpper.vctParameters
						.elementAt(2))).vctParameterValues).elementAt(0))
						.get(0));
				GLogger.chkpt("The web url retrieved is " + strUrl);

				if (null != strUrl) {
					iPosition = strUrl.indexOf(strChelloUrl);

					if (iPosition != -1) {
						GLogger.chkpt("I caught the chello");
						bChelloUrl = true;
					}
				}
			}

			for (int iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected
					.size(); iCounter++) {
				bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
						.elementAt(iCounter);

				if (null != bProductDetailLower) {
					if (bProductDetailLower.lProductID.longValue() == bProductDetail.lProductID
							.longValue()) {
						++iNumberOfTimesProducts;
					}
				} // end of the if loop

				if (bProductDetailUpper.lOptionGroupID.longValue() == bProductDetail.lOptionGroupID
						.longValue()) {
					if (!bChelloUrl) {
						++iNumberOfTimes;
					}
				}
			}

			if (null != bProductDetailLower) {
				for (int iCount = 0; iCount < GAfeDescription.PRODUCT_ALLWEB.length; iCount++) {
					if ((bProductDetailLower.lProductID).longValue() == GAfeDescription.PRODUCT_ALLWEB[iCount]) {
						lTemp = Long
								.valueOf((String) (((Vector) ((Vector) ((BProductParameter) (bProductDetailLower.vctParameters
										.elementAt(1))).vctParameterValues)
										.elementAt(0)).get(0)));

						if (lTemp.longValue() == 1) {
							GLogger.chkpt("Found out the migrated weeb here ");
							bMigratedWeb = true;

							break;
						} else {
							break;
						}
					}
				}
			}

			if (FINAL_ZERO != iNumberOfTimesProducts) {
				iMaxMand = iMaxMand * iNumberOfTimesProducts;
			}

			if (bMigratedWeb) {
				if (iNumberOfTimes >= iMaxMand) {
					bSkipRemoveElement = true;
				}
			}

			if (!bSkipRemoveElement) {
				if (iNumberOfTimes >= (iMaxMand - FINAL_ONE)) {
					bProductDetailProperty.vctProductNonSelected
							.removeElementAt(iPostionInUpperSelectedVector);
				}
			}

			// Begin DEL v9.01d

			/*
			 *           if (GAfePropertyLoader.DEBUG)
			 *           {
			 */

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect 1");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			/*
			 *   lStart = System.currentTimeMillis();
			 * }
			 */

			// End DEL v9.01d
			/* MANY CHANGED THAT HAVE TO BE APPLIED OVER HERE */
			if (null != bProductDetailLower) {
				iParentInstance = bProductDetailLower.iInstance;
				iLevel = bProductDetailLower.iLevel + FINAL_ONE;
				iMaxInstance = iGetMaxInstanceInVectorlevelparentinstance(
						bProductDetailProperty.vctProductSelected, iLevel,
						iParentInstance);
				iIncMaxInstance = iMaxInstance + FINAL_ONE;
				bProductDetailUpper.iInstance = iIncMaxInstance;
				bProductDetailUpper.iParentInstance = iParentInstance;
				bProductDetailUpper.iLevel = iLevel;
			} else {
				bProductDetailUpper.iInstance = 1;
				bProductDetailUpper.iParentInstance = 1;
				bProductDetailUpper.iLevel = 2;
			}

			// Begin DEL v9.01d

			/*
			 * if (GAfePropertyLoader.DEBUG)
			 * {
			 */

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect 2");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			/*
			 *   lStart = System.currentTimeMillis();
			 * }
			 */

			// End DEL v9.01d
			// BEGIN ADD: V3.10
			// Change made for fixing DEFECT id 70, Obsolete Masters
			// To recalculate the price when we are adding the product to lower grid
			int iNoOfOccurences = 0;
			Vector vctAllBillableParameters = null;

			iIsDefault = FINAL_ZERO;
			iNoOfOccurences = iNoOfOccurencesOfProduct(
					bProductDetailProperty.vctProductSelected, iLevel,
					iParentInstance, bProductDetailUpper.lProductID.longValue());

			if (GAfePropertyLoader.DEBUG) {


				GLogger.chkpt("Inside if statement ");	// System.out.println("iNoOfOccurences : " + iNoOfOccurences);
			}

			vctAllBillableParameters = vctGetAllBillableParameters(bProductDetailUpper);

			if (GAfePropertyLoader.DEBUG) {

				GLogger.chkpt("Inside if statement ");		// System.out.println("Size of Vector vctAllBillableParameters : " + vctAllBillableParameters.size());
			}

			if (FINAL_ONE == bProductDetailUpper.iBillable) {
				fncInternalForPSIDandPriceCalAfterChanges(bProductDetailUpper,
						vctAllBillableParameters,
						bProductDetailProperty.lCurrencyID,
						bProductDetailUpper.lProductID,
						bProductDetailProperty.lPaymentMethodRC,
						bProductDetailProperty.lPaymentMethodNRC,
						bProductDetailProperty.lPaymentMethodUsage,
						bProductDetailProperty.iInClExc, iIsDefault,
						iNoOfOccurences, FINAL_ZERO);
			}

			if (GAfePropertyLoader.DEBUG) {

				GLogger.chkpt("Inside if statement ");		// System.out.println("Size of Vector vctAllBillableParameters : " + vctAllBillableParameters.size());
			}

			//          Changes made for fixing DEFECT id 70, Obsolete Masters
			//          END ADD: V3.10
			bProductDetailProperty.vctProductSelected.insertElementAt(
					bProductDetailUpper,
					(iPostionInLowerSelectedVector + FINAL_ONE));

			/* Along with product we also need to move all the mandatory products to the lower grid. */
			iSParentInstance = bProductDetailUpper.iInstance;
			iSLevel = bProductDetailUpper.iLevel;

			if (null == optionProductTable) {
				optionProductTable = (OptionProduct) teleSessionMgr
						.getMasterTable(string_OPTIONPRODUCT); // Getting the OptionGroup table from the session
			}

			// Begin DEL v9.01d

			/*
			 * if (GAfePropertyLoader.DEBUG) {
			 */

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect before movemandatory productdown");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			/*
			 *   lStart = System.currentTimeMillis();
			 * }
			 */

			// End DEL v9.01d
			// Begin DEL v9.01d
			iMoveMandatoryProductsDown(bProductDetailProperty, lProductID,
					CustomerID, iSLevel, iSParentInstance,
					++iPostionInLowerSelectedVector, optionGroupTable,
					optionProductTable);

			// End DEL v9.01d

			// Begin DEL v9.01d

			/*
			 * if (GAfePropertyLoader.DEBUG) {
			 */

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect after movemandatory products down");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			/*
			 *   lStart = System.currentTimeMillis();
			 * }
			 */

			// End DEL v9.01d
			if (null == forbiddenProductTable) {
				forbiddenProductTable = (ForbiddenProduct) teleSessionMgr
						.getMasterTable(string_FORBIDDENPRODUCT); // Getting the OptionGroup table from the session
			}

			// Begin DEL v9.01d

			/*
			 * if (GAfePropertyLoader.DEBUG) {
			 */

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect after movemandatory products down");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			/*
			 *   lStart = System.currentTimeMillis();
			 * }
			 */

			// End DEL v9.01d
			vdFncForbiddenProductForObjSelect(bProductDetailProperty,
					lProductID.longValue(), forbiddenProductTable);

			// Begin DEL v9.01d

			/*
			 * if (GAfePropertyLoader.DEBUG) {
			 */

			/* BEGIN DELETE VER: 5.59a */

			// System.out.println("In the middle of function objselect after movemandatory products down");
			// System.out.println("Total Time taken : " + (System.currentTimeMillis() - lStart) + " Milliseconds");
			/* END DELETE VER: 5.59a */

			/*
			 *   lStart = System.currentTimeMillis();
			 * }
			 */

			// End DEL v9.01d
			// BEGIN ADD : V3.10
			// Added Code to fix defect No. 70 Obsolete Masters
			MProduct mProduct = new MProduct(teleSessionMgr, bSession);

			mProduct
					.vdPrintCompleteBProductDetailProperty(bProductDetailProperty);

			//          Added Code to fix defect No. 70 Obsolete Masters
			//          END ADD : V3.10
		} // end of the if loop
		catch (SQLException sqle) {
			throw sqle;
		}

		//      BEGIN ADD : V3.27
		catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				GGeneric.printStackTrace(ex, GGeneric.iDebugLevelThree, this);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		//      END ADD : v3.27
		return bProductDetailProperty;
	}

	// End Add v7.20d
	// BEGIN ADD Supriya

	/**
	 * Retrieves the Node Owner on the basis of CDM Address Id.
	 * @param lAddressId
	 * @return
	 * @throws Exception
	 */
	public long lGetNodeOwnerByAddressId(long lAddressId, boolean bIsApplSave)
			throws Exception {
		long lOwnerId = GAfeConstants.ADDRESSMGMT_DEFAULT_LONG;
		long lSapId = 0;
		BManualAddress objBManualAddress = null;
		AfeNinasOut objAfeNinasOut = new AfeNinasOut();
		BNeighbourData objBNeighbourData = null;
		BSAPDetailsFromCATSAP objBsapDetailsFromCATSAP = null;
		String strNodeName = null;

		/**
		 * Check If APPL Save is the Mode or DB Calls are needed.
		 */
		if (bIsApplSave) {

			// Get the SAP ID for the Address Id from container.
			lSapId = RProduct.lGetSapIdFromAddressIdFromAppl(lAddressId);

			if (lSapId == 0) {

				/**
				 * The Address is a Manual Address. Get the ManualAddress Details from
				 * container.
				 */
				objBManualAddress = RProduct
						.objGetManualAddressByAddressIdFromAppl(lAddressId);

				/**
				 * Retrieve the Best Guess Neighbour Node
				 */
				objBNeighbourData = objAfeNinasOut
						.objGetBestGuessNeighbourData(
								objBManualAddress.strPostcode,
								objBManualAddress.strCity,
								objBManualAddress.strStreet,
								objBManualAddress.strHouseNumber);
				strNodeName = objBNeighbourData.getNodeName();
			} else {

				/**
				 * the Address is servicable.Retrieve the Node details.
				 */
				objBsapDetailsFromCATSAP = objAfeNinasOut
						.objSearchSapDetailBySap(lSapId);
				strNodeName = objBsapDetailsFromCATSAP.getNodeId();
			}

			lOwnerId = objAfeNinasOut.iGetOwnerbyNodeName(strNodeName);
		} else {

			// Get the SAP Id for the Address Id from Database.
			lSapId = ProductUtils.lGetSAPIdFromAddressId(lAddressId);

			if (lSapId == 0) {

				/**
				 * it is a Manual Address
				 */
				objBManualAddress = ProductUtils
						.objGetManualAddressByAddressIdFromDB(lAddressId);

				/**
				 * Retrieve the Best Guess Neighbour Node
				 */
				objBNeighbourData = objAfeNinasOut
						.objGetBestGuessNeighbourData(
								objBManualAddress.strPostcode,
								objBManualAddress.strCity,
								objBManualAddress.strStreet,
								objBManualAddress.strHouseNumber);
				strNodeName = objBNeighbourData.getNodeName();
			} else {

				/**
				 * the Address is servicable.Retrieve the Node details.
				 */
				objBsapDetailsFromCATSAP = objAfeNinasOut
						.objSearchSapDetailBySap(lSapId);
				strNodeName = objBsapDetailsFromCATSAP.getNodeId();
			}

			lOwnerId = objAfeNinasOut.iGetOwnerbyNodeName(strNodeName);
		}

		return lOwnerId;
	}

	// Begin delete v9.01b

	/*
	 * public static String strGetCategorie(String strZip, String strCountryCode,boolean bIsSocial,long lOwnerId)
	 * {
	 *   GLogger.logEntry(CLASS_NAME,"strGetCategorie");
	 *   GLogger.logInput("strGetCategorie","strZip",strZip);
	 *   GLogger.logInput("strGetCategorie","strCountryCode",strCountryCode);
	 *   GLogger.logInput("strGetCategorie","bIsSocial",bIsSocial);
	 *   String strCategorie = null;
	 *   //get the categorie value from the categorie table based on zip and country
	 *   TV_Categorie objCategorie = null;
	 *   Vector vctTemp = null;
	 *
	 *   objCategorie = (TV_Categorie)GConnectMemoryDB.getMasterTable(GMasterDataConstants.TV_CATEGORIE);
	 *   if(null != objCategorie)
	 *   {
	 *       vctTemp = objCategorie.vctSearchByZipCountryCodeObsoleteAndOwner(strZip,strCountryCode,0,lOwnerId);
	 *   }
	 *   if (null != vctTemp)
	 *   {
	 *       if(!bIsSocial)
	 *       {
	 *           strCategorie = ((TV_CategorieRow)vctTemp.elementAt(0)).strCategorieValueNormal;
	 *       }
	 *       else
	 *       {
	 *           strCategorie = ((TV_CategorieRow)vctTemp.elementAt(0)).strCategorieValueSocial;
	 *       }
	 *   }
	 *   else
	 *   {
	 *       //find the defaultcategorie and set it here
	 *       strCategorie = GAfeDescription.CATEGORIE_VLAAMSE;
	 *   }
	 *   GLogger.debug(CLASS_NAME,"strGetCategorie","strCategorie = "+strCategorie);
	 *   GLogger.logExit(CLASS_NAME,"strGetCategorie");
	 *
	 *   return strCategorie;
	 * }
	 */

	// End delete v9.01b
	/**
	 * Gets The Lines With the Activation Date Of the given Package.
	 */
	public ArrayList arrGetLineWithActivationDateOnCustomerLinkOfPackage(
			long lCustomerLinkId, long lProductId,
			boolean bProvisionedLinesOnly, long lPackageId[]) throws Exception {
		ArrayList packageProdLines = new ArrayList();
		HashMap hmActiveLine = null;
		Long lCPLID = null;

		GLogger.logEntry(CLASS_NAME,
				"arrGetLineWithActivationDateOnCustomerLinkOfPackage");
		hmActiveLine = RProduct.hmGetLineWithActivationDateOnCustomerLink(
				lCustomerLinkId, lProductId, bProvisionedLinesOnly);

		if ((null != hmActiveLine) && !hmActiveLine.isEmpty()) {
			Set stCustomerProductLineIds = hmActiveLine.keySet();
			Iterator itrActivationDate = stCustomerProductLineIds.iterator();

			while (itrActivationDate.hasNext()) {
				lCPLID = (Long) itrActivationDate.next();

				if (GAfeDescription
						.bCheckInLongList(LProduct_ext.lGetPackageOnLine(
								(lCPLID).longValue(), 0), lPackageId)) {
					packageProdLines.add(lCPLID);
				}
			}
		}

		GLogger.logExit(CLASS_NAME,
				"arrGetLineWithActivationDateOnCustomerLinkOfPackage");

		return packageProdLines;
	}

	/**
	 * Gets The Lines With the Activation Date Of the given Package.
	 */
	public ArrayList arrGetLineWithActivationDateOnCustomerLinkOfPackageFromDB(
			long lCustomerLinkId, long lProductId,
			boolean bProvisionedLinesOnly, long lPackageId[]) throws Exception {
		ArrayList packageProdLines = new ArrayList();
		HashMap hmActiveLine = null;
		Long lCPLID = null;
		CDMDao cdmDao = new CDMDao();

		GLogger.logEntry(CLASS_NAME,
				"arrGetLineWithActivationDateOnCustomerLinkOfPackageFromDB");
		hmActiveLine = RProduct.hmGetLineWithActivationDateOnCustomerLink(
				lCustomerLinkId, lProductId, bProvisionedLinesOnly);

		if ((null != hmActiveLine) && !hmActiveLine.isEmpty()) {
			Set stCustomerProductLineIds = hmActiveLine.keySet();
			Iterator itrActivationDate = stCustomerProductLineIds.iterator();

			while (itrActivationDate.hasNext()) {
				lCPLID = (Long) itrActivationDate.next();

				long lPackageProductId = cdmDao.getJdbcTemplate().queryForLong(GAfeSql.S_GETPACKAGEPRODUCTID,
						new Object[]{ (lCPLID).longValue(), 0 });

				if (GAfeDescription.bCheckInLongList(lPackageProductId, lPackageId)) {
					packageProdLines.add(lCPLID);
				}
			}
		}

		GLogger.logExit(CLASS_NAME,
				"arrGetLineWithActivationDateOnCustomerLinkOfPackageFromDB");

		return packageProdLines;
	}

	/**
	 *     Gets The Lines Of the given Package.
	 *     @return   boolean indicating The Lines Of the given Package.
	 */
	public ArrayList arrGetLinesOfPackage(ArrayList arrProdLines,
			long[] lPackageId) throws Exception {
		GLogger.logEntry(CLASS_NAME, "arrGetLinesOfPackage");

		ArrayList packageProdLines = new ArrayList();

		if (null != arrProdLines) {
			for (int iProdLineCount = 0; iProdLineCount < arrProdLines.size(); ++iProdLineCount) {

				// If the CustomerProductLine Package is of the Given Package Type then add
				// to the return list.
				if ((null != arrProdLines)
						&& GAfeDescription.bCheckInLongList(LProduct_ext
								.lGetPackageOnLine(((Long) arrProdLines
										.get(iProdLineCount)).longValue(), 0),
								lPackageId)) {
					packageProdLines.add(arrProdLines.get(iProdLineCount));
				}
			}
		}

		GLogger.logExit(CLASS_NAME, "arrGetLinesOfPackage");

		return packageProdLines;
	}
	public ArrayList arrGetLinesOfPackageDB(ArrayList arrProdLines,
			long[] lPackageId) throws Exception {
		GLogger.logEntry(CLASS_NAME, "arrGetLinesOfPackage");

		ArrayList packageProdLines = new ArrayList();

		if (null != arrProdLines) {
			for (int iProdLineCount = 0; iProdLineCount < arrProdLines.size(); ++iProdLineCount) {

				// If the CustomerProductLine Package is of the Given Package Type then add
				// to the return list.
				if ((null != arrProdLines)
						&& GAfeDescription.bCheckInLongList(ProductUtils.lGetPackageProductFromDB(((Long) arrProdLines
										.get(iProdLineCount)).longValue()),
								lPackageId)) {
					packageProdLines.add(arrProdLines.get(iProdLineCount));
				}
			}
		}

		GLogger.logExit(CLASS_NAME, "arrGetLinesOfPackage");

		return packageProdLines;
	}

	

	public long lGetPriceSettingIdByTariefAndVat(String strTarief,
			boolean bVatApplicable) {
		ParameterSetting parameterSetting = null;
		ParameterSettingRow parameterSettingRow = null;
		ParameterSettingRow parameterSettingRowVAT = null;
		long lPriceSettingId = -1;

		parameterSetting = (ParameterSetting) teleSessionMgr
				.getMasterTable(GMasterDataConstants.PARAMETERSETTING);
		GLogger.chkpt("parameterSetting:" + parameterSetting);

		Vector vctParams = null;
		Vector vctVat = null;

		vctParams = parameterSetting.vctSearchProductParameterID(
				GAfeDescription.PRODUCTPARAMETER_TARIEF, strTarief);
		GLogger.chkpt("vctParams:" + vctParams);

		if ((null != vctParams) && (0 != vctParams.size())) {
			for (int i = 0; i < vctParams.size(); i++) {
				parameterSettingRow = (ParameterSettingRow) vctParams
						.elementAt(i);

				if (bVatApplicable) {
					vctVat = parameterSetting
							.vctSearchByPriceSettingIDandObsolete(
									parameterSettingRow.lPriceSettingID, 0);
					GLogger.chkpt("vctVat:" + vctVat);

					if ((null != vctVat) && (0 != vctVat.size())) {
						parameterSettingRowVAT = (ParameterSettingRow) vctVat
								.elementAt(0);

						if (parameterSettingRowVAT.lProductParameterID == 541) {
							GLogger.chkpt("ID IS 541:");

							if ("Ja"
									.equalsIgnoreCase(parameterSettingRowVAT.strParameterSettingValue)) {
								GLogger.chkpt("Value is Ja:");
								lPriceSettingId = parameterSettingRowVAT.lPriceSettingID;
							}
						} else {
							GLogger.chkpt("param is not 541:");
							parameterSettingRowVAT = (ParameterSettingRow) vctVat
									.elementAt(1);

							if (parameterSettingRowVAT.lProductParameterID == 541) {
								GLogger
										.chkpt("I don't know what to write here:");

								if ("Ja"
										.equalsIgnoreCase(parameterSettingRowVAT.strParameterSettingValue)) {
									GLogger
											.chkpt("I don't know what to write here Value is Jaa:");
									lPriceSettingId = parameterSettingRowVAT.lPriceSettingID;
								}
							}
						}
					}
				} else {
					GLogger.chkpt("No Vat applicable");
					vctVat = parameterSetting
							.vctSearchByPriceSettingIDandObsolete(
									parameterSettingRow.lPriceSettingID, 0);
					GLogger.chkpt("vctVat:" + vctVat);

					if ((null != vctVat) && (0 != vctVat.size())) {
						parameterSettingRowVAT = (ParameterSettingRow) vctVat
								.elementAt(0);

						if (parameterSettingRowVAT.lProductParameterID == 541) {
							GLogger.chkpt("No Vat applicable 1");

							if ("Nee"
									.equalsIgnoreCase(parameterSettingRowVAT.strParameterSettingValue)) {
								GLogger.chkpt("No Vat applicable 2");
								lPriceSettingId = parameterSettingRowVAT.lPriceSettingID;
							}
						} else {
							GLogger.chkpt("No Vat applicable 3");
							parameterSettingRowVAT = (ParameterSettingRow) vctVat
									.elementAt(1);

							if (parameterSettingRowVAT.lProductParameterID == 541) {
								GLogger.chkpt("No Vat applicable 4");

								if ("Nee"
										.equalsIgnoreCase(parameterSettingRowVAT.strParameterSettingValue)) {
									GLogger.chkpt("No Vat applicable 5");
									lPriceSettingId = parameterSettingRowVAT.lPriceSettingID;
								}
							}
						}
					}
				}
			}
		}

		GLogger.chkpt("Finally Here 1" + lPriceSettingId);

		return lPriceSettingId;
	}

	// END ADD Supriya

	public int iCheckIdentifierInTheDatabase(String strNumber)
			throws AfeException { // Starting Braces of the Function
		int iStatus = 0; // Integer initialization of the status
		ResultSet rsGetAllData = null;

		// BEGIN ADD V 5.70b
		PreparedStatement psSelect = null;

		// END ADD V 5.70b
		// BEGIN ADD V4.06i

		// END ADD V4.06i
		try {

			// Object of BRelation for making the business object
			if (makeAFEConnection()) // If the Connection is made
			{
				StringBuffer sbfSql = new StringBuffer(""); // Defining a String Buffer to make the Sql querry

				sbfSql.setLength(0); // Initialising

				// BEGIN DELETE V 5.70b
				// /* Making the Querry Statement */
				// sbfSql.append("SELECT * FROM CUSTOMERPRODUCTLINEIDENTIFIER WHERE OBSOLETE = 0 AND CUSTOMERPLIDENTIFIERVALUE = '").append(strNumber).append("'");
				// /* Printing out the Querry made prior to its firing */
				// if(GAfePropertyLoader.DEBUG)
				// System.out.println("The Querry is : " + sbfSql.toString());
				// /* Firing the Querry and taking the Result as a ResultSet */
				// rsGetAllData        =       gConnectAfe.rsQuery(sbfSql.toString());
				// END DELETE V 5.70b
				// BEGIN ADD V 5.70b
				sbfSql.append(" SELECT * FROM CUSTOMERPRODUCTLINEIDENTIFIER");
				sbfSql
						.append(" WHERE OBSOLETE = 0 AND CUSTOMERPLIDENTIFIERVALUE = ?");
				psSelect = gConnectAfe.psPrepareStatement(sbfSql.toString());
				psSelect.setString(1, strNumber);
				rsGetAllData = psSelect.executeQuery();

				// END ADD V 5.70b

				if ((null != rsGetAllData) && rsGetAllData.next()) {
					if (null != rsGetAllData
							.getString("CUSTOMERPLIDENTIFIERVALUE")) {
						iStatus = FINAL_ONE;
					} else {
						iStatus = FINAL_ZERO;
					}

					// BEGIN ADD V5.10a
					// comment: closing the open resultset
					rsGetAllData.close();

					// BEGIN DELETE V 5.70b
					// rsGetAllData.getStatement().close();
					// END DELETE V 5.70b
					rsGetAllData = null;

					// END ADD V5.10a
				} else {
					iStatus = FINAL_ZERO;
				}
			}

			if (FINAL_ONE == iStatus) {

				/**
				 * **************STARTING*****************TO PRINT THE DATA
				 * if(GAfePropertyLoader.DEBUG)
				 * {
				 * System.out.println("THE ERROR IS - ERRAFE_00629 - This Number is Already In the Request State.");
				 * }
				 * /****************ENDING*******************TO PRINT THE DATA******************************************
				 */
				throw new AfeException("ERRAFE_00629");
			}
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				// BEGIN MODIFY v9.00b
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());

				// END MODIFY v9.00b
				//afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (SQLException sqle) {
			iStatus = 0;

			AfeException afe = new AfeException("ERRCOM_00001", sqle
					.getMessage());

			throw afe;
		} catch (Exception ex) {
			AfeException afe = new AfeException(string_ERRCOM_00002, ex.getMessage());

			throw afe;
		}

		// BEGIN ADD V5.10a
		// comment: adding finally block to close open connection and resultset
		finally {
			try {
				if (null != rsGetAllData) {
					rsGetAllData.close();

					// BEGIN DELETE V 5.70b
					// rsGetAllData.getStatement().close();
					// END DELETE V 5.70b
					rsGetAllData = null;
				}

				// BEGIN ADD V 5.70b
				if (null != psSelect) {
					psSelect.close();
					psSelect = null;
				}

				// END ADD V 5.70b

				closeAFEConnection(); // closing the connection
			} catch (Exception ex) {
				AfeException afe = new AfeException("ERRCOM_00001", ex
						.getMessage()); // Database error occured

				throw afe;
			}
		}

		// END ADD V5.10a

		// Returning of the Vector
		return iStatus;
	} // Closing Brace of the function

	// Begin Add v8.00a

	/**
	 *  DESCRIPTION :   This function update mobile product (reffered  to method iUpdatePLTelephone)
	 *
	 *  @param          :       BNumber bNumber
	 *
	 *  @return         :       int -   Int 1 if successfull else throws afe exception
	 */
	protected int iUpdatePLMobile(BNumber bNumber) throws AfeException {
		int iCounter = 0; // Counter for Counting

		// Begin DEL v9.01d
		// long lComplexityCode = 0;                     //      Creating Variables for Complexity Code
		// long lRoutingNo = 0;                  //      Creating Variable for Routing No.
		// End DEL v9.01d
		long lProduct_NP_ID = 0; // Creating Variable for Product NP

		// Begin DEL v9.01d
		// long lCustomerIdIn = 0;
		// long lAddressIdIn = 0;
		// char cBlank = ' ';
		// End DEL v9.01d
		String strDN = "";
		ApplSaveAction applSaveActionTable = null;
		ApplSaveActionRow applSaveActionRow = null;
		BProductParameter bProductParameter = null;
		BProductDetailProperty bProductDetailProperty = null;
		BProductDetail bProductDetail = null;

		// BEGIN ADD V5.43c
		boolean bNewNumberIsNp = false;

		// END ADD V5.43c

		try {

			// Begin DEL v9.01d

			/*
			 * BProductRole bProductRole = null;
			 *
			 * if (null != teleSessionMgr.getValue("BProductDetailRole_aCProduct")) {
			 *   bProductRole = (BProductRole) teleSessionMgr.getValue("BProductDetailRole_aCProduct");
			 *
			 * }
			 * if ((null != bProductRole) && (null != bProductRole.vctProductRole)) {
			 *   for (int iCounterIn = 0; iCounterIn < bProductRole.vctProductRole.size(); iCounterIn++) {
			 *       if ((null != ((BProductRoleDetail) (bProductRole.vctProductRole.elementAt(iCounterIn))).lRoleTypeID) && (((BProductRoleDetail) (bProductRole.vctProductRole.elementAt(iCounterIn))).lRoleTypeID.longValue() == GAfeDescription.lGetTypeId("ROLETYPE_USER"))) {
			 *           lCustomerIdIn = ((BProductRoleDetail) (bProductRole.vctProductRole.elementAt(iCounterIn))).lCustomerID.longValue();
			 *           lAddressIdIn = ((BProductRoleDetail) (bProductRole.vctProductRole.elementAt(iCounterIn))).lAddressID.longValue();
			 *           break;
			 *       }
			 *   }
			 * }
			 */

			// End DEL v9.01d
			/** ************ End Code Change ******* */
			// Gets the ApplsaveAction Container/table from session
			applSaveActionRow = new ApplSaveActionRow();
			applSaveActionRow.arrArguments = new Class[3];
			applSaveActionRow.arrParams = new Object[3];
			applSaveActionTable = (ApplSaveAction) teleSessionMgr
					.getTable(string_APPLSAVEACTION);

			if (null != applSaveActionTable) {
				if (bNumber.lCustomerProductLineID == 0) {
					if ("TN".equalsIgnoreCase(bNumber.strKindOfNumber)) {

						// Insert a record in applSave container to call IAFEOUT  reserve number method
						if (GAfePropertyLoader.DEBUG) {

							GLogger.chkpt("Inside if statement ");		// System.out.println("Reserve : New telephone number");
						}

						// Setting the variables of record to entered in Appl Save container
						applSaveActionRow.iAction = Record.INSERT;
						applSaveActionRow.strType = string_TELNO;

						// BEGIN DELETE V5.37a
						// Comment: Fixed the same number already exists in DSL problem
						// applSaveActionRow.strValue            = " ";
						// END DELETE V5.37a
						// BEGIN ADD V5.37a
						// Comment: Fixed the same number already exists in DSL problem
						applSaveActionRow.strValue = bNumber.strNumber;

						// END ADD V5.37a
						applSaveActionRow.strSystem = string_IAFEOUT;
						applSaveActionRow.strMethodName = "strReserveTelNo"; // the name of the IAFEOUT Method which needs to be called
						applSaveActionRow.arrArguments[0] = String.class;
						applSaveActionRow.arrArguments[1] = String.class;
						applSaveActionRow.arrArguments[2] = String.class;
						strDN = bNumber.strNumber;

						if ((null != bNumber.strNumber)
								&& (10 > (bNumber.strNumber.length()))) {
							for (int iCnt = 0; iCnt < (10 - bNumber.strNumber
									.length()); iCnt++) {

								// strDN = "0" + strDN;
							}
						}

						applSaveActionRow.arrParams[0] = strDN;
						applSaveActionRow.arrParams[1] = strDN;
						applSaveActionRow.arrParams[2] = bNumber.strDNModificationDate;

						// adding the Newly created row to the ApplSaveaction Container/table
						applSaveActionTable.addRecord(applSaveActionRow);
						vdUnReserveTelNumberInCancel(strDN);

						if (GAfePropertyLoader.DEBUG) {

							GLogger.chkpt("Inside if statement ");		// System.out.println("");
							// System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
							// System.out.println("");
						}

						// vLocalNewProdLine(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 1, cBlank, cBlank);
						// vLocalNewProdLineForMobile(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 1, cBlank, cBlank);
					}

					/** ***** Changed by ABhishek *** */
					else if ("NP".equalsIgnoreCase(bNumber.strKindOfNumber)) {

						GLogger.chkpt("Inside else if statement ");		//                      BEGIN ADD : V3.28
						//                      Changes done for some Integrations changes with DSL.
						// vLocalNewProdLine(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 2, 'Y', cBlank);
						// vLocalNewProdLineForMobile(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 2, 'Y', cBlank);
						//                      END ADD : V3.28
						//                      Changes done for some Integrations changes with DSL.
					}

					/** ****** end of Change ******** */
				} else {
					if ("NP".equalsIgnoreCase(bNumber.strKindOfNumber)) {
						if ("TN".equalsIgnoreCase(bNumber.strKindOfNumberOld)) {
							applSaveActionRow = new ApplSaveActionRow();
							applSaveActionRow.arrArguments = new Class[2];
							applSaveActionRow.arrParams = new Object[2];

							// Insert a record in applSave container to call IAFEOUT  reserve number method
							// TN-NP case
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement ");	
								// System.out.println("");
								// System.out.println("UnReserve old number : TN - Np case");
								// System.out.println("");
							}

							// Setting the variables of record to entered in Appl Save container
							applSaveActionRow.iAction = Record.INSERT;
							applSaveActionRow.strType = string_TELNO;
							applSaveActionRow.strValue = " ";
							applSaveActionRow.strSystem = string_IAFEOUT;
							applSaveActionRow.strMethodName = string_strUnreserveTelNo; // the name of the IAFEOUT Method which needs to be called
							applSaveActionRow.arrArguments[0] = String.class;
							applSaveActionRow.arrArguments[1] = String.class;
							strDN = bNumber.strNumberOld;

							if ((null != bNumber.strNumberOld)
									&& (10 > (bNumber.strNumberOld.length()))) {

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */
								if (GAfePropertyLoader.DEBUG) {

									GLogger.chkpt("Inside if statement ");	// System.out.println("**************************************************************************************************************");
									// System.out.println("The strNumberOld length is : " + bNumber.strNumberOld.length());
									// System.out.println("**************************************************************************************************************");
								}

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								for (int iCnt = 0; iCnt < (10 - bNumber.strNumberOld
										.length()); iCnt++) {

									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {
										GLogger.chkpt("Inside if statement ");	
										// System.out.println("********************before******************************************************************************************");
										// System.out.println("The strNumber is : " + strDN);
										// System.out.println("**************************************************************************************************************");
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */

									// strDN = "0" + strDN;
									/** **************STARTING*****************TO PRINT THE DATA****************************************** */
									if (GAfePropertyLoader.DEBUG) {

										GLogger.chkpt("Inside if statement ");	// System.out.println("*******************after*******************************************************************************************");
										// System.out.println("The strUnreserveTelNo Number is : " + strDN);
										// System.out.println("**************************************************************************************************************");
									}

									/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								}
							}

							/** **************STARTING*****************TO PRINT THE DATA****************************************** */
							if (GAfePropertyLoader.DEBUG) {
								GLogger.chkpt("Inside if statement ");	
								// System.out.println("**************************************************************************************************************");
								// System.out.println("The strUnreserveTelNo Number is : " + strDN);
								// System.out.println("**************************************************************************************************************");
							}

							/** **************ENDING*******************TO PRINT THE DATA***************************************** */
							applSaveActionRow.arrParams[0] = strDN;
							applSaveActionRow.arrParams[1] = strDN;

							// adding the Newly created row to the ApplSaveaction Container/table
							applSaveActionTable.addRecord(applSaveActionRow);

							if (GAfePropertyLoader.DEBUG) {


								GLogger.chkpt("Inside if statement ");	// System.out.println("");
								// System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
								// System.out.println("");
							}

							//                          BEGIN ADD : V3.28
							//                          Changes done for some Integrations changes with DSL.
							// vLocalNewProdLine(bNumber,applSaveActionTable, lCustomerIdIn,lAddressIdIn,3,'N',cBlank);
							// vLocalNewProdLine(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 3, 'Y', cBlank);
							// vLocalNewProdLineForMobile(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 3, 'Y', cBlank);
							//                          END ADD : V3.28
							//                          Changes done for some Integrations changes with DSL.
						}

						if ("NP".equalsIgnoreCase(bNumber.strKindOfNumberOld)
								&& !((bNumber.strNumber)
										.equalsIgnoreCase(bNumber.strNumberOld))) {

							// NP - NP Case
							lProduct_NP_ID = GAfeDescription
									.lGetTypeId("PRODUCT_NP"); // retieveing ProductID from Property Loader for PRODUCT_NP

							// BEGIN DELETE V5.43b
							// Comment : Chages for NP after review

							/*
							 * lComplexityCode     =       GAfeDescription.lGetTypeId("PRODUCTPARAMETER_COMPLEXITYCODE");                  // retieveing ProductParameterID from Property Loader for Complexity Code
							 * lDueDate                            =       GAfeDescription.lGetTypeId("PRODUCTPARAMETER_DUEDATE");                                                 // retieveing ProductParameterID from Property Loader for Due Date
							 * lRoutingNo                          =       GAfeDescription.lGetTypeId("PRODUCTPARAMETER_ROUTINGNO");                                               // retieveing ProductParameterID from Property Loader for Routing no.
							 * lDonorId                                    =       GAfeDescription.lGetTypeId("PRODUCTPARAMETER_DONORID");                                                 // retieveing ProductParameterID from Property Loader for Donor ID
							 */

							// END DELETE V 5.43b
							// BEGIN ADD V5.43c
							// comment:- Check if the product paramters need to be updated or not.If yes then only
							// update it
							if (bCanUpdateParameters(bNumber.strCurrentOwner,
									bNumber.strCurrentOwnerOld)) {

								// END ADD V5.43c
								if (null != teleSessionMgr
										.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT)) {

									// Vector for storing all the Data that is populated in the tablular form
									bProductDetailProperty = (BProductDetailProperty) teleSessionMgr
											.getValue(BPRODUCTDETAILPROPERTY_ACPRODUCT);

									for (iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected
											.size(); iCounter++) {
										//bProductDetail = new BProductDetail();
										bProductDetail = (BProductDetail) bProductDetailProperty.vctProductSelected
												.elementAt(iCounter);

										if (lProduct_NP_ID == bProductDetail.lProductID
												.longValue()) {
											for (int iCounter1 = FINAL_ZERO; iCounter1 < bProductDetail.vctParameters
													.size(); iCounter1++) {
												//bProductParameter = new BProductParameter();
												bProductParameter = (BProductParameter) ((Vector) bProductDetail.vctParameters)
														.elementAt(iCounter1);

												// For Complexity Code
												// BEGIN DELETE V5.43b
												// Comment : Chages for NP after review

												/*
												 * if(lComplexityCode == bProductParameter.lParameterID.longValue())
												 * {
												 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strType, FINAL_ZERO);
												 *
												 *   if(GAfePropertyLoader.DEBUG)
												 *   {
												 *       System.out.println("");
												 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
												 *       System.out.println("");
												 *   }
												 * }
												 * //      For Routing No.
												 * else if(lRoutingNo == bProductParameter.lParameterID.longValue())
												 * {
												 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strRoutingNo,FINAL_ZERO);
												 *
												 *   if(GAfePropertyLoader.DEBUG)
												 *   {
												 *       System.out.println("");
												 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
												 *       System.out.println("");
												 *   }
												 * }
												 * //      for DonorID
												 * else if(lDonorId == bProductParameter.lParameterID.longValue())
												 * {
												 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(bNumber.strDonor, FINAL_ZERO);
												 *
												 *   if(GAfePropertyLoader.DEBUG)
												 *   {
												 *       System.out.println("");
												 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
												 *       System.out.println("");
												 *   }
												 * }
												 * //      for Due Date
												 * else if(lDueDate == bProductParameter.lParameterID.longValue())
												 * {
												 *   SimpleDateFormat sdf = new SimpleDateFormat ("dd-MM-yyyy"); //Making the Object of the Date Formatter Class
												 *
												 *   ((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).setElementAt(sdf.format(bNumber.dtDueDate), FINAL_ZERO);
												 *
												 *   if(GAfePropertyLoader.DEBUG)
												 *   {
												 *       System.out.println("\n");
												 *       System.out.println("**********************************************************************************************************************");
												 *       System.out.println("After Setting the Value : " +((Vector)bProductParameter.vctParameterValues.elementAt(FINAL_ZERO)).elementAt(FINAL_ZERO));
												 *       System.out.println("**********************************************************************************************************************");
												 *   }
												 * }
												 */

												// END DELETE V 5.43b
												// BEGIN ADD V5.43b
												// Comment : Chages for NP after review
												bProductParameter.iEditable = FINAL_ZERO;

												if (GAfeDescription.PRODUCTPARAMETER_COMPLEXTYCODE == bProductParameter.lParameterID
														.intValue()) {
													((Vector) bProductParameter.vctParameterValues
															.elementAt(FINAL_ZERO))
															.setElementAt(
																	bNumber.strType,
																	FINAL_ZERO);
												} else if (GAfeDescription.PRODUCTPARAMETER_ROUTINGNUMBER == bProductParameter.lParameterID
														.intValue()) {
													((Vector) bProductParameter.vctParameterValues
															.elementAt(FINAL_ZERO))
															.setElementAt(
																	bNumber.strRoutingNo,
																	FINAL_ZERO);
												} else if (GAfeDescription.PRODUCTPARAMETER_GROUPINGNUMBER == bProductParameter.lParameterID
														.intValue()) {
													((Vector) bProductParameter.vctParameterValues
															.elementAt(FINAL_ZERO))
															.setElementAt(
																	bNumber.strGroupingNumber,
																	FINAL_ZERO);
												} else if (GAfeDescription.PRODUCTPARAMETER_PORTINGID == bProductParameter.lParameterID
														.intValue()) {
													((Vector) bProductParameter.vctParameterValues
															.elementAt(FINAL_ZERO))
															.setElementAt(
																	bNumber.strPortingId,
																	FINAL_ZERO);
												}

												// END ADD V 5.43b
											}
										}
									}

									teleSessionMgr.putValue(
											BPRODUCTDETAILPROPERTY_ACPRODUCT,
											bProductDetailProperty); // Putting Values into Session

									//                                  BEGIN ADD : V3.28
									//                                  Changes done for some Integrations changes with DSL.

									// vLocalNewProdLine(bNumber,applSaveActionTable, lCustomerIdIn,lAddressIdIn,4,'N','N');
									// BEGIN DELETE V 5.49a
									// Comment:Rel2.1:Changes for incident 391
									// vLocalNewProdLine(bNumber,applSaveActionTable, lCustomerIdIn,lAddressIdIn,
									// 4,'Y','Y');
									// END DELETE V 5.49a
									// END ADD : V3.28
									// Changes done for some Integrations changes with DSL.
								}
							} // if the updation of the product parameter needs to be done
							else if (bCanDeleteProduct(bNumber.strCurrentOwner,
									bNumber.strCurrentOwnerOld, bNewNumberIsNp)) { // if the NP product can be deleted.

								// Delete Product
								vDeleteProduct(teleSessionMgr);
							}

							// END ADD V5.43c
							// BEGIN ADD V 5.49a
							// Comment:Rel2.1:Changes for incident 391
							// vLocalNewProdLine(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn,4, 'Y', 'Y');
							// vLocalNewProdLineForMobile(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn,4, 'Y', 'Y');
							// END ADD V 5.49a
						}
					}

					if ("TN".equalsIgnoreCase(bNumber.strKindOfNumber)) {
						if ("TN".equalsIgnoreCase(bNumber.strKindOfNumberOld)) {

							// TN-TN Case
							if (GAfePropertyLoader.DEBUG) {

								// BEGIN MODIFY v9.00b
								GLogger
										.chkpt("UnReserve old number/reserve new number : TN/TN case");
							} // END MODIFY v9.00b

							if (!(bNumber.strNumber)
									.equalsIgnoreCase(bNumber.strNumberOld)) {
								applSaveActionRow = new ApplSaveActionRow();
								applSaveActionRow.arrArguments = new Class[2];
								applSaveActionRow.arrParams = new Object[2];

								// Unreserving the Old Number
								applSaveActionRow.iAction = Record.INSERT;
								applSaveActionRow.strType = string_TELNO;
								applSaveActionRow.strValue = " ";
								applSaveActionRow.strSystem = string_IAFEOUT;
								applSaveActionRow.strMethodName = string_strUnreserveTelNo; // the name of the IAFEOUT Method which needs to be called
								applSaveActionRow.arrArguments[0] = String.class;
								applSaveActionRow.arrArguments[1] = String.class;
								strDN = bNumber.strNumberOld;

								if ((null != bNumber.strNumberOld)
										&& (10 > (bNumber.strNumberOld.length()))) {
									for (int iCnt = 0; iCnt < (10 - bNumber.strNumberOld
											.length()); iCnt++) {

										// strDN = "0" + strDN;
									}
								}

								/** **************STARTING*****************TO PRINT THE DATA****************************************** */

								/*
								 * if (GAfePropertyLoader.DEBUG) {
								 *   System.out.println("**************************************************************************************************************");
								 *   System.out.println("The strUnreserveTelNo Number is : " + strDN);
								 *   System.out.println("**************************************************************************************************************");
								 * }
								 */

								/** **************ENDING*******************TO PRINT THE DATA***************************************** */
								applSaveActionRow.arrParams[0] = strDN;
								applSaveActionRow.arrParams[1] = strDN;

								// adding the Newly created row to the ApplSaveaction Container/table
								applSaveActionTable
										.addRecord(applSaveActionRow);

								if (GAfePropertyLoader.DEBUG) {

									GLogger.chkpt("Inside if statement ");		// System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
								}

								// BEGIN ADD V5.37a
								// Comment: Fixed the same number already exists in DSL problem
								applSaveActionRow = null;
								strDN = bNumber.strNumber;

								if ((null != bNumber.strNumber)
										&& (10 > (bNumber.strNumber.length()))) {
									for (int iCnt = 0; iCnt < (10 - bNumber.strNumber
											.length()); iCnt++) {

										// strDN = "0" + strDN;
									}
								}

								applSaveActionRow = applSaveActionTable
										.asarSearchByActionTypeValueMethod(1,
												string_TELNO, bNumber.strNumberOld,
												"strReserveTelNo");

								if (null == applSaveActionRow) {

									// END ADD V5.37a
									applSaveActionRow = new ApplSaveActionRow();
									applSaveActionRow.arrArguments = new Class[3];
									applSaveActionRow.arrParams = new Object[3];

									// Reserving the New Number
									applSaveActionRow.iAction = Record.INSERT;
									applSaveActionRow.strType = string_TELNO;

									// BEGIN DELETE V5.37a
									// Comment: Fixed the same number already exists in DSL problem
									// applSaveActionRow.strValue                = " ";
									// END DELETE V5.37a
									// BEGIN ADD V5.37a
									// Comment: Fixed the same number already exists in DSL problem
									applSaveActionRow.strValue = bNumber.strNumber;

									// END ADD V5.37a
									applSaveActionRow.strSystem = string_IAFEOUT;
									applSaveActionRow.strMethodName = "strReserveTelNo"; // the name of the IAFEOUT Method which needs to be called
									applSaveActionRow.arrArguments[0] = String.class;
									applSaveActionRow.arrArguments[1] = String.class;
									applSaveActionRow.arrArguments[2] = String.class;

									// BEGIN DELETE V5.37a
									// Comment: Fixed the same number already exists in DSL problem

									/*
									 * strDN       =       bNumber.strNumber;
									 *
									 * if ((null != bNumber.strNumber) && (10 > (bNumber.strNumber.length())))
									 * {
									 *   for (int iCnt=0;iCnt<(10-bNumber.strNumber.length());iCnt++)
									 *   {
									 *           strDN = "0" + strDN;
									 *   }
									 * }
									 */

									// END DELETE V5.37a
									applSaveActionRow.arrParams[0] = strDN;
									applSaveActionRow.arrParams[1] = strDN;
									applSaveActionRow.arrParams[2] = bNumber.strDNModificationDate;

									// adding the Newly created row to the ApplSaveaction Container/table
									applSaveActionTable
											.addRecord(applSaveActionRow);

									// BEGIN ADD V5.37a
									// Comment: Fixed the same number already exists in DSL problem
								} else {
									applSaveActionRow.arrParams[0] = strDN;
									applSaveActionRow.arrParams[1] = strDN;
									applSaveActionRow.arrParams[2] = bNumber.strDNModificationDate;
									applSaveActionTable
											.updateRecord(applSaveActionRow);
								}

								// END ADD V5.37a
								vdUnReserveTelNumberInCancel(strDN);

								if (GAfePropertyLoader.DEBUG) {

									GLogger.chkpt("Inside if statement ");	// System.out.println("Record added in session. the no of records in applSaveActionTable is " + (applSaveActionTable.vctGetAll()).size());
								}

								// vLocalNewProdLine(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 5, cBlank, cBlank);
								// vLocalNewProdLineForMobile(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 5, cBlank, cBlank);
							}
						}

						if ("NP".equalsIgnoreCase(bNumber.strKindOfNumberOld)) {
							if (GAfePropertyLoader.DEBUG) {

								// BEGIN MODIFY v9.00b
								GLogger.chkpt("Reserve new number: NP/TN case");
							} // END MODIFY v9.00b

							// NP-TN Case
							// Reserving the Old Number

							applSaveActionRow = new ApplSaveActionRow();
							applSaveActionRow.arrArguments = new Class[3];
							applSaveActionRow.arrParams = new Object[3];
							applSaveActionRow.iAction = Record.INSERT;
							applSaveActionRow.strType = string_TELNO;

							// BEGIN DELETE V5.37a
							// Comment: Fixed the same number already exists in DSL problem
							// applSaveActionRow.strValue                = " ";
							// END DELETE V5.37a
							// BEGIN ADD V5.37a
							// Comment: Fixed the same number already exists in DSL problem
							applSaveActionRow.strValue = bNumber.strNumber;

							// END ADD V5.37a
							applSaveActionRow.strSystem = string_IAFEOUT;
							applSaveActionRow.strMethodName = "strReserveTelNo"; // the name of the IAFEOUT Method which needs to be called
							applSaveActionRow.arrArguments[0] = String.class;
							applSaveActionRow.arrArguments[1] = String.class;
							applSaveActionRow.arrArguments[2] = String.class;
							strDN = bNumber.strNumber;

							if ((null != bNumber.strNumber)
									&& (10 > (bNumber.strNumber.length()))) {
								for (int iCnt = 0; iCnt < (10 - bNumber.strNumber
										.length()); iCnt++) {
									strDN = string_ZERO + strDN;
								}
							}

							applSaveActionRow.arrParams[0] = strDN;
							applSaveActionRow.arrParams[1] = strDN;
							applSaveActionRow.arrParams[2] = bNumber.strDNModificationDate;

							// adding the Newly created row to the ApplSaveaction Container/table
							applSaveActionTable.addRecord(applSaveActionRow);
							vdUnReserveTelNumberInCancel(strDN);

							if (GAfePropertyLoader.DEBUG) {

								// BEGIN MODIFY v9.00b
								GLogger.chkpt("");
								GLogger
										.chkpt("Record added in session. the no of records in applSaveActionTable is "
												+ (applSaveActionTable
														.vctGetAll()).size());
								GLogger.chkpt("");
							} // END MODIFY v9.00b

							//                          BEGIN ADD : V3.28
							//                          Changes done for some Integrations changes with DSL.
							// vLocalNewProdLine(bNumber,applSaveActionTable,lCustomerIdIn,lAddressIdIn, 6,cBlank,'N');
							// vLocalNewProdLine(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 6, cBlank, 'Y');
							// vLocalNewProdLineForMobile(bNumber, applSaveActionTable, lCustomerIdIn, lAddressIdIn, 6, cBlank, 'Y');
							//                          BEGIN ADD : V3.28
							//                          Changes done for some Integrations changes with DSL.
							// BEGIN DELETE V5.43c
							// comment: Recoding as per new architecture. Also Deletion should occur after
							// checking whether deletion should occur

							/*
							 * //  Removing NP Special Product
							 *
							 * lProduct_NP_ID              =       GAfeDescription.lGetTypeId("PRODUCT_NP");                                                                                                                       // retieveing ProductID from Property Loader for PRODUCT_NP
							 *
							 * if (null != teleSessionMgr.getValue("BProductDetailProperty_aCProduct"))
							 * {
							 *   //Vector for storing all the Data that is populated in the tablular form
							 *   bProductDetailProperty = (BProductDetailProperty)teleSessionMgr.getValue("BProductDetailProperty_aCProduct");
							 *
							 *   for(iCounter = FINAL_ZERO; iCounter < bProductDetailProperty.vctProductSelected.size() ; iCounter++ )
							 *   {
							 *       bProductDetail = new BProductDetail();
							 *       bProductDetail      =       (BProductDetail)bProductDetailProperty.vctProductSelected.elementAt(iCounter);
							 *
							 *       if(lProduct_NP_ID == bProductDetail.lProductID.longValue())
							 *       {
							 *           bProductDetailProperty.vctProductSelected.removeElementAt(iCounter);
							 *       }
							 *   }
							 *
							 *    teleSessionMgr.putValue("BProductDetailProperty_aCProduct",bProductDetailProperty);
							 * }
							 */

							// BEGIN DELETE V5.43c
							// BEGIN ADD V5.43c
							// Removing NP Special Product
							if (bCanDeleteProduct(bNumber.strCurrentOwner,
									bNumber.strCurrentOwnerOld, bNewNumberIsNp)) {

								// Delete Product
								vDeleteProduct(teleSessionMgr);
							}

							// END ADD V5.43c
						}
					}

					// BEGIN ADD V8.00b
					if ((null != bNumber.strNumber)
							&& (null != bNumber.strNumberOld)) {
						HashMap hmMobileChangeMapping = null;

						if (null != teleSessionMgr
								.getValue(GAfeConstants.KEY_MOBILECHANGE_MAPPING)) {
							hmMobileChangeMapping = (HashMap) teleSessionMgr
									.getValue(GAfeConstants.KEY_MOBILECHANGE_MAPPING);
							GLogger.chkpt("hmMobileChangeMapping LP bef"
									+ hmMobileChangeMapping);

							if (null != hmMobileChangeMapping) {
								String strOldMobileNr = null;
								String strNewMobileNr = null;
								Set stMCMKeys = hmMobileChangeMapping.keySet();
								Iterator iterMCM = stMCMKeys.iterator();

								while (iterMCM.hasNext()) {
									strOldMobileNr = (String) iterMCM.next();
									GLogger.chkpt("strOldMobileNr"
											+ strOldMobileNr);

									if (null != hmMobileChangeMapping
											.get(strOldMobileNr)) {
										strNewMobileNr = (String) hmMobileChangeMapping
												.get(strOldMobileNr);
										GLogger.chkpt("strNewMobileNr"
												+ strNewMobileNr);

										if (strNewMobileNr
												.equalsIgnoreCase(bNumber.strNumberOld)) {
											GLogger.chkpt("exist"
													+ bNumber.strNumberOld
													+ ":" + bNumber.strNumber);
											hmMobileChangeMapping.put(
													strOldMobileNr,
													bNumber.strNumber);
										} else {
											GLogger.chkpt("new"
													+ bNumber.strNumberOld
													+ ":" + bNumber.strNumber);
											hmMobileChangeMapping.put(
													bNumber.strNumberOld,
													bNumber.strNumber);
										}
									} else {
										hmMobileChangeMapping.put(
												bNumber.strNumberOld,
												bNumber.strNumber);
									}
								}
							}

							GLogger.chkpt("hmMobileChangeMapping LP bef"
									+ hmMobileChangeMapping);
						} else {
							hmMobileChangeMapping = new HashMap();
							hmMobileChangeMapping.put(bNumber.strNumberOld,
									bNumber.strNumber);
							GLogger.chkpt("hmMobileChangeMapping LP first"
									+ hmMobileChangeMapping);
						}

						teleSessionMgr.putValue(
								GAfeConstants.KEY_MOBILECHANGE_MAPPING,
								hmMobileChangeMapping);
					}

					// END ADD V8.00b
				}

				teleSessionMgr.putTable(string_APPLSAVEACTION, applSaveActionTable);
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return (1);
	}

	// End Add v8.00a
	// Begin Add v8.00a

	/**
	 *  DESCRIPTION :   This function update Dsl data for mobile product (reffered  to method vLocalNewProdLine)
	 *
	 *  @param          :       BNumber bNumber, ApplSaveAction applSaveActionTable, long lCustomerID,
	 *                 long lAddressID, int iCase, char cPortingFlag, char cPortingFlagOld
	 *
	 *
	 */
	public void vLocalNewProdLineForMobile(BNumber bNumber,
			ApplSaveAction applSaveActionTable, long lCustomerID,
			long lAddressID, int iCase, char cPortingFlag, char cPortingFlagOld)
			throws Exception {
		ApplSaveActionRow applSaveActionRow = null;
		LCustomer lCustomer = new LCustomer(teleSessionMgr);
		BCustomerInfo bCustomerInfo = null;

		// Begin DEL v9.01d
		// String strVATNo = null;
		// End DEL v9.01d
		String strCountryCode = "";
		Country countryTableTemp = null;
		CountryRow countryRow = null;

		countryTableTemp = (Country) teleSessionMgr.getMasterTable("COUNTRY");

		SimpleDateFormat sdf = new SimpleDateFormat(string_dateFormat1);

		// Begin DEL v9.01d
		// boolean bResult = false;
		// End DEL v9.01d

		try {

			// LCustomermethod to get customer info for particular customer
			bCustomerInfo = (BCustomerInfo) lCustomer
					.objSelectCustomerInfo(lCustomerID);

			if (null == bCustomerInfo) {
				return;
			}

			if (null != countryTableTemp) {
				countryRow = countryTableTemp
						.astrSearchByCountryID(bCustomerInfo.lCountryId);
			}

			if (null != countryRow) {
				strCountryCode = countryRow.strCountryCode;
			}

			/**
			 * INSERT THE DSL METHODs (blnDeletePhoneLine and blnNewPhoneLine) ENTRY IN APPLSAVE CONTAINER
			 */
			if (GAfePropertyLoader.DEBUG) {
				if (iCase == 1) {

					// BEGIN MODIFY v9.00b
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% TN %- CASE   ******************");
				} else if (iCase == 2) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% NP %- CASE   ******************");
				} else if (iCase == 3) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% TN - NP %- CASE   ******************");
				} else if (iCase == 4) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% NP - NP %- CASE   ******************");
				} else if (iCase == 5) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% TN - TN %- CASE   ******************");
				} else if (iCase == 6) {
					GLogger
							.chkpt(" **************  MAKING AN ENTRY IN THE DSL  ( -% NP - TN %- CASE   ******************");
				}
			} // END MODIFY v9.00b

			//          BEGIN ADD V5.43c
			//          COMMENT: new function being added to modify the porting flag before sending it to DSL.
			cPortingFlag = cUpdatePortingFlag_ForDsl(bNumber, cPortingFlag);

			//          END ADD V5.43c
			if ((1 != iCase) && (2 != iCase)) {
				if (GAfePropertyLoader.DEBUG) {

					// BEGIN MODIFY v9.00b
					GLogger
							.chkpt("     **************  ADDING  blnDeletePhoneLine() FOR OLD NUMBER    ******************");
					GLogger
							.chkpt("     **************  Country Code is   ******************"
									+ strCountryCode);
				} // END MODIFY v9.00b

				applSaveActionRow = new ApplSaveActionRow();
				applSaveActionRow.arrArguments = new Class[3];
				applSaveActionRow.arrParams = new Object[3];

				// Setting the variables of record to entered in Appl Save container
				applSaveActionRow.iAction = Record.INSERT;
				applSaveActionRow.strType = string_TELNO;
				applSaveActionRow.strValue = " ";
				applSaveActionRow.strSystem = string_IAFEOUT;
				applSaveActionRow.strMethodName = string_blnDeletePhoneLine; // the name of the IAFEOUT Method which needs to be called
				applSaveActionRow.arrArguments[0] = String.class;
				applSaveActionRow.arrArguments[1] = Character.class;
				applSaveActionRow.arrArguments[2] = String.class;
				applSaveActionRow.arrParams[0] = bNumber.strNumberOld;
				applSaveActionRow.arrParams[1] = Character.valueOf(cPortingFlagOld);
				applSaveActionRow.arrParams[2] = bSession.strUserName;

				// adding the Newly created row to the ApplSaveaction Container/table
				applSaveActionTable.addRecord(applSaveActionRow);

				if (GAfePropertyLoader.DEBUG) {

					// BEGIN MODIFY v9.00b
					GLogger.chkpt("");
					GLogger
							.chkpt("     FUNCTION ADDED IN SESSION.  --> blnDeletePhoneLine()");
					GLogger
							.chkpt("     THE NO OF RECORDS IN APPLSAVEACTIONTABLE IS "
									+ (applSaveActionTable.vctGetAll()).size());
					GLogger.chkpt("");
				} // END MODIFY v9.00b
			}

			if (GAfePropertyLoader.DEBUG) {

				// BEGIN MODIFY v9.00b
				GLogger
						.chkpt(" **************  ADDING  blnNewPhoneLine() FOR NEW NUMBER    ******************");
			} // END MODIFY v9.00b

			// BEGIN ADD V5.37a
			// Comment: Fixed the same number already exists in DSL problem
			applSaveActionRow = null;
			applSaveActionRow = applSaveActionTable
					.asarSearchByActionTypeValueMethod(1, string_TELNO,
							bNumber.strNumberOld, "blnNewPhoneLine");

			if (null == applSaveActionRow) {

				// END ADD V5.37a
				applSaveActionRow = new ApplSaveActionRow();
				applSaveActionRow.arrArguments = new Class[18];
				applSaveActionRow.arrParams = new Object[18];

				// Setting the variables of record to entered in Appl Save container
				applSaveActionRow.iAction = Record.INSERT;
				applSaveActionRow.strType = string_TELNO;

				// Comment: Fixed the same number already exists in DSL problem
				applSaveActionRow.strValue = bNumber.strNumber;

				// END ADD V5.37a
				applSaveActionRow.strSystem = string_IAFEOUT;
				applSaveActionRow.strMethodName = "blnNewPhoneLine"; // the name of the IAFEOUT Method which needs to be called
				applSaveActionRow.arrArguments[0] = String.class;
				applSaveActionRow.arrArguments[1] = String.class;
				applSaveActionRow.arrArguments[2] = Character.class;
				applSaveActionRow.arrArguments[3] = String.class;
				applSaveActionRow.arrArguments[4] = String.class;
				applSaveActionRow.arrArguments[5] = String.class;
				applSaveActionRow.arrArguments[6] = String.class;
				applSaveActionRow.arrArguments[7] = Long.class;
				applSaveActionRow.arrArguments[8] = Long.class;
				applSaveActionRow.arrArguments[9] = String.class;
				applSaveActionRow.arrArguments[10] = String.class;
				applSaveActionRow.arrArguments[11] = String.class;
				applSaveActionRow.arrArguments[12] = String.class;
				applSaveActionRow.arrArguments[13] = Long.class;
				applSaveActionRow.arrArguments[14] = Long.class;
				applSaveActionRow.arrArguments[15] = Long.class;
				applSaveActionRow.arrArguments[16] = String.class;
				applSaveActionRow.arrArguments[17] = Long.class;
				applSaveActionRow.arrParams[0] = bSession.strUserName;
				applSaveActionRow.arrParams[1] = bNumber.strNumber;
				applSaveActionRow.arrParams[2] = Character.valueOf(cPortingFlag);

				// Comment: Sending Current owner id to dsl in all case
				GLogger.debug("vLocalNewProdLine", "bNumber.strCurrentOwner",
						bNumber.strCurrentOwner);
				applSaveActionRow.arrParams[3] = bNumber.strCurrentOwner;

				// END ADD V 5.49b

				// Changes done for some Integrations changes with DSL.
				applSaveActionRow.arrParams[4] = strCountryCode;
				applSaveActionRow.arrParams[5] = "STAND"; // todo get confimation about "STAND" in mobile case
				applSaveActionRow.arrParams[6] = "MOB"; // todo add new entry in table  dsl_device_type for MOB = 5
				applSaveActionRow.arrParams[7] = Long.valueOf(lAddressID);
				applSaveActionRow.arrParams[8] = Long.valueOf(lCustomerID);

				if ((null == bCustomerInfo.strFirstName)
						|| ("".equals(bCustomerInfo.strFirstName))) {
					bCustomerInfo.strFirstName = " ";
				} // end of the if loop

				applSaveActionRow.arrParams[9] = bCustomerInfo.strFirstName;
				applSaveActionRow.arrParams[10] = bCustomerInfo.strName;

				if (null != bCustomerInfo.dtBirthDate) {
					applSaveActionRow.arrParams[11] = sdf
							.format(bCustomerInfo.dtBirthDate);
				} else {
					applSaveActionRow.arrParams[11] = null;
				}

				applSaveActionRow.arrParams[12] = bCustomerInfo.strVatNumber;
				applSaveActionRow.arrParams[13] = Long.valueOf(
						bCustomerInfo.lEpithetId);
				applSaveActionRow.arrParams[14] = Long.valueOf(
						bCustomerInfo.lSegmentId);
				applSaveActionRow.arrParams[15] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);
				applSaveActionRow.arrParams[16] = "Niet Vermeld";
				applSaveActionRow.arrParams[17] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);

				// For Saving this at Last
				// applSaveActionRow.bPerformLast        = true;
				// adding the Newly created row to the ApplSaveaction Container/table
				applSaveActionTable.addRecord(applSaveActionRow);

				// BEGIN ADD V5.37a
				// Comment: Fixed the same number already exists in DSL problem
			} else {
				applSaveActionRow.arrParams[0] = bSession.strUserName;
				applSaveActionRow.arrParams[1] = bNumber.strNumber;
				applSaveActionRow.arrParams[2] = Character.valueOf(cPortingFlag);

				// BEGIN ADD V 5.46a
				if ((GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber))
						&& (null != bNumber.strOriginalOwner)
						&& (!(GAfeConstants.TELE
								.equalsIgnoreCase(bNumber.strOriginalOwner))))

				// END ADD V 5.46a
				{
					applSaveActionRow.arrParams[3] = bNumber.strCurrentOwner;

					// END ADD V 5.43a
				} else {
					applSaveActionRow.arrParams[3] = "";
				}

				applSaveActionRow.arrParams[4] = strCountryCode;
				applSaveActionRow.arrParams[5] = "STAND";
				applSaveActionRow.arrParams[6] = "MOB";
				applSaveActionRow.arrParams[7] = Long.valueOf(lAddressID);
				applSaveActionRow.arrParams[8] = Long.valueOf(lCustomerID);

				if ((null == bCustomerInfo.strFirstName)
						|| ("".equals(bCustomerInfo.strFirstName))) {
					bCustomerInfo.strFirstName = " ";
				}

				applSaveActionRow.arrParams[9] = bCustomerInfo.strFirstName;
				applSaveActionRow.arrParams[10] = bCustomerInfo.strName;

				if (null != bCustomerInfo.dtBirthDate) {
					applSaveActionRow.arrParams[11] = sdf
							.format(bCustomerInfo.dtBirthDate);
				} else {
					applSaveActionRow.arrParams[11] = null;
				}

				applSaveActionRow.arrParams[12] = bCustomerInfo.strVatNumber;
				applSaveActionRow.arrParams[13] = Long.valueOf(
						bCustomerInfo.lEpithetId);
				applSaveActionRow.arrParams[14] = Long.valueOf(
						bCustomerInfo.lSegmentId);
				applSaveActionRow.arrParams[15] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);
				applSaveActionRow.arrParams[16] = "Niet Vermeld";
				applSaveActionRow.arrParams[17] = Long.valueOf(
						bCustomerInfo.lCustomerLanguageId);
				applSaveActionTable.updateRecord(applSaveActionRow);
			}

			// END ADD V5.37a

			if (GAfePropertyLoader.DEBUG) {

				// BEGIN MODIFY v9.00b
				GLogger.chkpt("");
				GLogger
						.chkpt(" FUNCTION ADDED IN SESSION.  --> blnNewPhoneLine()");
				GLogger.chkpt(" THE NO OF RECORDS IN APPLSAVEACTIONTABLE IS "
						+ (applSaveActionTable.vctGetAll()).size());
				GLogger.chkpt("");
			} // END MODIFY v9.00b
		} catch (AfeException afee) // catch block starts to catch exceptions
		{
			if (GAfePropertyLoader.DEBUG) {

				// BEGIN MODIFY v9.00b
				GLogger.chkpt(afee.strGetErrCode() + " ----------   "
						+ afee.strGetErrMsg());

				// END MODIFY v9.00b
			//	afee.printStackTrace(System.out);
				GLogger.logException(afee);
			}

			throw afee;
		} catch (Exception ex) {
			throw ex;
		}
	}

	// Begin Add V8.01b

	/**
	 * This method returns the ESalesOrderNum and objectTypeId by setting this in BproductdetailProperty
	 * @param bProductDetailProperty
	 * @return
	 * @throws SQLException
	 * @throws Exception
	 */
	public BProductDetailProperty objGetOrderRefNumFromCPLID(
			BProductDetailProperty bProductDetailProperty) throws SQLException,
			Exception {
		GLogger.logEntry(CLASS_NAME, "objGetOrderRefNumFromCPLID");

		long lCPLId = 0;

		// Begin DEL v9.01d
		// long lProcessLinkId =0;
		// End DEL v9.01d
		long lProcessId = 0;
		long lObjectTypeId = 0;
		long lOrderId = 0;
		String strObjectID = null;
		ProcessLinkRow processLinkRow = null;
		ProcessRow processRow = null;

		processLinkTable = (ProcessLink) GConnectMemoryDB
				.getTable(string_PROCESSLINK); // Getting the ProcessLink table from the session

		Vector vctSearchByTypeIdObjIdAndObsolete = null;
		Vector vctSearchByProcessLinkIdAndObsolete = null;
		Vector vctSearchByProcessIdTypeIdAndObsolete = null;
		Order2OrderRef_tbRow order2OrderRef_tbRow = null;
		OrderRow orderRow = null;
		Vector vctSearchByOrderId = null;

		lCPLId = (bProductDetailProperty.lCustomerProductLineID).longValue();
		vctSearchByTypeIdObjIdAndObsolete = processLinkTable
				.vctSearchByObjectIDandObjectTypeIDandObsolete(lCPLId, 5, 0);

		if (null != vctSearchByTypeIdObjIdAndObsolete) {
			processTable = (Process) GConnectMemoryDB.getTable(string_PROCESS);

			for (int iProcesses = 0; iProcesses < vctSearchByTypeIdObjIdAndObsolete
					.size(); iProcesses++) {
				processLinkRow = (ProcessLinkRow) vctSearchByTypeIdObjIdAndObsolete
						.get(iProcesses);
				lProcessId = processLinkRow.lProcessID;
				GLogger.debug(CLASS_NAME, "lProcessId", lProcessId);
				vctSearchByProcessLinkIdAndObsolete = processTable
						.vctSearchByProcessIDandObsolete(lProcessId, 0);

				if (null != vctSearchByProcessLinkIdAndObsolete) {
					orderTable = (Order) GConnectMemoryDB.getTable(string_ORDER); // Getting the ORDER table from the session

					for (int iOrders = 0; iOrders < vctSearchByProcessLinkIdAndObsolete
							.size(); iOrders++) {
						processRow = (ProcessRow) vctSearchByProcessLinkIdAndObsolete
								.get(iOrders);
						lOrderId = processRow.lOrderID;
						GLogger.debug(CLASS_NAME, "lOrderId", lOrderId);
						vctSearchByProcessIdTypeIdAndObsolete = orderTable
								.vctSearchByOrderIDandOrderTypeIdandObsolete(
										lOrderId,
										GAfeDescription.ORDERTYPE_INSTALL, 0);

						if (vctSearchByProcessIdTypeIdAndObsolete != null) {
							orderRefTable = (Order2OrderRef_tb) GConnectMemoryDB
									.getTable("ORDER2ORDERREF_TB"); // Getting the ORDER2ORDERREF_TB table from the session

							for (int iCount = 0; iCount < vctSearchByProcessIdTypeIdAndObsolete
									.size(); iCount++) {
								orderRow = (OrderRow) vctSearchByProcessIdTypeIdAndObsolete
										.get(iCount);
								lOrderId = orderRow.lOrderID;
								GLogger.debug(CLASS_NAME, "lOrderId", lOrderId);
								vctSearchByOrderId = orderRefTable
										.vctSearchByOrderId(lOrderId);

								if (vctSearchByOrderId != null) {
									for (int iReturn = 0; iReturn < vctSearchByOrderId
											.size(); iReturn++) {
										order2OrderRef_tbRow = (Order2OrderRef_tbRow) vctSearchByOrderId
												.get(iReturn);
										lObjectTypeId = order2OrderRef_tbRow.lObjectTypeID;
										strObjectID = order2OrderRef_tbRow.strObjectID;
										GLogger.debug(CLASS_NAME,
												"lObjectTypeId", lObjectTypeId);
										bProductDetailProperty
												.setStrESalesOrderNum(strObjectID);
										bProductDetailProperty.lCbRefId = lObjectTypeId;
									}
								}
							}
						}
					}
				}
			}
		} else {
			PreparedStatement psOrder2OrderRef = null;
			ResultSet rsOrder2OrderRef = null;

			try {
				psOrder2OrderRef = GConnectAfe
						.psPrepareStatement(GAfeSql.S_ORDER2ORDERREF_TB_CPLID);
				psOrder2OrderRef.setInt(1,
						GAfeConstants.OBJECTTYPEID_CUSTOMERPRODUCTLINE);
				psOrder2OrderRef.setLong(2,
						(bProductDetailProperty.lCustomerProductLineID)
								.longValue());
				psOrder2OrderRef.setLong(3, GAfeConstants.OBSOLETEZERO);
				psOrder2OrderRef.setLong(4, GAfeConstants.ORDER_TYPE_ID);
				rsOrder2OrderRef = psOrder2OrderRef.executeQuery();

				while (rsOrder2OrderRef.next()) {
					bProductDetailProperty.setStrESalesOrderNum(String
							.valueOf(rsOrder2OrderRef.getLong("OBJECTID")));
					bProductDetailProperty.lCbRefId = rsOrder2OrderRef
							.getLong("OBJECTTYPEID");
				}
			} catch (SQLException ex) {
				GLogger.logException(ex);

				throw ex;
			} finally {
				GConnectAfe.close(psOrder2OrderRef);
				GConnectAfe.close(rsOrder2OrderRef);
			}
		}

		GLogger.logOutput("objGetOrderRefNumFromCPLID",
				"bProductDetailProperty", bProductDetailProperty);
		GLogger.logExit(CLASS_NAME, "objGetOrderRefNumFromCPLID");

		return bProductDetailProperty;
	}

	/**
	 * This method returns the install order id linked to the input CPLID
	 * @param lCPLID
	 * @return
	 * @throws SQLException
	 * @throws Exception
	 */
	public ArrayList lGetOrderIdFromCPLIDInSession(long lCPLID)
			throws SQLException, Exception {
		GLogger.logEntry(CLASS_NAME, "lGetOrderIdFromCPLID");

		// Begin DEL v9.01d
		// long lProcessLinkId =0;
		// End DEL v9.01d
		long lProcessId = 0;
		long lOrderId = 0;
		ProcessLinkRow processLinkRow = null;
		ProcessRow processRow = null;

		processLinkTable = (ProcessLink) GConnectMemoryDB
				.getTable(string_PROCESSLINK); // Getting the ProcessLink table from the session

		Vector vctSearchByTypeIdObjIdAndObsolete = null;
		Vector vctSearchByProcessLinkIdAndObsolete = null;

		// Begin DEL v9.01d
		// Vector vctSearchByProcessIdTypeIdAndObsolete = null;
		// End DEL v9.01d
		OrderRow orderRow = null;

		// Begin DEL v9.01d
		// Vector vctSearchByOrderId = null;
		// End DEL v9.01d
		ArrayList arlOrderId = new ArrayList();

		vctSearchByTypeIdObjIdAndObsolete = processLinkTable
				.vctSearchByObjectIDandObjectTypeIDandObsolete(lCPLID, 5, 0);

		if (null != vctSearchByTypeIdObjIdAndObsolete) {
			processTable = (Process) GConnectMemoryDB.getTable(string_PROCESS);

			for (int iProcesses = 0; iProcesses < vctSearchByTypeIdObjIdAndObsolete
					.size(); iProcesses++) {
				processLinkRow = (ProcessLinkRow) vctSearchByTypeIdObjIdAndObsolete
						.get(iProcesses);
				lProcessId = processLinkRow.lProcessID;
				vctSearchByProcessLinkIdAndObsolete = processTable
						.vctSearchByProcessIDandObsolete(lProcessId, 0);

				if (null != vctSearchByProcessLinkIdAndObsolete) {
					orderTable = (Order) GConnectMemoryDB.getTable(string_ORDER); // Getting the ORDER table from the session

					for (int iOrders = 0; iOrders < vctSearchByProcessLinkIdAndObsolete
							.size(); iOrders++) {
						processRow = (ProcessRow) vctSearchByProcessLinkIdAndObsolete
								.get(iOrders);
						lOrderId = processRow.lOrderID;

						// vctSearchByProcessIdTypeIdAndObsolete=orderTable.vctSearchByOrderIDandOrderTypeIdandObsolete(lOrderId,GAfeDescription.ORDERTYPE_INSTALL,0);
						orderRow = orderTable.orSearchByOrderID(lOrderId);

						if (orderRow != null) {

							// for(int iCount = 0; iCount < vctSearchByProcessIdTypeIdAndObsolete.size();iCount++)
							if (((orderRow.lOrderTypeID != GAfeDescription.ORDERTYPE_INSTALL) || (orderRow.lOrderTypeID != GAfeDescription.ORDERTYPE_INTERACTIVE))
									&& (processRow.lProcessTypeID == GAfeDescription.PROCESSTYPE_ACTIVATIONINBILLING)) {

								// orderRow = (OrderRow) vctSearchByProcessIdTypeIdAndObsolete.get(iCount);
								arlOrderId.add(Long.valueOf(orderRow.lOrderID));
							}
						}
					}
				}
			}
		}

		GLogger.logExit(CLASS_NAME, "lGetOrderIdFromCPLID");

		return arlOrderId;
	}

	// End Add V8.01b

	/**
	 * Sorts the Product lines in such a way that the packs are together.
	 * @param vctLines
	 * @return vector - All the Product lines.
	 */
	private Vector sortPackIdentifier(Vector vctLines) {
		ArrayList alstProductLines = new ArrayList(vctLines);

		Collections.sort(alstProductLines, new Comparator() {
			public int compare(Object obj1, Object obj2) {
				String pack = (String) ObjectUtils.defaultIfNull(
						((BProductLineOvw) obj1).getStrPackIdentifier(), "a");
				String packIdentiifier = (String) ObjectUtils.defaultIfNull(
						((BProductLineOvw) obj2).getStrPackIdentifier(), "a");

				if ((pack != null) && (packIdentiifier != null)) {
					return pack.compareTo(packIdentiifier);
				}

				return 0;
			}
		});

		Vector vctLinesSorted = new Vector(alstProductLines);

		return vctLinesSorted;
	}

	/**
	 *
	 * @param vctParameters
	 * @return
	 */
	public boolean isSocialTarief(Vector vctParameters) {
		BProductParameter objTempBProductParameter = null;
		BProductParameter objBProductParameter = null;
		Vector vctTemp = null;
		boolean bIsSocial = false;
		String tariefLowerCase = null;
		//java.lang.System.out.println("Entered Social tariff vctParameters"+vctParameters);

		if (null != vctParameters) {
			for (int iCountForParam = 0; iCountForParam < vctParameters.size(); iCountForParam++) {
				objTempBProductParameter = (BProductParameter) vctParameters
						.elementAt(iCountForParam);

				if (objTempBProductParameter.lParameterID.longValue() == GAfeDescription.PRODUCTPARAMETER_TARIEF) {
					objBProductParameter = objTempBProductParameter;

					break;
				}
			}
			//java.lang.System.out.println("objBProductParameter"+objBProductParameter);

			if (null != objBProductParameter) {
				if (null != objBProductParameter.vctParameterValues) {
					for (int iCount1 = 0; iCount1 < objBProductParameter.vctParameterValues
							.size(); iCount1++) {
						vctTemp = (Vector) objBProductParameter.vctParameterValues
								.elementAt(iCount1);

						if (null != vctTemp) {
							tariefLowerCase = ((String) vctTemp.elementAt(0))
									.toLowerCase();

							if (((Integer.valueOf(vctTemp.elementAt(1) + "")))
									.intValue() == 1
									&& FullgcUtils.arrGetArrayListFromString(
											GAfeDescription.TARIEF_SOCIAL_ALL)
											.contains(tariefLowerCase)) {
								bIsSocial = true;
							}
						}
					}
				}
			}
		}
		//java.lang.System.out.println("bIsSocial"+bIsSocial);

		return bIsSocial;
	}

	public long lGetRegionIdentifierForAddressId(long addressId,
			boolean checkInCache) throws Exception {
		final String REGION_IDENTIFIER_KEY = "REGION_IDENTIFIER_KEY_";

		if ((teleSessionMgr != null) && checkInCache) {
			String key = REGION_IDENTIFIER_KEY + addressId;

			GLogger.chkpt("Checking in cache for key " + key);

			Long regionIdentifier = (Long) teleSessionMgr.getValue(key);

			GLogger.chkpt("Cache Result " + regionIdentifier);

			if (regionIdentifier == null) {
				LProduct_ext lProduct_ext = new LProduct_ext();
				long regionIdentifierId = lProduct_ext
						.lGetRegionIdentifierForAddressId(addressId);

				teleSessionMgr.putValue(key, Long.valueOf(regionIdentifierId));

				return regionIdentifierId;
			} else {
				return regionIdentifier.longValue();
			}
		}

		GLogger.chkpt("Not checking in cache!!");

		LProduct_ext lProduct_ext = new LProduct_ext();
		long regionIdentifier = lProduct_ext
				.lGetRegionIdentifierForAddressId(addressId);

		return regionIdentifier;
	}

	//Begin Add v9.02b
	/** New method Populate rate classes in a vector after selection of mobile package
	 * @param bProductDetailProperty
	 */
	public void getTariffsforMobilePackage(
			BProductDetailProperty bProductDetailProperty, long SelectedPrd) {
		GLogger.logEntry(CLASS_NAME, METHOD_getTariffsforMobile);
		GLogger.logInput(METHOD_getTariffsforMobile,
				ARG_BProductDetailProperty, bProductDetailProperty);
		int CounterOP = 0;
		bProductDetailProperty.vctProductSelected.size();
		Vector vctOptionProductRow = null;
		int SizeOptionProductRow = 0;
		int RateClassid = 0;
		ArrayList RateClasses = new ArrayList();
		GLogger.chkpt("Loading mastertable in getTariffsforMobile");
		if (null == optionGroupTable) {
			optionGroupTable = (OptionGroup) teleSessionMgr
					.getMasterTable(GMasterDataConstants.OPTIONGROUP);

		}
		if (null == optionProductTable) {
			optionProductTable = (OptionProduct) teleSessionMgr
					.getMasterTable(GMasterDataConstants.OPTIONPRODUCT);

			//     Getting the OptionGroup table from the session

		}

		if (null == rateClassTable) {
			rateClassTable = (RateClass) teleSessionMgr
					.getMasterTable(GMasterDataConstants.RATECLASS);
			//Getting the RateClass table from the session
		}

		if (null == objectDescriptionTable) {
			objectDescriptionTable = (ObjectDescription) teleSessionMgr
					.getMasterTable(GMasterDataConstants.OBJECTDESCRIPTION);
			//Getting the ObjectDescription table from the session
		}
		/*
		if (null == productTable)
		{
		    productTable = (Product) teleSessionMgr.getMasterTable(GMasterDataConstants.PRODUCT);
		    //Getting the Product table from the session
		}
		 */
		//Get all entries in optionproduct table into a vector:
/*		optionProductTable.vctGetAllExisting();
		optionProductTable.vctGetAllExisting().size();
		optionGroupTable.vctGetAllExisting().size();
*/
		/*
		// for the package product id selected
		for(int CntrPrd = FINAL_ZERO;CntrPrd < Size;CntrPrd++)
		{

		    //Getting product id of the package elected
		    ProdSelected = (((BProductDetail)bProductDetailProperty.vctProductNonSelected.elementAt(CntrPrd)).lProductID).longValue();
		    //objProductRow = productTable.prOptSearchByProductIDandObsolete(ProdSelected,GAfeConstants.OBSOLETEZERO);
		    if(SelectedPrd == ProdSelected)
		    // if(GAfeDescription.PRODUCTTYPE_PACKAGE == objProductRow.lProductTypeID)
		    {
		        GLogger.chkpt("Found Package ProductId "+ProdSelected);
		        break;
		    }
		  	}
		GLogger.chkpt("Rate class selection for package : Package ProductId "+ SelectedPrd);
		 */
		//Get all the rows of optiongroup for the package productid as parent product
		//SelectedPrd = 0;  //TODO : CHANGE THIS
		//vctOptionProductRow = optionGroupTable.vctSearchByProductIDValidandObsolete(SelectedPrd,GAfeConstants.OBSOLETEZERO,TodayDate);
		vctOptionProductRow = optionProductTable
				.optSearchByProductID(SelectedPrd);
		GLogger.chkpt("Found vctOptionProductRow " + vctOptionProductRow);
		if (null != vctOptionProductRow) {
			GLogger.chkpt("vctOptionProductRow is not null: "
					+ vctOptionProductRow.size());
			SizeOptionProductRow = vctOptionProductRow.size();
			//for each entry in the vctOptionGroupRow
			/*for(CounterOG = FINAL_ZERO ; CounterOG < vctOptionProductRow ; CounterOG++ )
			{
			     GLogger.chkpt("OGID : " +((OptionGroupRow)vctOptionGroupRow.elementAt(CounterOG)).lOptionGroupID);
			     vctOptionProductRow = optionProductTable.optSearchByOptionGroupId(((OptionGroupRow)vctOptionGroupRow.elementAt(CounterOG)).lOptionGroupID, GAfeConstants.OBSOLETEZERO);
			     GLogger.chkpt("vctOptionProductRow: " +vctOptionProductRow);
			     if (null != vctOptionProductRow)
			     {
			         for (CounterOP = FINAL_ZERO ; CounterOP < SizeOptionProductRow ; CounterOP++ )
			         {
			             GLogger.chkpt("current optionproduct: " +(((OptionProductRow)vctOptionProductRow.elementAt(CounterOP)).lOptionProductID));
			             GLogger.chkpt("RateClassId against the optionproduct: " +(((OptionProductRow)vctOptionProductRow.elementAt(CounterOP)).iRateClassID));
			             MobPckgTariff = Integer.valueOf(((OptionProductRow)vctOptionProductRow.elementAt(CounterOP)).iRateClassID);
			             GLogger.chkpt("MobPckgTariff: " +MobPckgTariff);

			         }
			         if (!tempVctTariffs.contains(MobPckgTariff))
			         {
			             tempVctTariffs.add(MobPckgTariff);
			         }

			     }
			 }     */
			for (CounterOP = FINAL_ZERO; CounterOP < SizeOptionProductRow; CounterOP++) {
				RateClassid = ((OptionProductRow) vctOptionProductRow
						.elementAt(CounterOP)).iRateClassID;

				if (72 != RateClassid)
					RateClasses.add(Integer.valueOf(RateClassid));
			}
			GLogger.chkpt("Rate class selection for package : RateClasses: "
					+ RateClasses);

			if (null != RateClasses) {
				Vector vctobjDesc = null;
				Vector allTariffs = new Vector();

				for (int iCountRC = FINAL_ZERO; iCountRC < RateClasses.size(); iCountRC++) {
					Vector TariffInfo = new Vector();
					TariffInfo.add(0, RateClasses.get(iCountRC));
					GLogger.chkpt("Intermediate TariffInfo: " + TariffInfo);
					RateClassRow objRateClassRowTemp = rateClassTable
							.prSearchByRateClassID(((Integer) RateClasses
									.get(iCountRC)).intValue());
					GLogger
							.chkpt("Rate class selection for package : objRateClassRowTemp: "
									+ objRateClassRowTemp);
					if (null != objRateClassRowTemp) {
						vctobjDesc = objectDescriptionTable
								.vctSearchByDescriptionIDandLanguageIDandObsolete(
										objRateClassRowTemp.lDescriptionID,
										bSession.lLanguageId,
										GAfeConstants.OBSOLETEZERO);
						GLogger
								.chkpt("Rate class selection for package : vctobjDesc: "
										+ vctobjDesc);
						ObjectDescriptionRow objectDescriptionRow = (ObjectDescriptionRow) vctobjDesc
								.elementAt(FINAL_ZERO);
						TariffInfo.add(1, objectDescriptionRow.strDescription);
						GLogger.chkpt("Curent TariffInfo: " + TariffInfo);
						TariffInfo.add(2,objRateClassRowTemp.iRateClassSequence);						
						allTariffs.add(TariffInfo);
						GLogger
								.chkpt("All Rate classes till now for package : TariffInfo: "
										+ allTariffs);
					}

				}
				GLogger
						.chkpt("bProductDetailProperty.vctTariffs before removal: "
								+ bProductDetailProperty.vctTariffs);
				bProductDetailProperty.vctTariffs.removeAllElements();
				GLogger
						.chkpt("bProductDetailProperty.vctTariffs after removal: "
								+ bProductDetailProperty.vctTariffs);
				GLogger.chkpt("allTariffs before sort: " + allTariffs);
				sortTariffs(allTariffs);
				GLogger.chkpt("allTariffs before addition: " + allTariffs);
				bProductDetailProperty.vctTariffs.addAll(allTariffs);
				GLogger
						.chkpt("bProductDetailProperty.vctTariffs after addition: "
								+ bProductDetailProperty.vctTariffs);
			}
			GLogger.chkpt("Rate class selection for package : RateClasses: "
					+ RateClasses);

		}
		GLogger.chkpt("bProductDetailProperty.iRateClassIDNew before reset: "
				+ bProductDetailProperty.iRateClassIDNew);
		GLogger.chkpt("bProductDetailProperty.iRateClassIDOld before reset: "
				+ bProductDetailProperty.iRateClassIDOld);
		if (GAfeConstants.DUMMYRC_FULLMOBILE == bProductDetailProperty.iRateClassIDNew
				|| FINAL_ZERO == bProductDetailProperty.iRateClassIDNew) {
			if (GAfeConstants.FULLMOBILETELEFONIE_PRODUCTID == SelectedPrd) {
				bProductDetailProperty.iRateClassIDNew = GAfeConstants.DEFAULT_RC_MOBILETEL;
			} else if (GAfeConstants.FULLMOBILEINTERNET_PRODUCTID == SelectedPrd) {
				bProductDetailProperty.iRateClassIDNew = GAfeConstants.DEFAULT_RC_MOBILEINT;			
			} else if (GAfeConstants.FULLMOBILEVOO_PRODUCTID == SelectedPrd) {
				bProductDetailProperty.iRateClassIDNew = GAfeConstants.DEFAULT_RC_MOBILEVOO;			
			}
		}
		GLogger.chkpt("bProductDetailProperty.iRateClassIDNew after reset: "
				+ bProductDetailProperty.iRateClassIDNew);
		GLogger.chkpt("bProductDetailProperty after reset: "
				+ bProductDetailProperty);
		GLogger.logOutput(METHOD_getTariffsforMobile,
				"bProductDetailProperty.vctTariffs",
				bProductDetailProperty.vctTariffs);
		GLogger.logExit(CLASS_NAME, METHOD_getTariffsforMobile);
	}

	//End Add v9.02b

	// BEGIN ADD V 9.02b
	/**
	 * This function gets NP Cancel type
	 * @throws AfeException
	 */

	public void saveDimsDslInApplSave(String strUserName, String strNumber,
			Character cPortingFlag, String strCurrentOwner,
			String strCountryCode, String strServiceType, String strDeviceType,
			Long lCDMAddrId, Long lCDMCustId, String strFirstName,
			String strName, Date dtDOB, String strVATNo, Long lTitleCode,
			Long lSegment, Long lCustCDMLangID, String strPublication,
			Long lListCDMLangID, String strOldNumber) throws AfeException {
		GLogger.logEntry(CLASS_NAME, METHOD_saveDimsDslInApplSave);

		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strUserName:",
				strUserName);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strNumber:", strNumber);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "cPortingFlag:",
				cPortingFlag);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strCurrentOwner:",
				strCurrentOwner);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strCountryCode:",
				strCountryCode);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strServiceType:",
				strServiceType);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strDeviceType:",
				strDeviceType);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "lCDMAddrId:",
				lCDMAddrId);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strFirstName:",
				strFirstName);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strName:", strName);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "dtDOB:", dtDOB);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strVATNo:", strVATNo);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "lTitleCode:",
				lTitleCode);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "lSegment:", lSegment);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "lCustCDMLangID:",
				lCustCDMLangID);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strPublication:",
				strPublication);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "lListCDMLangID:",
				lListCDMLangID);
		GLogger.logInput(METHOD_saveDimsDslInApplSave, "strOldNumber:",
				strOldNumber);

		ApplSaveActionRow applSaveActionRow = null;
		ApplSaveAction applSaveActionTable = null;
		DateFormat sdf = new SimpleDateFormat(string_dateFormat1);
		long cplid = 0;
		boolean isApplSaveActionRowNull = false;
		try {
			if (null != teleSessionMgr && null != strNumber) {
				GLogger.chkpt("telesessionmgr is NOT null");
				applSaveActionTable = (ApplSaveAction) teleSessionMgr
						.getTable(string_APPLSAVEACTION);
				BNumber bNumber = null;

				bNumber = (BNumber) teleSessionMgr
						.getTable(GAfeConstants.BNUMBER_ACTEL);

				if (null != applSaveActionTable) {
					GLogger.chkpt("applSaveActionTable is NOT null");
					applSaveActionRow = applSaveActionTable
							.asarSearchByActionTypeValueMethod(1,
									GAfeDescription.MOBNO, strNumber,
									GAfeDescription.BLNNEWPHONELINE);
					cplid = ProductUtils.lGetCPLIDFromIDentifier(strNumber);
					GLogger.chkpt("cplid = " + cplid);
					if (FINAL_ZERO == cplid) {
						if (applSaveActionRow == null) {
							GLogger.chkpt("applSaveActionRow is null");
							applSaveActionRow = new ApplSaveActionRow();
							isApplSaveActionRowNull = true;
						}
						//Check for Old Number(Number chnage scneario in same session....
						if (null != strOldNumber) {
							applSaveActionRow = applSaveActionTable
									.asarSearchByActionTypeValueMethod(1,
											GAfeDescription.MOBNO,
											strOldNumber,
											GAfeDescription.BLNNEWPHONELINE);
							GLogger
									.chkpt("Check applSaveActionRow for OLD number");
							if (null != applSaveActionRow) {
								isApplSaveActionRowNull = false;
							} else {
								applSaveActionRow = new ApplSaveActionRow();
							}
						}
						applSaveActionRow.bPerformLast = true;
						applSaveActionRow.arrArguments = new Class[18];
						applSaveActionRow.arrParams = new Object[18];
						// Setting the variables of record to entered in Appl Save container
						applSaveActionRow.iAction = Record.INSERT;
						applSaveActionRow.strType = GAfeDescription.MOBNO;
						applSaveActionRow.strValue = strNumber;
						applSaveActionRow.strSystem = GAfeDescription.SYSTEM_IAFEOUT;
						applSaveActionRow.strMethodName = GAfeDescription.BLNNEWPHONELINE;
						applSaveActionRow.arrArguments[0] = String.class;
						applSaveActionRow.arrArguments[1] = String.class;
						applSaveActionRow.arrArguments[2] = Character.class;
						applSaveActionRow.arrArguments[3] = String.class;
						applSaveActionRow.arrArguments[4] = String.class;
						applSaveActionRow.arrArguments[5] = String.class;
						applSaveActionRow.arrArguments[6] = String.class;
						applSaveActionRow.arrArguments[7] = Long.class;
						applSaveActionRow.arrArguments[8] = Long.class;
						applSaveActionRow.arrArguments[9] = String.class;
						applSaveActionRow.arrArguments[10] = String.class;
						applSaveActionRow.arrArguments[11] = String.class;
						applSaveActionRow.arrArguments[12] = String.class;
						applSaveActionRow.arrArguments[13] = Long.class;
						applSaveActionRow.arrArguments[14] = Long.class;
						applSaveActionRow.arrArguments[15] = Long.class;
						applSaveActionRow.arrArguments[16] = String.class;
						applSaveActionRow.arrArguments[17] = Long.class;

						applSaveActionRow.arrParams[0] = strUserName;
						applSaveActionRow.arrParams[1] = strNumber;
						applSaveActionRow.arrParams[2] = cPortingFlag;
						applSaveActionRow.arrParams[3] = strCurrentOwner;
						//if ((GAfeConstants.NP.equalsIgnoreCase(bNumber.strKindOfNumber)) && (null != bNumber.strOriginalOwner) && (!(GAfeConstants.TELE.equalsIgnoreCase(bNumber.strOriginalOwner))))

						if (strCurrentOwner != null) {
							//							Begin Add v9.02i
							if (GLogger.isDebugEnabled()) {
								GLogger.chkpt("applSaveActionTable bNumber: "
										+ bNumber);
							}
							if (null != bNumber
									&& GAfeConstants.TN
											.equalsIgnoreCase(bNumber.strKindOfNumber)) {
								strCurrentOwner = GAfeConstants.TELE;
								if (GLogger.isDebugEnabled()) {
									GLogger
											.chkpt("applSaveActionTable bNumber strCurrentOwner: "
													+ strCurrentOwner);
								}
							} else if ('N' == cPortingFlag) {
								strCurrentOwner = GAfeConstants.TELE;
								if (GLogger.isDebugEnabled()) {
									GLogger
											.chkpt("applSaveActionTable cPortingFlag : "
													+ strCurrentOwner);
								}
							}
							//End add v9.02i
							applSaveActionRow.arrParams[3] = strCurrentOwner;
						} else {
							applSaveActionRow.arrParams[3] = "";
						}
						applSaveActionRow.arrParams[4] = strCountryCode;
						applSaveActionRow.arrParams[5] = GAfeDescription.SERVICETYPE_STAND;
						applSaveActionRow.arrParams[6] = GAfeDescription.DEVICETYPE_MOBILE;
						applSaveActionRow.arrParams[7] = lCDMAddrId;
						applSaveActionRow.arrParams[8] = lCDMCustId;

						if (null == strFirstName) {
							strFirstName = " ";
						}

						applSaveActionRow.arrParams[9] = strFirstName;
						applSaveActionRow.arrParams[10] = strName;
						if (null != dtDOB) {
							applSaveActionRow.arrParams[11] = sdf.format(dtDOB);
							if (GLogger.isDebugEnabled()) {
								GLogger.chkpt("dims date "
										+ applSaveActionRow.arrParams[11]);
								GLogger.chkpt("dims date w/o format " + dtDOB);
							}
						} else {
							applSaveActionRow.arrParams[11] = null;
						}
						applSaveActionRow.arrParams[12] = strVATNo;
						applSaveActionRow.arrParams[13] = lTitleCode;
						applSaveActionRow.arrParams[14] = lSegment;
						applSaveActionRow.arrParams[15] = lCustCDMLangID;
						applSaveActionRow.arrParams[16] = GAfeDescription.PUBLICATION_SECRET;
						applSaveActionRow.arrParams[17] = lListCDMLangID;
						if (isApplSaveActionRowNull) {
							applSaveActionTable.addRecord(applSaveActionRow);
							GLogger
									.chkpt("applsaveactionrow is null, hence adding");
						} else {
							GLogger
									.chkpt("applsaveactionrow is not null, hence updating");
							applSaveActionTable.updateRecord(applSaveActionRow);
						}
					} else {
						GLogger
								.chkpt("cplid is not zero, hence line is already saved");//cplid is non zero
					}
				} else {
					GLogger.chkpt("applSaveActionTable is null");//applSaveActionTable is null
				}
			} else {
				GLogger.chkpt("telesessionmgr is null OR strNumber is null");
			}
		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
			//	ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}
			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}
		GLogger.logExit(CLASS_NAME, METHOD_saveDimsDslInApplSave);
	}

	/**
	 * Check if DeliveryOrder is greater than NEW status
	 * @param lProcessId
	 * @return
	 */
	private boolean bCheckIfDeliveryOrderInprogress(long lProcessId) {
		GLogger.logEntry(CLASS_NAME, "bCheckIfDeliveryOrderInprogress");
		GLogger.logInput(CLASS_NAME,
				"bCheckIfDeliveryOrderInprogress => lProcessId", lProcessId);

		boolean bReturn = false;
		ProcessRow processRow = null;
		OrderRow orderRow = null;

		if (0 != lProcessId) {
			processRow = processTable.prSearchByProcessIDandObsolete(
					lProcessId, FINAL_ZERO);

			if (null != processRow) {
				orderRow = (OrderRow) orderTable.orSearchByOrderIDandObsolete(
						processRow.lOrderID, FINAL_ZERO);
				if (null != orderRow) {
					GLogger
							.chkpt("OrderRow.OrderType:"
									+ orderRow.lOrderTypeID);
					if (orderRow.lOrderTypeID == GAfeDescription.ORDERTYPE_DELIVERYORDER
							&& orderRow.lOrderStatusTypeID != GAfeDescription.ORDERSTATUSTYPE_NEW) {
						GLogger
								.chkpt("Entered for Delivery Order and not NEW status");
						bReturn = true;
					}
				}
			}
		}

		GLogger.logOutput(CLASS_NAME,
				"bCheckIfDeliveryOrderInprogress => bReturn", bReturn);
		GLogger.logExit(CLASS_NAME, "bCheckIfDeliveryOrderInprogress");

		return bReturn;
	}

	//Begin Add Astha
	public boolean bCheckNewCplidForPendingOrderMove(long lCustomerProductLineId)
			throws Exception {
		GLogger.logInput("bCheckNewCplidForPendingOrderMove",
				ARG_CUSTOMERPRODUCTLINEID, lCustomerProductLineId);
		long lTargetCplid = 0;
		boolean bCheck = false;
		boolean bPending = false;
		Vector vctGetOpenOrder = null;
		if (lCustomerProductLineId != 0) {
			bPending = LOrder.bIsOrderPendingOnLine(lCustomerProductLineId);
			if (bPending) {
				//ArrayList arrPendingOrderDetail = new ArrayList();
				//vctGetOpenOrder = new Vector();
				vctGetOpenOrder = vctGetOpenOrder(lCustomerProductLineId);
				//arrPendingOrderDetail= ROrder.alGetOrderDetailfromCPLID(lCustomerProductLineId);
				GLogger.chkpt("vctGetOpenOrder" + vctGetOpenOrder);
				for (int iCount = 0; iCount < vctGetOpenOrder.size(); iCount++) {
					String strOrderType = (String) vctGetOpenOrder
							.elementAt(iCount);
					GLogger.chkpt("strOrderType" + strOrderType);
					if (strOrderType.equalsIgnoreCase("Verhuis")) {
						lTargetCplid = ProductUtils
								.getNewCPLIDMoveOrder(lCustomerProductLineId);
						if (lTargetCplid == 0) {
							bCheck = true;
							GLogger.chkpt("bCheck inside if" + bCheck);
						}
						break;
					}
					/*long lOrderType = ((Long) arrPendingOrderDetail.get(iCount + 1)).longValue();
					GLogger.chkpt("Ordertype ::" + lOrderType);
					if((lOrderType== GAfeDescription.ORDERTYPE_MOVE ))
					{
						lTargetCplid = RProduct.getNewCPLIDMoveOrder(lCustomerProductLineId);
						if(lTargetCplid == 0)
						{
							bCheck =true;
							GLogger.chkpt("bCheck inside if" + bCheck);

						}
						break;
					}*/
				}
			}
		}
		GLogger
				.logOutput("bCheckNewCplidForPendingOrderMove", "bCheck",
						bCheck);
		return bCheck;

	}

	//End Add Astha
	//Begin Add V 9.03a
	/**
	 * Method to check if Int or Tel lines exist if Interactive packetten is deselected.
	 *  @param
	 *  @return boolean chk_Line_IntOrTel
	 */
	public boolean checkIntTelLinesOnIDTVProductDeselection(
			TeleSessionMgr teleSessionMgr) throws Exception {
		boolean bChk_Line_IntOrTel = false;
		boolean bChk_Line_IntOrTel_session = false;
		boolean bChk_Line_IntOrTel_database = false;
		int iLoop = 0;
		long lAddressId = 0;
		long lCustomerId = 0;
		Vector vctCPLIds = null;
		Long lngCustomerProductLineId = null;
		long lProductId1 = 0;
		int iCount = 0;

		GLogger.chkpt("Inside Lproduct");
		BProductOvw bProductOvw = new BProductOvw();
		if (null != teleSessionMgr.getValue("vctAllDetailRows_aCProduct")) {
			//Vector for storing all the Data that is populated in the tablular form
			//bProductOvw = (BProductOvw)teleSessionMgr.getValue("vctAllDetailRows_aCProduct");
			if (null != teleSessionMgr
					.getValue("vctAllDetailRows_aCProduct_New")) {
				bProductOvw = (BProductOvw) teleSessionMgr
						.getValue("vctAllDetailRows_aCProduct_New");
				GLogger.chkpt("Inside vctAllDetailRows_aCProduct_New");
				GLogger
						.chkpt("vctAllDetailRows_aCProduct:"
								+ teleSessionMgr
										.getValue("vctAllDetailRows_aCProduct"));
			} else {
				bProductOvw = (BProductOvw) teleSessionMgr
						.getValue("vctAllDetailRows_aCProduct");
				GLogger.chkpt("Inside vctAllDetailRows_aCProduct");
				GLogger
						.chkpt("vctAllDetailRows_aCProduct:"
								+ teleSessionMgr
										.getValue("vctAllDetailRows_aCProduct"));
			}
		}

		Vector vctBProductLineOvw = null;

		if (bProductOvw != null) {
			vctBProductLineOvw = bProductOvw.vctBProductLineOvw;
			GLogger.chkpt("got vector vctBProductLineOvw ");
			GLogger.chkpt("bProductOvw:" + bProductOvw);
		}
		if (vctBProductLineOvw != null) {
			GLogger.chkpt("Inside vctBProductLineOvw");
			int ivctBProductLineOvw_size = vctBProductLineOvw.size();
			for (iLoop = 0; iLoop < ivctBProductLineOvw_size; iLoop++) {
				int iProductID = ((BProductLineOvw) (vctBProductLineOvw
						.get(iLoop))).lProductID.intValue();
				GLogger.chkpt("MProduct:iProductID:" + iProductID
						+ "check whether int or tel-session");
				{
					GLogger.chkpt("Yes....");
					if (iProductID == GAfeDescription.PRODUCT_INTERNET
							|| iProductID == GAfeDescription.PRODUCT_TELEPHONE) {
						GLogger.chkpt("bChk_Line_IntOrTel_session is true");
						bChk_Line_IntOrTel_session = true;
						break;
					}
				}
			}
			if (bChk_Line_IntOrTel_session == false) {
				MProduct objMProduct = new MProduct(teleSessionMgr, bSession);

				//lCplid = ((BProductLineOvw)(vctBProductLineOvw.get(iLoop))).lCustomerProductLineID;
				//GLogger.chkpt("lCplid=" +lCplid);
				//lCustomerId = RProduct.lGetCustIDFromCustLinkID(lCplid);
				lCustomerId = bProductOvw.lCustomerID;
				GLogger.chkpt("lCustomerId=" + lCustomerId);
				//lAddressId = ((BProductLineOvw)(vctBProductLineOvw.get(iLoop))).lAddressID;
				lAddressId = Long.valueOf(bProductOvw.strSelectedAddressID)
						.longValue();
				GLogger.chkpt("lAddressId=" + lAddressId);
				vctCPLIds = objMProduct.vctGetCustLinesOnAddress(lCustomerId,
						lAddressId, 0);
				GLogger.chkpt("All values retrieved");

				if (null != vctCPLIds) {
					GLogger.chkpt("Inside vctCPLIds");
					int ivctCPLIds_size = vctCPLIds.size();
					for (iCount = 0; iCount < ivctCPLIds_size; iCount++) {
						lngCustomerProductLineId = (Long) vctCPLIds
								.elementAt(iCount);
						GLogger.chkpt("lngCustomerProductLineId="
								+ lngCustomerProductLineId);
						lProductId1 = ProductUtils
								.lGetProductIDFromCPLID(lngCustomerProductLineId);
						GLogger.chkpt("MProduct:lProductId1:" + lProductId1
								+ "check whether 1-int or 34-tel-database");

						if (lProductId1 == GAfeDescription.PRODUCT_INTERNET
								|| lProductId1 == GAfeDescription.PRODUCT_TELEPHONE) { //we already have a internet and telephone line present in database
							bChk_Line_IntOrTel_database = true;
							GLogger
									.chkpt("bChk_Line_IntOrTel_database is true");
						}
					}
				}
			}
		}
		if (bChk_Line_IntOrTel_session == true
				|| bChk_Line_IntOrTel_database == true) {
			teleSessionMgr.putValue(GAfeConstants.INT_TEL_LINES_PRESENT,
					GAfeConstants.True_Value);
			bChk_Line_IntOrTel = true;
			GLogger.chkpt("bChk_Line_IntOrTel is true");
		}
		return bChk_Line_IntOrTel;
	}

	//End Add V 9.03a
    //Begin Add V10.00a
    /**
     * Method to get Address id as key and address details in following format
     * <Zip code><space><Municipality><space><Street><space><house number>.
     * @param teleSessionMgr
     * @return
     * @throws AfeException
     */
    public HashMap getAddressByPostCodeMunicipality(long lCustomerId ,String strPostCodeMunicipality) throws AfeException
    {
    	GLogger.logEntry(CLASS_NAME, METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY);
    	/**
		 * HashMap to store client address Key address id Value address details
		 * in following format <Zip code><space><Municipality><space><Street><space><house
		 * number>
		 */
		HashMap<Long,String> hmClientAddress = new HashMap<Long,String>();
		PreparedStatement psGetSAPIds = null;
		PreparedStatement psGetRefAddrDetails = null;
		PreparedStatement psGetManAddrDetails = null;
		ResultSet rsServiceIDs = null;
		ResultSet rsRefAddressDetails = null;
		ResultSet rsManAddressDetails = null;
		HashMap<Long, Long> hmServiceIDAddress = new HashMap<Long, Long>();
		int postcode = 0;
		String municipality = null;
		long[] sapIDs = null;
		AfeNinasOut objAfeNinasOut = null;
		BSAPDetailsFromCATSAP[] bSapDetails = null;
		String strRefPostCodeQuery = " AND REFDISTRICT.ZIP = ? ";
		String strRefMunicipalityQuery = " AND UPPER(TRIM(REFDISTRICT.CITY)) = ? ";
		String strManPostCodeQuery = " AND MANADDR.ZIP = ? ";
		String strManMunicipalityQuery = " AND UPPER(TRIM(MANADDR.CITY)) = ? ";
		StringBuilder sbFinalRefQuery = new StringBuilder();
		StringBuilder sbFinalManQuery = new StringBuilder();
		sbFinalRefQuery.append(GAfeSql.S_GET_REF_ADDR_DETAILS);
		sbFinalManQuery.append(GAfeSql.S_GET_MAN_ADDR_DETAILS);
		if(null != strPostCodeMunicipality)
		{
			strPostCodeMunicipality = strPostCodeMunicipality.trim();
			strPostCodeMunicipality = strPostCodeMunicipality.toUpperCase();
		}
		try {
			GLogger.logInput(METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY, "strPostCodeMunicipality", strPostCodeMunicipality);
			postcode = Integer.parseInt(strPostCodeMunicipality);
			GLogger.debug(CLASS_NAME, METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY, "Postcode : " +postcode );
			sbFinalRefQuery.append(strRefPostCodeQuery);
			sbFinalManQuery.append(strManPostCodeQuery);
		} catch (NumberFormatException nfe) {
			//If not number value entered will be municipality
			GLogger.debug(CLASS_NAME, METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY, "Municipality : " +strPostCodeMunicipality );
			municipality = strPostCodeMunicipality;
			if(null != municipality){
				municipality = municipality.trim();
				municipality = municipality.toUpperCase();
			}
			sbFinalRefQuery.append(strRefMunicipalityQuery);
			sbFinalManQuery.append(strManMunicipalityQuery);
		}
		try {
			psGetSAPIds = gConnectAfe
					.psPrepareStatement(GAfeSql.S_GET_SERVICE_IDS);
			psGetSAPIds.setLong(1, lCustomerId);
			GLogger.debug(CLASS_NAME,METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY,"Before executing query to get Service ids");
			rsServiceIDs = psGetSAPIds.executeQuery();
			GLogger.debug(CLASS_NAME,METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY,"After executing query to get Service ids");
			while (rsServiceIDs.next()) {
				hmServiceIDAddress.put(rsServiceIDs.getLong(GAfeConstants.SERVICEADDRESSID),
						rsServiceIDs.getLong(GAfeConstants.ADDRESSID));
			}
			GLogger.logOutput(METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY, "hmServiceIDAddress", hmServiceIDAddress);
			if(null!=hmServiceIDAddress && hmServiceIDAddress.size()>0)
			{
				try{
					objAfeNinasOut = new AfeNinasOut();
					GLogger.debug(CLASS_NAME,METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY,"Before calling Ninas to get sap details");
					bSapDetails = objAfeNinasOut.objSearchSapDetailBySap(
							hmServiceIDAddress.keySet(), postcode, municipality);
					GLogger.debug(CLASS_NAME,METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY,"After calling Ninas to get sap details");
					if(null != bSapDetails)
					{
						for (BSAPDetailsFromCATSAP bSapDetail : bSapDetails) {
							hmClientAddress.put(hmServiceIDAddress.get(bSapDetail
									.getSapId()), getAddressFormatted(bSapDetail));
						}
					}
				}
				catch(Exception e)
				{
					//ignoring the exception
					GLogger.debug(CLASS_NAME, METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY, "Error invoking Ninas : " +e );
				}
			}
			GLogger.logOutput(METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY, "hmClientAddress", hmClientAddress);
			//Getting Reference address details
			psGetRefAddrDetails = gConnectAfe.psPrepareStatement(sbFinalRefQuery.toString());
			psGetRefAddrDetails.setLong(1, lCustomerId);
			psGetRefAddrDetails.setString(2, strPostCodeMunicipality);
			rsRefAddressDetails = psGetRefAddrDetails.executeQuery();
			while(rsRefAddressDetails.next())
			{
				hmClientAddress.put(rsRefAddressDetails.getLong(GAfeConstants.ADDRESSID),
						getAddressFormated(rsRefAddressDetails));
			}
			//Getting Manual Address details
			psGetManAddrDetails = gConnectAfe.psPrepareStatement(sbFinalManQuery.toString());
			psGetManAddrDetails.setLong(1, lCustomerId);
			psGetManAddrDetails.setString(2, strPostCodeMunicipality);
			rsManAddressDetails = psGetManAddrDetails.executeQuery();
			while(rsManAddressDetails.next())
			{
				hmClientAddress.put(rsManAddressDetails.getLong(GAfeConstants.ADDRESSID),
						getAddressFormated(rsManAddressDetails));
			}
			GLogger.logOutput(METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY, "hmClientAddress", hmClientAddress);
		}
		catch (SQLException sqlExp) {
			GLogger.logException(sqlExp);
			//unexpected System error in accessing database
			throw new AfeException("ERRCOM_00001", sqlExp.getMessage());
		}
		catch(Exception ex){
			GLogger.logException(ex);
			//unexpected System error
			throw new AfeException(string_ERRCOM_00002, ex.getMessage());
		}finally {
			gConnectAfe.close(rsServiceIDs);
			gConnectAfe.close(rsRefAddressDetails);
			gConnectAfe.close(rsManAddressDetails);
			gConnectAfe.close(psGetSAPIds);
			gConnectAfe.close(psGetRefAddrDetails);
			gConnectAfe.close(psGetManAddrDetails);
		}
		GLogger.logExit(CLASS_NAME, METHOD_GETADDRESSBYPOSTCODEMUNICIPALITY);
		return hmClientAddress;
	}

    /**
     * Get Address details in a <Zip code><space><Municipality><space><Street><space><house
	 * number> from bSapDetail object
     * @param bSapDetail
     * @return formatted address
     */
    private String getAddressFormatted(BSAPDetailsFromCATSAP bSapDetail)
    {
    	GLogger.logEntry(CLASS_NAME, METHOD_GETADDRESSFORMATED);
    	GLogger.logInput(METHOD_GETADDRESSFORMATED, "bSapDetail", bSapDetail);
    	StringBuilder sbAddressValue = new StringBuilder();
    	sbAddressValue.append(bSapDetail.getZip());
    	sbAddressValue.append(GAfeConstants.EMPTY_SAPCE);
    	sbAddressValue.append(bSapDetail.getCity());
    	sbAddressValue.append(GAfeConstants.EMPTY_SAPCE);
    	sbAddressValue.append(bSapDetail.getStreetName());
    	sbAddressValue.append(GAfeConstants.EMPTY_SAPCE);
    	sbAddressValue.append(bSapDetail.getHouseNo());
    	//Begin Add v10.00c
    	if(null!=bSapDetail.getSubHouseNo()){
    	sbAddressValue.append(GAfeConstants.EMPTY_SAPCE);
    	GLogger.chkpt("SUBHOUSENUMBER :="+ bSapDetail.getSubHouseNo());
    	sbAddressValue.append(bSapDetail.getSubHouseNo());
    	}
    	//End Add v10.00c
    	GLogger.logOutput(METHOD_GETADDRESSFORMATED, "Address", sbAddressValue);
    	GLogger.logExit(CLASS_NAME, METHOD_GETADDRESSFORMATED);
    	return sbAddressValue.toString();
    }

    /**
     * Get Address details in a <Zip code><space><Municipality><space><Street><space><house
	 * number> from result set object
     * @param resultSet
     * @return formatted address
     * @throws SQLException
     */
    private String getAddressFormated(ResultSet resultSet) throws SQLException
    {
    	GLogger.logEntry(CLASS_NAME, METHOD_GETADDRESSFORMATED);
		StringBuilder sbAddressValue = new StringBuilder();
		sbAddressValue.append(resultSet.getString(GAfeConstants.ZIP));
		sbAddressValue.append(GAfeConstants.EMPTY_SAPCE);
		sbAddressValue.append(resultSet.getString(GAfeConstants.CITY));
		sbAddressValue.append(GAfeConstants.EMPTY_SAPCE);
		sbAddressValue.append(resultSet.getString(GAfeConstants.STREETNAME));
		sbAddressValue.append(GAfeConstants.EMPTY_SAPCE);
		sbAddressValue.append(resultSet.getString(GAfeConstants.HOUSENUMBER));
		//Begin Add v10.00c
		if(null!=resultSet.getString(GAfeConstants.SUBHOUSENUMBER)){
		sbAddressValue.append(GAfeConstants.EMPTY_SAPCE);
		GLogger.chkpt("SUBHOUSENUMBER :="+ resultSet.getString(GAfeConstants.SUBHOUSENUMBER));
		sbAddressValue.append(resultSet.getString(GAfeConstants.SUBHOUSENUMBER));
		}
		//End Add v10.00c
		GLogger.logOutput(METHOD_GETADDRESSFORMATED, "Address", sbAddressValue);
		GLogger.logExit(CLASS_NAME, METHOD_GETADDRESSFORMATED);
		return sbAddressValue.toString();
    }
  //End Add V10.00a


    /**
     * Method to get master and sub logins for internet line passed
     */
    public List<String> getLoginsForInternet(long customerProductLineId)
			throws Exception {

		GLogger.logEntry(CLASS_NAME, METHOD_GETLOGINSFORINTERNET);
		GLogger.logInput(METHOD_GETLOGINSFORINTERNET,
				ARG_CUSTOMERPRODUCTLINEID, customerProductLineId);
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		List<String> logins = new ArrayList<String>();

		try {

			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GET_LOGINS_FOR_INTERNET);
			psQuery.setLong(1, customerProductLineId);
			psQuery.setLong(2, FINAL_ONE);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				logins.add(rsRetrieve.getString("CUSTOMERPLIDENTIFIERVALUE"));
			}
			GLogger
					.logExit(CLASS_NAME, METHOD_GETLOGINSFORINTERNET
							+ logins);
			GLogger.logOutput(METHOD_GETLOGINSFORINTERNET,
					ARG_CUSTOMERPRODUCTLINEID, logins);
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return logins;

}

    /**
     * Method to get master and sub logins for internet line passed
     */
    public String getMailBoxName(long mailboxProductId)
			throws Exception {

		GLogger.logEntry(CLASS_NAME, METHOD_GETMAILBOXNAME);
		GLogger.logInput(METHOD_GETMAILBOXNAME,
				ARG_CUSTOMERPRODUCTID, mailboxProductId);
		ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		String mailBoxName = null;

		try {

			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_RETRIEVE_BUSINESS_IDENTIFIER_VALUE);
			psQuery.setLong(1, mailboxProductId);
			rsRetrieve = psQuery.executeQuery();

			while (rsRetrieve.next()) {
				mailBoxName = rsRetrieve.getString("BUSINESSIDENTIFIERVALUE");
			}
			GLogger
					.logExit(CLASS_NAME, METHOD_GETMAILBOXNAME
							+ mailBoxName);
			GLogger.logOutput(METHOD_GETMAILBOXNAME,
					ARG_CUSTOMERPRODUCTID, mailBoxName);
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
		}

		return mailBoxName;

}
    public long lGetPriceSettingIdByTariefAndVatFromDB(String strTarief, boolean bVatApplicable) {
    	
		//java.lang.System.out.println("Entered lGetPriceSettingIdByTariefAndVatFromDB");

        CDMDao dao = new CDMDao();          
        
        long lPriceSettingId = -1;    
        String productParameterValue = null;

        if(bVatApplicable){
              productParameterValue = GAfeDescription.PARAMETERVALUE_JA;
        }else{
              productParameterValue = GAfeDescription.PARAMETERVALUE_NEE;
        }
		//java.lang.System.out.println("productParameterValue"+productParameterValue);

        
              List<Long> priceSettingId = dao.getJdbcTemplate().query(GAfeSql.S_PRICESETTINGID_BY_TARIEF_AND_VAT,
                          new Object[]{GAfeDescription.PRODUCTPARAMETER_TARIEF, strTarief,
                          GAfeDescription.PRODUCT_PARAMETER_BTW_REDUCTIE,productParameterValue},
                          new RowMapper() {
                    public Object mapRow(ResultSet rsPriceSettingId,int rowNum)throws SQLException{

                          return rsPriceSettingId.getLong("PRICESETTINGID");

                    }});
      		//java.lang.System.out.println("priceSettingId"+priceSettingId);


              if(null != priceSettingId && priceSettingId.size() > 0){
                    lPriceSettingId = priceSettingId.get(0);
              }
        		//java.lang.System.out.println("lPriceSettingId"+lPriceSettingId);

              GLogger.chkpt("lPriceSettingId" + lPriceSettingId);

              return lPriceSettingId;
      }
    public void createCustomerContactInClarify(long custLinkId) throws Exception
    {
    	String strEpithet = "";
        String strLastName = "";
        String strFirstName = "";
        String strBox = "";
        long lCustomerID = 0;
        long lAddressID = 0;
        long lCustomerLinkID = 0;
        int iCounter = 0;
        Address objAddress = null;
        Epithet objEpithet = null;
        BSession objBSession = null;
        Customer objCustomer = null;
        EpithetRow objEpithetRow = null;
        CustomerLink objCustomerLink = null;
        CustomerRow objCustomerRow = null;
        ManualAddress objManualAddress = null;
        BCatsapAddress objBCatsapAddress = null;
        Vector vctAddressInternal = null;
        Vector vctCustomerLinkRow = null;
        LCustomer objLCustomer = null;
        ManualAddressRow objManualAddressRow = null;
        BProductRoleDetail objBProductRoleDetail = null;
        BCustomerAddress objBCustomerAddress = null;
        long lSAPId=0;
        long lManualAddressid=0;

        GLogger.logEntry(CLASS_NAME, "createCustomerContactInClarify");

        // Begin DEL v9.01d
        // try {
        // End DEL v9.01d
        objCustomer = (Customer) teleSessionMgr.getTable(GAfeConstants.CUSTOMER);
        objCustomerLink = (CustomerLink) teleSessionMgr.getTable(GAfeConstants.CUSTOMERLINK);
        objEpithet = (Epithet) teleSessionMgr.getMasterTable(GAfeConstants.EPITHET);
        objBSession = (BSession) teleSessionMgr.getValue(GAfeConstants.BSESSION_AFE);

        if ((null != objCustomer) && (null != objCustomerLink) && (null != objBSession)) {
            
        	//vctCustomerLinkRow = new Vector();
            vctCustomerLinkRow = objCustomerLink.vctSearchByCustomerLinkIDandObsolete(custLinkId,0);
            if(vctCustomerLinkRow.size()>0){
            lCustomerID = ((CustomerLinkRow) (vctCustomerLinkRow.elementAt(FINAL_ZERO))).lCustomerID;
            ;
            lAddressID = ((CustomerLinkRow) (vctCustomerLinkRow.elementAt(FINAL_ZERO))).lAddressID;
            ;
            objAddress = (Address) teleSessionMgr.getTable(GAfeConstants.ADDRESS);

            if (null != objAddress) {
                vctAddressInternal = objAddress.vctSearchByAddressIDandObsolete(lAddressID,
                        FINAL_ZERO);
                lSAPId=((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).lServiceAddressID;
                lManualAddressid=((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).lManualAddressID;
            }
            if (null != vctCustomerLinkRow) {
                lCustomerLinkID = ((CustomerLinkRow) (vctCustomerLinkRow.elementAt(FINAL_ZERO))).lCustomerLinkID;
                objCustomerRow = (CustomerRow) objCustomer.crSearchByCustIDandObsolete(lCustomerID, FINAL_ZERO);

                if (null != objCustomerRow) {
                    if (null != objCustomerRow.strFirstName) {
                        strFirstName = objCustomerRow.strFirstName;
                    }

                    if (null != objCustomerRow.strName) {
                        strLastName = objCustomerRow.strName;
                    }

                    if (null != objEpithet) {
                        objEpithetRow = objEpithet.astrSearchByEpithetID(objCustomerRow.lEpithetID);

                        if (null != objEpithetRow) {
                            strEpithet = strGetDescription(objBSession.lLanguageId, objEpithetRow.lDescriptionID);
                        } else {
                            strEpithet = "";
                        }
                    }
                } else {
                    strFirstName = "";
                    strLastName = "";
                    strEpithet = "";
                }

                if ((FINAL_ZERO < lSAPId)) {
                    objLCustomer = new LCustomer();
                    objBCustomerAddress = new BCustomerAddress();
                    objBCustomerAddress.lCustomerId = lCustomerID;
                    objBCustomerAddress.lAddressId = lAddressID;
                    objBCustomerAddress.lServiceAddressId = lSAPId;
                    objLCustomer.vSelectCatsapAddress(objBCustomerAddress);
                    objBCatsapAddress = objLCustomer.objAddressFromSapId(lSAPId);

                    if (objBCatsapAddress.strBox == null) {
                        strBox = "";
                    } else {
                        strBox = objBCatsapAddress.strBox;
                    }

                    iCreateContactInClfyforBI(Long.valueOf(lCustomerLinkID),Long.valueOf(lCustomerID),
                    		lSAPId, strFirstName, strLastName,
                                         objBCustomerAddress.strCity, objBCustomerAddress.strPostCode,
                                         objBCatsapAddress.strStreet, objBCustomerAddress.strHouseNumber,
                                         objBCustomerAddress.strSubHouseNumber, strEpithet, strBox);
                } else {
                    if (FINAL_ZERO < lManualAddressid) {
                        vctAddressInternal = new Vector();
                        objManualAddress = (ManualAddress) teleSessionMgr.getTable(GAfeConstants.MANUALADDRESS);

                        if (null != objManualAddress) {
                            objManualAddressRow = objManualAddress.marSearchByManualAddressID(
                            		lManualAddressid);

                            if (null != objManualAddressRow) {
                                objAddress = (Address) teleSessionMgr.getTable(GAfeConstants.ADDRESS);

                                if (null != objAddress) {
                                    vctAddressInternal = objAddress.vctSearchByAddressIDandObsolete(lAddressID,
                                            FINAL_ZERO);

                                    if (null != vctAddressInternal) {
                                        if (null == objManualAddressRow.strCity) {
                                            objManualAddressRow.strCity = "";
                                        }

                                        if (null == objManualAddressRow.strZip) {
                                            objManualAddressRow.strZip = "";
                                        }

                                        if (null == objManualAddressRow.strStreetName) {
                                            objManualAddressRow.strStreetName = "";
                                        }

                                        iCreateContactInClfyforBI(
                                            Long.valueOf(lCustomerLinkID), lCustomerID, null,
                                            strFirstName, strLastName, objManualAddressRow.strCity,
                                            objManualAddressRow.strZip, objManualAddressRow.strStreetName,
                                            ((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).strHouseNumber,
                                            ((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).strSubHouseNumber,
                                            strEpithet, ((AddressRow) vctAddressInternal.elementAt(FINAL_ZERO)).strBox);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        }

        // Begin DEL v9.01d
        // } finally {
        // }
        // End DEL v9.01d
        GLogger.logExit(CLASS_NAME, "createCustomerContactInClarify");
    	
    }
    
    /**
     * 
     * @param lCustomerProductLineId
     * @param lCustomerId
     * @param lproductId
     * @return
     * @throws AfeException
     */
    public BInternet retrieveInternetDetailsFromDB(long lCustomerProductLineId,
    		long lCustomerId) throws AfeException {

    	// Variable Intialization
    	long lCustomerPLIdentifierID = 0;
    	//Vector vctCustProdLine = new Vector();
    	Vector vctTemp = null;
    	BInternet bInternet = new BInternet();
    	String customerProductLineIdentifierMaster = null;
    	String customerProductLineIdentifierChild = null;

    	// Assigning the values to the BInternet Object variables
    	bInternet.vctInternetDetail = new Vector();
    	bInternet.lCustomerId = lCustomerId;
    	bInternet.lCustomerProductLineId = lCustomerProductLineId;
    	ResultSet rsRetrieve = null;
		PreparedStatement psQuery = null;
		ResultSet rsRetrieveCPLI = null;
		PreparedStatement psQueryCPLI = null;
		ResultSet rsRetrieveCPLIChild = null;
		PreparedStatement psQueryCPLIChild = null;

    	try {

    		

    		psQuery = GConnectAfe
    		.psPrepareStatement(GAfeSql.SELECT_CUSTOMERPRODUCT);
    		psQuery.setLong(1, lCustomerProductLineId);
    		psQuery.setLong(2, FINAL_ZERO);
    		rsRetrieve = psQuery.executeQuery();

    		while (rsRetrieve.next()) {
    			lCustomerPLIdentifierID = rsRetrieve.getLong("CUSTOMERPLIDENTIFIERID");
    		}
    		if (0 != lCustomerPLIdentifierID){
    			psQueryCPLI = GConnectAfe
    			.psPrepareStatement(GAfeSql.SELECT_CUSTOMERPRODUCTLINEIDENTIFIER);
    			psQueryCPLI.setLong(1, lCustomerPLIdentifierID);
    			psQueryCPLI.setLong(2, FINAL_ZERO);
    			rsRetrieveCPLI = psQueryCPLI.executeQuery();

    			while (rsRetrieveCPLI.next()) {
    				customerProductLineIdentifierMaster = rsRetrieveCPLI.getString("CUSTOMERPLIDENTIFIERVALUE");
    			}


    		}
    		vctTemp = new Vector();
    		if (null != customerProductLineIdentifierMaster){
    			vctTemp.addElement(customerProductLineIdentifierMaster);
    			vctTemp.addElement(Integer.valueOf(1)); // addind Interger object containing 1 to indicate  it as Master Login
    			bInternet.strOldMasterLogin = customerProductLineIdentifierMaster;
    			bInternet.strNewMasterLogin = customerProductLineIdentifierMaster;
    			bInternet.vctInternetDetail.addElement(vctTemp); // adding the Tempory Vector to the buisness object
    		}




    		psQueryCPLIChild = GConnectAfe
    		.psPrepareStatement(GAfeSql.S_CPLVALUE_ACTIVE);
    		psQueryCPLIChild.setLong(1, lCustomerProductLineId);
    		rsRetrieveCPLIChild = psQueryCPLIChild.executeQuery();
    		while (rsRetrieveCPLIChild.next()) {
    			customerProductLineIdentifierChild = rsRetrieveCPLIChild.getString("CUSTOMERPLIDENTIFIERVALUE");
    			if (!customerProductLineIdentifierChild.equalsIgnoreCase(customerProductLineIdentifierChild)){
    				vctTemp = new Vector(2); // Creating Temporaray vector
    				vctTemp.addElement(customerProductLineIdentifierChild); // adding the Login Id
    				vctTemp.addElement(Integer.valueOf(0)); // addind Interger object containing 0 to indicate it as Child Login
    				bInternet.vctInternetDetail.addElement(vctTemp); // adding the Tempory Vector to the buisness object
    			}
    		}

    		if (GAfePropertyLoader.DEBUG) {
    			GLogger.chkpt("bInternet.vctInternetDetail size.."
    					+ bInternet.vctInternetDetail.size());
    		}

    	} 
    	catch (Exception ex) // catch block
    	{
    		if (GAfePropertyLoader.DEBUG) {
    		//	ex.printStackTrace(System.out);
    			GLogger.logException(ex);
    		}

    		throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
    	}
    	finally{
    		try {
    			if(null!=rsRetrieve){rsRetrieve.close();}
				if(null!=psQuery){psQuery.close();}
				if(null!=rsRetrieveCPLI){rsRetrieveCPLI.close();}
				if(null!=psQueryCPLI){psQueryCPLI.close();}
	    		if(null!=rsRetrieveCPLIChild){rsRetrieveCPLIChild.close();}
	    		if(null!=psQueryCPLIChild){psQueryCPLIChild.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
				GLogger.logException(e);
			}
    		
    	}

    	return bInternet; // Returing the populated BInternet Object
    }
    
    protected int iCreateContactInClfyforBI(Long lCustomerLinkId, Long lCustomerId,
			Long lSapId, String strFirstName, String strLastName,
			String strCity, String strPostCode, String strStreet,
			String strHouseNumber, String strSubHouseNumber, String strEpithet,
			String strBox) throws AfeException


	{

        IAFEOUT objAfeOut = new IAFEOUT();
        
		try {


				
					objAfeOut.iCreateContact(lCustomerLinkId, lCustomerId, lSapId, strFirstName, strLastName, strCity, strPostCode, strStreet, strHouseNumber,strSubHouseNumber,strEpithet,strBox);
					
				

		} catch (Exception ex) {
			if (GAfePropertyLoader.DEBUG) {
				//ex.printStackTrace(System.out);
				GLogger.logException(ex);
			}

			throw new AfeException(string_ERRCOM_00002, ex.getMessage()); // unknown exception occurred
		}

		return (1);
	}
    
    //Begin Add v10.02a
    /**
     * @param lCustomerProductLineId
     * @return bIsActivated
     */
    /*Method to check whether a product line is activated or not. */
    public static boolean bIsLineActivated(long lCustomerProductLineId)  
			throws Exception {
    		GLogger.logEntry(CLASS_NAME, METHOD_bIsLineActivated);
    		GLogger.logInput(METHOD_bIsLineActivated, ARG_CUSTOMERPRODUCTLINEID,lCustomerProductLineId);
    		PreparedStatement psGetLine = null;
    		ResultSet rsGetLine = null;
    		long lCPLID = 0;
    		boolean bIsActivated = true;
    		try {
    			GLogger.logAlert("Going to call the query");
    			psGetLine = GConnectAfe
    			.psPrepareStatement(GAfeSql.SELECT_NOTACTIVATEDCUSTOMERPRODUCTLINE);
    			psGetLine.setLong(1, lCustomerProductLineId);
    			psGetLine.setInt(2, CDMConstants.OBSOLETE_ZERO);
    			rsGetLine = psGetLine.executeQuery();
       			if (rsGetLine.next()) {
    				lCPLID = rsGetLine.getLong("CUSTOMERPRODUCTLINEID");
    				GLogger.chkpt("LProduct :Customerproductlineid " + lCPLID +" is not activated.");
    				
    				if (0 != lCPLID) {
    					bIsActivated = false;
    					GLogger.chkpt("LProduct :bIsActivated = false");
    				}
    			}
    		} finally {
    			GConnectAfe.close(rsGetLine);
    			GConnectAfe.close(psGetLine);
    		}

    		GLogger.logExit(CLASS_NAME, METHOD_bIsLineActivated);
    		return bIsActivated;
    }
    
    /**
     * update Aging details in Dinoman for FMVNO
     * @param msisdn
     * @return 
     */
    public static void updateAgingStatus(String msisdn) 
    	throws Exception
    {
    	int iUpdate = 0;
    	GLogger.logEntry(CLASS_NAME, METHOD_updateAgingStatus);
    	GLogger.logInput(METHOD_updateAgingStatus, "msisdn",msisdn);
    	PreparedStatement psstmt =null;
    	try
    	{
    		psstmt = GConnectDinoman.psPrepareStatement(GAfeSql.S_UPDATE_NONMNP_AGINGSTATUS);
    		psstmt.setLong(1,Long.parseLong(msisdn));
			iUpdate =psstmt.executeUpdate();
			GLogger.chkpt("execute query done for update");
    	}
    	finally {
    		if (null != psstmt) {
    			GConnectDinoman.close(psstmt);
    		}
    	}
    	GLogger.chkpt("Lproduct exit updateAgingStatus, iUpdate value : " + iUpdate);
    	}

    /**
     * Check whether mobile is MNP or Non-MNP
     * @param msisdn
     * @return bIsMNP as false for Non-MNP number
     */
    public static boolean bIsMNP(String msisdn)
		throws Exception {
    	GLogger.logEntry(CLASS_NAME, METHOD_bIsMNP);
    	GLogger.logInput(METHOD_bIsMNP, "msisdn",msisdn);
    	PreparedStatement psGetLine = null;
    	ResultSet rsGetLine = null;
    	long lMsisdn = 0;
    	boolean bIsMNP = true;
    	
    	try {
    		GLogger.logAlert("Going to call the query");
    		psGetLine = GConnectDinoman
					.psPrepareStatement(GAfeSql.SELECT_DN);
    		psGetLine.setLong(1, Long.parseLong(msisdn));
    		rsGetLine = psGetLine.executeQuery();
       		if (rsGetLine.next()) {
    			lMsisdn = rsGetLine.getLong("DN");
    			GLogger.logAlert("Msisdn of line is " + lMsisdn);
       			if (0 != lMsisdn) {
    				bIsMNP = false;
    				GLogger.chkpt("LProduct :bIsMNP = false");
    			}
    		}
    	} finally {
    		GConnectDinoman.close(rsGetLine);
    		GConnectDinoman.close(psGetLine);
    	}
    	GLogger.logExit(CLASS_NAME, METHOD_bIsMNP);
    	return bIsMNP;
    }
    //End Add v10.02a
  //BEGIN CR 125918 
    public String strGetDNISCodeFromDB(Long CustomerProductLineID)
	throws Exception {

		GLogger.logEntry(CLASS_NAME, METHOD_strGetDNISCodeFromDB);
		GLogger.logInput(METHOD_strGetDNISCodeFromDB,
				ARG_CUSTOMERPRODUCTLINEID, CustomerProductLineID);
		ResultSet rsRetrieve = null;
		ResultSet rsStmtProc = null;
		ResultSet rsDNIS = null;
		PreparedStatement psQuery = null;
		PreparedStatement psStmtProc = null;
		PreparedStatement psDNIS = null;
		String strDNISCode=null;
		String strFinalDNISValue=null;
		String strDNISSoftBlend=null;
		String strDNISOutBound=null;
		
		long objectTypeIDForCustomerProduct=2;
		
		
		
		try {
		
			psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GetMAXSALEIDFROMCUSTOMERPRODUCTID);
			psStmtProc = GConnectAfe
			.psPrepareStatement(GAfeSql.S_GetMAXSALEIDFROMCUSTOMERPRODUCTIDANDLINEID);
			psDNIS = GConnectAfe
			.psPrepareStatement(GAfeSql.S_GetDNISCODEFROMSALEID);
			psQuery.setLong(1, objectTypeIDForCustomerProduct);
			psQuery.setLong(2, CustomerProductLineID);
			rsRetrieve = psQuery.executeQuery();
			while(rsRetrieve.next()){
			GLogger.chkpt("S_GetMAXSALEIDFROMCUSTOMERPRODUCTID: " + rsRetrieve.getLong("SALESID"));
			psStmtProc.setLong(1, rsRetrieve.getLong("SALESID"));
			psStmtProc.setLong(2, CustomerProductLineID);
			rsStmtProc = psStmtProc.executeQuery();
			while(rsStmtProc.next()){
			GLogger.chkpt("S_GetMAXSALEIDFROMCUSTOMERPRODUCTIDANDLINEID: " + rsStmtProc.getLong("SALESID"));
			psDNIS.setLong(1, rsStmtProc.getLong("SALESID"));
			rsDNIS = psDNIS.executeQuery();
			while(rsDNIS.next()){
			GLogger.chkpt("S_GetDNISCODEFROMSALEID: " + rsDNIS.getString("DNISREGISTREE"));
			strDNISCode=rsDNIS.getString("DNISREGISTREE");
			}
			}
			}
						
			GLogger
					.logExit(CLASS_NAME, METHOD_strGetDNISCodeFromDB
							+ strDNISCode);
			GLogger.logOutput(METHOD_strGetDNISCodeFromDB,
					ARG_CUSTOMERPRODUCTID, strDNISCode);
		} finally {
			GConnectAfe.close(rsRetrieve);
			GConnectAfe.close(psQuery);
			GConnectAfe.close(rsStmtProc);
			GConnectAfe.close(psStmtProc);
			GConnectAfe.close(rsDNIS);
			GConnectAfe.close(psDNIS);
}

return strDNISCode;

}
    //END CR 125918
    void sortTariffs(Vector allTariffs){
    	Collections.sort(allTariffs, new Comparator<Vector<Object>>(){
		    @Override  public int compare(Vector<Object> v1, Vector<Object> v2) {
		        return ((Integer)v1.get(2)).compareTo((Integer) v2.get(2)); //Ordering by iRateClassSequence
		}});
    }
  //Add Rel 14.1 DSO	
	/**                      
	 * @param arrCPLIDs
	 * @return bAllDTVDTALinesPresent
	 * @throws Exception
	 */
	/*public static boolean checkAllDTALines(ArrayList<Long> arrCPLIDs) throws Exception {
		
		GLogger.logEntry(CLASS_NAME, METHOD_CHECKALLDTALINES);
		GLogger.logInput(METHOD_CHECKALLDTALINES, ARG_ARRCPLIDS, arrCPLIDs);
		
		boolean bAllDTVDTALinesPresent = false;
		boolean bIsDTAPresentOnLine= false;
		int iDTVLineCounter =0;
		int iDTADTVLineCounter =0;
		
		HashMap<Long, Integer> hmIsDTV = RProduct.iIsDTVLine(arrCPLIDs);
		
		if(null != hmIsDTV && null!= hmIsDTV.entrySet()){
		Iterator it = hmIsDTV.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry<Long, Integer> pairs = (Map.Entry<Long, Integer>)it.next();
			if(pairs.getValue() == 1)
			{
				iDTVLineCounter = iDTVLineCounter +1;
				GLogger.chkpt("iDTVLineCounter : "+ iDTVLineCounter);
				ArrayList<Long> arrProductId = ProductUtils.getBoxProductIdsOnLine((Long)pairs.getKey().longValue());
				GLogger.chkpt("arrProductId : " + arrProductId);
				for( long lProductId : arrProductId)
				{
					bIsDTAPresentOnLine=GAfeDescription.bCheckInLongList(lProductId, GAfeConstants.ARR_DTA_PRODUCTS);
					if(bIsDTAPresentOnLine)
					{
						iDTADTVLineCounter = iDTADTVLineCounter+1;
						GLogger.chkpt("iDTADTVLineCounter : " + iDTADTVLineCounter);
					}
			
				}
			}
		}
		if(iDTVLineCounter == iDTADTVLineCounter)
		{
			bAllDTVDTALinesPresent = true;
		}
		}
		GLogger.chkpt("bAllDTVDTALinesPresent : " + bAllDTVDTALinesPresent);
		return bAllDTVDTALinesPresent;
		}	*/
	//Add End Rel 14.1 DSO
	
	//Add Rel 14.2 Yelo TV
	/**                      
	 * @param reasonTypeId
	 * @return vctGetReasonDescription
	 */	
    public Vector vctGetReasonDescription(long reasonTypeId)
    {	
    	GLogger.chkpt("Inside LProduct : vctGetReasonDescription()");    	
    	Vector vctGetReasonDescription = null;

    	if (null == reasonDescriptionTable) {
    		reasonDescriptionTable = (ReasonDescription) teleSessionMgr
    		.getMasterTable("REASONDESCRIPTION"); 
    	}
    	if (null != reasonDescriptionTable) {
    		vctGetReasonDescription = reasonDescriptionTable
    		.vctSearchByReasonTypeIDandObsolete(reasonTypeId,FINAL_ZERO);
    	}
    	return vctGetReasonDescription;
    }	
    //Add End Rel 14.2 Yelo TV

	
	//Begin add for 14.1 Sun_tiering
	
	//This method will check whether pack is available on line or not.
	public static boolean isPackAvailableOnLine(long lineId)throws Exception
	{

		String packId = null;
		PreparedStatement psLineId = null;
		ResultSet rsLineId = null;

		try {
			psLineId = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GETPACKID_FROMLINEID);
			psLineId.setLong(1, lineId);
			rsLineId = psLineId.executeQuery();

			if (rsLineId.next()) {
				packId = rsLineId.getString("PACKID");
			}
			if(packId!=null)
			{
				return true;
				
			}
			return false;
		} finally {
			GConnectAfe.close(rsLineId);
			GConnectAfe.close(psLineId);
		}

	/*	GLogger.logExit(CLASS_NAME, METHOD_strGetTinaUUIdFromAddressId);
		GLogger.logOutput(METHOD_strGetTinaUUIdFromAddressId, "tinaAddressUUID : ", tinaAddressUUID);
*/
		
	}
	
	 public static String checkForWijzigTelephone(String businessIdentifierValue)
	 {
	   
		 CDMDao dao = new CDMDao();
	    	List<String> lstSourceIdentifierValue=null;
			lstSourceIdentifierValue=dao.getJdbcTemplate().query(GAfeSql.S_GET_SOURCE_CPLIVALUE_FOR_WIJZIG_TEL,
					new Object[] { businessIdentifierValue, businessIdentifierValue },
					new RowMapper() {
						public Object mapRow(ResultSet rs, int rowNum)
								throws SQLException {
							
							return(rs.getString("CUSTOMERPLIDENTIFIERVALUE"));
							
						}
					});
			
			if(null!=lstSourceIdentifierValue && lstSourceIdentifierValue.size()>0)
			{
				return lstSourceIdentifierValue.get(0);
			}
			return null;
		
	 }
	//End add for 14.1 Sun_tiering
	 
	 
	//BEGIN : 14.40 : Sun Sat
	public BProductDetail getDeviceDetails(TeleSessionMgr teleSesnMgr ,BProductDetail bProductDetail, String strDeviceName , long lLanguageId, long lProductId) 
			throws javax.servlet.ServletException, java.io.IOException{
		GLogger.chkpt("Added new logger now sachin");
		GLogger.logEntry(CLASS_NAME, "getDeviceDetails");
		GLogger.logInput("getDeviceDetails","bProductDetail",bProductDetail);
		GLogger.logInput("getDeviceDetails","strDeviceName",strDeviceName);
		GLogger.logInput("getDeviceDetails","lLanguageId",lLanguageId);
		GLogger.logInput("getDeviceDetails","lProductId",lProductId);
		ObjectDescriptionRow objectDescriptionRow = null;
		ObjectDescription objectDescription = null;
		ProductModel productModel = null;
		ProductModelRow productModelRow = null;
		ProductModelPriceSetting productModelPriceSetting = null;	
		ProductModelPriceSettingRow productModelPriceSettingRow = new ProductModelPriceSettingRow();
		Vat vat = null;
		VatRow vatRow = new VatRow();
		BProductParameter bProductParameter = null;
		
		try{
			GLogger.chkpt("teleSessionMgr check");
			if(teleSessionMgr!=null){
				GLogger.chkpt("teleSessionMgr not null");
				if(teleSessionMgr.getMasterTable(string_OBJECTDESCRIPTION)!=null){
					GLogger.chkpt("teleSessionMgr not null");
				}
				if(teleSessionMgr.getMasterTable("PRODUCT_MODEL_PRICE_SETTING")!=null){
					GLogger.chkpt("PRODUCT_MODEL_PRICE_SETTING not null");
				}
				if(teleSessionMgr.getMasterTable("PRODUCT_MODEL")!=null){
					GLogger.chkpt("PRODUCT_MODEL not null");
				}
				if(teleSessionMgr.getMasterTable("VAT")!=null){
					GLogger.chkpt("VAT not null");
				}
				
			}
			float fRetailPriceInclVatAmount =  0.0f;
			float fCashAdvanceInclVatAmount=0.0f;
			float fDevicePurchaseAmount=0.0f;
			float fLoanAmountInclVatAmount=0.0f;
			float fDiscountAmountInclVatAmount=0.0f;
			if(!(strDeviceName.equals(GAfeDescription.SELECT))){
				objectDescription = (ObjectDescription) teleSessionMgr.getMasterTable(string_OBJECTDESCRIPTION); 
				GLogger.chkpt("Afetr objectDescription");
				objectDescriptionRow = objectDescription.odrSearchByDescAndLangID(strDeviceName, lLanguageId);
				GLogger.chkpt("objectDescriptionRow::"+objectDescriptionRow);

				productModel = (ProductModel)teleSessionMgr.getMasterTable("PRODUCT_MODEL");
				
				productModelRow = productModel.pmrSearchByDescriptionIdandObsolete(objectDescriptionRow.lDescriptionID, FINAL_ZERO);
				GLogger.chkpt("productModelRow::"+productModelRow);

				productModelPriceSetting = (ProductModelPriceSetting) teleSessionMgr.getMasterTable("PRODUCT_MODEL_PRICE_SETTING");

				productModelPriceSettingRow = productModelPriceSetting.pmpsrSearchbyProductModelGUIDProductIDObsoleteValidity(productModelRow.getProductModelGUId(), FINAL_ZERO, lProductId, new Date(), new Date());
				GLogger.chkpt("productModelPriceSettingRow::"+productModelPriceSettingRow);
				if (productModelPriceSettingRow == null){
					GLogger.chkpt("productModelPriceSettingRow is not null");
					productModelPriceSettingRow = productModelPriceSetting.pmpsrSearchbyProductModelGUIDObsoleteValidity(productModelRow.getProductModelGUId(), FINAL_ZERO, new Date(), new Date());
				}
				if (productModelPriceSettingRow != null){
					GLogger.chkpt("getLoan" + productModelPriceSettingRow.getLoanExclVATAmount());
					GLogger.chkpt("getDiscount" +  productModelPriceSettingRow.getDiscountExclVATAmount());
					GLogger.chkpt("getCurrency "+productModelPriceSettingRow.getCurrency());
					GLogger.chkpt("getProductModelGUID "+productModelPriceSettingRow.getProductModelGUID());
					GLogger.chkpt("getAppliesForProductID "+productModelPriceSettingRow.getAppliesForProductID());
					GLogger.chkpt("getCashAdvanceExclVatAmount "+productModelPriceSettingRow.getCashAdvanceExclVatAmount());
					GLogger.chkpt("getObsolete "+productModelPriceSettingRow.getObsolete());
					GLogger.chkpt("getRetailPriceExclVatAmount "+productModelPriceSettingRow.getRetailPriceExclVatAmount());
					GLogger.chkpt("getValidFrom "+productModelPriceSettingRow.getValidFrom());
					GLogger.chkpt("getValidUntill "+productModelPriceSettingRow.getValidUntill());
					GLogger.chkpt("getValidUntill "+productModelPriceSettingRow.getVatDefintionId());
				//	GLogger.chkpt("getValidUntill "+productModelPriceSettingRow.getDevicePurchasePriceVATInc());
				//	GLogger.chkpt("getDevicePurchasePriceVATInc "+productModelPriceSettingRow.getDevicePurchasePriceVATInc());
				}

				vat = (Vat)teleSessionMgr.getMasterTable("VAT");
				GLogger.chkpt("productModelPriceSettingRow.getVatDefintionId()"+productModelPriceSettingRow.getVatDefintionId());
				vatRow = vat.vrSearchByVatIDandObsolete(productModelPriceSettingRow.getVatDefintionId(), FINAL_ZERO);
				GLogger.chkpt("vatRow is not null"+vatRow);
				GLogger.chkpt("productModelPriceSettingRow.getRetailPriceExclVatAmount()" +productModelPriceSettingRow.getRetailPriceExclVatAmount());
				GLogger.chkpt("vatRow.dVatAmount" +vatRow.dVatAmount);
				GLogger.chkpt("caculated value"+(float)(vatRow.dVatAmount/100.0));
				//productModelPriceSettingRow.setRetailPriceExclVatAmount(productModelPriceSettingRow.getRetailPriceExclVatAmount()+(productModelPriceSettingRow.getRetailPriceExclVatAmount()*((float)(vatRow.dVatAmount/100.0))));
				float fVatAmount = 0.0f;
				fVatAmount= (float)(vatRow.dVatAmount/100.0) ;
				float fRetailPriceExclVatAmount = productModelPriceSettingRow.getRetailPriceExclVatAmount();
				GLogger.chkpt("fRetailPriceExclVatAmount"+fRetailPriceExclVatAmount);
				float fCashAdvanceExclVatAmount = productModelPriceSettingRow.getCashAdvanceExclVatAmount();
				GLogger.chkpt("fCashAdvanceExclVatAmount"+fCashAdvanceExclVatAmount);
				
				fRetailPriceInclVatAmount= fRetailPriceExclVatAmount+(fRetailPriceExclVatAmount* fVatAmount);
				GLogger.chkpt("fRetailPriceInclVatAmount before change"+fRetailPriceInclVatAmount);
				 BigDecimal bd = new BigDecimal(Float.toString(fRetailPriceInclVatAmount));
				 bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
				 fRetailPriceInclVatAmount = bd.floatValue();
				 GLogger.chkpt("fRetailPriceInclVatAmount after change"+fRetailPriceInclVatAmount);
				 
				 
				fCashAdvanceInclVatAmount= fCashAdvanceExclVatAmount+(fCashAdvanceExclVatAmount * fVatAmount);
				GLogger.chkpt("fCashAdvanceInclVatAmount  before change"+fCashAdvanceInclVatAmount);
				  bd = new BigDecimal(Float.toString(fCashAdvanceInclVatAmount));
				 bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
				 fCashAdvanceInclVatAmount = bd.floatValue();
				GLogger.chkpt("fCashAdvanceInclVatAmount after change"+fCashAdvanceInclVatAmount);
				//productModelPriceSettingRow.setCashAdvanceExclVatAmount(productModelPriceSettingRow.getCashAdvanceExclVatAmount()+(productModelPriceSettingRow.getCashAdvanceExclVatAmount()*(float)(vatRow.dVatAmount/100.0)));
				
				//Begin Add for CYD RCR 14
			
				if(productModelPriceSettingRow != null)
				{
					float fLoanAmountExclVatAmount = productModelPriceSettingRow.getLoanExclVATAmount();
					GLogger.chkpt("LoanExclVATAmount"+fLoanAmountExclVatAmount);
					fLoanAmountInclVatAmount=fLoanAmountExclVatAmount+(fLoanAmountExclVatAmount * fVatAmount);
					GLogger.chkpt("fLoanAmountInclVatAmount before change:"+fLoanAmountInclVatAmount);
					bd = new BigDecimal(Float.toString(fLoanAmountInclVatAmount));
				    bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
				    fLoanAmountInclVatAmount = bd.floatValue();
				}
				GLogger.chkpt("fLoanAmountInclVatAmount:"+fLoanAmountInclVatAmount);
				
				
				if(productModelPriceSettingRow != null)
				{
					float fDiscountAmountExclVatAmount =productModelPriceSettingRow.getDiscountExclVATAmount();
					GLogger.chkpt("DiscountExclVATAmount"+fDiscountAmountExclVatAmount);
					fDiscountAmountInclVatAmount=fDiscountAmountExclVatAmount+(fDiscountAmountExclVatAmount * fVatAmount);
					GLogger.chkpt("fDiscountAmountInclVatAmount before change:"+fDiscountAmountInclVatAmount);
					bd = new BigDecimal(Float.toString(fDiscountAmountInclVatAmount));
				    bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
				    fDiscountAmountInclVatAmount = bd.floatValue();
				}
				GLogger.chkpt("fDiscountAmountInclVatAmount:"+fDiscountAmountInclVatAmount);
				
				GLogger.chkpt("fDevicePurchaseAmount before change"+fDevicePurchaseAmount);
				if(productModelPriceSettingRow != null)
				{
					GLogger.chkpt("fCashAdvanceInclVatAmount for RCR 14"+fCashAdvanceInclVatAmount);
					GLogger.chkpt("getLoanExclVATAmount for RCR 14"+productModelPriceSettingRow.getLoanExclVATAmount());
					fDevicePurchaseAmount=fCashAdvanceInclVatAmount+fLoanAmountInclVatAmount;
				}
				GLogger.chkpt("fDevicePurchaseAmount after change"+fDevicePurchaseAmount);
				//End Add for CYD RCR 14

			}if(bProductDetail.vctParameters !=null){
				GLogger.chkpt("bProductDetail.vctParameters.size():: "+bProductDetail.vctParameters.size());
			}
			for(int i=0; i<bProductDetail.vctParameters.size(); i++){
				
				bProductParameter=(BProductParameter)bProductDetail.vctParameters.elementAt(i);
				String sDesc = null;
				GLogger.chkpt("sDesc"+bProductParameter.strExternalDesc);
				GLogger.chkpt("I am here");
				if(bProductParameter.strExternalDesc.isEmpty()){
					sDesc = getExtDesc(bProductParameter.lParameterID);
					GLogger.chkpt("Inside If");	
				}
				else{
					sDesc = bProductParameter.strExternalDesc;
					GLogger.chkpt("Inside else");	
				}
				GLogger.chkpt("sDesc1"+sDesc);	
				if(sDesc.equals(GAfeConstants.DESC_PRODUCTMODELGUID)){
					GLogger.chkpt("inside if strExternalDesc");
			//		GLogger.chkpt("productModelPriceSettingRow.getProductModelGUID()"+productModelPriceSettingRow.getProductModelGUID());
					Vector vctInt1 = new Vector();
					if(strDeviceName.equals(GAfeDescription.SELECT)){
						vctInt1.addElement(null);
					}
					else{
						vctInt1.addElement( productModelPriceSettingRow.getProductModelGUID());
					}
					
					vctInt1.addElement(Integer.valueOf(FINAL_ONE));
					//vctInt1.addElement(new Integer(FINAL_ZERO));
					Vector vctExternal = new Vector();
					vctExternal.addElement(vctInt1);
					bProductParameter.vctParameterValues = vctExternal;
					//bProductParameter.strParamNewValue = productModelPriceSettingRow.getProductModelGUID();
				}
				else if(sDesc.equals(GAfeConstants.DESC_CASHADVANCEEXCLVATAMOUNT)){
					GLogger.chkpt("inside else if 1 strExternalDesc");
					//GLogger.chkpt("productModelPriceSettingRow.getCashAdvanceExclVatAmount()"+productModelPriceSettingRow.getCashAdvanceExclVatAmount());
					Vector vctInt1 = new Vector();
					if(strDeviceName.equals(GAfeDescription.SELECT)){
						vctInt1.addElement(null);
					}
					else{
						vctInt1.addElement(String.valueOf(fCashAdvanceInclVatAmount));
					}
				
					vctInt1.addElement(Integer.valueOf(FINAL_ONE));
					//vctInt1.addElement(new Integer(FINAL_ZERO));
					Vector vctExternal = new Vector();
					vctExternal.addElement(vctInt1);
					bProductParameter.vctParameterValues = vctExternal;
					//bProductParameter.strParamNewValue = String.valueOf(productModelPriceSettingRow.getCashAdvanceExclVatAmount());
				}
				// Added for CYD 15.21
				else if(sDesc.equals(GAfeConstants.DESC_DISCOUNT)){
					GLogger.chkpt("inside else if 1 DESC_DISCOUNT");
					Vector vctInt1 = new Vector();
					if(strDeviceName.equals(GAfeDescription.SELECT)){
						vctInt1.addElement(null);
					}
					else{
						vctInt1.addElement(String.valueOf(fDiscountAmountInclVatAmount));
					}
				
					vctInt1.addElement(Integer.valueOf(FINAL_ONE));
					Vector vctExternal = new Vector();
					vctExternal.addElement(vctInt1);
					bProductParameter.vctParameterValues = vctExternal;
				}
				
				else if(sDesc.equals(GAfeConstants.DESC_LOANAMOUNT)){
					GLogger.chkpt("inside else if 1 DESC_LOANAMOUNT");
					Vector vctInt1 = new Vector();
					if(strDeviceName.equals(GAfeDescription.SELECT)){
						vctInt1.addElement(null);
					}
					else{
						vctInt1.addElement(String.valueOf(fLoanAmountInclVatAmount));
					}
				
					vctInt1.addElement(Integer.valueOf(FINAL_ONE));
					Vector vctExternal = new Vector();
					vctExternal.addElement(vctInt1);
					bProductParameter.vctParameterValues = vctExternal;
				}
				
				//Begin Add for RCR 14
				else if(sDesc.equals(GAfeConstants.DESC_PURCHASEPRICE)){
					GLogger.chkpt("inside else if 1 DESC_PURCHASEPRICE");
					Vector vctInt1 = new Vector();
					if(strDeviceName.equals(GAfeDescription.SELECT)){
						vctInt1.addElement(null);
					}
					else{
						vctInt1.addElement(String.valueOf(fDevicePurchaseAmount));
					}
				
					vctInt1.addElement(Integer.valueOf(FINAL_ONE));
					Vector vctExternal = new Vector();
					vctExternal.addElement(vctInt1);
					bProductParameter.vctParameterValues = vctExternal;
				}
				//End Add for RCR 14
				// End Added for CYD 15.21
				
				else if(sDesc.equals(GAfeConstants.DESC_RETAILPRICEEXCLVATAMOUNT)){
					GLogger.chkpt("inside else if 2 strExternalDesc");
				//	GLogger.chkpt("productModelPriceSettingRow.getCashAdvanceExclVatAmount("+productModelPriceSettingRow.getRetailPriceExclVatAmount());
					//bProductParameter.strParamNewValue = String.valueOf(productModelPriceSettingRow.getRetailPriceExclVatAmount());
					Vector vctInt1 = new Vector();
					if(strDeviceName.equals(GAfeDescription.SELECT)){
						vctInt1.addElement(null);
					}
					else{
						vctInt1.addElement( String.valueOf(fRetailPriceInclVatAmount));
					}
				
					vctInt1.addElement(Integer.valueOf(FINAL_ONE));
					//vctInt1.addElement(new Integer(FINAL_ZERO));
					Vector vctExternal = new Vector();
					vctExternal.addElement(vctInt1);
					bProductParameter.vctParameterValues = vctExternal;
				}
				else if(sDesc.equals(GAfeConstants.DESC_VATAMOUNT)){
					GLogger.chkpt("inside else if 3 strExternalDesc");
					GLogger.chkpt("vatRow.dVatAmount"+vatRow.dVatAmount);
					Vector vctInt1 = new Vector();
					if(strDeviceName.equals(GAfeDescription.SELECT)){
						vctInt1.addElement(null);
					}
					else{
						vctInt1.addElement( String.valueOf(vatRow.dVatAmount));
					}
					
					vctInt1.addElement(Integer.valueOf(FINAL_ONE));
					//vctInt1.addElement(new Integer(FINAL_ZERO));
					Vector vctExternal = new Vector();
					vctExternal.addElement(vctInt1);
					bProductParameter.vctParameterValues = vctExternal;
					//bProductParameter.strParamNewValue = String.valueOf(vatRow.dVatAmount);
				}
				else if(sDesc.equals(GAfeConstants.DESC_CURRENCY)){
					GLogger.chkpt("inside else if 4 strExternalDesc");
					//bProductParameter.strParamNewValue = productModelPriceSettingRow.getProductModelPriceSettingGUID();
					Vector vctInt1 = new Vector();
					if(strDeviceName.equals(GAfeDescription.SELECT)){
						vctInt1.addElement(null);
					}
					else{
						vctInt1.addElement(productModelPriceSettingRow.getProductModelPriceSettingGUID());
					}
				
					vctInt1.addElement(Integer.valueOf(FINAL_ONE));
					//vctInt1.addElement(new Integer(FINAL_ZERO));
					Vector vctExternal = new Vector();
					vctExternal.addElement(vctInt1);
					bProductParameter.vctParameterValues = vctExternal;
				}
				if(sDesc.equals(GAfeConstants.DESC_DESCRIPTION)){
					GLogger.chkpt("inside if 2 strExternalDesc");
					//bProductParameter.strParamNewValue = strDeviceName;
					Vector vctinternal = new Vector();
					
				//	Vector vctInt1 = new Vector();
				//	vctInt1.addElement(strDeviceName);
				//	vctInt1.addElement(new Integer(FINAL_ONE));
					//vctInt1.addElement(new Integer(FINAL_ZERO));
					Vector vctExternal1 = new Vector();
					//vctExternal1.addElement(vctInt1);
					
					for(int j =0 ; j<bProductParameter.vctParameterValues.size(); j++){
						vctinternal =(Vector) bProductParameter.vctParameterValues.get(j);
						if(((String)(vctinternal.get(0))).equals(strDeviceName)){
							vctinternal.set(1,Integer.valueOf(FINAL_ONE));
						}
						else{
							vctinternal.set(1,Integer.valueOf(FINAL_ZERO));
						}
						vctExternal1.add(vctinternal);
						GLogger.chkpt("inside if vctExternal1" +vctExternal1);
						
					}
					
					bProductParameter.vctParameterValues = vctExternal1;
					
				}
				GLogger.chkpt("bProductDetail bProductParameter " + i +"loaction "+bProductParameter);
				bProductDetail.vctParameters.set(i,bProductParameter);
			}
			
			//bProductDetail.vctParameters.addElement(bProductParameter);
			GLogger.chkpt("bProductDetail getDeviceDetails "+bProductDetail);
		}
		catch(Exception e){
			GLogger.debug(CLASS_NAME, "getDeviceDetails", "Error : " +e );    	
			GLogger.chkpt("Inside Exceptio "+e);
			//e.printStackTrace();
			GLogger.logException(e);
    	}		
		return bProductDetail;
	}	
	
	
	
		 
	  public static String getExtDesc (long lParameterId) {
	    	GLogger.logEntry(CLASS_NAME, "getExtDesc");
	 //  	GLogger.logInput(METHOD_retrieveDeviceDescriptionParameterId, ARG_productId, productId);
	  //  	GLogger.logInput(METHOD_retrieveDeviceDescriptionParameterId, ARG_externalDescription, externalDescription);
		  GLogger.chkpt("lParameterId::"+lParameterId); 
		  CDMDao dao = new CDMDao();
	    	String strDescription=null;
	    	try{
	    		strDescription = (String)dao.getJdbcTemplate().queryForObject(
	    				GAfeSql.S_GETDESCRIPTIONFORPARAMETERID,
	    				new Object[] { Long.valueOf(lParameterId),Integer.valueOf(0) }, String.class);
	    		

	    	}
	    	catch(Exception e){
	    		GLogger.chkpt("Inside Exception "+e);

	    	}
	    	finally {
	    		dao = null;
	    	}
	    	GLogger.chkpt("strDescription::"+strDescription);
	    	return strDescription;
	    }
	//END : 14.40 : Sun Sat
	  
	  public static boolean isTabletExists (long lCplid, long lProductId) {
	    	GLogger.logEntry(CLASS_NAME, "isTabletExists");
	 //  	GLogger.logInput(METHOD_retrieveDeviceDescriptionParameterId, ARG_productId, productId);
	  //  	GLogger.logInput(METHOD_retrieveDeviceDescriptionParameterId, ARG_externalDescription, externalDescription);
		  GLogger.chkpt("lProductId::"+lProductId); 
		  GLogger.chkpt("lCplid::"+lCplid); 
		  CDMDao dao = new CDMDao();
	    	int iCount =0;
	    	try{
	    		iCount = dao.getJdbcTemplate().queryForInt(
	    				GAfeSql.S_GET_EXISTENCE_OF_TABLET,
	    				new Object[] { Long.valueOf(lCplid),Long.valueOf(lProductId),Integer.valueOf(0) });
	    		

	    	}
	    	catch(Exception e){
	    		GLogger.chkpt("Inside Exception "+e);

	    	}
	    	finally {
	    		dao = null;
	    	}
	    	GLogger.chkpt("iCount::"+iCount);
	    	//return strDescription;
	    	if(iCount>0){
	    		return true;
	    	}
	    	else{
	    		return false;
	    	}
	    	
	    }
	  
	  public static String getCustProdParamValue(long lCplid, long lProductId, long lParameterId) {
	    	GLogger.logEntry(CLASS_NAME, "getCustProdParamValue");
	 //  	GLogger.logInput(METHOD_retrieveDeviceDescriptionParameterId, ARG_productId, productId);
	  //  	GLogger.logInput(METHOD_retrieveDeviceDescriptionParameterId, ARG_externalDescription, externalDescription);
		  GLogger.chkpt("lProductId::"+lProductId); 
		  GLogger.chkpt("lCplid::"+lCplid); 
		  CDMDao dao = new CDMDao();
	    	String value =null;
	    	try{
	    		value = (String)dao.getJdbcTemplate().queryForObject(
	    				GAfeSql.S_GET_CCPVAL_FOR_CPLID,
	    				new Object[] { Long.valueOf(lCplid),Long.valueOf(lProductId),Long.valueOf(lParameterId),Integer.valueOf(0),Integer.valueOf(0) },String.class);
	    		

	    	}
	    	catch(Exception e){
	    		GLogger.chkpt("Inside Exception "+e);

	    	}
	    	finally {
	    		dao = null;
	    	}
	    	GLogger.chkpt("value::"+value);
	    	//return strDescription;
	    	return value;
	    	
	    }
	  //14.4 Play/Play+ Changes Starts
	  protected boolean checkProductInVectorlevelProductId(
				Vector vctProductNonSelected, int ProductID, int iLevel)
				throws Exception { // Starting Braces of the Function

			/** ************ Variable Declaration/Initialisation Starts **************************************************** */
			int iSizeOfVector = 0; // Local Varaible Declaration
			int iCount = 0; // Local Varaible Declaration

			/** ************ Variable Declaration/Initialisation Ends ****************************************************** */
			iSizeOfVector = vctProductNonSelected.size();

			for (iCount = FINAL_ZERO; iCount < iSizeOfVector; iCount++) {
				if (((String.valueOf(ProductID)).equals(String
						.valueOf(((BProductDetail) vctProductNonSelected
								.elementAt(iCount)).lProductID)))
						&& ((String.valueOf(iLevel)).equals(String
								.valueOf(((BProductDetail) vctProductNonSelected
										.elementAt(iCount)).iLevel)))) {
					return true;
				} // end of the if loop
			} // end of the for loop

			// Returning of the String
			return false;
		} // Closing Brace of the function
	  
	  private BProductDetailProperty checkAlacarteProductInserted(
				BProductDetailProperty bProductDetailProperty,
				Long lPackageProductID, Long lProductID, Long CustomerID)
				throws Exception, SQLException {
			int iFindPositionInVectorlevelProductId;
			GLogger.chkpt("14.4 Play/Play+ GAfeDescription.REX_RIO_ZONE : " +lProductID.longValue());
			//OptionGroupRow = optionProductTable.optSearchByProductID( GAfeDescription.A_LA_CARTE_ZONE)
			boolean isPresent = checkProductInVectorlevelProductId(bProductDetailProperty.vctProductNonSelected, GAfeDescription.A_LA_CARTE_ZONE, 4);
			GLogger.chkpt("14.4 Play/Play+ GAfeDescription.A_LA_CARTE_ZONE isPresent: " +isPresent);
			if(!isPresent){
				isPresent = checkProductInVectorlevelProductId(bProductDetailProperty.vctProductNonSelected, GAfeDescription.A_LA_CARTE_ZONE_BRUSSEL, 4);
				GLogger.chkpt("14.4 Play/Play+ GAfeDescription.A_LA_CARTE_ZONE_BRUSSEL isPresent: " +isPresent);
			}
			GLogger.chkpt("14.4 Play/Play+ isPresent : " +isPresent);
			if(!isPresent){
				Vector optionProductRow = optionProductTable.optSearchByProductID( GAfeDescription.A_LA_CARTE_ZONE);
				GLogger.chkpt("14.4 Play/Play+ optionProductRow : " +optionProductRow);
				BProductDetail bProductDetail = null;
				for (Object optionProduct : optionProductRow) {
					bProductDetail = objGetDetailProductNonSelected(
							CustomerID,
							Long.valueOf(
									((OptionProductRow)optionProduct).lProductID),
									 GAfeDescription.A_LA_CARTE_OPTION_GROUP_ID,
							Long.valueOf(
									((OptionProductRow)optionProduct).lOptionProductID),
							((OptionProductRow)optionProduct).iProvisionable,
							((OptionProductRow)optionProduct).iBillable,
							bProductDetailProperty.lCurrencyID,
							FINAL_ZERO,
							(4),
							FINAL_ZERO,
							FINAL_ZERO,
							bProductDetailProperty.lPaymentMethodRC,
							bProductDetailProperty.lPaymentMethodNRC,
							bProductDetailProperty.lPaymentMethodUsage,
							iIsDefault,
							bProductDetailProperty.vctProductSelected,
							bProductDetailProperty);
					 GLogger.chkpt("14.4 Play/Play+ optionProduct : " +optionProduct);
					 break;
				}
				
				iFindPositionInVectorlevelProductId = iFindPositionInVectorlevelProductId(
						bProductDetailProperty.vctProductNonSelected,
						GAfeDescription.A_LA_CARTE_OPTION_GROUP_ID, 4);
				bProductDetailProperty.vctProductNonSelected
						.insertElementAt(
								bProductDetail,
								++iFindPositionInVectorlevelProductId);
				GLogger.chkpt("14.4 Play/Play+ iFindPositionInVectorlevelProductId : "+iFindPositionInVectorlevelProductId);
			}
			return bProductDetailProperty;
		}
		//14.4 Play/Play+ Changes Ends
	  
	  public static final long lGetCustomerProductID(long lCustomerProductLineID) throws Exception {
			PreparedStatement psPackageProduct = null;
			ResultSet rsPackageProduct = null;
			long customerProductID=0;

			GLogger.logEntry(CLASS_NAME, "lGetCustomerProductID");
			GLogger.logInput("lGetCustomerProductID", ARG_LCUSTOMERPRODUCTLINEID,
					lCustomerProductLineID);

			try {
				psPackageProduct = GConnectAfe.psPrepareStatement(GAfeSql.S_GETCUCTOMERPRODUCTID);
				psPackageProduct.setLong(1, lCustomerProductLineID);
				psPackageProduct.setLong(2, GAfeConstants.TABLET_PRODUCTTYPEID);
				rsPackageProduct = psPackageProduct.executeQuery();

				if (rsPackageProduct.next()) {
					GLogger.chkpt("Inside if block of ProductUtils lGetCustomerProductID");
					customerProductID = rsPackageProduct.getLong("CUSTOMERPRODUCTID");
				}
			} finally {
				GConnectAfe.close(rsPackageProduct);
				GConnectAfe.close(psPackageProduct);
			}

			GLogger.logOutput("lGetCustomerProductID", "customerProductID",
					customerProductID);
			GLogger.logExit(CLASS_NAME, "lGetCustomerProductID");

			return customerProductID;
		}
	    

	    // End Rel 15.1 SunSat
	    // Rel 15.1 sunsat ph2 RCR
	    /**
		 * Method to fetch customerprouductlineidentifier by passing CustomerProductLineID
		 * 
		 * @param lCustomerProductLineID
		 * @return strCustProdLineIden
		 * @throws Exception
		 */
	   /* public static String getCustProdLineIden(long lCustomerProductLineID) throws Exception{


			GLogger.logEntry(CLASS_NAME, METHOD_getCustProdLineIden);
			GLogger.logInput(METHOD_getCustProdLineIden, "lCustomerProductLineID", lCustomerProductLineID);
			CDMDao dao = new CDMDao();
			String strCustProdLineIden = null;
			try {
				strCustProdLineIden = (String) dao.getJdbcTemplate().queryForObject(
						GSql.S_GET_MASTER_CUST_PROD_IDEN_VALUE,
						new Object[] { GConstants.PRODUCTID_INTERNET,lCustomerProductLineID}, new RowMapper() {
							public Object mapRow(ResultSet rs, int rowNum)
							throws SQLException {
								String strIdentifier = null;
								strIdentifier = rs.getString("CUSTOMERPLIDENTIFIERVALUE");
								return strIdentifier;
							}
						});

			} catch (Exception e) {
				GLogger.chkpt("Inside catch of getCustProdLineIden in  ProductUtils :"
						+ e.getStackTrace());
			}
			GLogger.logOutput(METHOD_getCustProdLineIden, "strCustProdLineIden",
					strCustProdLineIden);
			return strCustProdLineIden;
		
	    }
	    */
	    /**
		 * Method to fetch customerprouductlineid by passing customerprouductlineidentifier in case of move order on line
		 * 
		 * @param lCustomerProductLineID
		 * @return strCustProdLineIden
		 * @throws Exception
		 */
	    
	  public static long getCustProdLineIdMove(String sCustPLIdenVal, long lCustomerProductLineID) throws Exception{
	    	GLogger.logEntry(CLASS_NAME, METHOD_getCustProdLineIdMove);
	    	GLogger.logInput(METHOD_getCustProdLineIdMove, "strCustProdLineIden", lCustomerProductLineID);
	    	CDMDao dao = new CDMDao();
	    	long customerProductLineId =0;
	    	List<Long> results =  new CDMDao().getJdbcTemplate().query(GAfeSql.S_GET_CUST_PROD_LINEID_MOVE,new Object[] {new String(sCustPLIdenVal),Long.valueOf(lCustomerProductLineID) }, new RowMapper() {
	    		public Object mapRow(ResultSet resultSet, int rowNum)
	    				throws SQLException {                  
	    			return resultSet.getLong("CUSTOMERPRODUCTLINEID");
	    		}
	    	});

	    	if(null != results && !results.isEmpty()) {
	    		customerProductLineId = results.get(0);
	    	}           
	    	GLogger.chkpt("Value of customerProductLineId :"+customerProductLineId);
	    	GLogger.logExit(CLASS_NAME, METHOD_getCustProdLineIdMove);
	    	return customerProductLineId;
	    }
	    // End Rel 15.1 sunsat ph2 RCR
	      
	    /**
		 * This method get activation date for given cplid of first line before all move orders 
		 * 
		 * @param lCplID
		 * @return
		 * @throws Exception
		 */
		public static Date getActivateDateForCPLIDMove(long lCplID) throws Exception {
			GLogger.logEntry(CLASS_NAME, METHOD_getActivateDateForCPLIDMove);
			GLogger.logInput(METHOD_getActivateDateForCPLIDMove, "lCplID", lCplID);

			PreparedStatement psQuery = null;
			ResultSet rsQuery = null;
			Date activationDate = null;

			// BEGIN ADD v2.7b
			try {

				// END ADD v2.7b
				if (lCplID != 0) {
					psQuery = GConnectAfe
					.psPrepareStatement(GAfeSql.S_GETACTIVATIONDATE_FOR_CPLID_MOVE);
					psQuery.setLong(1, lCplID);
					rsQuery = psQuery.executeQuery();

					if (rsQuery.next()) {
						activationDate = rsQuery.getDate(1);
					}
				}
			}
			// BEGIN ADD v2.7b
					finally {
						if (null != rsQuery) {
							rsQuery.close();
						}

						if (null != psQuery) {
							psQuery.close();
						}
					}

					// END ADD v2.7b
					GLogger.logOutput(METHOD_getActivateDateForCPLIDMove, "activationDate",
							activationDate);
					GLogger.logExit(CLASS_NAME, METHOD_getActivateDateForCPLIDMove);

					return activationDate;
				}
		
		//15.2 Compte Bloque start
	    public Vector getCBHistoryForCPLID(long lCPLID, long CbProductId, long NoOfDaysForHistory) throws Exception{
	    	GLogger.logEntry(CLASS_NAME, "getCBHistoryForCPLID");
	    	GLogger.logInput("getCBHistoryForCPLID", "lCPLID : ",lCPLID);
	    	GLogger.logInput("getCBHistoryForCPLID", "CbProductId : ",CbProductId);
	    	GLogger.logInput("getCBHistoryForCPLID", "NoOfDaysForHistory : ",NoOfDaysForHistory);
	    	
	    	PreparedStatement psQuery = null;
			ResultSet rsCBHistory = null;
			
			Vector vctCBHistory = new Vector();
			
			Vector vctActivationDate = new Vector();
			Vector vctDeactivationDate = new Vector();
			Vector vctCBLimit = new Vector();
			Vector vctModificationUser = new Vector();
			String actDate = null;
			String deactDate = null;
			//String sDate;
			SimpleDateFormat sdf = new SimpleDateFormat(string_dateFormat1);
			try{
				psQuery = GConnectAfe
						.psPrepareStatement(GAfeSql.S_GETCBHISTORY);
				psQuery.setLong(1, CbProductId);
				psQuery.setLong(2, lCPLID);
				psQuery.setLong(3, NoOfDaysForHistory);
				rsCBHistory = psQuery.executeQuery();
				
				while(rsCBHistory.next())
				{
					actDate = null;
					deactDate =  null;
					if(rsCBHistory.getDate(1) != null){
						actDate = sdf.format(rsCBHistory.getDate(1));						
					}
					vctActivationDate.addElement(actDate);
					GLogger.chkpt("vctActivationDate : "+vctActivationDate);
					if(rsCBHistory.getDate(2) != null){
						deactDate = sdf.format(rsCBHistory.getDate(2));						
					}
					vctDeactivationDate.addElement(deactDate);
					GLogger.chkpt("vctDeactivationDate : "+vctDeactivationDate);
					vctCBLimit.addElement(rsCBHistory.getString(3));
					GLogger.chkpt("vctCBLimit : "+vctCBLimit);
					vctModificationUser.addElement(rsCBHistory.getString(4));
					GLogger.chkpt("vctModificationUser : "+vctModificationUser);
				}
		    	if(null != vctActivationDate || null != vctDeactivationDate || null != vctCBLimit || null != vctModificationUser){
		    		vctCBHistory.addElement(vctActivationDate);
		    		vctCBHistory.addElement(vctDeactivationDate);
		    		vctCBHistory.addElement(vctCBLimit);
		    		vctCBHistory.addElement(vctModificationUser);		
		    	}
		    	
		    	GLogger.chkpt("vctCBHistory : "+vctCBHistory);
			}catch(Exception e){
				GLogger.logException(e);
			}finally{
				if (null != rsCBHistory) {
					rsCBHistory.close();
				}

				if (null != psQuery) {
					psQuery.close();
				}
			}
			GLogger.logExit(CLASS_NAME, "getCBHistoryForCPLID");   	
	    	return vctCBHistory;    	
	    }
	    
	    public String getActiveCPIdForCB(long lCPLId, long cbProductId) throws Exception{
	    	
	    	GLogger.logEntry(CLASS_NAME, "getActiveCPIdForCB");
	    	GLogger.logInput("getActiveCPIdForCB", "lCPLId : ",lCPLId);
	    	GLogger.logInput("getActiveCPIdForCB", "cbProductId : ",cbProductId);
	    	PreparedStatement psQuery = null;
			ResultSet rsQuery = null;			
			String activeCbCPId = null;
			try{
				
				if(lCPLId != 0){
					
					psQuery = GConnectAfe
							.psPrepareStatement(GAfeSql.S_GETACTIVECPIDFORCB);
					psQuery.setLong(1, lCPLId);
					psQuery.setLong(2, cbProductId);
					rsQuery = psQuery.executeQuery();
					
					while(rsQuery.next())
					{
						activeCbCPId = rsQuery.getString(1);
					}
				}			
		    			    	
		    	GLogger.chkpt("activeCbCPId : "+activeCbCPId);
			}catch(Exception e){
				GLogger.logException(e);
			}finally{
				if (null != rsQuery) {
					rsQuery.close();
				}

				if (null != psQuery) {
					psQuery.close();
				}
			}
			GLogger.logExit(CLASS_NAME, "getActiveCPIdForCB");   	
	    	return activeCbCPId;
	    }
	    
	/*    
	    public void deactivateCB(long lCPId, String strUser) throws Exception{
	    	
	    	GLogger.logEntry(CLASS_NAME, "deactivateCB");
	    	GLogger.logInput("deactivateCB", "lCPId : ",lCPId);
	    	GLogger.logInput("deactivateCB", "strUser : ",strUser);
	    	PreparedStatement psCPQuery = null;
	    	PreparedStatement psCPPQuery = null;
			ResultSet rsQuery = null;			
			
			try{
				
				if(lCPId != 0){
					
					psCPQuery = GConnectAfe
							.psPrepareStatement(GAfeSql.U_CP_DEACTIVATECB);
					psCPQuery.setString(1, strUser);
					psCPQuery.setLong(2, lCPId);
					rsQuery = psCPQuery.executeQuery();
					
					
					psCPPQuery = GConnectAfe
							.psPrepareStatement(GAfeSql.U_CPP_DEACTIVATECB);
					psCPPQuery.setString(1, strUser);
					psCPPQuery.setLong(2, lCPId);
					rsQuery = psCPPQuery.executeQuery(); 
				}			
		    			    
			}catch(Exception e){
				GLogger.logException(e);
			}finally{
				if (null != rsQuery) {
					rsQuery.close();
				}

				if (null != psCPQuery && null != psCPPQuery) {
					psCPQuery.close();
					psCPPQuery.close();
				}
			}				
	    
	    }*/
	    //15.2 Compte Bloque end
	    
	    /**
	     * Method to get optionproducts //CR250743
	     */
	    public HashMap<Long, Long>  getOptionProducts(long productId)
				throws Exception {

	    	//System.out.println("Inside getOptionProducts"+productId);
			ResultSet rsRetrieve = null;
			PreparedStatement psQuery = null;
			HashMap<Long, Long> optionProducts = new HashMap<Long, Long>();

			try {

				psQuery = GConnectAfe
						.psPrepareStatement(GAfeSql.GET_OPTIONPRODUCTS);
				psQuery.setLong(1, productId);
				
				rsRetrieve = psQuery.executeQuery();

				while (rsRetrieve.next()) {
					optionProducts.put(rsRetrieve.getLong(1),rsRetrieve.getLong(2));
					System.out.println("optionproduct is"+rsRetrieve.getLong(1));
					System.out.println("max products"+rsRetrieve.getLong(2));
				}
				
			} finally {
				GConnectAfe.close(rsRetrieve);
				GConnectAfe.close(psQuery);
			}

			return optionProducts;

	}


}

